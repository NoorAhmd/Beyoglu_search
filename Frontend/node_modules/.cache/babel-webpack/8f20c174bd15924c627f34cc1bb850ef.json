{"ast":null,"code":"/**\n * @license\n * Latitude/longitude spherical geodesy formulae taken from\n * http://www.movable-type.co.uk/scripts/latlong.html\n * Licensed under CC-BY-3.0.\n */\n\n/**\n * @module ol/sphere\n */\nimport { toRadians, toDegrees } from './math.js';\nimport GeometryType from './geom/GeometryType.js';\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the radius of the\n * earth is used (Clarke 1866 Authalic Sphere).\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\n\nexport var DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\n\nexport function getDistance(c1, c2, opt_radius) {\n  var radius = opt_radius || DEFAULT_RADIUS;\n  var lat1 = toRadians(c1[1]);\n  var lat2 = toRadians(c2[1]);\n  var deltaLatBy2 = (lat2 - lat1) / 2;\n  var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\n\nfunction getLengthInternal(coordinates, radius) {\n  var length = 0;\n\n  for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n\n  return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {module:ol/geom/Geometry} geometry A geometry.\n * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\n\n\nexport function getLength(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  var type = geometry.getType();\n\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n\n  var length = 0;\n  var coordinates, coords, i, ii, j, jj;\n\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT:\n      {\n        break;\n      }\n\n    case GeometryType.LINE_STRING:\n    case GeometryType.LINEAR_RING:\n      {\n        coordinates =\n        /** @type {module:ol/geom/SimpleGeometry} */\n        geometry.getCoordinates();\n        length = getLengthInternal(coordinates, radius);\n        break;\n      }\n\n    case GeometryType.MULTI_LINE_STRING:\n    case GeometryType.POLYGON:\n      {\n        coordinates =\n        /** @type {module:ol/geom/SimpleGeometry} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          length += getLengthInternal(coordinates[i], radius);\n        }\n\n        break;\n      }\n\n    case GeometryType.MULTI_POLYGON:\n      {\n        coordinates =\n        /** @type {module:ol/geom/SimpleGeometry} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n\n          for (j = 0, jj = coords.length; j < jj; ++j) {\n            length += getLengthInternal(coords[j], radius);\n          }\n        }\n\n        break;\n      }\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        var geometries =\n        /** @type {module:ol/geom/GeometryCollection} */\n        geometry.getGeometries();\n\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          length += getLength(geometries[i], opt_options);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\n\nfunction getAreaInternal(coordinates, radius) {\n  var area = 0;\n  var len = coordinates.length;\n  var x1 = coordinates[len - 1][0];\n  var y1 = coordinates[len - 1][1];\n\n  for (var i = 0; i < len; i++) {\n    var x2 = coordinates[i][0];\n    var y2 = coordinates[i][1];\n    area += toRadians(x2 - x1) * (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return area * radius * radius / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {module:ol/geom/Geometry} geometry A geometry.\n * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\n\n\nexport function getArea(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  var type = geometry.getType();\n\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n\n  var area = 0;\n  var coordinates, coords, i, ii, j, jj;\n\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT:\n    case GeometryType.LINE_STRING:\n    case GeometryType.MULTI_LINE_STRING:\n    case GeometryType.LINEAR_RING:\n      {\n        break;\n      }\n\n    case GeometryType.POLYGON:\n      {\n        coordinates =\n        /** @type {module:ol/geom/Polygon} */\n        geometry.getCoordinates();\n        area = Math.abs(getAreaInternal(coordinates[0], radius));\n\n        for (i = 1, ii = coordinates.length; i < ii; ++i) {\n          area -= Math.abs(getAreaInternal(coordinates[i], radius));\n        }\n\n        break;\n      }\n\n    case GeometryType.MULTI_POLYGON:\n      {\n        coordinates =\n        /** @type {module:ol/geom/SimpleGeometry} */\n        geometry.getCoordinates();\n\n        for (i = 0, ii = coordinates.length; i < ii; ++i) {\n          coords = coordinates[i];\n          area += Math.abs(getAreaInternal(coords[0], radius));\n\n          for (j = 1, jj = coords.length; j < jj; ++j) {\n            area -= Math.abs(getAreaInternal(coords[j], radius));\n          }\n        }\n\n        break;\n      }\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        var geometries =\n        /** @type {module:ol/geom/GeometryCollection} */\n        geometry.getGeometries();\n\n        for (i = 0, ii = geometries.length; i < ii; ++i) {\n          area += getArea(geometries[i], opt_options);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {module:ol/coordinate~Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {module:ol/coordinate~Coordinate} The target point.\n */\n\nexport function offset(c1, distance, bearing, opt_radius) {\n  var radius = opt_radius || DEFAULT_RADIUS;\n  var lat1 = toRadians(c1[1]);\n  var lon1 = toRadians(c1[0]);\n  var dByR = distance / radius;\n  var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n  var lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n  return [toDegrees(lon), toDegrees(lat)];\n} //# sourceMappingURL=sphere.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/sphere.js"],"names":["toRadians","toDegrees","GeometryType","DEFAULT_RADIUS","getDistance","c1","c2","opt_radius","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","a","Math","sin","cos","atan2","sqrt","getLengthInternal","coordinates","length","i","ii","getLength","geometry","opt_options","options","projection","type","getType","GEOMETRY_COLLECTION","clone","transform","coords","j","jj","POINT","MULTI_POINT","LINE_STRING","LINEAR_RING","getCoordinates","MULTI_LINE_STRING","POLYGON","MULTI_POLYGON","geometries","getGeometries","Error","getAreaInternal","area","len","x1","y1","x2","y2","getArea","abs","offset","distance","bearing","lon1","dByR","lat","asin","lon"],"mappings":"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","sourcesContent":["/**\n * @license\n * Latitude/longitude spherical geodesy formulae taken from\n * http://www.movable-type.co.uk/scripts/latlong.html\n * Licensed under CC-BY-3.0.\n */\n\n/**\n * @module ol/sphere\n */\nimport {toRadians, toDegrees} from './math.js';\nimport GeometryType from './geom/GeometryType.js';\n\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the radius of the\n * earth is used (Clarke 1866 Authalic Sphere).\n */\n\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport var DEFAULT_RADIUS = 6371008.8;\n\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, opt_radius) {\n  var radius = opt_radius || DEFAULT_RADIUS;\n  var lat1 = toRadians(c1[1]);\n  var lat2 = toRadians(c2[1]);\n  var deltaLatBy2 = (lat2 - lat1) / 2;\n  var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n      Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *\n      Math.cos(lat1) * Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  var length = 0;\n  for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {module:ol/geom/Geometry} geometry A geometry.\n * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  var type = geometry.getType();\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  var length = 0;\n  var coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT: {\n      break;\n    }\n    case GeometryType.LINE_STRING:\n    case GeometryType.LINEAR_RING: {\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING:\n    case GeometryType.POLYGON: {\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      var geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], opt_options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  var area = 0;\n  var len = coordinates.length;\n  var x1 = coordinates[len - 1][0];\n  var y1 = coordinates[len - 1][1];\n  for (var i = 0; i < len; i++) {\n    var x2 = coordinates[i][0];\n    var y2 = coordinates[i][1];\n    area += toRadians(x2 - x1) *\n        (2 + Math.sin(toRadians(y1)) +\n        Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return area * radius * radius / 2.0;\n}\n\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {module:ol/geom/Geometry} geometry A geometry.\n * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, opt_options) {\n  var options = opt_options || {};\n  var radius = options.radius || DEFAULT_RADIUS;\n  var projection = options.projection || 'EPSG:3857';\n  var type = geometry.getType();\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  var area = 0;\n  var coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT:\n    case GeometryType.LINE_STRING:\n    case GeometryType.MULTI_LINE_STRING:\n    case GeometryType.LINEAR_RING: {\n      break;\n    }\n    case GeometryType.POLYGON: {\n      coordinates = /** @type {module:ol/geom/Polygon} */ (geometry).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      var geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], opt_options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {module:ol/coordinate~Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {module:ol/coordinate~Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, opt_radius) {\n  var radius = opt_radius || DEFAULT_RADIUS;\n  var lat1 = toRadians(c1[1]);\n  var lon1 = toRadians(c1[0]);\n  var dByR = distance / radius;\n  var lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n  var lon = lon1 + Math.atan2(\n    Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n    Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n  return [toDegrees(lon), toDegrees(lat)];\n}\n\n//# sourceMappingURL=sphere.js.map"]},"metadata":{},"sourceType":"module"}
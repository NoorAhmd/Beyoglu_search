{"ast":null,"code":"/**\n * @module ol/pointer/MouseSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport EventSource from '../pointer/EventSource.js';\n/**\n * @type {number}\n */\n\nexport var POINTER_ID = 1;\n/**\n * @type {string}\n */\n\nexport var POINTER_TYPE = 'mouse';\n/**\n * Radius around touchend that swallows mouse events.\n *\n * @type {number}\n */\n\nvar DEDUP_DIST = 25;\n/**\n * Handler for `mousedown`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\nfunction mousedown(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    // TODO(dfreedman) workaround for some elements not sending mouseup\n    // http://crbug/149091\n    if (POINTER_ID.toString() in this.pointerMap) {\n      this.cancel(inEvent);\n    }\n\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.pointerMap[POINTER_ID.toString()] = inEvent;\n    this.dispatcher.down(e, inEvent);\n  }\n}\n/**\n * Handler for `mousemove`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mousemove(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.move(e, inEvent);\n  }\n}\n/**\n * Handler for `mouseup`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mouseup(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var p = this.pointerMap[POINTER_ID.toString()];\n\n    if (p && p.button === inEvent.button) {\n      var e = prepareEvent(inEvent, this.dispatcher);\n      this.dispatcher.up(e, inEvent);\n      this.cleanupMouse();\n    }\n  }\n}\n/**\n * Handler for `mouseover`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mouseover(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.enterOver(e, inEvent);\n  }\n}\n/**\n * Handler for `mouseout`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\n\n\nfunction mouseout(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.leaveOut(e, inEvent);\n  }\n}\n\nvar MouseSource = function (EventSource) {\n  function MouseSource(dispatcher) {\n    var mapping = {\n      'mousedown': mousedown,\n      'mousemove': mousemove,\n      'mouseup': mouseup,\n      'mouseover': mouseover,\n      'mouseout': mouseout\n    };\n    EventSource.call(this, dispatcher, mapping);\n    /**\n     * @const\n     * @type {!Object.<string, Event|Object>}\n     */\n\n    this.pointerMap = dispatcher.pointerMap;\n    /**\n     * @const\n     * @type {Array.<module:ol/pixel~Pixel>}\n     */\n\n    this.lastTouches = [];\n  }\n\n  if (EventSource) MouseSource.__proto__ = EventSource;\n  MouseSource.prototype = Object.create(EventSource && EventSource.prototype);\n  MouseSource.prototype.constructor = MouseSource;\n  /**\n   * Detect if a mouse event was simulated from a touch by\n   * checking if previously there was a touch event at the\n   * same position.\n   *\n   * FIXME - Known problem with the native Android browser on\n   * Samsung GT-I9100 (Android 4.1.2):\n   * In case the page is scrolled, this function does not work\n   * correctly when a canvas is used (WebGL or canvas renderer).\n   * Mouse listeners on canvas elements (for this browser), create\n   * two mouse events: One 'good' and one 'bad' one (on other browsers or\n   * when a div is used, there is only one event). For the 'bad' one,\n   * clientX/clientY and also pageX/pageY are wrong when the page\n   * is scrolled. Because of that, this function can not detect if\n   * the events were simulated from a touch event. As result, a\n   * pointer event at a wrong position is dispatched, which confuses\n   * the map interactions.\n   * It is unclear, how one can get the correct position for the event\n   * or detect that the positions are invalid.\n   *\n   * @private\n   * @param {MouseEvent} inEvent The in event.\n   * @return {boolean} True, if the event was generated by a touch.\n   */\n\n  MouseSource.prototype.isEventSimulatedFromTouch_ = function isEventSimulatedFromTouch_(inEvent) {\n    var lts = this.lastTouches;\n    var x = inEvent.clientX;\n    var y = inEvent.clientY;\n\n    for (var i = 0, l = lts.length, t = void 0; i < l && (t = lts[i]); i++) {\n      // simulated mouse events will be swallowed near a primary touchend\n      var dx = Math.abs(x - t[0]);\n      var dy = Math.abs(y - t[1]);\n\n      if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Dispatches a `pointercancel` event.\n   *\n   * @param {Event} inEvent The in event.\n   */\n\n\n  MouseSource.prototype.cancel = function cancel(inEvent) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.cancel(e, inEvent);\n    this.cleanupMouse();\n  };\n  /**\n   * Remove the mouse from the list of active pointers.\n   */\n\n\n  MouseSource.prototype.cleanupMouse = function cleanupMouse() {\n    delete this.pointerMap[POINTER_ID.toString()];\n  };\n\n  return MouseSource;\n}(EventSource);\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @param {Event} inEvent The in event.\n * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.\n * @return {Object} The copied event.\n */\n\n\nfunction prepareEvent(inEvent, dispatcher) {\n  var e = dispatcher.cloneEvent(inEvent, inEvent); // forward mouse preventDefault\n\n  var pd = e.preventDefault;\n\n  e.preventDefault = function () {\n    inEvent.preventDefault();\n    pd();\n  };\n\n  e.pointerId = POINTER_ID;\n  e.isPrimary = true;\n  e.pointerType = POINTER_TYPE;\n  return e;\n}\n\nexport default MouseSource; //# sourceMappingURL=MouseSource.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/pointer/MouseSource.js"],"names":["EventSource","POINTER_ID","POINTER_TYPE","DEDUP_DIST","mousedown","inEvent","isEventSimulatedFromTouch_","toString","pointerMap","cancel","e","prepareEvent","dispatcher","down","mousemove","move","mouseup","p","button","up","cleanupMouse","mouseover","enterOver","mouseout","leaveOut","MouseSource","mapping","call","lastTouches","__proto__","prototype","Object","create","constructor","lts","x","clientX","y","clientY","i","l","length","t","dx","Math","abs","dy","cloneEvent","pd","preventDefault","pointerId","isPrimary","pointerType"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/MouseSource\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport EventSource from '../pointer/EventSource.js';\n\n\n/**\n * @type {number}\n */\nexport var POINTER_ID = 1;\n\n\n/**\n * @type {string}\n */\nexport var POINTER_TYPE = 'mouse';\n\n\n/**\n * Radius around touchend that swallows mouse events.\n *\n * @type {number}\n */\nvar DEDUP_DIST = 25;\n\n/**\n * Handler for `mousedown`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mousedown(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    // TODO(dfreedman) workaround for some elements not sending mouseup\n    // http://crbug/149091\n    if (POINTER_ID.toString() in this.pointerMap) {\n      this.cancel(inEvent);\n    }\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.pointerMap[POINTER_ID.toString()] = inEvent;\n    this.dispatcher.down(e, inEvent);\n  }\n}\n\n/**\n * Handler for `mousemove`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mousemove(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.move(e, inEvent);\n  }\n}\n\n/**\n * Handler for `mouseup`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mouseup(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var p = this.pointerMap[POINTER_ID.toString()];\n\n    if (p && p.button === inEvent.button) {\n      var e = prepareEvent(inEvent, this.dispatcher);\n      this.dispatcher.up(e, inEvent);\n      this.cleanupMouse();\n    }\n  }\n}\n\n/**\n * Handler for `mouseover`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mouseover(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.enterOver(e, inEvent);\n  }\n}\n\n/**\n * Handler for `mouseout`.\n *\n * @this {module:ol/pointer/MouseSource}\n * @param {MouseEvent} inEvent The in event.\n */\nfunction mouseout(inEvent) {\n  if (!this.isEventSimulatedFromTouch_(inEvent)) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.leaveOut(e, inEvent);\n  }\n}\n\n\nvar MouseSource = (function (EventSource) {\n  function MouseSource(dispatcher) {\n    var mapping = {\n      'mousedown': mousedown,\n      'mousemove': mousemove,\n      'mouseup': mouseup,\n      'mouseover': mouseover,\n      'mouseout': mouseout\n    };\n    EventSource.call(this, dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object.<string, Event|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n\n    /**\n     * @const\n     * @type {Array.<module:ol/pixel~Pixel>}\n     */\n    this.lastTouches = [];\n  }\n\n  if ( EventSource ) MouseSource.__proto__ = EventSource;\n  MouseSource.prototype = Object.create( EventSource && EventSource.prototype );\n  MouseSource.prototype.constructor = MouseSource;\n\n  /**\n   * Detect if a mouse event was simulated from a touch by\n   * checking if previously there was a touch event at the\n   * same position.\n   *\n   * FIXME - Known problem with the native Android browser on\n   * Samsung GT-I9100 (Android 4.1.2):\n   * In case the page is scrolled, this function does not work\n   * correctly when a canvas is used (WebGL or canvas renderer).\n   * Mouse listeners on canvas elements (for this browser), create\n   * two mouse events: One 'good' and one 'bad' one (on other browsers or\n   * when a div is used, there is only one event). For the 'bad' one,\n   * clientX/clientY and also pageX/pageY are wrong when the page\n   * is scrolled. Because of that, this function can not detect if\n   * the events were simulated from a touch event. As result, a\n   * pointer event at a wrong position is dispatched, which confuses\n   * the map interactions.\n   * It is unclear, how one can get the correct position for the event\n   * or detect that the positions are invalid.\n   *\n   * @private\n   * @param {MouseEvent} inEvent The in event.\n   * @return {boolean} True, if the event was generated by a touch.\n   */\n  MouseSource.prototype.isEventSimulatedFromTouch_ = function isEventSimulatedFromTouch_ (inEvent) {\n    var lts = this.lastTouches;\n    var x = inEvent.clientX;\n    var y = inEvent.clientY;\n    for (var i = 0, l = lts.length, t = (void 0); i < l && (t = lts[i]); i++) {\n      // simulated mouse events will be swallowed near a primary touchend\n      var dx = Math.abs(x - t[0]);\n      var dy = Math.abs(y - t[1]);\n      if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Dispatches a `pointercancel` event.\n   *\n   * @param {Event} inEvent The in event.\n   */\n  MouseSource.prototype.cancel = function cancel (inEvent) {\n    var e = prepareEvent(inEvent, this.dispatcher);\n    this.dispatcher.cancel(e, inEvent);\n    this.cleanupMouse();\n  };\n\n  /**\n   * Remove the mouse from the list of active pointers.\n   */\n  MouseSource.prototype.cleanupMouse = function cleanupMouse () {\n    delete this.pointerMap[POINTER_ID.toString()];\n  };\n\n  return MouseSource;\n}(EventSource));\n\n\n/**\n * Creates a copy of the original event that will be used\n * for the fake pointer event.\n *\n * @param {Event} inEvent The in event.\n * @param {module:ol/pointer/PointerEventHandler} dispatcher Event handler.\n * @return {Object} The copied event.\n */\nfunction prepareEvent(inEvent, dispatcher) {\n  var e = dispatcher.cloneEvent(inEvent, inEvent);\n\n  // forward mouse preventDefault\n  var pd = e.preventDefault;\n  e.preventDefault = function() {\n    inEvent.preventDefault();\n    pd();\n  };\n\n  e.pointerId = POINTER_ID;\n  e.isPrimary = true;\n  e.pointerType = POINTER_TYPE;\n\n  return e;\n}\n\n\nexport default MouseSource;\n\n//# sourceMappingURL=MouseSource.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/layer/Layer\n */\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getUid } from '../util.js';\nimport { getChangeEventType } from '../Object.js';\nimport BaseLayer from '../layer/Base.js';\nimport LayerProperty from '../layer/Property.js';\nimport { assign } from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/source/Source} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n */\n\n/**\n * @typedef {Object} State\n * @property {module:ol/layer/Layer} layer\n * @property {number} opacity\n * @property {module:ol/source/Source~State} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {module:ol/extent~Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires module:ol/render/Event~RenderEvent\n */\n\nvar Layer = function (BaseLayer) {\n  function Layer(options) {\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    BaseLayer.call(this, baseOptions);\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n\n    this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n\n    this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n\n    this.sourceChangeKey_ = null;\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    listen(this, getChangeEventType(LayerProperty.SOURCE), this.handleSourcePropertyChange_, this);\n    var source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n\n  if (BaseLayer) Layer.__proto__ = BaseLayer;\n  Layer.prototype = Object.create(BaseLayer && BaseLayer.prototype);\n  Layer.prototype.constructor = Layer;\n  /**\n   * @inheritDoc\n   */\n\n  Layer.prototype.getLayersArray = function getLayersArray(opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Layer.prototype.getLayerStatesArray = function getLayerStatesArray(opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {module:ol/source/Source} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.getSource = function getSource() {\n    var source = this.get(LayerProperty.SOURCE);\n    return (\n      /** @type {module:ol/source/Source} */\n      source || null\n    );\n  };\n  /**\n    * @inheritDoc\n    */\n\n\n  Layer.prototype.getSourceState = function getSourceState() {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourceChange_ = function handleSourceChange_() {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    var source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {module:ol/PluggableMap} map Map.\n   * @api\n   */\n\n\n  Layer.prototype.setMap = function setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var layerState = this.getLayerState();\n        layerState.managed = false;\n        layerState.zIndex = Infinity;\n        evt.frameState.layerStatesArray.push(layerState);\n        evt.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {module:ol/source/Source} source The layer source.\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.setSource = function setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {module:ol/layer/Layer~State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\n\n\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution && resolution < layerState.maxResolution;\n}\nexport default Layer; //# sourceMappingURL=Layer.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/layer/Layer.js"],"names":["listen","unlistenByKey","EventType","getUid","getChangeEventType","BaseLayer","LayerProperty","assign","RenderEventType","SourceState","Layer","options","baseOptions","source","call","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","map","setMap","SOURCE","handleSourcePropertyChange_","setSource","__proto__","prototype","Object","create","constructor","getLayersArray","opt_array","array","push","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getSourceState","UNDEFINED","getState","handleSourceChange_","changed","CHANGE","PRECOMPOSE","evt","layerState","managed","zIndex","Infinity","frameState","layerStatesArray","layerStates","render","set","visibleAtResolution","resolution","visible","minResolution","maxResolution"],"mappings":"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","sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getUid} from '../util.js';\nimport {getChangeEventType} from '../Object.js';\nimport BaseLayer from '../layer/Base.js';\nimport LayerProperty from '../layer/Property.js';\nimport {assign} from '../obj.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/source/Source} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {module:ol/layer/Layer} layer\n * @property {number} opacity\n * @property {module:ol/source/Source~State} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {module:ol/extent~Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * @fires module:ol/render/Event~RenderEvent\n */\nvar Layer = (function (BaseLayer) {\n  function Layer(options) {\n\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    BaseLayer.call(this, baseOptions);\n\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    listen(this,\n      getChangeEventType(LayerProperty.SOURCE),\n      this.handleSourcePropertyChange_, this);\n\n    var source = options.source ? options.source : null;\n    this.setSource(source);\n  }\n\n  if ( BaseLayer ) Layer.__proto__ = BaseLayer;\n  Layer.prototype = Object.create( BaseLayer && BaseLayer.prototype );\n  Layer.prototype.constructor = Layer;\n\n  /**\n   * @inheritDoc\n   */\n  Layer.prototype.getLayersArray = function getLayersArray (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Layer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n\n  /**\n   * Get the layer source.\n   * @return {module:ol/source/Source} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  Layer.prototype.getSource = function getSource () {\n    var source = this.get(LayerProperty.SOURCE);\n    return (\n      /** @type {module:ol/source/Source} */ (source) || null\n    );\n  };\n\n  /**\n    * @inheritDoc\n    */\n  Layer.prototype.getSourceState = function getSourceState () {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourceChange_ = function handleSourceChange_ () {\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourcePropertyChange_ = function handleSourcePropertyChange_ () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    var source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source,\n        EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  };\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {module:ol/PluggableMap} map Map.\n   * @api\n   */\n  Layer.prototype.setMap = function setMap (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function(evt) {\n        var layerState = this.getLayerState();\n        layerState.managed = false;\n        layerState.zIndex = Infinity;\n        evt.frameState.layerStatesArray.push(layerState);\n        evt.frameState.layerStates[getUid(this)] = layerState;\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n\n  /**\n   * Set the layer source.\n   * @param {module:ol/source/Source} source The layer source.\n   * @observable\n   * @api\n   */\n  Layer.prototype.setSource = function setSource (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n\n  return Layer;\n}(BaseLayer));\n\n\n/**\n * Return `true` if the layer is visible, and if the passed resolution is\n * between the layer's minResolution and maxResolution. The comparison is\n * inclusive for `minResolution` and exclusive for `maxResolution`.\n * @param {module:ol/layer/Layer~State} layerState Layer state.\n * @param {number} resolution Resolution.\n * @return {boolean} The layer is visible at the given resolution.\n */\nexport function visibleAtResolution(layerState, resolution) {\n  return layerState.visible && resolution >= layerState.minResolution &&\n      resolution < layerState.maxResolution;\n}\n\n\nexport default Layer;\n\n//# sourceMappingURL=Layer.js.map"]},"metadata":{},"sourceType":"module"}
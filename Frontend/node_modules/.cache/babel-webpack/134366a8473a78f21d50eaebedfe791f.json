{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport { extend } from '../array.js';\nimport { assert } from '../asserts.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { xhr } from '../featureloader.js';\nimport { TRUE, UNDEFINED } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { isEmpty, getValues } from '../obj.js';\nimport Source from '../source/Source.js';\nimport SourceState from '../source/State.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(module:ol/extent~Extent, number): Array.<module:ol/extent~Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\n\nexport var VectorSourceEvent = function (Event) {\n  function VectorSourceEvent(type, opt_feature) {\n    Event.call(this, type);\n    /**\n     * The feature being added or removed.\n     * @type {module:ol/Feature|undefined}\n     * @api\n     */\n\n    this.feature = opt_feature;\n  }\n\n  if (Event) VectorSourceEvent.__proto__ = Event;\n  VectorSourceEvent.prototype = Object.create(Event && Event.prototype);\n  VectorSourceEvent.prototype.constructor = VectorSourceEvent;\n  return VectorSourceEvent;\n}(Event);\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {Array.<module:ol/Feature>|module:ol/Collection.<module:ol/Feature>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {module:ol/format/Feature} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {module:ol/featureloader~FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {module:ol/source/Vector~LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|module:ol/featureloader~FeatureUrlfunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlfunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector~VectorSourceEvent\n * @api\n */\n\nvar VectorSource = function (Source) {\n  function VectorSource(opt_options) {\n    var options = opt_options || {};\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n    /**\n     * @private\n     * @type {module:ol/featureloader~FeatureLoader}\n     */\n\n    this.loader_ = UNDEFINED;\n    /**\n     * @private\n     * @type {module:ol/format/Feature|undefined}\n     */\n\n    this.format_ = options.format;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n    /**\n     * @private\n     * @type {string|module:ol/featureloader~FeatureUrlFunction|undefined}\n     */\n\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n\n      this.loader_ = xhr(this.url_,\n      /** @type {module:ol/format/Feature} */\n      this.format_);\n    }\n    /**\n     * @private\n     * @type {module:ol/source/Vector~LoadingStrategy}\n     */\n\n\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n    /**\n     * @private\n     * @type {module:ol/structs/RBush.<module:ol/Feature>}\n     */\n\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n    /**\n     * @private\n     * @type {module:ol/structs/RBush.<{extent: module:ol/extent~Extent}>}\n     */\n\n    this.loadedExtentsRtree_ = new RBush();\n    /**\n     * @private\n     * @type {!Object.<string, module:ol/Feature>}\n     */\n\n    this.nullGeometryFeatures_ = {};\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object.<string, module:ol/Feature>}\n     */\n\n    this.idIndex_ = {};\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object.<string, module:ol/Feature>}\n     */\n\n    this.undefIdIndex_ = {};\n    /**\n     * @private\n     * @type {Object.<string, Array.<module:ol/events~EventsKey>>}\n     */\n\n    this.featureChangeKeys_ = {};\n    /**\n     * @private\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     */\n\n    this.featuresCollection_ = null;\n    var collection, features;\n\n    if (options.features instanceof Collection) {\n      collection = options.features;\n      features = collection.getArray();\n    } else if (Array.isArray(options.features)) {\n      features = options.features;\n    }\n\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  if (Source) VectorSource.__proto__ = Source;\n  VectorSource.prototype = Object.create(Source && Source.prototype);\n  VectorSource.prototype.constructor = VectorSource;\n  return VectorSource;\n}(Source);\n/**\n * Add a single feature to the source.  If you want to add a batch of features\n * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n * instead. A feature will not be added to the source if feature with\n * the same id is already there. The reason for this behavior is to avoid\n * feature duplication when using bbox or tile loading strategies.\n * @param {module:ol/Feature} feature Feature to add.\n * @api\n */\n\n\nVectorSource.prototype.addFeature = function (feature) {\n  this.addFeatureInternal(feature);\n  this.changed();\n};\n/**\n * Add a feature without firing a `change` event.\n * @param {module:ol/Feature} feature Feature.\n * @protected\n */\n\n\nVectorSource.prototype.addFeatureInternal = function (feature) {\n  var featureKey = getUid(feature).toString();\n\n  if (!this.addToIndex_(featureKey, feature)) {\n    return;\n  }\n\n  this.setupChangeEvents_(featureKey, feature);\n  var geometry = feature.getGeometry();\n\n  if (geometry) {\n    var extent = geometry.getExtent();\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.insert(extent, feature);\n    }\n  } else {\n    this.nullGeometryFeatures_[featureKey] = feature;\n  }\n\n  this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n};\n/**\n * @param {string} featureKey Unique identifier for the feature.\n * @param {module:ol/Feature} feature The feature.\n * @private\n */\n\n\nVectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {\n  this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n};\n/**\n * @param {string} featureKey Unique identifier for the feature.\n * @param {module:ol/Feature} feature The feature.\n * @return {boolean} The feature is \"valid\", in the sense that it is also a\n *     candidate for insertion into the Rtree.\n * @private\n */\n\n\nVectorSource.prototype.addToIndex_ = function (featureKey, feature) {\n  var valid = true;\n  var id = feature.getId();\n\n  if (id !== undefined) {\n    if (!(id.toString() in this.idIndex_)) {\n      this.idIndex_[id.toString()] = feature;\n    } else {\n      valid = false;\n    }\n  } else {\n    assert(!(featureKey in this.undefIdIndex_), 30); // The passed `feature` was already added to the source\n\n    this.undefIdIndex_[featureKey] = feature;\n  }\n\n  return valid;\n};\n/**\n * Add a batch of features to the source.\n * @param {Array.<module:ol/Feature>} features Features to add.\n * @api\n */\n\n\nVectorSource.prototype.addFeatures = function (features) {\n  this.addFeaturesInternal(features);\n  this.changed();\n};\n/**\n * Add features without firing a `change` event.\n * @param {Array.<module:ol/Feature>} features Features.\n * @protected\n */\n\n\nVectorSource.prototype.addFeaturesInternal = function (features) {\n  var this$1 = this;\n  var extents = [];\n  var newFeatures = [];\n  var geometryFeatures = [];\n\n  for (var i = 0, length = features.length; i < length; i++) {\n    var feature = features[i];\n    var featureKey = getUid(feature).toString();\n\n    if (this$1.addToIndex_(featureKey, feature)) {\n      newFeatures.push(feature);\n    }\n  }\n\n  for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {\n    var feature$1 = newFeatures[i$1];\n    var featureKey$1 = getUid(feature$1).toString();\n    this$1.setupChangeEvents_(featureKey$1, feature$1);\n    var geometry = feature$1.getGeometry();\n\n    if (geometry) {\n      var extent = geometry.getExtent();\n      extents.push(extent);\n      geometryFeatures.push(feature$1);\n    } else {\n      this$1.nullGeometryFeatures_[featureKey$1] = feature$1;\n    }\n  }\n\n  if (this.featuresRtree_) {\n    this.featuresRtree_.load(extents, geometryFeatures);\n  }\n\n  for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {\n    this$1.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));\n  }\n};\n/**\n * @param {!module:ol/Collection.<module:ol/Feature>} collection Collection.\n * @private\n */\n\n\nVectorSource.prototype.bindFeaturesCollection_ = function (collection) {\n  var modifyingCollection = false;\n  listen(this, VectorEventType.ADDFEATURE, function (evt) {\n    if (!modifyingCollection) {\n      modifyingCollection = true;\n      collection.push(evt.feature);\n      modifyingCollection = false;\n    }\n  });\n  listen(this, VectorEventType.REMOVEFEATURE, function (evt) {\n    if (!modifyingCollection) {\n      modifyingCollection = true;\n      collection.remove(evt.feature);\n      modifyingCollection = false;\n    }\n  });\n  listen(collection, CollectionEventType.ADD, function (evt) {\n    if (!modifyingCollection) {\n      modifyingCollection = true;\n      this.addFeature(\n      /** @type {module:ol/Feature} */\n      evt.element);\n      modifyingCollection = false;\n    }\n  }, this);\n  listen(collection, CollectionEventType.REMOVE, function (evt) {\n    if (!modifyingCollection) {\n      modifyingCollection = true;\n      this.removeFeature(\n      /** @type {module:ol/Feature} */\n      evt.element);\n      modifyingCollection = false;\n    }\n  }, this);\n  this.featuresCollection_ = collection;\n};\n/**\n * Remove all features from the source.\n * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector~VectorSourceEvent#removefeature} events.\n * @api\n */\n\n\nVectorSource.prototype.clear = function (opt_fast) {\n  var this$1 = this;\n\n  if (opt_fast) {\n    for (var featureId in this$1.featureChangeKeys_) {\n      var keys = this$1.featureChangeKeys_[featureId];\n      keys.forEach(unlistenByKey);\n    }\n\n    if (!this.featuresCollection_) {\n      this.featureChangeKeys_ = {};\n      this.idIndex_ = {};\n      this.undefIdIndex_ = {};\n    }\n  } else {\n    if (this.featuresRtree_) {\n      this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n\n      for (var id in this$1.nullGeometryFeatures_) {\n        this$1.removeFeatureInternal(this$1.nullGeometryFeatures_[id]);\n      }\n    }\n  }\n\n  if (this.featuresCollection_) {\n    this.featuresCollection_.clear();\n  }\n\n  if (this.featuresRtree_) {\n    this.featuresRtree_.clear();\n  }\n\n  this.loadedExtentsRtree_.clear();\n  this.nullGeometryFeatures_ = {};\n  var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n  this.dispatchEvent(clearEvent);\n  this.changed();\n};\n/**\n * Iterate through all features on the source, calling the provided callback\n * with each one.  If the callback returns any \"truthy\" value, iteration will\n * stop and the function will return the same value.\n * Note: this function only iterate through the feature that have a defined geometry.\n *\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     on the source.  Return a truthy value to stop iteration.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n * @api\n */\n\n\nVectorSource.prototype.forEachFeature = function (callback) {\n  if (this.featuresRtree_) {\n    return this.featuresRtree_.forEach(callback);\n  } else if (this.featuresCollection_) {\n    return this.featuresCollection_.forEach(callback);\n  }\n};\n/**\n * Iterate through all features whose geometries contain the provided\n * coordinate, calling the callback with each feature.  If the callback returns\n * a \"truthy\" value, iteration will stop and the function will return the same\n * value.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     whose goemetry contains the provided coordinate.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n */\n\n\nVectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {\n  var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n  return this.forEachFeatureInExtent(extent, function (feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry.intersectsCoordinate(coordinate)) {\n      return callback(feature);\n    } else {\n      return undefined;\n    }\n  });\n};\n/**\n * Iterate through all features whose bounding box intersects the provided\n * extent (note that the feature's geometry may not intersect the extent),\n * calling the callback with each feature.  If the callback returns a \"truthy\"\n * value, iteration will stop and the function will return the same value.\n *\n * If you are interested in features whose geometry intersects an extent, call\n * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n *\n * When `useSpatialIndex` is set to false, this method will loop through all\n * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     whose bounding box intersects the provided extent.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n * @api\n */\n\n\nVectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {\n  if (this.featuresRtree_) {\n    return this.featuresRtree_.forEachInExtent(extent, callback);\n  } else if (this.featuresCollection_) {\n    return this.featuresCollection_.forEach(callback);\n  }\n};\n/**\n * Iterate through all features whose geometry intersects the provided extent,\n * calling the callback with each feature.  If the callback returns a \"truthy\"\n * value, iteration will stop and the function will return the same value.\n *\n * If you only want to test for bounding box intersection, call the\n * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     whose geometry intersects the provided extent.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n * @api\n */\n\n\nVectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {\n  return this.forEachFeatureInExtent(extent,\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  function (feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry.intersectsExtent(extent)) {\n      var result = callback(feature);\n\n      if (result) {\n        return result;\n      }\n    }\n  });\n};\n/**\n * Get the features collection associated with this source. Will be `null`\n * unless the source was configured with `useSpatialIndex` set to `false`, or\n * with an {@link module:ol/Collection} as `features`.\n * @return {module:ol/Collection.<module:ol/Feature>} The collection of features.\n * @api\n */\n\n\nVectorSource.prototype.getFeaturesCollection = function () {\n  return this.featuresCollection_;\n};\n/**\n * Get all features on the source in random order.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\n\n\nVectorSource.prototype.getFeatures = function () {\n  var features;\n\n  if (this.featuresCollection_) {\n    features = this.featuresCollection_.getArray();\n  } else if (this.featuresRtree_) {\n    features = this.featuresRtree_.getAll();\n\n    if (!isEmpty(this.nullGeometryFeatures_)) {\n      extend(features, getValues(this.nullGeometryFeatures_));\n    }\n  }\n\n  return (\n    /** @type {Array.<module:ol/Feature>} */\n    features\n  );\n};\n/**\n * Get all features whose geometry intersects the provided coordinate.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\n\n\nVectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {\n  var features = [];\n  this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n    features.push(feature);\n  });\n  return features;\n};\n/**\n * Get all features in the provided extent.  Note that this returns an array of\n * all features intersecting the given extent in random order (so it may include\n * features whose geometries do not intersect the extent).\n *\n * This method is not available when the source is configured with\n * `useSpatialIndex` set to `false`.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\n\n\nVectorSource.prototype.getFeaturesInExtent = function (extent) {\n  return this.featuresRtree_.getInExtent(extent);\n};\n/**\n * Get the closest feature to the provided coordinate.\n *\n * This method is not available when the source is configured with\n * `useSpatialIndex` set to `false`.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {function(module:ol/Feature):boolean=} opt_filter Feature filter function.\n *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n *     and it should return a boolean value. By default, no filtering is made.\n * @return {module:ol/Feature} Closest feature.\n * @api\n */\n\n\nVectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {\n  // Find the closest feature using branch and bound.  We start searching an\n  // infinite extent, and find the distance from the first feature found.  This\n  // becomes the closest feature.  We then compute a smaller extent which any\n  // closer feature must intersect.  We continue searching with this smaller\n  // extent, trying to find a closer feature.  Every time we find a closer\n  // feature, we update the extent being searched so that any even closer\n  // feature must intersect it.  We continue until we run out of features.\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var closestFeature = null;\n  var closestPoint = [NaN, NaN];\n  var minSquaredDistance = Infinity;\n  var extent = [-Infinity, -Infinity, Infinity, Infinity];\n  var filter = opt_filter ? opt_filter : TRUE;\n  this.featuresRtree_.forEachInExtent(extent,\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   */\n  function (feature) {\n    if (filter(feature)) {\n      var geometry = feature.getGeometry();\n      var previousMinSquaredDistance = minSquaredDistance;\n      minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n\n      if (minSquaredDistance < previousMinSquaredDistance) {\n        closestFeature = feature; // This is sneaky.  Reduce the extent that it is currently being\n        // searched while the R-Tree traversal using this same extent object\n        // is still in progress.  This is safe because the new extent is\n        // strictly contained by the old extent.\n\n        var minDistance = Math.sqrt(minSquaredDistance);\n        extent[0] = x - minDistance;\n        extent[1] = y - minDistance;\n        extent[2] = x + minDistance;\n        extent[3] = y + minDistance;\n      }\n    }\n  });\n  return closestFeature;\n};\n/**\n * Get the extent of the features currently in the source.\n *\n * This method is not available when the source is configured with\n * `useSpatialIndex` set to `false`.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent. If provided, no new extent\n *     will be created. Instead, that extent's coordinates will be overwritten.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\n\n\nVectorSource.prototype.getExtent = function (opt_extent) {\n  return this.featuresRtree_.getExtent(opt_extent);\n};\n/**\n * Get a feature by its identifier (the value returned by feature.getId()).\n * Note that the index treats string and numeric identifiers as the same.  So\n * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n *\n * @param {string|number} id Feature identifier.\n * @return {module:ol/Feature} The feature (or `null` if not found).\n * @api\n */\n\n\nVectorSource.prototype.getFeatureById = function (id) {\n  var feature = this.idIndex_[id.toString()];\n  return feature !== undefined ? feature : null;\n};\n/**\n * Get the format associated with this source.\n *\n * @return {module:ol/format/Feature|undefined} The feature format.\n * @api\n */\n\n\nVectorSource.prototype.getFormat = function () {\n  return this.format_;\n};\n/**\n * @return {boolean} The source can have overlapping geometries.\n */\n\n\nVectorSource.prototype.getOverlaps = function () {\n  return this.overlaps_;\n};\n/**\n * @override\n */\n\n\nVectorSource.prototype.getResolutions = function () {};\n/**\n * Get the url associated with this source.\n *\n * @return {string|module:ol/featureloader~FeatureUrlFunction|undefined} The url.\n * @api\n */\n\n\nVectorSource.prototype.getUrl = function () {\n  return this.url_;\n};\n/**\n * @param {module:ol/events/Event} event Event.\n * @private\n */\n\n\nVectorSource.prototype.handleFeatureChange_ = function (event) {\n  var feature =\n  /** @type {module:ol/Feature} */\n  event.target;\n  var featureKey = getUid(feature).toString();\n  var geometry = feature.getGeometry();\n\n  if (!geometry) {\n    if (!(featureKey in this.nullGeometryFeatures_)) {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n  } else {\n    var extent = geometry.getExtent();\n\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.update(extent, feature);\n      }\n    }\n  }\n\n  var id = feature.getId();\n\n  if (id !== undefined) {\n    var sid = id.toString();\n\n    if (featureKey in this.undefIdIndex_) {\n      delete this.undefIdIndex_[featureKey];\n      this.idIndex_[sid] = feature;\n    } else {\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    }\n  } else {\n    if (!(featureKey in this.undefIdIndex_)) {\n      this.removeFromIdIndex_(feature);\n      this.undefIdIndex_[featureKey] = feature;\n    }\n  }\n\n  this.changed();\n  this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n};\n/**\n * Returns true if the feature is contained within the source.\n * @param {module:ol/Feature} feature Feature.\n * @return {boolean} Has feature.\n * @api\n */\n\n\nVectorSource.prototype.hasFeature = function (feature) {\n  var id = feature.getId();\n\n  if (id !== undefined) {\n    return id in this.idIndex_;\n  } else {\n    var featureKey = getUid(feature).toString();\n    return featureKey in this.undefIdIndex_;\n  }\n};\n/**\n * @return {boolean} Is empty.\n */\n\n\nVectorSource.prototype.isEmpty = function () {\n  return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n};\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {module:ol/proj/Projection} projection Projection.\n */\n\n\nVectorSource.prototype.loadFeatures = function (extent, resolution, projection) {\n  var this$1 = this;\n  var loadedExtentsRtree = this.loadedExtentsRtree_;\n  var extentsToLoad = this.strategy_(extent, resolution);\n\n  var loop = function loop(i, ii) {\n    var extentToLoad = extentsToLoad[i];\n    var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n    /**\n     * @param {{extent: module:ol/extent~Extent}} object Object.\n     * @return {boolean} Contains.\n     */\n    function (object) {\n      return containsExtent(object.extent, extentToLoad);\n    });\n\n    if (!alreadyLoaded) {\n      this$1.loader_.call(this$1, extentToLoad, resolution, projection);\n      loadedExtentsRtree.insert(extentToLoad, {\n        extent: extentToLoad.slice()\n      });\n    }\n  };\n\n  for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n    loop(i, ii);\n  }\n};\n/**\n * Remove an extent from the list of loaded extents.\n * @param {module:ol/extent~Extent} extent Extent.\n * @api\n */\n\n\nVectorSource.prototype.removeLoadedExtent = function (extent) {\n  var loadedExtentsRtree = this.loadedExtentsRtree_;\n  var obj;\n  loadedExtentsRtree.forEachInExtent(extent, function (object) {\n    if (equals(object.extent, extent)) {\n      obj = object;\n      return true;\n    }\n  });\n\n  if (obj) {\n    loadedExtentsRtree.remove(obj);\n  }\n};\n/**\n * Remove a single feature from the source.  If you want to remove all features\n * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n * instead.\n * @param {module:ol/Feature} feature Feature to remove.\n * @api\n */\n\n\nVectorSource.prototype.removeFeature = function (feature) {\n  var featureKey = getUid(feature).toString();\n\n  if (featureKey in this.nullGeometryFeatures_) {\n    delete this.nullGeometryFeatures_[featureKey];\n  } else {\n    if (this.featuresRtree_) {\n      this.featuresRtree_.remove(feature);\n    }\n  }\n\n  this.removeFeatureInternal(feature);\n  this.changed();\n};\n/**\n * Remove feature without firing a `change` event.\n * @param {module:ol/Feature} feature Feature.\n * @protected\n */\n\n\nVectorSource.prototype.removeFeatureInternal = function (feature) {\n  var featureKey = getUid(feature).toString();\n  this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n  delete this.featureChangeKeys_[featureKey];\n  var id = feature.getId();\n\n  if (id !== undefined) {\n    delete this.idIndex_[id.toString()];\n  } else {\n    delete this.undefIdIndex_[featureKey];\n  }\n\n  this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n};\n/**\n * Remove a feature from the id index.  Called internally when the feature id\n * may have changed.\n * @param {module:ol/Feature} feature The feature.\n * @return {boolean} Removed the feature from the index.\n * @private\n */\n\n\nVectorSource.prototype.removeFromIdIndex_ = function (feature) {\n  var this$1 = this;\n  var removed = false;\n\n  for (var id in this$1.idIndex_) {\n    if (this$1.idIndex_[id] === feature) {\n      delete this$1.idIndex_[id];\n      removed = true;\n      break;\n    }\n  }\n\n  return removed;\n};\n/**\n * Set the new loader of the source. The next loadFeatures call will use the\n * new loader.\n * @param {module:ol/featureloader~FeatureLoader} loader The loader to set.\n * @api\n */\n\n\nVectorSource.prototype.setLoader = function (loader) {\n  this.loader_ = loader;\n};\n\nexport default VectorSource; //# sourceMappingURL=Vector.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/source/Vector.js"],"names":["getUid","Collection","CollectionEventType","ObjectEventType","extend","assert","listen","unlistenByKey","Event","EventType","containsExtent","equals","xhr","TRUE","UNDEFINED","all","allStrategy","isEmpty","getValues","Source","SourceState","VectorEventType","RBush","VectorSourceEvent","type","opt_feature","call","feature","__proto__","prototype","Object","create","constructor","VectorSource","opt_options","options","attributions","projection","undefined","state","READY","wrapX","loader_","format_","format","overlaps_","overlaps","url_","url","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","nullGeometryFeatures_","idIndex_","undefIdIndex_","featureChangeKeys_","featuresCollection_","collection","features","getArray","Array","isArray","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","changed","featureKey","toString","addToIndex_","setupChangeEvents_","geometry","getGeometry","extent","getExtent","insert","dispatchEvent","ADDFEATURE","CHANGE","handleFeatureChange_","PROPERTYCHANGE","valid","id","getId","addFeatures","this$1","extents","newFeatures","geometryFeatures","i","length","push","i$1","length$1","feature$1","featureKey$1","load","i$2","length$2","modifyingCollection","evt","REMOVEFEATURE","remove","ADD","element","REMOVE","removeFeature","clear","opt_fast","featureId","keys","forEach","removeFeatureInternal","clearEvent","CLEAR","forEachFeature","callback","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachInExtent","forEachFeatureIntersectingExtent","intersectsExtent","result","getFeaturesCollection","getFeatures","getAll","getFeaturesAtCoordinate","getFeaturesInExtent","getInExtent","getClosestFeatureToCoordinate","opt_filter","x","y","closestFeature","closestPoint","NaN","minSquaredDistance","Infinity","filter","previousMinSquaredDistance","closestPointXY","minDistance","Math","sqrt","opt_extent","getFeatureById","getFormat","getOverlaps","getResolutions","getUrl","event","target","update","sid","removeFromIdIndex_","CHANGEFEATURE","hasFeature","loadFeatures","resolution","loadedExtentsRtree","extentsToLoad","loop","ii","extentToLoad","alreadyLoaded","object","slice","removeLoadedExtent","obj","removed","setLoader"],"mappings":"AAAA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAAQC,MAAR,QAAqB,aAArB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,cAApC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,cAAR,EAAwBC,MAAxB,QAAqC,cAArC;AACA,SAAQC,GAAR,QAAkB,qBAAlB;AACA,SAAQC,IAAR,EAAcC,SAAd,QAA8B,iBAA9B;AACA,SAAQC,GAAG,IAAIC,WAAf,QAAiC,uBAAjC;AACA,SAAQC,OAAR,EAAiBC,SAAjB,QAAiC,WAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAI,UAAUf,KAAV,EAAiB;AAC/C,WAASe,iBAAT,CAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C;AAE5CjB,IAAAA,KAAK,CAACkB,IAAN,CAAW,IAAX,EAAiBF,IAAjB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKG,OAAL,GAAeF,WAAf;AAED;;AAED,MAAKjB,KAAL,EAAae,iBAAiB,CAACK,SAAlB,GAA8BpB,KAA9B;AACbe,EAAAA,iBAAiB,CAACM,SAAlB,GAA8BC,MAAM,CAACC,MAAP,CAAevB,KAAK,IAAIA,KAAK,CAACqB,SAA9B,CAA9B;AACAN,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BG,WAA5B,GAA0CT,iBAA1C;AAEA,SAAOA,iBAAP;AACD,CAnB+B,CAmB9Bf,KAnB8B,CAAzB;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIyB,YAAY,GAAI,UAAUd,MAAV,EAAkB;AACpC,WAASc,YAAT,CAAsBC,WAAtB,EAAmC;AAEjC,QAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;AAEAf,IAAAA,MAAM,CAACO,IAAP,CAAY,IAAZ,EAAkB;AAChBU,MAAAA,YAAY,EAAED,OAAO,CAACC,YADN;AAEhBC,MAAAA,UAAU,EAAEC,SAFI;AAGhBC,MAAAA,KAAK,EAAEnB,WAAW,CAACoB,KAHH;AAIhBC,MAAAA,KAAK,EAAEN,OAAO,CAACM,KAAR,KAAkBH,SAAlB,GAA8BH,OAAO,CAACM,KAAtC,GAA8C;AAJrC,KAAlB;AAOA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAe5B,SAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAK6B,OAAL,GAAeR,OAAO,CAACS,MAAvB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,SAAL,GAAiBV,OAAO,CAACW,QAAR,IAAoBR,SAApB,GAAgC,IAAhC,GAAuCH,OAAO,CAACW,QAAhE;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYZ,OAAO,CAACa,GAApB;;AAEA,QAAIb,OAAO,CAACc,MAAR,KAAmBX,SAAvB,EAAkC;AAChC,WAAKI,OAAL,GAAeP,OAAO,CAACc,MAAvB;AACD,KAFD,MAEO,IAAI,KAAKF,IAAL,KAAcT,SAAlB,EAA6B;AAClC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","sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport {extend} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {xhr} from '../featureloader.js';\nimport {TRUE, UNDEFINED} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {isEmpty, getValues} from '../obj.js';\nimport Source from '../source/Source.js';\nimport SourceState from '../source/State.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(module:ol/extent~Extent, number): Array.<module:ol/extent~Extent>} LoadingStrategy\n * @api\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport var VectorSourceEvent = (function (Event) {\n  function VectorSourceEvent(type, opt_feature) {\n\n    Event.call(this, type);\n\n    /**\n     * The feature being added or removed.\n     * @type {module:ol/Feature|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n\n  }\n\n  if ( Event ) VectorSourceEvent.__proto__ = Event;\n  VectorSourceEvent.prototype = Object.create( Event && Event.prototype );\n  VectorSourceEvent.prototype.constructor = VectorSourceEvent;\n\n  return VectorSourceEvent;\n}(Event));\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {Array.<module:ol/Feature>|module:ol/Collection.<module:ol/Feature>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {module:ol/format/Feature} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {module:ol/featureloader~FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {module:ol/source/Vector~LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|module:ol/featureloader~FeatureUrlfunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlfunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector~VectorSourceEvent\n * @api\n */\nvar VectorSource = (function (Source) {\n  function VectorSource(opt_options) {\n\n    var options = opt_options || {};\n\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {module:ol/featureloader~FeatureLoader}\n     */\n    this.loader_ = UNDEFINED;\n\n    /**\n     * @private\n     * @type {module:ol/format/Feature|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|module:ol/featureloader~FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {module:ol/format/Feature} */ (this.format_));\n    }\n\n    /**\n     * @private\n     * @type {module:ol/source/Vector~LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n\n    var useSpatialIndex =\n        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {module:ol/structs/RBush.<module:ol/Feature>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {module:ol/structs/RBush.<{extent: module:ol/extent~Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object.<string, module:ol/Feature>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object.<string, module:ol/Feature>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object.<string, module:ol/Feature>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object.<string, Array.<module:ol/events~EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     */\n    this.featuresCollection_ = null;\n\n    var collection, features;\n    if (options.features instanceof Collection) {\n      collection = options.features;\n      features = collection.getArray();\n    } else if (Array.isArray(options.features)) {\n      features = options.features;\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n\n  }\n\n  if ( Source ) VectorSource.__proto__ = Source;\n  VectorSource.prototype = Object.create( Source && Source.prototype );\n  VectorSource.prototype.constructor = VectorSource;\n\n  return VectorSource;\n}(Source));\n\n\n/**\n * Add a single feature to the source.  If you want to add a batch of features\n * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n * instead. A feature will not be added to the source if feature with\n * the same id is already there. The reason for this behavior is to avoid\n * feature duplication when using bbox or tile loading strategies.\n * @param {module:ol/Feature} feature Feature to add.\n * @api\n */\nVectorSource.prototype.addFeature = function(feature) {\n  this.addFeatureInternal(feature);\n  this.changed();\n};\n\n\n/**\n * Add a feature without firing a `change` event.\n * @param {module:ol/Feature} feature Feature.\n * @protected\n */\nVectorSource.prototype.addFeatureInternal = function(feature) {\n  var featureKey = getUid(feature).toString();\n\n  if (!this.addToIndex_(featureKey, feature)) {\n    return;\n  }\n\n  this.setupChangeEvents_(featureKey, feature);\n\n  var geometry = feature.getGeometry();\n  if (geometry) {\n    var extent = geometry.getExtent();\n    if (this.featuresRtree_) {\n      this.featuresRtree_.insert(extent, feature);\n    }\n  } else {\n    this.nullGeometryFeatures_[featureKey] = feature;\n  }\n\n  this.dispatchEvent(\n    new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n};\n\n\n/**\n * @param {string} featureKey Unique identifier for the feature.\n * @param {module:ol/Feature} feature The feature.\n * @private\n */\nVectorSource.prototype.setupChangeEvents_ = function(featureKey, feature) {\n  this.featureChangeKeys_[featureKey] = [\n    listen(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this),\n    listen(feature, ObjectEventType.PROPERTYCHANGE,\n      this.handleFeatureChange_, this)\n  ];\n};\n\n\n/**\n * @param {string} featureKey Unique identifier for the feature.\n * @param {module:ol/Feature} feature The feature.\n * @return {boolean} The feature is \"valid\", in the sense that it is also a\n *     candidate for insertion into the Rtree.\n * @private\n */\nVectorSource.prototype.addToIndex_ = function(featureKey, feature) {\n  var valid = true;\n  var id = feature.getId();\n  if (id !== undefined) {\n    if (!(id.toString() in this.idIndex_)) {\n      this.idIndex_[id.toString()] = feature;\n    } else {\n      valid = false;\n    }\n  } else {\n    assert(!(featureKey in this.undefIdIndex_),\n      30); // The passed `feature` was already added to the source\n    this.undefIdIndex_[featureKey] = feature;\n  }\n  return valid;\n};\n\n\n/**\n * Add a batch of features to the source.\n * @param {Array.<module:ol/Feature>} features Features to add.\n * @api\n */\nVectorSource.prototype.addFeatures = function(features) {\n  this.addFeaturesInternal(features);\n  this.changed();\n};\n\n\n/**\n * Add features without firing a `change` event.\n * @param {Array.<module:ol/Feature>} features Features.\n * @protected\n */\nVectorSource.prototype.addFeaturesInternal = function(features) {\n  var this$1 = this;\n\n  var extents = [];\n  var newFeatures = [];\n  var geometryFeatures = [];\n\n  for (var i = 0, length = features.length; i < length; i++) {\n    var feature = features[i];\n    var featureKey = getUid(feature).toString();\n    if (this$1.addToIndex_(featureKey, feature)) {\n      newFeatures.push(feature);\n    }\n  }\n\n  for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {\n    var feature$1 = newFeatures[i$1];\n    var featureKey$1 = getUid(feature$1).toString();\n    this$1.setupChangeEvents_(featureKey$1, feature$1);\n\n    var geometry = feature$1.getGeometry();\n    if (geometry) {\n      var extent = geometry.getExtent();\n      extents.push(extent);\n      geometryFeatures.push(feature$1);\n    } else {\n      this$1.nullGeometryFeatures_[featureKey$1] = feature$1;\n    }\n  }\n  if (this.featuresRtree_) {\n    this.featuresRtree_.load(extents, geometryFeatures);\n  }\n\n  for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {\n    this$1.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));\n  }\n};\n\n\n/**\n * @param {!module:ol/Collection.<module:ol/Feature>} collection Collection.\n * @private\n */\nVectorSource.prototype.bindFeaturesCollection_ = function(collection) {\n  var modifyingCollection = false;\n  listen(this, VectorEventType.ADDFEATURE,\n    function(evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n  listen(this, VectorEventType.REMOVEFEATURE,\n    function(evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n  listen(collection, CollectionEventType.ADD,\n    function(evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature(/** @type {module:ol/Feature} */ (evt.element));\n        modifyingCollection = false;\n      }\n    }, this);\n  listen(collection, CollectionEventType.REMOVE,\n    function(evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature(/** @type {module:ol/Feature} */ (evt.element));\n        modifyingCollection = false;\n      }\n    }, this);\n  this.featuresCollection_ = collection;\n};\n\n\n/**\n * Remove all features from the source.\n * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector~VectorSourceEvent#removefeature} events.\n * @api\n */\nVectorSource.prototype.clear = function(opt_fast) {\n  var this$1 = this;\n\n  if (opt_fast) {\n    for (var featureId in this$1.featureChangeKeys_) {\n      var keys = this$1.featureChangeKeys_[featureId];\n      keys.forEach(unlistenByKey);\n    }\n    if (!this.featuresCollection_) {\n      this.featureChangeKeys_ = {};\n      this.idIndex_ = {};\n      this.undefIdIndex_ = {};\n    }\n  } else {\n    if (this.featuresRtree_) {\n      this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n      for (var id in this$1.nullGeometryFeatures_) {\n        this$1.removeFeatureInternal(this$1.nullGeometryFeatures_[id]);\n      }\n    }\n  }\n  if (this.featuresCollection_) {\n    this.featuresCollection_.clear();\n  }\n\n  if (this.featuresRtree_) {\n    this.featuresRtree_.clear();\n  }\n  this.loadedExtentsRtree_.clear();\n  this.nullGeometryFeatures_ = {};\n\n  var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n  this.dispatchEvent(clearEvent);\n  this.changed();\n};\n\n\n/**\n * Iterate through all features on the source, calling the provided callback\n * with each one.  If the callback returns any \"truthy\" value, iteration will\n * stop and the function will return the same value.\n * Note: this function only iterate through the feature that have a defined geometry.\n *\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     on the source.  Return a truthy value to stop iteration.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n * @api\n */\nVectorSource.prototype.forEachFeature = function(callback) {\n  if (this.featuresRtree_) {\n    return this.featuresRtree_.forEach(callback);\n  } else if (this.featuresCollection_) {\n    return this.featuresCollection_.forEach(callback);\n  }\n};\n\n\n/**\n * Iterate through all features whose geometries contain the provided\n * coordinate, calling the callback with each feature.  If the callback returns\n * a \"truthy\" value, iteration will stop and the function will return the same\n * value.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     whose goemetry contains the provided coordinate.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n */\nVectorSource.prototype.forEachFeatureAtCoordinateDirect = function(coordinate, callback) {\n  var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n  return this.forEachFeatureInExtent(extent, function(feature) {\n    var geometry = feature.getGeometry();\n    if (geometry.intersectsCoordinate(coordinate)) {\n      return callback(feature);\n    } else {\n      return undefined;\n    }\n  });\n};\n\n\n/**\n * Iterate through all features whose bounding box intersects the provided\n * extent (note that the feature's geometry may not intersect the extent),\n * calling the callback with each feature.  If the callback returns a \"truthy\"\n * value, iteration will stop and the function will return the same value.\n *\n * If you are interested in features whose geometry intersects an extent, call\n * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n *\n * When `useSpatialIndex` is set to false, this method will loop through all\n * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     whose bounding box intersects the provided extent.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n * @api\n */\nVectorSource.prototype.forEachFeatureInExtent = function(extent, callback) {\n  if (this.featuresRtree_) {\n    return this.featuresRtree_.forEachInExtent(extent, callback);\n  } else if (this.featuresCollection_) {\n    return this.featuresCollection_.forEach(callback);\n  }\n};\n\n\n/**\n * Iterate through all features whose geometry intersects the provided extent,\n * calling the callback with each feature.  If the callback returns a \"truthy\"\n * value, iteration will stop and the function will return the same value.\n *\n * If you only want to test for bounding box intersection, call the\n * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(module:ol/Feature): T} callback Called with each feature\n *     whose geometry intersects the provided extent.\n * @return {T|undefined} The return value from the last call to the callback.\n * @template T\n * @api\n */\nVectorSource.prototype.forEachFeatureIntersectingExtent = function(extent, callback) {\n  return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {module:ol/Feature} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     */\n    function(feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n        if (result) {\n          return result;\n        }\n      }\n    });\n};\n\n\n/**\n * Get the features collection associated with this source. Will be `null`\n * unless the source was configured with `useSpatialIndex` set to `false`, or\n * with an {@link module:ol/Collection} as `features`.\n * @return {module:ol/Collection.<module:ol/Feature>} The collection of features.\n * @api\n */\nVectorSource.prototype.getFeaturesCollection = function() {\n  return this.featuresCollection_;\n};\n\n\n/**\n * Get all features on the source in random order.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nVectorSource.prototype.getFeatures = function() {\n  var features;\n  if (this.featuresCollection_) {\n    features = this.featuresCollection_.getArray();\n  } else if (this.featuresRtree_) {\n    features = this.featuresRtree_.getAll();\n    if (!isEmpty(this.nullGeometryFeatures_)) {\n      extend(features, getValues(this.nullGeometryFeatures_));\n    }\n  }\n  return (\n    /** @type {Array.<module:ol/Feature>} */ (features)\n  );\n};\n\n\n/**\n * Get all features whose geometry intersects the provided coordinate.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nVectorSource.prototype.getFeaturesAtCoordinate = function(coordinate) {\n  var features = [];\n  this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n    features.push(feature);\n  });\n  return features;\n};\n\n\n/**\n * Get all features in the provided extent.  Note that this returns an array of\n * all features intersecting the given extent in random order (so it may include\n * features whose geometries do not intersect the extent).\n *\n * This method is not available when the source is configured with\n * `useSpatialIndex` set to `false`.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {Array.<module:ol/Feature>} Features.\n * @api\n */\nVectorSource.prototype.getFeaturesInExtent = function(extent) {\n  return this.featuresRtree_.getInExtent(extent);\n};\n\n\n/**\n * Get the closest feature to the provided coordinate.\n *\n * This method is not available when the source is configured with\n * `useSpatialIndex` set to `false`.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {function(module:ol/Feature):boolean=} opt_filter Feature filter function.\n *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n *     and it should return a boolean value. By default, no filtering is made.\n * @return {module:ol/Feature} Closest feature.\n * @api\n */\nVectorSource.prototype.getClosestFeatureToCoordinate = function(coordinate, opt_filter) {\n  // Find the closest feature using branch and bound.  We start searching an\n  // infinite extent, and find the distance from the first feature found.  This\n  // becomes the closest feature.  We then compute a smaller extent which any\n  // closer feature must intersect.  We continue searching with this smaller\n  // extent, trying to find a closer feature.  Every time we find a closer\n  // feature, we update the extent being searched so that any even closer\n  // feature must intersect it.  We continue until we run out of features.\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var closestFeature = null;\n  var closestPoint = [NaN, NaN];\n  var minSquaredDistance = Infinity;\n  var extent = [-Infinity, -Infinity, Infinity, Infinity];\n  var filter = opt_filter ? opt_filter : TRUE;\n  this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {module:ol/Feature} feature Feature.\n     */\n    function(feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(\n          x, y, closestPoint, minSquaredDistance);\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature;\n          // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n  return closestFeature;\n};\n\n\n/**\n * Get the extent of the features currently in the source.\n *\n * This method is not available when the source is configured with\n * `useSpatialIndex` set to `false`.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent. If provided, no new extent\n *     will be created. Instead, that extent's coordinates will be overwritten.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\nVectorSource.prototype.getExtent = function(opt_extent) {\n  return this.featuresRtree_.getExtent(opt_extent);\n};\n\n\n/**\n * Get a feature by its identifier (the value returned by feature.getId()).\n * Note that the index treats string and numeric identifiers as the same.  So\n * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n *\n * @param {string|number} id Feature identifier.\n * @return {module:ol/Feature} The feature (or `null` if not found).\n * @api\n */\nVectorSource.prototype.getFeatureById = function(id) {\n  var feature = this.idIndex_[id.toString()];\n  return feature !== undefined ? feature : null;\n};\n\n\n/**\n * Get the format associated with this source.\n *\n * @return {module:ol/format/Feature|undefined} The feature format.\n * @api\n */\nVectorSource.prototype.getFormat = function() {\n  return this.format_;\n};\n\n\n/**\n * @return {boolean} The source can have overlapping geometries.\n */\nVectorSource.prototype.getOverlaps = function() {\n  return this.overlaps_;\n};\n\n\n/**\n * @override\n */\nVectorSource.prototype.getResolutions = function() {};\n\n\n/**\n * Get the url associated with this source.\n *\n * @return {string|module:ol/featureloader~FeatureUrlFunction|undefined} The url.\n * @api\n */\nVectorSource.prototype.getUrl = function() {\n  return this.url_;\n};\n\n\n/**\n * @param {module:ol/events/Event} event Event.\n * @private\n */\nVectorSource.prototype.handleFeatureChange_ = function(event) {\n  var feature = /** @type {module:ol/Feature} */ (event.target);\n  var featureKey = getUid(feature).toString();\n  var geometry = feature.getGeometry();\n  if (!geometry) {\n    if (!(featureKey in this.nullGeometryFeatures_)) {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n  } else {\n    var extent = geometry.getExtent();\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.update(extent, feature);\n      }\n    }\n  }\n  var id = feature.getId();\n  if (id !== undefined) {\n    var sid = id.toString();\n    if (featureKey in this.undefIdIndex_) {\n      delete this.undefIdIndex_[featureKey];\n      this.idIndex_[sid] = feature;\n    } else {\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    }\n  } else {\n    if (!(featureKey in this.undefIdIndex_)) {\n      this.removeFromIdIndex_(feature);\n      this.undefIdIndex_[featureKey] = feature;\n    }\n  }\n  this.changed();\n  this.dispatchEvent(new VectorSourceEvent(\n    VectorEventType.CHANGEFEATURE, feature));\n};\n\n/**\n * Returns true if the feature is contained within the source.\n * @param {module:ol/Feature} feature Feature.\n * @return {boolean} Has feature.\n * @api\n */\nVectorSource.prototype.hasFeature = function(feature) {\n  var id = feature.getId();\n  if (id !== undefined) {\n    return id in this.idIndex_;\n  } else {\n    var featureKey = getUid(feature).toString();\n    return featureKey in this.undefIdIndex_;\n  }\n};\n\n/**\n * @return {boolean} Is empty.\n */\nVectorSource.prototype.isEmpty = function() {\n  return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n};\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {module:ol/proj/Projection} projection Projection.\n */\nVectorSource.prototype.loadFeatures = function(extent, resolution, projection) {\n  var this$1 = this;\n\n  var loadedExtentsRtree = this.loadedExtentsRtree_;\n  var extentsToLoad = this.strategy_(extent, resolution);\n  var loop = function ( i, ii ) {\n    var extentToLoad = extentsToLoad[i];\n    var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: module:ol/extent~Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function(object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n    if (!alreadyLoaded) {\n      this$1.loader_.call(this$1, extentToLoad, resolution, projection);\n      loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n    }\n  };\n\n  for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) loop( i, ii );\n};\n\n\n/**\n * Remove an extent from the list of loaded extents.\n * @param {module:ol/extent~Extent} extent Extent.\n * @api\n */\nVectorSource.prototype.removeLoadedExtent = function(extent) {\n  var loadedExtentsRtree = this.loadedExtentsRtree_;\n  var obj;\n  loadedExtentsRtree.forEachInExtent(extent, function(object) {\n    if (equals(object.extent, extent)) {\n      obj = object;\n      return true;\n    }\n  });\n  if (obj) {\n    loadedExtentsRtree.remove(obj);\n  }\n};\n\n\n/**\n * Remove a single feature from the source.  If you want to remove all features\n * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n * instead.\n * @param {module:ol/Feature} feature Feature to remove.\n * @api\n */\nVectorSource.prototype.removeFeature = function(feature) {\n  var featureKey = getUid(feature).toString();\n  if (featureKey in this.nullGeometryFeatures_) {\n    delete this.nullGeometryFeatures_[featureKey];\n  } else {\n    if (this.featuresRtree_) {\n      this.featuresRtree_.remove(feature);\n    }\n  }\n  this.removeFeatureInternal(feature);\n  this.changed();\n};\n\n\n/**\n * Remove feature without firing a `change` event.\n * @param {module:ol/Feature} feature Feature.\n * @protected\n */\nVectorSource.prototype.removeFeatureInternal = function(feature) {\n  var featureKey = getUid(feature).toString();\n  this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n  delete this.featureChangeKeys_[featureKey];\n  var id = feature.getId();\n  if (id !== undefined) {\n    delete this.idIndex_[id.toString()];\n  } else {\n    delete this.undefIdIndex_[featureKey];\n  }\n  this.dispatchEvent(new VectorSourceEvent(\n    VectorEventType.REMOVEFEATURE, feature));\n};\n\n\n/**\n * Remove a feature from the id index.  Called internally when the feature id\n * may have changed.\n * @param {module:ol/Feature} feature The feature.\n * @return {boolean} Removed the feature from the index.\n * @private\n */\nVectorSource.prototype.removeFromIdIndex_ = function(feature) {\n  var this$1 = this;\n\n  var removed = false;\n  for (var id in this$1.idIndex_) {\n    if (this$1.idIndex_[id] === feature) {\n      delete this$1.idIndex_[id];\n      removed = true;\n      break;\n    }\n  }\n  return removed;\n};\n\n\n/**\n * Set the new loader of the source. The next loadFeatures call will use the\n * new loader.\n * @param {module:ol/featureloader~FeatureLoader} loader The loader to set.\n * @api\n */\nVectorSource.prototype.setLoader = function(loader) {\n  this.loader_ = loader;\n};\n\nexport default VectorSource;\n\n//# sourceMappingURL=Vector.js.map"]},"metadata":{},"sourceType":"module"}
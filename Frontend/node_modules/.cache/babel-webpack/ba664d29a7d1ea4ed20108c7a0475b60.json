{"ast":null,"code":"/**\n * @module ol/layer/Tile\n */\nimport LayerType from '../LayerType.js';\nimport Layer from '../layer/Layer.js';\nimport TileProperty from '../layer/TileProperty.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {module:ol/source/Tile} [source] Source for this layer.\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\n\nvar TileLayer = function (Layer) {\n  function TileLayer(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    Layer.call(this, baseOptions);\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n    /**\n    * The layer type.\n    * @protected\n    * @type {module:ol/LayerType}\n    */\n\n    this.type = LayerType.TILE;\n  }\n\n  if (Layer) TileLayer.__proto__ = Layer;\n  TileLayer.prototype = Object.create(Layer && Layer.prototype);\n  TileLayer.prototype.constructor = TileLayer;\n  /**\n  * Return the level as number to which we will preload tiles up to.\n  * @return {number} The level to preload tiles up to.\n  * @observable\n  * @api\n  */\n\n  TileLayer.prototype.getPreload = function getPreload() {\n    return (\n      /** @type {number} */\n      this.get(TileProperty.PRELOAD)\n    );\n  };\n  /**\n  * Set the level as number to which we will preload tiles up to.\n  * @param {number} preload The level to preload tiles up to.\n  * @observable\n  * @api\n  */\n\n\n  TileLayer.prototype.setPreload = function setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  };\n  /**\n  * Whether we use interim tiles on error.\n  * @return {boolean} Use interim tiles on error.\n  * @observable\n  * @api\n  */\n\n\n  TileLayer.prototype.getUseInterimTilesOnError = function getUseInterimTilesOnError() {\n    return (\n      /** @type {boolean} */\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  };\n  /**\n  * Set whether we use interim tiles on error.\n  * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n  * @observable\n  * @api\n  */\n\n\n  TileLayer.prototype.setUseInterimTilesOnError = function setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  };\n\n  return TileLayer;\n}(Layer);\n/**\n * Return the associated {@link module:ol/source/Tile tilesource} of the layer.\n * @function\n * @return {module:ol/source/Tile} Source.\n * @api\n */\n\n\nTileLayer.prototype.getSource;\nexport default TileLayer; //# sourceMappingURL=Tile.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/layer/tile.js"],"names":["LayerType","Layer","TileProperty","assign","TileLayer","opt_options","options","baseOptions","preload","useInterimTilesOnError","call","setPreload","undefined","setUseInterimTilesOnError","type","TILE","__proto__","prototype","Object","create","constructor","getPreload","get","PRELOAD","set","getUseInterimTilesOnError","USE_INTERIM_TILES_ON_ERROR","getSource"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAAQC,MAAR,QAAqB,WAArB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAI,UAAUH,KAAV,EAAiB;AAChC,WAASG,SAAT,CAAmBC,WAAnB,EAAgC;AAC9B,QAAIC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA1C;AAEA,QAAIE,WAAW,GAAGJ,MAAM,CAAC,EAAD,EAAKG,OAAL,CAAxB;AAEA,WAAOC,WAAW,CAACC,OAAnB;AACA,WAAOD,WAAW,CAACE,sBAAnB;AACAR,IAAAA,KAAK,CAACS,IAAN,CAAW,IAAX,EAAiBH,WAAjB;AAEA,SAAKI,UAAL,CAAgBL,OAAO,CAACE,OAAR,KAAoBI,SAApB,GAAgCN,OAAO,CAACE,OAAxC,GAAkD,CAAlE;AACA,SAAKK,yBAAL,CAA+BP,OAAO,CAACG,sBAAR,KAAmCG,SAAnC,GAC7BN,OAAO,CAACG,sBADqB,GACI,IADnC;AAGA;AACJ;AACA;AACA;AACA;;AACI,SAAKK,IAAL,GAAYd,SAAS,CAACe,IAAtB;AAED;;AAED,MAAKd,KAAL,EAAaG,SAAS,CAACY,SAAV,GAAsBf,KAAtB;AACbG,EAAAA,SAAS,CAACa,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAelB,KAAK,IAAIA,KAAK,CAACgB,SAA9B,CAAtB;AACAb,EAAAA,SAAS,CAACa,SAAV,CAAoBG,WAApB,GAAkChB,SAAlC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACEA,EAAAA,SAAS,CAACa,SAAV,CAAoBI,UAApB,GAAiC,SAASA,UAAT,GAAuB;AACtD;AAAO;AAAuB,WAAKC,GAAL,CAASpB,YAAY,CAACqB,OAAtB;AAA9B;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AACEnB,EAAAA,SAAS,CAACa,SAAV,CAAoBN,UAApB,GAAiC,SAASA,UAAT,CAAqBH,OAArB,EAA8B;AAC7D,SAAKgB,GAAL,CAAStB,YAAY,CAACqB,OAAtB,EAA+Bf,OAA/B;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AACEJ,EAAAA,SAAS,CAACa,SAAV,CAAoBQ,yBAApB,GAAgD,SAASA,yBAAT,GAAsC;AACpF;AAAO;AAAwB,WAAKH,GAAL,CAASpB,YAAY,CAACwB,0BAAtB;AAA/B;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AACEtB,EAAAA,SAAS,CAACa,SAAV,CAAoBJ,yBAApB,GAAgD,SAASA,yBAAT,CAAoCJ,sBAApC,EAA4D;AAC1G,SAAKe,GAAL,CAAStB,YAAY,CAACwB,0BAAtB,EAAkDjB,sBAAlD;AACD,GAFD;;AAIA,SAAOL,SAAP;AACD,CApEgB,CAoEfH,KApEe,CAAjB;AAuEA;AACA;AACA;AACA;AACA;AACA;;;AACAG,SAAS,CAACa,SAAV,CAAoBU,SAApB;AAGA,eAAevB,SAAf,C,CAEA","sourcesContent":["/**\n * @module ol/layer/Tile\n */\nimport LayerType from '../LayerType.js';\nimport Layer from '../layer/Layer.js';\nimport TileProperty from '../layer/TileProperty.js';\nimport {assign} from '../obj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {module:ol/source/Tile} [source] Source for this layer.\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\nvar TileLayer = (function (Layer) {\n  function TileLayer(opt_options) {\n    var options = opt_options ? opt_options : {};\n\n    var baseOptions = assign({}, options);\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    Layer.call(this, baseOptions);\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?\n      options.useInterimTilesOnError : true);\n\n    /**\n    * The layer type.\n    * @protected\n    * @type {module:ol/LayerType}\n    */\n    this.type = LayerType.TILE;\n\n  }\n\n  if ( Layer ) TileLayer.__proto__ = Layer;\n  TileLayer.prototype = Object.create( Layer && Layer.prototype );\n  TileLayer.prototype.constructor = TileLayer;\n\n  /**\n  * Return the level as number to which we will preload tiles up to.\n  * @return {number} The level to preload tiles up to.\n  * @observable\n  * @api\n  */\n  TileLayer.prototype.getPreload = function getPreload () {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  };\n\n  /**\n  * Set the level as number to which we will preload tiles up to.\n  * @param {number} preload The level to preload tiles up to.\n  * @observable\n  * @api\n  */\n  TileLayer.prototype.setPreload = function setPreload (preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  };\n\n  /**\n  * Whether we use interim tiles on error.\n  * @return {boolean} Use interim tiles on error.\n  * @observable\n  * @api\n  */\n  TileLayer.prototype.getUseInterimTilesOnError = function getUseInterimTilesOnError () {\n    return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));\n  };\n\n  /**\n  * Set whether we use interim tiles on error.\n  * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n  * @observable\n  * @api\n  */\n  TileLayer.prototype.setUseInterimTilesOnError = function setUseInterimTilesOnError (useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  };\n\n  return TileLayer;\n}(Layer));\n\n\n/**\n * Return the associated {@link module:ol/source/Tile tilesource} of the layer.\n * @function\n * @return {module:ol/source/Tile} Source.\n * @api\n */\nTileLayer.prototype.getSource;\n\n\nexport default TileLayer;\n\n//# sourceMappingURL=Tile.js.map"]},"metadata":{},"sourceType":"module"}
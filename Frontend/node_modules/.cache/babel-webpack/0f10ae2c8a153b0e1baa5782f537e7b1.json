{"ast":null,"code":"import _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, ScrollDispatcher, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Animations used by MatTooltip.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/layout';\nimport * as ɵngcc6 from '@angular/common';\nvar\n/** @type {?} */\nmatTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')), transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\n\nvar\n/** @type {?} */\nSCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\n\nvar\n/** @type {?} */\nTOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\n\n\nvar\n/** @type {?} */\nMAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/**\n * \\@docs-private\n */\n\n\nvar\n/** @type {?} */\nMAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n */\n\nvar\n/** @type {?} */\nMAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n\n\nvar MatTooltip = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _elementRef\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _ngZone\n   * @param {?} _platform\n   * @param {?} _ariaDescriber\n   * @param {?} _focusMonitor\n   * @param {?} _scrollStrategy\n   * @param {?} _dir\n   * @param {?} _defaultOptions\n   */\n  function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, _scrollStrategy, _dir, _defaultOptions) {\n    var _this = this;\n\n    _classCallCheck(this, MatTooltip);\n\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._scrollStrategy = _scrollStrategy;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    this._message = '';\n    this._manualListeners = new Map();\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    var\n    /** @type {?} */\n    element = _elementRef.nativeElement; // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', function () {\n        return _this.show();\n      });\n\n      this._manualListeners.set('mouseleave', function () {\n        return _this.hide();\n      });\n\n      this._manualListeners.forEach(function (listener, event) {\n        return _elementRef.nativeElement.addEventListener(event, listener);\n      });\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    } // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n\n\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(function () {\n          return _this.hide(0);\n        });\n      } else if (origin === 'keyboard') {\n        _ngZone.run(function () {\n          return _this.show();\n        });\n      }\n    });\n  }\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element\n   * @return {?}\n   */\n\n\n  _createClass(MatTooltip, [{\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== this._position) {\n        this._position = value;\n\n        if (this._overlayRef) {\n          this._updatePosition();\n\n          if (this._tooltipInstance) {\n            /** @type {?} */\n            this._tooltipInstance.show(0);\n          }\n\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n      if (this._disabled) {\n        this.hide(0);\n      }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n\n  }, {\n    key: \"message\",\n    get: function get() {\n      return this._message;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n\n\n      this._message = value != null ? \"\".concat(value).trim() : '';\n\n      if (!this._message && this._isTooltipVisible()) {\n        this.hide(0);\n      } else {\n        this._updateTooltipMessage();\n\n        this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n      }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"tooltipClass\",\n    get: function get() {\n      return this._tooltipClass;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._tooltipClass = value;\n\n      if (this._tooltipInstance) {\n        this._setTooltipClass(this._tooltipClass);\n      }\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this2 = this;\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._tooltipInstance = null;\n      } // Clean up the event listeners set in the constructor\n\n\n      if (!this._platform.IOS) {\n        this._manualListeners.forEach(function (listener, event) {\n          return _this2._elementRef.nativeElement.removeEventListener(event, listener);\n        });\n\n        this._manualListeners.clear();\n      }\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this3 = this;\n\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n      if (this.disabled || !this.message) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      overlayRef = this._createOverlay();\n\n      this._detach();\n\n      this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n      this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n      this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this3._detach();\n      });\n\n      this._setTooltipClass(this._tooltipClass);\n\n      this._updateTooltipMessage();\n      /** @type {?} */\n\n\n      this._tooltipInstance.show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n      if (this._tooltipInstance) {\n        this._tooltipInstance.hide(delay);\n      }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isTooltipVisible\",\n    value: function _isTooltipVisible() {\n      return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(e) {\n      if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n        e.stopPropagation();\n        this.hide(0);\n      }\n    }\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleTouchend\",\n    value: function _handleTouchend() {\n      this.hide(this._defaultOptions.touchendHideDelay);\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this4 = this;\n\n      if (this._overlayRef) {\n        return this._overlayRef;\n      } // Create connected position strategy that listens for scroll events to reposition.\n\n\n      var\n      /** @type {?} */\n      strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8);\n\n      var\n      /** @type {?} */\n      scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n      strategy.withScrollableContainers(scrollableAncestors);\n      strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n        if (_this4._tooltipInstance) {\n          if (change.scrollableViewProperties.isOverlayClipped && _this4._tooltipInstance.isVisible()) {\n            // After position changes occur and the overlay is clipped by\n            // a parent scrollable then close the tooltip.\n            _this4._ngZone.run(function () {\n              return _this4.hide(0);\n            });\n          }\n        }\n      });\n      this._overlayRef = this._overlay.create({\n        direction: this._dir,\n        positionStrategy: strategy,\n        panelClass: TOOLTIP_PANEL_CLASS,\n        scrollStrategy: this._scrollStrategy()\n      });\n\n      this._updatePosition();\n\n      this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this4._detach();\n      });\n\n      return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n\n      this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition() {\n      var\n      /** @type {?} */\n      position =\n      /** @type {?} */\n      this._overlayRef.getConfig().positionStrategy;\n\n      var\n      /** @type {?} */\n      origin = this._getOrigin();\n\n      var\n      /** @type {?} */\n      overlay = this._getOverlayPosition();\n\n      position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOrigin\",\n    value: function _getOrigin() {\n      var\n      /** @type {?} */\n      isLtr = !this._dir || this._dir.value == 'ltr';\n      var\n      /** @type {?} */\n      position = this.position;\n      var\n      /** @type {?} */\n      originPosition;\n\n      if (position == 'above' || position == 'below') {\n        originPosition = {\n          originX: 'center',\n          originY: position == 'above' ? 'top' : 'bottom'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        originPosition = {\n          originX: 'start',\n          originY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        originPosition = {\n          originX: 'end',\n          originY: 'center'\n        };\n      } else {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n          x = _this$_invertPosition.x,\n          y = _this$_invertPosition.y;\n\n      return {\n        main: originPosition,\n        fallback: {\n          originX: x,\n          originY: y\n        }\n      };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var\n      /** @type {?} */\n      isLtr = !this._dir || this._dir.value == 'ltr';\n      var\n      /** @type {?} */\n      position = this.position;\n      var\n      /** @type {?} */\n      overlayPosition;\n\n      if (position == 'above') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'bottom'\n        };\n      } else if (position == 'below') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'top'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'end',\n          overlayY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'start',\n          overlayY: 'center'\n        };\n      } else {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n          x = _this$_invertPosition2.x,\n          y = _this$_invertPosition2.y;\n\n      return {\n        main: overlayPosition,\n        fallback: {\n          overlayX: x,\n          overlayY: y\n        }\n      };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTooltipMessage\",\n    value: function _updateTooltipMessage() {\n      var _this5 = this;\n\n      // Must wait for the message to be painted to the tooltip so that the overlay can properly\n      // calculate the correct positioning based on the size of the text.\n      if (this._tooltipInstance) {\n        this._tooltipInstance.message = this.message;\n\n        this._tooltipInstance._markForCheck();\n\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n          if (_this5._tooltipInstance) {\n            /** @type {?} */\n            _this5._overlayRef.updatePosition();\n          }\n        });\n      }\n    }\n    /**\n     * Updates the tooltip class\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTooltipClass\",\n    value: function _setTooltipClass(tooltipClass) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.tooltipClass = tooltipClass;\n\n        this._tooltipInstance._markForCheck();\n      }\n    }\n    /**\n     * Inverts an overlay position.\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n\n  }, {\n    key: \"_invertPosition\",\n    value: function _invertPosition(x, y) {\n      if (this.position === 'above' || this.position === 'below') {\n        if (y === 'top') {\n          y = 'bottom';\n        } else if (y === 'bottom') {\n          y = 'top';\n        }\n      } else {\n        if (x === 'end') {\n          x = 'start';\n        } else if (x === 'start') {\n          x = 'end';\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }]);\n\n  return MatTooltip;\n}();\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8));\n};\n\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() {\n        return ctx.show();\n      })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() {\n        return ctx._handleTouchend();\n      });\n    }\n  },\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n/** @nocollapse */\n\nMatTooltip.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: AriaDescriber\n  }, {\n    type: FocusMonitor\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatTooltip.propDecorators = {\n  \"position\": [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  \"disabled\": [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  \"showDelay\": [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  \"hideDelay\": [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  \"message\": [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  \"tooltipClass\": [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        '(longpress)': 'show()',\n        '(keydown)': '_handleKeydown($event)',\n        '(touchend)': '_handleTouchend()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: ɵngcc3.AriaDescriber\n    }, {\n      type: ɵngcc3.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\n\n\nvar TooltipComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _breakpointObserver\n   */\n  function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n    _classCallCheck(this, TooltipComponent);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     */\n\n    this._visibility = 'initial';\n    /**\n     * Whether interactions on the page should close the tooltip\n     */\n\n    this._closeOnInteraction = false;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     */\n\n    this._onHide = new Subject();\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n   * @return {?}\n   */\n\n\n  _createClass(TooltipComponent, [{\n    key: \"show\",\n    value: function show(delay) {\n      var _this6 = this;\n\n      // Cancel the delayed hide if it is scheduled\n      if (this._hideTimeoutId) {\n        clearTimeout(this._hideTimeoutId);\n      } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n      this._closeOnInteraction = true;\n      this._showTimeoutId = setTimeout(function () {\n        _this6._visibility = 'visible'; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this6._markForCheck();\n      }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide(delay) {\n      var _this7 = this;\n\n      // Cancel the delayed show if it is scheduled\n      if (this._showTimeoutId) {\n        clearTimeout(this._showTimeoutId);\n      }\n\n      this._hideTimeoutId = setTimeout(function () {\n        _this7._visibility = 'hidden'; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this7._markForCheck();\n      }, delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterHidden\",\n    value: function afterHidden() {\n      return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animationStart\",\n    value: function _animationStart() {\n      this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animationDone\",\n    value: function _animationDone(event) {\n      var\n      /** @type {?} */\n      toState =\n      /** @type {?} */\n      event.toState;\n\n      if (toState === 'hidden' && !this.isVisible()) {\n        this._onHide.next();\n      }\n\n      if (toState === 'visible' || toState === 'hidden') {\n        this._closeOnInteraction = true;\n      }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.google.com/components/tooltips.html#tooltips-interaction\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleBodyInteraction\",\n    value: function _handleBodyInteraction() {\n      if (this._closeOnInteraction) {\n        this.hide(0);\n      }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return TooltipComponent;\n}();\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset).matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [ɵngcc6.NgClass],\n  pipes: [ɵngcc6.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:2px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nTooltipComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: BreakpointObserver\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)!.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n      styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:2px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc5.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatTooltipModule = function MatTooltipModule() {\n  _classCallCheck(this, MatTooltipModule);\n};\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MatTooltip, TooltipComponent, matTooltipAnimations }; //# sourceMappingURL=tooltip.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/tooltip.js"],"names":["animate","state","style","transition","trigger","AriaDescriber","FocusMonitor","A11yModule","Directionality","coerceBooleanProperty","ESCAPE","BreakpointObserver","Breakpoints","Overlay","ScrollDispatcher","OverlayModule","Platform","ComponentPortal","take","takeUntil","ChangeDetectionStrategy","ChangeDetectorRef","Component","Directive","ElementRef","Inject","InjectionToken","Input","NgZone","Optional","ViewContainerRef","ViewEncapsulation","NgModule","Subject","CommonModule","MatCommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","matTooltipAnimations","tooltipState","transform","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_scrollStrategy","_dir","_defaultOptions","_position","_disabled","_message","_manualListeners","Map","_destroyed","element","nativeElement","IOS","set","show","hide","forEach","listener","event","addEventListener","nodeName","webkitUserSelect","userSelect","draggable","monitor","pipe","subscribe","origin","run","value","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","message","_tooltipClass","_setTooltipClass","dispose","removeEventListener","clear","next","complete","stopMonitoring","delay","disabled","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","isVisible","e","keyCode","stopPropagation","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","scrollStrategy","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","tooltipClass","ɵfac","MatTooltip_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","MatTooltip_HostBindings","rf","ctx","ɵɵlistener","MatTooltip_longpress_HostBindingHandler","MatTooltip_keydown_HostBindingHandler","$event","_handleKeydown","MatTooltip_touchend_HostBindingHandler","_handleTouchend","inputs","exportAs","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","_hideTimeoutId","clearTimeout","_showTimeoutId","setTimeout","toState","markForCheck","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","TooltipComponent_HostBindings","TooltipComponent_click_HostBindingHandler","_handleBodyInteraction","ɵɵresolveBody","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","_animationStart","TooltipComponent_Template_div_animation_state_done_0_listener","_animationDone","ɵɵpipe","ɵɵtext","ɵɵelementEnd","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","directives","NgClass","pipes","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","entryComponents"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,OAA5C,QAA2D,qBAA3D;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,UAAtC,QAAwD,mBAAxD;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,qBAAhD;AACA,SAASC,OAAT,EAAkBC,gBAAlB,EAAoCC,aAApC,QAAyD,sBAAzD;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,gBAAhC;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,EAAqDC,SAArD,EAAgEC,SAAhE,EAA2EC,UAA3E,EAAuFC,MAAvF,EAA+FC,cAA/F,EAA+GC,KAA/G,EAAsHC,MAAtH,EAA8HC,QAA9H,EAAwIC,gBAAxI,EAA0JC,iBAA1J,EAA6KC,QAA7K,QAA6L,eAA7L;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,qBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AACA;AAAM;AAAiBC,oBAAoB,GAAG;AAC1C;AACAC,EAAAA,YAAY,EAAExC,OAAO,CAAC,OAAD,EAAU,CAC3BH,KAAK,CAAC,uBAAD,EAA0BC,KAAK,CAAC;AAAE2C,IAAAA,SAAS,EAAE;AAAb,GAAD,CAA/B,CADsB,EAE3B5C,KAAK,CAAC,SAAD,EAAYC,KAAK,CAAC;AAAE2C,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAjB,CAFsB,EAG3B1C,UAAU,CAAC,cAAD,EAAiBH,OAAO,CAAC,sCAAD,CAAxB,CAHiB,EAI3BG,UAAU,CAAC,aAAD,EAAgBH,OAAO,CAAC,oCAAD,CAAvB,CAJiB,CAAV;AAFqB,CAA9C;AAUA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AAAM;AAAiB8C,kBAAkB,GAAG,EAA5C;AACA;AACA;AACA;;AACA;AAAM;AAAiBC,mBAAmB,GAAG,mBAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iCAAT,CAA2CC,QAA3C,EAAqD;AACjD,SAAOC,KAAK,8BAAsBD,QAAtB,oBAAZ;AACH;AACD;AACA;AACA;;;AACA;AAAM;AAAiBE,2BAA2B,GAAG,IAAIzB,cAAJ,CAAmB,6BAAnB,CAArD;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS0B,mCAAT,CAA6CC,OAA7C,EAAsD;AAClD,SAAO;AAAA,WAAMA,OAAO,CAACC,gBAAR,CAAyBC,UAAzB,CAAoC;AAAEC,MAAAA,cAAc,EAAEV;AAAlB,KAApC,CAAN;AAAA,GAAP;AACH;AACD;AACA;AACA;;;AACA;AAAM;AAAiBW,4CAA4C,GAAG;AAClEC,EAAAA,OAAO,EAAEP,2BADyD;AAElEQ,EAAAA,IAAI,EAAE,CAAC9C,OAAD,CAF4D;AAGlE+C,EAAAA,UAAU,EAAER;AAHsD,CAAtE;AAKA;AACA;AACA;;AACA;AAAM;AAAiBS,2BAA2B,GAAG,IAAInC,cAAJ,CAAmB,6BAAnB,EAAkD;AACnGoC,EAAAA,UAAU,EAAE,MADuF;AAEnGC,EAAAA,OAAO,EAAEC;AAF0F,CAAlD,CAArD;AAIA;AACA;AACA;;AACA,SAASA,mCAAT,GAA+C;AAC3C,SAAO;AACHC,IAAAA,SAAS,EAAE,CADR;AAEHC,IAAAA,SAAS,EAAE,CAFR;AAGHC,IAAAA,iBAAiB,EAAE;AAHhB,GAAP;AAKH;AACD;AACA;AACA;AACA;AACA;AACA;;;IACMC,U;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,sBAAYC,QAAZ,EAAsBC,WAAtB,EAAmCC,iBAAnC,EAAsDC,iBAAtD,EAAyEC,OAAzE,EAAkFC,SAAlF,EAA6FC,cAA7F,EAA6GC,aAA7G,EAA4HC,eAA5H,EAA6IC,IAA7I,EAAmJC,eAAnJ,EAAoK;AAAA;;AAAA;;AAChK,SAAKV,QAAL,GAAgBA,QAAhB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,SAAL,GAAiB,OAAjB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;;AACQ,SAAKhB,SAAL,GAAiB,KAAKc,eAAL,CAAqBd,SAAtC;AACA;AACR;AACA;;AACQ,SAAKC,SAAL,GAAiB,KAAKa,eAAL,CAAqBb,SAAtC;AACA,SAAKgB,QAAL,GAAgB,EAAhB;AACA,SAAKC,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;AACA;AACR;AACA;;AACQ,SAAKC,UAAL,GAAkB,IAAIpD,OAAJ,EAAlB;AACA;AAAM;AAAiBqD,IAAAA,OAAO,GAAGhB,WAAW,CAACiB,aAA7C,CA5BgK,CA6BhK;AACA;;AACA,QAAI,CAACb,SAAS,CAACc,GAAf,EAAoB;AAChB,WAAKL,gBAAL,CAAsBM,GAAtB,CAA0B,YAA1B,EAAwC;AAAA,eAAM,KAAI,CAACC,IAAL,EAAN;AAAA,OAAxC;;AACA,WAAKP,gBAAL,CAAsBM,GAAtB,CAA0B,YAA1B,EAAwC;AAAA,eAAM,KAAI,CAACE,IAAL,EAAN;AAAA,OAAxC;;AACA,WAAKR,gBAAL,CACKS,OADL,CACa,UAACC,QAAD,EAAWC,KAAX;AAAA,eAAqBxB,WAAW,CAACiB,aAAZ,CAA0BQ,gBAA1B,CAA2CD,KAA3C,EAAkDD,QAAlD,CAArB;AAAA,OADb;AAEH,KALD,MAMK,IAAIP,OAAO,CAACU,QAAR,KAAqB,OAArB,IAAgCV,OAAO,CAACU,QAAR,KAAqB,UAAzD,EAAqE;AACtE;AACA;AACA;AACA;AACA;AACAV,MAAAA,OAAO,CAACpF,KAAR,CAAc+F,gBAAd,GAAiCX,OAAO,CAACpF,KAAR,CAAcgG,UAAd,GAA2B,EAA5D;AACH,KA5C+J,CA6ChK;AACA;AACA;;;AACA,QAAIZ,OAAO,CAACa,SAAR,IAAqBb,OAAO,CAACpF,KAAR,CAAc,gBAAd,MAAoC,MAA7D,EAAqE;AACjEoF,MAAAA,OAAO,CAACpF,KAAR,CAAc,gBAAd,IAAkC,EAAlC;AACH;;AACD0E,IAAAA,aAAa,CAACwB,OAAd,CAAsBd,OAAtB,EAA+Be,IAA/B,CAAoClF,SAAS,CAAC,KAAKkE,UAAN,CAA7C,EAAgEiB,SAAhE,CAA0E,UAAAC,MAAM,EAAI;AAChF;AACA,UAAI,CAACA,MAAL,EAAa;AACT9B,QAAAA,OAAO,CAAC+B,GAAR,CAAY;AAAA,iBAAM,KAAI,CAACb,IAAL,CAAU,CAAV,CAAN;AAAA,SAAZ;AACH,OAFD,MAGK,IAAIY,MAAM,KAAK,UAAf,EAA2B;AAC5B9B,QAAAA,OAAO,CAAC+B,GAAR,CAAY;AAAA,iBAAM,KAAI,CAACd,IAAL,EAAN;AAAA,SAAZ;AACH;AACJ,KARD;AASH;AACD;AACJ;AACA;AACA;;;;;SACI,eAAe;AAAE,aAAO,KAAKV,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAayB,KAAb,EAAoB;AAChB,UAAIA,KAAK,KAAK,KAAKzB,SAAnB,EAA8B;AAC1B,aAAKA,SAAL,GAAiByB,KAAjB;;AACA,YAAI,KAAKC,WAAT,EAAsB;AAClB,eAAKC,eAAL;;AACA,cAAI,KAAKC,gBAAT,EAA2B;AACvB;AAAmB,iBAAKA,gBAAP,CAA0BlB,IAA1B,CAA+B,CAA/B;AACpB;;AACD,eAAKgB,WAAL,CAAiBG,cAAjB;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAK5B,SAAZ;AAAwB;AACzC;AACJ;AACA;AACA;;SACI,aAAawB,KAAb,EAAoB;AAChB,WAAKxB,SAAL,GAAiBxE,qBAAqB,CAACgG,KAAD,CAAtC,CADgB,CAEhB;;AACA,UAAI,KAAKxB,SAAT,EAAoB;AAChB,aAAKU,IAAL,CAAU,CAAV;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAc;AAAE,aAAO,KAAKT,QAAZ;AAAuB;AACvC;AACJ;AACA;AACA;;SACI,aAAYuB,KAAZ,EAAmB;AACf,WAAK9B,cAAL,CAAoBmC,iBAApB,CAAsC,KAAKxC,WAAL,CAAiBiB,aAAvD,EAAsE,KAAKL,QAA3E,EADe,CAEf;;;AACA,WAAKA,QAAL,GAAgBuB,KAAK,IAAI,IAAT,GAAgB,UAAGA,KAAH,EAAWM,IAAX,EAAhB,GAAoC,EAApD;;AACA,UAAI,CAAC,KAAK7B,QAAN,IAAkB,KAAK8B,iBAAL,EAAtB,EAAgD;AAC5C,aAAKrB,IAAL,CAAU,CAAV;AACH,OAFD,MAGK;AACD,aAAKsB,qBAAL;;AACA,aAAKtC,cAAL,CAAoBuC,QAApB,CAA6B,KAAK5C,WAAL,CAAiBiB,aAA9C,EAA6D,KAAK4B,OAAlE;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAmB;AAAE,aAAO,KAAKC,aAAZ;AAA4B;AACjD;AACJ;AACA;AACA;;SACI,aAAiBX,KAAjB,EAAwB;AACpB,WAAKW,aAAL,GAAqBX,KAArB;;AACA,UAAI,KAAKG,gBAAT,EAA2B;AACvB,aAAKS,gBAAL,CAAsB,KAAKD,aAA3B;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,uBAAc;AAAA;;AACV,UAAI,KAAKV,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBY,OAAjB;;AACA,aAAKV,gBAAL,GAAwB,IAAxB;AACH,OAJS,CAKV;;;AACA,UAAI,CAAC,KAAKlC,SAAL,CAAec,GAApB,EAAyB;AACrB,aAAKL,gBAAL,CAAsBS,OAAtB,CAA8B,UAACC,QAAD,EAAWC,KAAX;AAAA,iBAAqB,MAAI,CAACxB,WAAL,CAAiBiB,aAAjB,CAA+BgC,mBAA/B,CAAmDzB,KAAnD,EAA0DD,QAA1D,CAArB;AAAA,SAA9B;;AACA,aAAKV,gBAAL,CAAsBqC,KAAtB;AACH;;AACD,WAAKnC,UAAL,CAAgBoC,IAAhB;;AACA,WAAKpC,UAAL,CAAgBqC,QAAhB;;AACA,WAAK/C,cAAL,CAAoBmC,iBAApB,CAAsC,KAAKxC,WAAL,CAAiBiB,aAAvD,EAAsE,KAAK4B,OAA3E;;AACA,WAAKvC,aAAL,CAAmB+C,cAAnB,CAAkC,KAAKrD,WAAL,CAAiBiB,aAAnD;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,gBAA6B;AAAA;;AAAA,UAAxBqC,KAAwB,uEAAhB,KAAK3D,SAAW;;AACzB,UAAI,KAAK4D,QAAL,IAAiB,CAAC,KAAKV,OAA3B,EAAoC;AAChC;AACH;;AACD;AAAM;AAAiBW,MAAAA,UAAU,GAAG,KAAKC,cAAL,EAApC;;AACA,WAAKC,OAAL;;AACA,WAAKC,OAAL,GAAe,KAAKA,OAAL,IAAgB,IAAIhH,eAAJ,CAAoBiH,gBAApB,EAAsC,KAAK1D,iBAA3C,CAA/B;AACA,WAAKoC,gBAAL,GAAwBkB,UAAU,CAACK,MAAX,CAAkB,KAAKF,OAAvB,EAAgCG,QAAxD;;AACA,WAAKxB,gBAAL,CAAsByB,WAAtB,GACKhC,IADL,CACUlF,SAAS,CAAC,KAAKkE,UAAN,CADnB,EAEKiB,SAFL,CAEe;AAAA,eAAM,MAAI,CAAC0B,OAAL,EAAN;AAAA,OAFf;;AAGA,WAAKX,gBAAL,CAAsB,KAAKD,aAA3B;;AACA,WAAKH,qBAAL;AAA8B;;;AAC5B,WAAKL,gBAAP,CAA0BlB,IAA1B,CAA+BkC,KAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,gBAA6B;AAAA,UAAxBA,KAAwB,uEAAhB,KAAK1D,SAAW;;AACzB,UAAI,KAAK0C,gBAAT,EAA2B;AACvB,aAAKA,gBAAL,CAAsBjB,IAAtB,CAA2BiC,KAA3B;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,kBAAS;AACL,WAAKZ,iBAAL,KAA2B,KAAKrB,IAAL,EAA3B,GAAyC,KAAKD,IAAL,EAAzC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,6BAAoB;AAChB,aAAO,CAAC,CAAC,KAAKkB,gBAAP,IAA2B,KAAKA,gBAAL,CAAsB0B,SAAtB,EAAlC;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAeC,CAAf,EAAkB;AACd,UAAI,KAAKvB,iBAAL,MAA4BuB,CAAC,CAACC,OAAF,KAAc9H,MAA9C,EAAsD;AAClD6H,QAAAA,CAAC,CAACE,eAAF;AACA,aAAK9C,IAAL,CAAU,CAAV;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkB;AACd,WAAKA,IAAL,CAAU,KAAKZ,eAAL,CAAqBZ,iBAA/B;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiB;AAAA;;AACb,UAAI,KAAKuC,WAAT,EAAsB;AAClB,eAAO,KAAKA,WAAZ;AACH,OAHY,CAIb;;;AACA;AAAM;AAAiBgC,MAAAA,QAAQ,GAAG,KAAKrE,QAAL,CAAcpB,QAAd,GAC7B0F,mBAD6B,CACT,KAAKrE,WADI,EAE7BsE,qBAF6B,CAEP,cAFO,EAG7BC,sBAH6B,CAGN,KAHM,EAI7BC,kBAJ6B,CAIV,CAJU,CAAlC;;AAKA;AAAM;AAAiBC,MAAAA,mBAAmB,GAAG,KAAKxE,iBAAL,CACxCyE,2BADwC,CACZ,KAAK1E,WADO,CAA7C;;AAEAoE,MAAAA,QAAQ,CAACO,wBAAT,CAAkCF,mBAAlC;AACAL,MAAAA,QAAQ,CAACQ,eAAT,CAAyB7C,IAAzB,CAA8BlF,SAAS,CAAC,KAAKkE,UAAN,CAAvC,EAA0DiB,SAA1D,CAAoE,UAAA6C,MAAM,EAAI;AAC1E,YAAI,MAAI,CAACvC,gBAAT,EAA2B;AACvB,cAAIuC,MAAM,CAACC,wBAAP,CAAgCC,gBAAhC,IAAoD,MAAI,CAACzC,gBAAL,CAAsB0B,SAAtB,EAAxD,EAA2F;AACvF;AACA;AACA,YAAA,MAAI,CAAC7D,OAAL,CAAa+B,GAAb,CAAiB;AAAA,qBAAM,MAAI,CAACb,IAAL,CAAU,CAAV,CAAN;AAAA,aAAjB;AACH;AACJ;AACJ,OARD;AASA,WAAKe,WAAL,GAAmB,KAAKrC,QAAL,CAAciF,MAAd,CAAqB;AACpCC,QAAAA,SAAS,EAAE,KAAKzE,IADoB;AAEpC0E,QAAAA,gBAAgB,EAAEd,QAFkB;AAGpCe,QAAAA,UAAU,EAAE1G,mBAHwB;AAIpC2G,QAAAA,cAAc,EAAE,KAAK7E,eAAL;AAJoB,OAArB,CAAnB;;AAMA,WAAK8B,eAAL;;AACA,WAAKD,WAAL,CAAiBiD,WAAjB,GACKtD,IADL,CACUlF,SAAS,CAAC,KAAKkE,UAAN,CADnB,EAEKiB,SAFL,CAEe;AAAA,eAAM,MAAI,CAAC0B,OAAL,EAAN;AAAA,OAFf;;AAGA,aAAO,KAAKtB,WAAZ;AACH;AACD;AACJ;AACA;AACA;;;;WACI,mBAAU;AACN,UAAI,KAAKA,WAAL,IAAoB,KAAKA,WAAL,CAAiBkD,WAAjB,EAAxB,EAAwD;AACpD,aAAKlD,WAAL,CAAiBmD,MAAjB;AACH;;AACD,WAAKjD,gBAAL,GAAwB,IAAxB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkB;AACd;AAAM;AAAiB3D,MAAAA,QAAQ;AAAG;AAAoB,WAAKyD,WAAP,CAAqBoD,SAArB,GAAiCN,gBAArF;;AACA;AAAM;AAAiBjD,MAAAA,MAAM,GAAG,KAAKwD,UAAL,EAAhC;;AACA;AAAM;AAAiB1G,MAAAA,OAAO,GAAG,KAAK2G,mBAAL,EAAjC;;AACA/G,MAAAA,QAAQ,CAACgH,aAAT,CAAuB,CACnBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB5D,MAAM,CAAC6D,IAAzB,EAA+B/G,OAAO,CAAC+G,IAAvC,CADmB,EAEnBF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB5D,MAAM,CAAC8D,QAAzB,EAAmChH,OAAO,CAACgH,QAA3C,CAFmB,CAAvB;AAIH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,sBAAa;AACT;AAAM;AAAiBC,MAAAA,KAAK,GAAG,CAAC,KAAKxF,IAAN,IAAc,KAAKA,IAAL,CAAU2B,KAAV,IAAmB,KAAhE;AACA;AAAM;AAAiBxD,MAAAA,QAAQ,GAAG,KAAKA,QAAvC;AACA;AAAI;AAAiBsH,MAAAA,cAArB;;AACA,UAAItH,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,OAAvC,EAAgD;AAC5CsH,QAAAA,cAAc,GAAG;AAAEC,UAAAA,OAAO,EAAE,QAAX;AAAqBC,UAAAA,OAAO,EAAExH,QAAQ,IAAI,OAAZ,GAAsB,KAAtB,GAA8B;AAA5D,SAAjB;AACH,OAFD,MAGK,IAAIA,QAAQ,IAAI,QAAZ,IACJA,QAAQ,IAAI,MAAZ,IAAsBqH,KADlB,IAEJrH,QAAQ,IAAI,OAAZ,IAAuB,CAACqH,KAFxB,EAEgC;AACjCC,QAAAA,cAAc,GAAG;AAAEC,UAAAA,OAAO,EAAE,OAAX;AAAoBC,UAAAA,OAAO,EAAE;AAA7B,SAAjB;AACH,OAJI,MAKA,IAAIxH,QAAQ,IAAI,OAAZ,IACJA,QAAQ,IAAI,OAAZ,IAAuBqH,KADnB,IAEJrH,QAAQ,IAAI,MAAZ,IAAsB,CAACqH,KAFvB,EAE+B;AAChCC,QAAAA,cAAc,GAAG;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAjB;AACH,OAJI,MAKA;AACD,cAAMzH,iCAAiC,CAACC,QAAD,CAAvC;AACH;;AAnBQ,kCAoBQ,KAAKyH,eAAL,CAAqBH,cAAc,CAACC,OAApC,EAA6CD,cAAc,CAACE,OAA5D,CApBR;AAAA,UAoBDE,CApBC,yBAoBDA,CApBC;AAAA,UAoBEC,CApBF,yBAoBEA,CApBF;;AAqBT,aAAO;AACHR,QAAAA,IAAI,EAAEG,cADH;AAEHF,QAAAA,QAAQ,EAAE;AAAEG,UAAAA,OAAO,EAAEG,CAAX;AAAcF,UAAAA,OAAO,EAAEG;AAAvB;AAFP,OAAP;AAIH;AACD;AACJ;AACA;AACA;;;;WACI,+BAAsB;AAClB;AAAM;AAAiBN,MAAAA,KAAK,GAAG,CAAC,KAAKxF,IAAN,IAAc,KAAKA,IAAL,CAAU2B,KAAV,IAAmB,KAAhE;AACA;AAAM;AAAiBxD,MAAAA,QAAQ,GAAG,KAAKA,QAAvC;AACA;AAAI;AAAiB4H,MAAAA,eAArB;;AACA,UAAI5H,QAAQ,IAAI,OAAhB,EAAyB;AACrB4H,QAAAA,eAAe,GAAG;AAAEC,UAAAA,QAAQ,EAAE,QAAZ;AAAsBC,UAAAA,QAAQ,EAAE;AAAhC,SAAlB;AACH,OAFD,MAGK,IAAI9H,QAAQ,IAAI,OAAhB,EAAyB;AAC1B4H,QAAAA,eAAe,GAAG;AAAEC,UAAAA,QAAQ,EAAE,QAAZ;AAAsBC,UAAAA,QAAQ,EAAE;AAAhC,SAAlB;AACH,OAFI,MAGA,IAAI9H,QAAQ,IAAI,QAAZ,IACJA,QAAQ,IAAI,MAAZ,IAAsBqH,KADlB,IAEJrH,QAAQ,IAAI,OAAZ,IAAuB,CAACqH,KAFxB,EAEgC;AACjCO,QAAAA,eAAe,GAAG;AAAEC,UAAAA,QAAQ,EAAE,KAAZ;AAAmBC,UAAAA,QAAQ,EAAE;AAA7B,SAAlB;AACH,OAJI,MAKA,IAAI9H,QAAQ,IAAI,OAAZ,IACJA,QAAQ,IAAI,OAAZ,IAAuBqH,KADnB,IAEJrH,QAAQ,IAAI,MAAZ,IAAsB,CAACqH,KAFvB,EAE+B;AAChCO,QAAAA,eAAe,GAAG;AAAEC,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,QAAQ,EAAE;AAA/B,SAAlB;AACH,OAJI,MAKA;AACD,cAAM/H,iCAAiC,CAACC,QAAD,CAAvC;AACH;;AAtBiB,mCAuBD,KAAKyH,eAAL,CAAqBG,eAAe,CAACC,QAArC,EAA+CD,eAAe,CAACE,QAA/D,CAvBC;AAAA,UAuBVJ,CAvBU,0BAuBVA,CAvBU;AAAA,UAuBPC,CAvBO,0BAuBPA,CAvBO;;AAwBlB,aAAO;AACHR,QAAAA,IAAI,EAAES,eADH;AAEHR,QAAAA,QAAQ,EAAE;AAAES,UAAAA,QAAQ,EAAEH,CAAZ;AAAeI,UAAAA,QAAQ,EAAEH;AAAzB;AAFP,OAAP;AAIH;AACD;AACJ;AACA;AACA;;;;WACI,iCAAwB;AAAA;;AACpB;AACA;AACA,UAAI,KAAKhE,gBAAT,EAA2B;AACvB,aAAKA,gBAAL,CAAsBO,OAAtB,GAAgC,KAAKA,OAArC;;AACA,aAAKP,gBAAL,CAAsBoE,aAAtB;;AACA,aAAKvG,OAAL,CAAawG,gBAAb,CAA8BC,YAA9B,GAA6C7E,IAA7C,CAAkDnF,IAAI,CAAC,CAAD,CAAtD,EAA2DC,SAAS,CAAC,KAAKkE,UAAN,CAApE,EAAuFiB,SAAvF,CAAiG,YAAM;AACnG,cAAI,MAAI,CAACM,gBAAT,EAA2B;AACvB;AAAmB,YAAA,MAAI,CAACF,WAAP,CAAqBG,cAArB;AACpB;AACJ,SAJD;AAKH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,0BAAiBsE,YAAjB,EAA+B;AAC3B,UAAI,KAAKvE,gBAAT,EAA2B;AACvB,aAAKA,gBAAL,CAAsBuE,YAAtB,GAAqCA,YAArC;;AACA,aAAKvE,gBAAL,CAAsBoE,aAAtB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,yBAAgBL,CAAhB,EAAmBC,CAAnB,EAAsB;AAClB,UAAI,KAAK3H,QAAL,KAAkB,OAAlB,IAA6B,KAAKA,QAAL,KAAkB,OAAnD,EAA4D;AACxD,YAAI2H,CAAC,KAAK,KAAV,EAAiB;AACbA,UAAAA,CAAC,GAAG,QAAJ;AACH,SAFD,MAGK,IAAIA,CAAC,KAAK,QAAV,EAAoB;AACrBA,UAAAA,CAAC,GAAG,KAAJ;AACH;AACJ,OAPD,MAQK;AACD,YAAID,CAAC,KAAK,KAAV,EAAiB;AACbA,UAAAA,CAAC,GAAG,OAAJ;AACH,SAFD,MAGK,IAAIA,CAAC,KAAK,OAAV,EAAmB;AACpBA,UAAAA,CAAC,GAAG,KAAJ;AACH;AACJ;;AACD,aAAO;AAAEA,QAAAA,CAAC,EAADA,CAAF;AAAKC,QAAAA,CAAC,EAADA;AAAL,OAAP;AACH;;;;;;AAELxG,UAAU,CAACgH,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAIlH,UAAV,EAAsBhC,MAAM,CAACmJ,iBAAP,CAAyBlJ,MAAM,CAACxB,OAAhC,CAAtB,EAAgEuB,MAAM,CAACmJ,iBAAP,CAAyBnJ,MAAM,CAACZ,UAAhC,CAAhE,EAA6GY,MAAM,CAACmJ,iBAAP,CAAyBlJ,MAAM,CAACvB,gBAAhC,CAA7G,EAAgKsB,MAAM,CAACmJ,iBAAP,CAAyBnJ,MAAM,CAACN,gBAAhC,CAAhK,EAAmNM,MAAM,CAACmJ,iBAAP,CAAyBnJ,MAAM,CAACR,MAAhC,CAAnN,EAA4PQ,MAAM,CAACmJ,iBAAP,CAAyBjJ,MAAM,CAACtB,QAAhC,CAA5P,EAAuSoB,MAAM,CAACmJ,iBAAP,CAAyBhJ,MAAM,CAAClC,aAAhC,CAAvS,EAAuV+B,MAAM,CAACmJ,iBAAP,CAAyBhJ,MAAM,CAACjC,YAAhC,CAAvV,EAAsY8B,MAAM,CAACmJ,iBAAP,CAAyBpI,2BAAzB,CAAtY,EAA6bf,MAAM,CAACmJ,iBAAP,CAAyB/I,MAAM,CAAChC,cAAhC,EAAgD,CAAhD,CAA7b,EAAif4B,MAAM,CAACmJ,iBAAP,CAAyB1H,2BAAzB,EAAsD,CAAtD,CAAjf,CAAP;AAAojB,CAAvmB;;AACAO,UAAU,CAACoH,IAAX,GAAkBpJ,MAAM,CAACqJ,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEtH,UAAR;AAAoBuH,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,YAAL,EAAmB,EAAnB,CAAD,CAA/B;AAAyDC,EAAAA,YAAY,EAAE,SAASC,uBAAT,CAAiCC,EAAjC,EAAqCC,GAArC,EAA0C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAClK1J,MAAAA,MAAM,CAAC4J,UAAP,CAAkB,WAAlB,EAA+B,SAASC,uCAAT,GAAmD;AAAE,eAAOF,GAAG,CAACrG,IAAJ,EAAP;AAAoB,OAAxG,EAA0G,SAA1G,EAAqH,SAASwG,qCAAT,CAA+CC,MAA/C,EAAuD;AAAE,eAAOJ,GAAG,CAACK,cAAJ,CAAmBD,MAAnB,CAAP;AAAoC,OAAlN,EAAoN,UAApN,EAAgO,SAASE,sCAAT,GAAkD;AAAE,eAAON,GAAG,CAACO,eAAJ,EAAP;AAA+B,OAAnT;AACH;AAAE,GAFoC;AAElCC,EAAAA,MAAM,EAAE;AAAEtI,IAAAA,SAAS,EAAE,CAAC,qBAAD,EAAwB,WAAxB,CAAb;AAAmDC,IAAAA,SAAS,EAAE,CAAC,qBAAD,EAAwB,WAAxB,CAA9D;AAAoGjB,IAAAA,QAAQ,EAAE,CAAC,oBAAD,EAAuB,UAAvB,CAA9G;AAAkJ4E,IAAAA,QAAQ,EAAE,CAAC,oBAAD,EAAuB,UAAvB,CAA5J;AAAgMV,IAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,SAAf,CAAzM;AAAoOgE,IAAAA,YAAY,EAAE,CAAC,iBAAD,EAAoB,cAApB;AAAlP,GAF0B;AAE+PqB,EAAAA,QAAQ,EAAE,CAAC,YAAD;AAFzQ,CAAzB,CAAlB;AAGA;;AACApI,UAAU,CAACqI,cAAX,GAA4B;AAAA,SAAM,CAC9B;AAAEf,IAAAA,IAAI,EAAE7K;AAAR,GAD8B,EAE9B;AAAE6K,IAAAA,IAAI,EAAElK;AAAR,GAF8B,EAG9B;AAAEkK,IAAAA,IAAI,EAAE5K;AAAR,GAH8B,EAI9B;AAAE4K,IAAAA,IAAI,EAAE5J;AAAR,GAJ8B,EAK9B;AAAE4J,IAAAA,IAAI,EAAE9J;AAAR,GAL8B,EAM9B;AAAE8J,IAAAA,IAAI,EAAE1K;AAAR,GAN8B,EAO9B;AAAE0K,IAAAA,IAAI,EAAErL;AAAR,GAP8B,EAQ9B;AAAEqL,IAAAA,IAAI,EAAEpL;AAAR,GAR8B,EAS9B;AAAEoL,IAAAA,IAAI,EAAEgB,SAAR;AAAmBC,IAAAA,UAAU,EAAE,CAAC;AAAEjB,MAAAA,IAAI,EAAEjK,MAAR;AAAgBmL,MAAAA,IAAI,EAAE,CAACzJ,2BAAD;AAAtB,KAAD;AAA/B,GAT8B,EAU9B;AAAEuI,IAAAA,IAAI,EAAElL,cAAR;AAAwBmM,IAAAA,UAAU,EAAE,CAAC;AAAEjB,MAAAA,IAAI,EAAE7J;AAAR,KAAD;AAApC,GAV8B,EAW9B;AAAE6J,IAAAA,IAAI,EAAEgB,SAAR;AAAmBC,IAAAA,UAAU,EAAE,CAAC;AAAEjB,MAAAA,IAAI,EAAE7J;AAAR,KAAD,EAAqB;AAAE6J,MAAAA,IAAI,EAAEjK,MAAR;AAAgBmL,MAAAA,IAAI,EAAE,CAAC/I,2BAAD;AAAtB,KAArB;AAA/B,GAX8B,CAAN;AAAA,CAA5B;;AAaAO,UAAU,CAACyI,cAAX,GAA4B;AACxB,cAAY,CAAC;AAAEnB,IAAAA,IAAI,EAAE/J,KAAR;AAAeiL,IAAAA,IAAI,EAAE,CAAC,oBAAD;AAArB,GAAD,CADY;AAExB,cAAY,CAAC;AAAElB,IAAAA,IAAI,EAAE/J,KAAR;AAAeiL,IAAAA,IAAI,EAAE,CAAC,oBAAD;AAArB,GAAD,CAFY;AAGxB,eAAa,CAAC;AAAElB,IAAAA,IAAI,EAAE/J,KAAR;AAAeiL,IAAAA,IAAI,EAAE,CAAC,qBAAD;AAArB,GAAD,CAHW;AAIxB,eAAa,CAAC;AAAElB,IAAAA,IAAI,EAAE/J,KAAR;AAAeiL,IAAAA,IAAI,EAAE,CAAC,qBAAD;AAArB,GAAD,CAJW;AAKxB,aAAW,CAAC;AAAElB,IAAAA,IAAI,EAAE/J,KAAR;AAAeiL,IAAAA,IAAI,EAAE,CAAC,YAAD;AAArB,GAAD,CALa;AAMxB,kBAAgB,CAAC;AAAElB,IAAAA,IAAI,EAAE/J,KAAR;AAAeiL,IAAAA,IAAI,EAAE,CAAC,iBAAD;AAArB,GAAD;AANQ,CAA5B;;AAQA,CAAC,YAAY;AAAE,GAAC,OAAOE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD1K,MAAM,CAAC2K,iBAAP,CAAyB3I,UAAzB,EAAqC,CAAC;AAChGsH,IAAAA,IAAI,EAAEnK,SAD0F;AAEhGqL,IAAAA,IAAI,EAAE,CAAC;AACCI,MAAAA,QAAQ,EAAE,cADX;AAECR,MAAAA,QAAQ,EAAE,YAFX;AAGCS,MAAAA,IAAI,EAAE;AACF,uBAAe,QADb;AAEF,qBAAa,wBAFX;AAGF,sBAAc;AAHZ;AAHP,KAAD;AAF0F,GAAD,CAArC,EAW1D,YAAY;AAAE,WAAO,CAAC;AAAEvB,MAAAA,IAAI,EAAErJ,MAAM,CAACxB;AAAf,KAAD,EAA2B;AAAE6K,MAAAA,IAAI,EAAEtJ,MAAM,CAACZ;AAAf,KAA3B,EAAwD;AAAEkK,MAAAA,IAAI,EAAErJ,MAAM,CAACvB;AAAf,KAAxD,EAA2F;AAAE4K,MAAAA,IAAI,EAAEtJ,MAAM,CAACN;AAAf,KAA3F,EAA8H;AAAE4J,MAAAA,IAAI,EAAEtJ,MAAM,CAACR;AAAf,KAA9H,EAAuJ;AAAE8J,MAAAA,IAAI,EAAEpJ,MAAM,CAACtB;AAAf,KAAvJ,EAAkL;AAAE0K,MAAAA,IAAI,EAAEnJ,MAAM,CAAClC;AAAf,KAAlL,EAAkN;AAAEqL,MAAAA,IAAI,EAAEnJ,MAAM,CAACjC;AAAf,KAAlN,EAAiP;AAAEoL,MAAAA,IAAI,EAAEgB,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAC9RjB,QAAAA,IAAI,EAAEjK,MADwR;AAE9RmL,QAAAA,IAAI,EAAE,CAACzJ,2BAAD;AAFwR,OAAD;AAA/B,KAAjP,EAGX;AAAEuI,MAAAA,IAAI,EAAElJ,MAAM,CAAChC,cAAf;AAA+BmM,MAAAA,UAAU,EAAE,CAAC;AAC9CjB,QAAAA,IAAI,EAAE7J;AADwC,OAAD;AAA3C,KAHW,EAKX;AAAE6J,MAAAA,IAAI,EAAEgB,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAClCjB,QAAAA,IAAI,EAAE7J;AAD4B,OAAD,EAElC;AACC6J,QAAAA,IAAI,EAAEjK,MADP;AAECmL,QAAAA,IAAI,EAAE,CAAC/I,2BAAD;AAFP,OAFkC;AAA/B,KALW,CAAP;AAUF,GArB8C,EAqB5C;AAAEI,IAAAA,SAAS,EAAE,CAAC;AACxByH,MAAAA,IAAI,EAAE/J,KADkB;AAExBiL,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFkB,KAAD,CAAb;AAGV1I,IAAAA,SAAS,EAAE,CAAC;AACZwH,MAAAA,IAAI,EAAE/J,KADM;AAEZiL,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFM,KAAD,CAHD;AAMV3J,IAAAA,QAAQ,EAAE,CAAC;AACXyI,MAAAA,IAAI,EAAE/J,KADK;AAEXiL,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFK,KAAD,CANA;AASV/E,IAAAA,QAAQ,EAAE,CAAC;AACX6D,MAAAA,IAAI,EAAE/J,KADK;AAEXiL,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFK,KAAD,CATA;AAYVzF,IAAAA,OAAO,EAAE,CAAC;AACVuE,MAAAA,IAAI,EAAE/J,KADI;AAEViL,MAAAA,IAAI,EAAE,CAAC,YAAD;AAFI,KAAD,CAZC;AAeVzB,IAAAA,YAAY,EAAE,CAAC;AACfO,MAAAA,IAAI,EAAE/J,KADS;AAEfiL,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFS,KAAD;AAfJ,GArB4C,CAAnD;AAuCC,CAvChB;AAwCA;AACA;AACA;AACA;;;IACM1E,gB;AACF;AACJ;AACA;AACA;AACI,4BAAYgF,kBAAZ,EAAgCC,mBAAhC,EAAqD;AAAA;;AACjD,SAAKD,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA;AACR;AACA;;AACQ,SAAKC,WAAL,GAAmB,SAAnB;AACA;AACR;AACA;;AACQ,SAAKC,mBAAL,GAA2B,KAA3B;AACA;AACR;AACA;;AACQ,SAAKC,OAAL,GAAe,IAAIrL,OAAJ,EAAf;AACA;AACR;AACA;;AACQ,SAAKsL,UAAL,GAAkB,KAAKJ,mBAAL,CAAyBK,OAAzB,CAAiC5M,WAAW,CAAC6M,OAA7C,CAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,cAAK7F,KAAL,EAAY;AAAA;;AACR;AACA,UAAI,KAAK8F,cAAT,EAAyB;AACrBC,QAAAA,YAAY,CAAC,KAAKD,cAAN,CAAZ;AACH,OAJO,CAKR;;;AACA,WAAKL,mBAAL,GAA2B,IAA3B;AACA,WAAKO,cAAL,GAAsBC,UAAU,CAAC,YAAM;AACnC,QAAA,MAAI,CAACT,WAAL,GAAmB,SAAnB,CADmC,CAEnC;AACA;;AACA,QAAA,MAAI,CAACpC,aAAL;AACH,OAL+B,EAK7BpD,KAL6B,CAAhC;AAMH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,cAAKA,KAAL,EAAY;AAAA;;AACR;AACA,UAAI,KAAKgG,cAAT,EAAyB;AACrBD,QAAAA,YAAY,CAAC,KAAKC,cAAN,CAAZ;AACH;;AACD,WAAKF,cAAL,GAAsBG,UAAU,CAAC,YAAM;AACnC,QAAA,MAAI,CAACT,WAAL,GAAmB,QAAnB,CADmC,CAEnC;AACA;;AACA,QAAA,MAAI,CAACpC,aAAL;AACH,OAL+B,EAK7BpD,KAL6B,CAAhC;AAMH;AACD;AACJ;AACA;AACA;;;;WACI,uBAAc;AACV,aAAO,KAAK0F,OAAL,CAAapC,YAAb,EAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,qBAAY;AACR,aAAO,KAAKkC,WAAL,KAAqB,SAA5B;AACH;AACD;AACJ;AACA;;;;WACI,2BAAkB;AACd,WAAKC,mBAAL,GAA2B,KAA3B;AACH;AACD;AACJ;AACA;AACA;;;;WACI,wBAAevH,KAAf,EAAsB;AAClB;AAAM;AAAiBgI,MAAAA,OAAO;AAAG;AAAkBhI,MAAAA,KAAK,CAACgI,OAAzD;;AACA,UAAIA,OAAO,KAAK,QAAZ,IAAwB,CAAC,KAAKxF,SAAL,EAA7B,EAA+C;AAC3C,aAAKgF,OAAL,CAAa7F,IAAb;AACH;;AACD,UAAIqG,OAAO,KAAK,SAAZ,IAAyBA,OAAO,KAAK,QAAzC,EAAmD;AAC/C,aAAKT,mBAAL,GAA2B,IAA3B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kCAAyB;AACrB,UAAI,KAAKA,mBAAT,EAA8B;AAC1B,aAAK1H,IAAL,CAAU,CAAV;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,yBAAgB;AACZ,WAAKuH,kBAAL,CAAwBa,YAAxB;AACH;;;;;;AAEL7F,gBAAgB,CAACkD,IAAjB,GAAwB,SAAS4C,wBAAT,CAAkC1C,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIpD,gBAAV,EAA4B9F,MAAM,CAACmJ,iBAAP,CAAyBnJ,MAAM,CAACf,iBAAhC,CAA5B,EAAgFe,MAAM,CAACmJ,iBAAP,CAAyB9I,MAAM,CAAC9B,kBAAhC,CAAhF,CAAP;AAA8I,CAA7M;;AACAuH,gBAAgB,CAAC+F,IAAjB,GAAwB7L,MAAM,CAAC8L,iBAAP,CAAyB;AAAExC,EAAAA,IAAI,EAAExD,gBAAR;AAA0ByD,EAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,CAAD,CAArC;AAAkEwC,EAAAA,SAAS,EAAE,CAAC,aAAD,EAAgB,MAAhB,CAA7E;AAAsGC,EAAAA,QAAQ,EAAE,CAAhH;AAAmHxC,EAAAA,YAAY,EAAE,SAASyC,6BAAT,CAAuCvC,EAAvC,EAA2CC,GAA3C,EAAgD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACxO1J,MAAAA,MAAM,CAAC4J,UAAP,CAAkB,OAAlB,EAA2B,SAASsC,yCAAT,GAAqD;AAAE,eAAOvC,GAAG,CAACwC,sBAAJ,EAAP;AAAsC,OAAxH,EAA0H,KAA1H,EAAiInM,MAAM,CAACoM,aAAxI;AACH;;AAAC,QAAI1C,EAAE,GAAG,CAAT,EAAY;AACV1J,MAAAA,MAAM,CAACqM,WAAP,CAAmB,MAAnB,EAA2B1C,GAAG,CAACqB,WAAJ,KAAoB,SAApB,GAAgC,CAAhC,GAAoC,IAA/D;AACH;AAAE,GAJ0C;AAIxCsB,EAAAA,KAAK,EAAE,CAJiC;AAI9BC,EAAAA,IAAI,EAAE,CAJwB;AAIrBC,EAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,aAAJ,EAAmB,CAAnB,EAAsB,SAAtB,CAAD,CAJa;AAIuBC,EAAAA,QAAQ,EAAE,SAASC,yBAAT,CAAmChD,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACpI1J,MAAAA,MAAM,CAAC2M,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACA3M,MAAAA,MAAM,CAAC4J,UAAP,CAAkB,cAAlB,EAAkC,SAASgD,8DAAT,GAA0E;AAAE,eAAOjD,GAAG,CAACkD,eAAJ,EAAP;AAA+B,OAA7I,EAA+I,aAA/I,EAA8J,SAASC,6DAAT,CAAuE/C,MAAvE,EAA+E;AAAE,eAAOJ,GAAG,CAACoD,cAAJ,CAAmBhD,MAAnB,CAAP;AAAoC,OAAnR;AACA/J,MAAAA,MAAM,CAACgN,MAAP,CAAc,CAAd,EAAiB,OAAjB;AACAhN,MAAAA,MAAM,CAACiN,MAAP,CAAc,CAAd;AACAjN,MAAAA,MAAM,CAACkN,YAAP;AACH;;AAAC,QAAIxD,EAAE,GAAG,CAAT,EAAY;AACV1J,MAAAA,MAAM,CAACmN,WAAP,CAAmB,qBAAnB,EAA0CnN,MAAM,CAACoN,WAAP,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBzD,GAAG,CAACwB,UAA7B,EAAyCkC,OAAnF;AACArN,MAAAA,MAAM,CAACsN,UAAP,CAAkB,SAAlB,EAA6B3D,GAAG,CAACZ,YAAjC,EAA+C,QAA/C,EAAyDY,GAAG,CAACqB,WAA7D;AACAhL,MAAAA,MAAM,CAACuN,SAAP,CAAiB,CAAjB;AACAvN,MAAAA,MAAM,CAACwN,iBAAP,CAAyB7D,GAAG,CAAC5E,OAA7B;AACH;AAAE,GAf0C;AAexC0I,EAAAA,UAAU,EAAE,CAACnN,MAAM,CAACoN,OAAR,CAf4B;AAeVC,EAAAA,KAAK,EAAE,CAACrN,MAAM,CAACsN,SAAR,CAfG;AAeiBC,EAAAA,MAAM,EAAE,CAAC,sVAAD,CAfzB;AAemXC,EAAAA,aAAa,EAAE,CAflY;AAeqYC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAS,EAAE,CAACzN,oBAAoB,CAACC,YAAtB;AAAb,GAf3Y;AAe+byN,EAAAA,eAAe,EAAE;AAfhd,CAAzB,CAAxB;AAgBA;;AACAnI,gBAAgB,CAACuE,cAAjB,GAAkC;AAAA,SAAM,CACpC;AAAEf,IAAAA,IAAI,EAAErK;AAAR,GADoC,EAEpC;AAAEqK,IAAAA,IAAI,EAAE/K;AAAR,GAFoC,CAAN;AAAA,CAAlC;;AAIA,CAAC,YAAY;AAAE,GAAC,OAAOmM,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD1K,MAAM,CAAC2K,iBAAP,CAAyB7E,gBAAzB,EAA2C,CAAC;AACtGwD,IAAAA,IAAI,EAAEpK,SADgG;AAEtGsL,IAAAA,IAAI,EAAE,CAAC;AAAEI,MAAAA,QAAQ,EAAE,uBAAZ;AACC6B,MAAAA,QAAQ,EAAE,8OADX;AAECoB,MAAAA,MAAM,EAAE,CAAC,sVAAD,CAFT;AAGCC,MAAAA,aAAa,EAAEnO,iBAAiB,CAACuO,IAHlC;AAICD,MAAAA,eAAe,EAAEjP,uBAAuB,CAACmP,MAJ1C;AAKCC,MAAAA,UAAU,EAAE,CAAC7N,oBAAoB,CAACC,YAAtB,CALb;AAMCqK,MAAAA,IAAI,EAAE;AACF;AACA;AACA,wBAAgB,sCAHd;AAIF,wBAAgB,+BAJd;AAKF,uBAAe;AALb;AANP,KAAD;AAFgG,GAAD,CAA3C,EAe1D,YAAY;AAAE,WAAO,CAAC;AAAEvB,MAAAA,IAAI,EAAEtJ,MAAM,CAACf;AAAf,KAAD,EAAqC;AAAEqK,MAAAA,IAAI,EAAEjJ,MAAM,CAAC9B;AAAf,KAArC,CAAP;AAAmF,GAfvC,EAeyC,IAfzC,CAAnD;AAeoG,CAfnH;AAiBA;AACA;AACA;AACA;;;IACM8P,gB;;;;AAENA,gBAAgB,CAACrF,IAAjB,GAAwB,SAASsF,wBAAT,CAAkCpF,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAImF,gBAAV,GAAP;AAAuC,CAAtG;;AACAA,gBAAgB,CAACE,IAAjB,GAAwBvO,MAAM,CAACwO,gBAAP,CAAwB;AAAElF,EAAAA,IAAI,EAAE+E;AAAR,CAAxB,CAAxB;AACAA,gBAAgB,CAACI,IAAjB,GAAwBzO,MAAM,CAAC0O,gBAAP,CAAwB;AAAEC,EAAAA,SAAS,EAAE,CAACtN,4CAAD,CAAb;AAA6DuN,EAAAA,OAAO,EAAE,CAAC,CAC3GzQ,UAD2G,EAE3G2B,YAF2G,EAG3GnB,aAH2G,EAI3GoB,eAJ2G,CAAD,EAK3GA,eAL2G;AAAtE,CAAxB,CAAxB;;AAMA,CAAC,YAAY;AAAE,GAAC,OAAO8O,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7O,MAAM,CAAC8O,kBAAP,CAA0BT,gBAA1B,EAA4C;AAAEU,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAAC/M,UAAD,EAAa8D,gBAAb,CAAP;AAAwC,KAAtE;AAAwE8I,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACzQ,UAAD,EAC5M2B,YAD4M,EAE5MnB,aAF4M,EAG5MoB,eAH4M,CAAP;AAGlL,KAHmF;AAGjFiP,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAChN,UAAD,EAAa8D,gBAAb,EAA+B/F,eAA/B,CAAP;AAAyD;AAHC,GAA5C,CAAnD;AAGoG,CAHnH;;AAIA,CAAC,YAAY;AAAE,GAAC,OAAO2K,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD1K,MAAM,CAAC2K,iBAAP,CAAyB0D,gBAAzB,EAA2C,CAAC;AACtG/E,IAAAA,IAAI,EAAE1J,QADgG;AAEtG4K,IAAAA,IAAI,EAAE,CAAC;AACCoE,MAAAA,OAAO,EAAE,CACLzQ,UADK,EAEL2B,YAFK,EAGLnB,aAHK,EAILoB,eAJK,CADV;AAOCiP,MAAAA,OAAO,EAAE,CAAChN,UAAD,EAAa8D,gBAAb,EAA+B/F,eAA/B,CAPV;AAQCgP,MAAAA,YAAY,EAAE,CAAC/M,UAAD,EAAa8D,gBAAb,CARf;AASCmJ,MAAAA,eAAe,EAAE,CAACnJ,gBAAD,CATlB;AAUC6I,MAAAA,SAAS,EAAE,CAACtN,4CAAD;AAVZ,KAAD;AAFgG,GAAD,CAA3C,EAc1D,IAd0D,EAcpD,IAdoD,CAAnD;AAcO,CAdtB;AAgBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA,SAASgN,gBAAT,EAA2B3N,kBAA3B,EAA+CC,mBAA/C,EAAoEC,iCAApE,EAAuGG,2BAAvG,EAAoIC,mCAApI,EAAyKK,4CAAzK,EAAuNI,2BAAvN,EAAoPG,mCAApP,EAAyRI,UAAzR,EAAqS8D,gBAArS,EAAuTvF,oBAAvT,G,CAEA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, ScrollDispatcher, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/layout';\nimport * as ɵngcc6 from '@angular/common';\nconst /** @type {?} */ matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n        transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nconst /** @type {?} */ SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nconst /** @type {?} */ TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nconst /** @type {?} */ MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nconst /** @type {?} */ MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n */\nconst /** @type {?} */ MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\nclass MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} _scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, _scrollStrategy, _dir, _defaultOptions) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._scrollStrategy = _scrollStrategy;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        this._message = '';\n        this._manualListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        const /** @type {?} */ element = _elementRef.nativeElement;\n        // The mouse events shouldn't be bound on iOS devices, because\n        // they can prevent the first tap from firing its click event.\n        if (!_platform.IOS) {\n            this._manualListeners.set('mouseenter', () => this.show());\n            this._manualListeners.set('mouseleave', () => this.hide());\n            this._manualListeners\n                .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n        }\n        else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n            // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n            // will add some inline styles by default, including `user-select: none`. This is\n            // problematic on iOS, because it will prevent users from typing in inputs. If\n            // we're on iOS and the tooltip is attached on an input or textarea, we clear\n            // the `user-select` to avoid these issues.\n            element.style.webkitUserSelect = element.style.userSelect = '';\n        }\n        // Hammer applies `-webkit-user-drag: none` on all elements by default,\n        // which breaks the native drag&drop. If the consumer explicitly made\n        // the element draggable, clear the `-webkit-user-drag`.\n        if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n            element.style['webkitUserDrag'] = '';\n        }\n        _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    /** @type {?} */ ((this._tooltipInstance)).show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n    get message() { return this._message; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        this._message = value != null ? `${value}`.trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._updateTooltipMessage();\n            this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n    get tooltipClass() { return this._tooltipClass; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        if (!this._platform.IOS) {\n            this._manualListeners.forEach((listener, event) => this._elementRef.nativeElement.removeEventListener(event, listener));\n            this._manualListeners.clear();\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message) {\n            return;\n        }\n        const /** @type {?} */ overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage(); /** @type {?} */\n        ((this._tooltipInstance)).show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n    _handleKeydown(e) {\n        if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n            e.stopPropagation();\n            this.hide(0);\n        }\n    }\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n    _handleTouchend() {\n        this.hide(this._defaultOptions.touchendHideDelay);\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        // Create connected position strategy that listens for scroll events to reposition.\n        const /** @type {?} */ strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8);\n        const /** @type {?} */ scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n        strategy.withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @return {?}\n     */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @return {?}\n     */\n    _updatePosition() {\n        const /** @type {?} */ position = /** @type {?} */ (((this._overlayRef)).getConfig().positionStrategy);\n        const /** @type {?} */ origin = this._getOrigin();\n        const /** @type {?} */ overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign({}, origin.main, overlay.main),\n            Object.assign({}, origin.fallback, overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    _getOrigin() {\n        const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        const /** @type {?} */ position = this.position;\n        let /** @type {?} */ originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n        const /** @type {?} */ position = this.position;\n        let /** @type {?} */ overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @return {?}\n     */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    /** @type {?} */ ((this._overlayRef)).updatePosition();\n                }\n            });\n        }\n    }\n    /**\n     * Updates the tooltip class\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /**\n     * Inverts an overlay position.\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8)); };\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostBindings: function MatTooltip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() { return ctx.show(); })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() { return ctx._handleTouchend(); });\n    } }, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [\n    { type: Overlay, },\n    { type: ElementRef, },\n    { type: ScrollDispatcher, },\n    { type: ViewContainerRef, },\n    { type: NgZone, },\n    { type: Platform, },\n    { type: AriaDescriber, },\n    { type: FocusMonitor, },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] },] },\n    { type: Directionality, decorators: [{ type: Optional },] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] },] },\n];\nMatTooltip.propDecorators = {\n    \"position\": [{ type: Input, args: ['matTooltipPosition',] },],\n    \"disabled\": [{ type: Input, args: ['matTooltipDisabled',] },],\n    \"showDelay\": [{ type: Input, args: ['matTooltipShowDelay',] },],\n    \"hideDelay\": [{ type: Input, args: ['matTooltipHideDelay',] },],\n    \"message\": [{ type: Input, args: ['matTooltip',] },],\n    \"tooltipClass\": [{ type: Input, args: ['matTooltipClass',] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    '(longpress)': 'show()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(touchend)': '_handleTouchend()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Platform }, { type: ɵngcc3.AriaDescriber }, { type: ɵngcc3.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    afterHidden() {\n        return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDone(event) {\n        const /** @type {?} */ toState = /** @type {?} */ (event.toState);\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.google.com/components/tooltips.html#tooltips-interaction\n     * @return {?}\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.BreakpointObserver)); };\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset).matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc6.NgClass], pipes: [ɵngcc6.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:2px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef, },\n    { type: BreakpointObserver, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)!.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n                styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:2px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                } }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc5.BreakpointObserver }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MatTooltip, TooltipComponent, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardPan\n */\nimport { rotate as rotateCoordinate } from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport Interaction, { pan } from '../interaction/Interaction.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\n\nvar KeyboardPan = function (Interaction) {\n  function KeyboardPan(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options || {};\n    /**\n     * @private\n     * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n\n\n    this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  if (Interaction) KeyboardPan.__proto__ = Interaction;\n  KeyboardPan.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardPan.prototype.constructor = KeyboardPan;\n  return KeyboardPan;\n}(Interaction);\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/KeyboardPan}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n\n    if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0,\n          deltaY = 0;\n\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n\n      var delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n\n  return !stopEvent;\n}\n\nexport default KeyboardPan; //# sourceMappingURL=KeyboardPan.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/interaction/KeyboardPan.js"],"names":["rotate","rotateCoordinate","EventType","KeyCode","noModifierKeys","targetNotEditable","Interaction","pan","KeyboardPan","opt_options","call","handleEvent","options","defaultCondition_","mapBrowserEvent","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","__proto__","prototype","Object","create","constructor","stopEvent","type","KEYDOWN","keyEvent","originalEvent","keyCode","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","getRotation","preventDefault"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/KeyboardPan\n */\nimport {rotate as rotateCoordinate} from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport Interaction, {pan} from '../interaction/Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nvar KeyboardPan = (function (Interaction) {\n  function KeyboardPan(opt_options) {\n\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n\n    var options = opt_options || {};\n\n    /**\n     * @private\n     * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function(mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) &&\n        targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n    this.condition_ = options.condition !== undefined ?\n      options.condition : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ?\n      options.pixelDelta : 128;\n\n  }\n\n  if ( Interaction ) KeyboardPan.__proto__ = Interaction;\n  KeyboardPan.prototype = Object.create( Interaction && Interaction.prototype );\n  KeyboardPan.prototype.constructor = KeyboardPan;\n\n  return KeyboardPan;\n}(Interaction));\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/KeyboardPan}\n */\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n        keyCode == KeyCode.LEFT ||\n        keyCode == KeyCode.RIGHT ||\n        keyCode == KeyCode.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0, deltaY = 0;\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      var delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardPan;\n\n//# sourceMappingURL=KeyboardPan.js.map"]},"metadata":{},"sourceType":"module"}
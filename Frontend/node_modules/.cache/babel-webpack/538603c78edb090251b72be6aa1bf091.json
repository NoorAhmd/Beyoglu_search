{"ast":null,"code":"import _toConsumableArray from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger, query, animateChild, group } from '@angular/animations';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, A } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, ViewportRuler, OverlayModule } from '@angular/cdk/overlay';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { filter, map, startWith, switchMap, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/common';\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12, 13);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵelementStart(2, \"div\", 14);\n    ɵngcc0.ɵɵlistener(\"@fadeInContent.done\", function MatSelect_ng_template_8_Template_div_animation_fadeInContent_done_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11._onFadeInDone();\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵclassProp(\"mat-select-panel-done-animating\", ctx_r4._panelDoneAnimating);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@fadeInContent\", \"showing\");\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar\n/** @type {?} */\nmatSelectAnimations = {\n  /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })), transition('void => *', group([query('@fadeInContent', animateChild()), animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')])), transition('* => void', [animate('250ms 100ms linear', style({\n    opacity: 0\n  }))])]),\n\n  /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n  fadeInContent: trigger('fadeInContent', [state('showing', style({\n    opacity: 1\n  })), transition('void => showing', [style({\n    opacity: 0\n  }), animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 7.0.0\n */\n\nvar\n/** @type {?} */\ntransformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 7.0.0\n */\n\nvar\n/** @type {?} */\nfadeInContent = matSelectAnimations.fadeInContent;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nnextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n */\n\nvar\n/** @type {?} */\nSELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n */\n\nvar\n/** @type {?} */\nSELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\n\nvar\n/** @type {?} */\nSELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n */\n\nvar\n/** @type {?} */\nSELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\n\nvar\n/** @type {?} */\nSELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nvar\n/** @type {?} */\nSELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\n\nvar\n/** @type {?} */\nMAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/**\n * \\@docs-private\n */\n\n\nvar\n/** @type {?} */\nMAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\n\nvar MatSelectChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatSelectChange(source, value) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatSelectBase =\n/**\n * @param {?} _elementRef\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatSelectBase);\n\n  this._elementRef = _elementRef;\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nvar\n/** @type {?} */\n_MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nvar MatSelectTrigger = function MatSelectTrigger() {\n  _classCallCheck(this, MatSelectTrigger);\n};\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger'\n    }]\n  }], null, null);\n})();\n\nvar MatSelect = /*#__PURE__*/function (_MatSelectMixinBase2) {\n  _inherits(MatSelect, _MatSelectMixinBase2);\n\n  var _super = _createSuper(MatSelect);\n\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _changeDetectorRef\n   * @param {?} _ngZone\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _parentFormField\n   * @param {?} ngControl\n   * @param {?} tabIndex\n   * @param {?} _scrollStrategyFactory\n   */\n  function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, _scrollStrategyFactory) {\n    var _this;\n\n    _classCallCheck(this, MatSelect);\n\n    _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._viewportRuler = _viewportRuler;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._ngZone = _ngZone;\n    _this._dir = _dir;\n    _this._parentFormField = _parentFormField;\n    _this.ngControl = ngControl;\n    _this._scrollStrategyFactory = _scrollStrategyFactory;\n    /**\n     * Whether or not the overlay panel is open.\n     */\n\n    _this._panelOpen = false;\n    /**\n     * Whether filling out the select is required in the form.\n     */\n\n    _this._required = false;\n    /**\n     * The scroll position of the overlay panel, calculated to center the selected option.\n     */\n\n    _this._scrollTop = 0;\n    /**\n     * Whether the component is in multiple selection mode.\n     */\n\n    _this._multiple = false;\n    /**\n     * Comparison function to specify which option is displayed. Defaults to object equality.\n     */\n\n    _this._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n    /**\n     * Unique id for this input.\n     */\n\n\n    _this._uid = \"mat-select-\".concat(nextUniqueId++);\n    /**\n     * Emits whenever the component is destroyed.\n     */\n\n    _this._destroy = new Subject();\n    /**\n     * The cached font-size of the trigger element.\n     */\n\n    _this._triggerFontSize = 0;\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n    _this._onChange = function () {};\n    /**\n     * `View -> model callback called when select has been touched`\n     */\n\n\n    _this._onTouched = function () {};\n    /**\n     * The IDs of child options to be passed to the aria-owns attribute.\n     */\n\n\n    _this._optionIds = '';\n    /**\n     * The value of the select panel's transform-origin property.\n     */\n\n    _this._transformOrigin = 'top';\n    /**\n     * Whether the panel's animation is done.\n     */\n\n    _this._panelDoneAnimating = false;\n    /**\n     * Emits when the panel element is finished transforming in.\n     */\n\n    _this._panelDoneAnimatingStream = new Subject();\n    /**\n     * Strategy that will be used to handle scrolling while the select panel is open.\n     */\n\n    _this._scrollStrategy = _this._scrollStrategyFactory();\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    _this._offsetY = 0;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n\n    _this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    /**\n     * Whether the component is disabling centering of the active option over the trigger.\n     */\n\n    _this._disableOptionCentering = false;\n    _this._focused = false;\n    /**\n     * A name for this control that can be used by `mat-form-field`.\n     */\n\n    _this.controlType = 'mat-select';\n    /**\n     * Aria label of the select. If not specified, the placeholder will be used as label.\n     */\n\n    _this.ariaLabel = '';\n    /**\n     * Combined stream of all of the child options' change events.\n     */\n\n    _this.optionSelectionChanges = defer(function () {\n      if (_this.options) {\n        return merge.apply(void 0, _toConsumableArray(_this.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      }\n\n      return _this._ngZone.onStable.asObservable().pipe(take(1), switchMap(function () {\n        return _this.optionSelectionChanges;\n      }));\n    });\n    /**\n     * Event emitted when the select panel has been toggled.\n     */\n\n    _this.openedChange = new EventEmitter();\n    /**\n     * Event emitted when the select has been opened.\n     */\n\n    _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n      return o;\n    }), map(function () {}));\n    /**\n     * Event emitted when the select has been closed.\n     */\n\n    _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n      return !o;\n    }), map(function () {}));\n    /**\n     * Event emitted when the selected value has been changed by the user.\n     */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n\n    if (_this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n    }\n\n    _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id;\n    return _this;\n  }\n  /**\n   * Whether the select is focused.\n   * @return {?}\n   */\n\n\n  _createClass(MatSelect, [{\n    key: \"focused\",\n    get: function get() {\n      return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._selectionModel) {\n        throw getMatSelectDynamicMultipleError();\n      }\n\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableOptionCentering\",\n    get: function get() {\n      return this._disableOptionCentering;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      if (typeof fn !== 'function') {\n        throw getMatSelectNonFunctionValueError();\n      }\n\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (newValue !== this._value) {\n        this.writeValue(newValue);\n        this._value = newValue;\n      }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n        if (_this2.panelOpen) {\n          _this2._scrollTop = 0;\n\n          _this2.openedChange.emit(true);\n        } else {\n          _this2.openedChange.emit(false);\n\n          _this2._panelDoneAnimating = false;\n          _this2.overlayDir.offsetX = 0;\n\n          _this2._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._initKeyManager();\n      /** @type {?} */\n\n\n      this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n        event.added.forEach(function (option) {\n          return option.select();\n        });\n        event.removed.forEach(function (option) {\n          return option.deselect();\n        });\n      });\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n        _this3._resetOptions();\n\n        _this3._initializeSelection();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        this.updateErrorState();\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes[\"disabled\"]) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this4 = this;\n\n      if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n        return;\n      }\n\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._calculateOverlayPosition();\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n        if (_this4._triggerFontSize && _this4.overlayDir.overlayRef && _this4.overlayDir.overlayRef.overlayElement) {\n          _this4.overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this4._triggerFontSize, \"px\");\n        }\n      });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._changeDetectorRef.markForCheck();\n\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.options) {\n        this._setSelectionByValue(value);\n      }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggerValue\",\n    get: function get() {\n      if (this.empty) {\n        return '';\n      }\n\n      if (this._multiple) {\n        var\n        /** @type {?} */\n        selectedOptions = this._selectionModel.selected.map(function (option) {\n          return option.viewValue;\n        });\n\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n        return selectedOptions.join(', ');\n      }\n\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClosedKeydown\",\n    value: function _handleClosedKeydown(event) {\n      var\n      /** @type {?} */\n      keyCode = event.keyCode;\n      var\n      /** @type {?} */\n      isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      var\n      /** @type {?} */\n      isOpenKey = keyCode === ENTER || keyCode === SPACE; // Open the select on ALT + arrow key to match the native <select>\n\n      if (isOpenKey || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n        this.open();\n      } else if (!this.multiple) {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleOpenKeydown\",\n    value: function _handleOpenKeydown(event) {\n      var\n      /** @type {?} */\n      keyCode = event.keyCode;\n      var\n      /** @type {?} */\n      isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      var\n      /** @type {?} */\n      manager = this._keyManager;\n\n      if (keyCode === HOME || keyCode === END) {\n        event.preventDefault();\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n      } else if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close();\n      } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n        event.preventDefault();\n\n        manager.activeItem._selectViaInteraction();\n      } else if (this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        var\n        /** @type {?} */\n        hasDeselectedOptions = this.options.some(function (option) {\n          return !option.selected;\n        });\n        this.options.forEach(function (option) {\n          return hasDeselectedOptions ? option.select() : option.deselect();\n        });\n      } else {\n        var\n        /** @type {?} */\n        previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFadeInDone\",\n    value: function _onFadeInDone() {\n      this._panelDoneAnimating = this.panelOpen;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this._focused = false;\n\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAttached\",\n    value: function _onAttached() {\n      var _this5 = this;\n\n      this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n        _this5._changeDetectorRef.detectChanges();\n\n        _this5._calculateOverlayOffsetX();\n\n        _this5.panel.nativeElement.scrollTop = _this5._scrollTop;\n      });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelTheme\",\n    value: function _getPanelTheme() {\n      return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this6 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        _this6._setSelectionByValue(_this6.ngControl ? _this6.ngControl.value : _this6._value);\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this7 = this;\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw getMatSelectNonArrayValueError();\n        }\n\n        this._selectionModel.clear();\n\n        value.forEach(function (currentValue) {\n          return _this7._selectValue(currentValue);\n        });\n\n        this._sortValues();\n      } else {\n        this._selectionModel.clear();\n\n        var\n        /** @type {?} */\n        correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n\n\n        if (correspondingOption) {\n          this._keyManager.setActiveItem(correspondingOption);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this8 = this;\n\n      var\n      /** @type {?} */\n      correspondingOption = this.options.find(function (option) {\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && _this8._compareWith(option.value, value);\n        } catch (\n        /** @type {?} */\n        error) {\n          if (isDevMode()) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n\n          return false;\n        }\n      });\n\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n\n      return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initKeyManager\",\n    value: function _initKeyManager() {\n      var _this9 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead().withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        _this9.focus();\n\n        _this9.close();\n      });\n\n      this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this9._panelOpen && _this9.panel) {\n          _this9._scrollActiveOptionIntoView();\n        } else if (!_this9._panelOpen && !_this9.multiple && _this9._keyManager.activeItem) {\n          _this9._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetOptions\",\n    value: function _resetOptions() {\n      var _this10 = this;\n\n      var\n      /** @type {?} */\n      changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n        _this10._onSelect(event.source, event.isUserInput);\n\n        if (event.isUserInput && !_this10.multiple && _this10._panelOpen) {\n          _this10.close();\n\n          _this10.focus();\n        }\n      }); // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n\n      merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n        return option._stateChanges;\n      }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n        _this10._changeDetectorRef.markForCheck();\n\n        _this10.stateChanges.next();\n      });\n\n      this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSelect\",\n    value: function _onSelect(option, isUserInput) {\n      var\n      /** @type {?} */\n      wasSelected = this._selectionModel.isSelected(option);\n\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n\n        this._selectionModel.clear();\n\n        this._propagateChanges(option.value);\n      } else {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n\n        if (this.multiple) {\n          this._sortValues();\n\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      if (this.multiple) {\n        var\n        /** @type {?} */\n        options = this.options.toArray();\n\n        this._selectionModel.sort(function (a, b) {\n          return options.indexOf(a) - options.indexOf(b);\n        });\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      var\n      /** @type {?} */\n      valueToEmit = null;\n\n      if (this.multiple) {\n        valueToEmit =\n        /** @type {?} */\n        this.selected.map(function (option) {\n          return option.value;\n        });\n      } else {\n        valueToEmit = this.selected ?\n        /** @type {?} */\n        this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOptionIds\",\n    value: function _setOptionIds() {\n      this._optionIds = this.options.map(function (option) {\n        return option.id;\n      }).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_highlightCorrectOption\",\n    value: function _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollActiveOptionIntoView\",\n    value: function _scrollActiveOptionIntoView() {\n      var\n      /** @type {?} */\n      activeOptionIndex = this._keyManager.activeItemIndex || 0;\n\n      var\n      /** @type {?} */\n      labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOptionIndex\",\n    value: function _getOptionIndex(option) {\n      return this.options.reduce(function (result, current, index) {\n        return result === undefined ? option === current ? index : undefined : result;\n      }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayPosition\",\n    value: function _calculateOverlayPosition() {\n      var\n      /** @type {?} */\n      itemHeight = this._getItemHeight();\n\n      var\n      /** @type {?} */\n      items = this._getItemCount();\n\n      var\n      /** @type {?} */\n      panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      var\n      /** @type {?} */\n      scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n      var\n      /** @type {?} */\n      maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n      var\n      /** @type {?} */\n      selectedOptionOffset = this.empty ? 0 :\n      /** @type {?} */\n      this._getOptionIndex(this._selectionModel.selected[0]);\n      selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n\n      var\n      /** @type {?} */\n      scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n      this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayScroll\",\n    value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n      var\n      /** @type {?} */\n      itemHeight = this._getItemHeight();\n\n      var\n      /** @type {?} */\n      optionOffsetFromScrollTop = itemHeight * selectedIndex;\n      var\n      /** @type {?} */\n      halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n      // scroll container, then subtracts the scroll buffer to scroll the option down to\n      // the center of the overlay panel. Half the option height must be re-added to the\n      // scrollTop so the option is centered based on its middle, not its top edge.\n\n      var\n      /** @type {?} */\n      optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n      return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel() {\n      // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n      // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n      return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaLabelledby\",\n    value: function _getAriaLabelledby() {\n      if (this.ariaLabelledby) {\n        return this.ariaLabelledby;\n      } // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n      // computed label. `this.ariaLabel` is only the user-specified label.\n\n\n      if (!this._parentFormField || this._getAriaLabel()) {\n        return null;\n      }\n\n      return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaActiveDescendant\",\n    value: function _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetX\",\n    value: function _calculateOverlayOffsetX() {\n      var\n      /** @type {?} */\n      overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n      var\n      /** @type {?} */\n      viewportSize = this._viewportRuler.getViewportSize();\n\n      var\n      /** @type {?} */\n      isRtl = this._isRtl();\n\n      var\n      /** @type {?} */\n      paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n      var\n      /** @type {?} */\n      offsetX; // Adjust the offset, depending on the option padding.\n\n      if (this.multiple) {\n        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n      } else {\n        var\n        /** @type {?} */\n        selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n      } // Invert the offset in LTR.\n\n\n      if (!isRtl) {\n        offsetX *= -1;\n      } // Determine how much the select overflows on each side.\n\n\n      var\n      /** @type {?} */\n      leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n      var\n      /** @type {?} */\n      rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n      if (leftOverflow > 0) {\n        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } else if (rightOverflow > 0) {\n        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } // Set the offset directly in order to avoid having to go through change detection and\n      // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n      // blurry content in some browsers.\n\n\n      this.overlayDir.offsetX = Math.round(offsetX);\n      this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetY\",\n    value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n      var\n      /** @type {?} */\n      itemHeight = this._getItemHeight();\n\n      var\n      /** @type {?} */\n      optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      var\n      /** @type {?} */\n      maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n      var\n      /** @type {?} */\n      optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n      if (this._disableOptionCentering) {\n        return 0;\n      }\n\n      if (this._scrollTop === 0) {\n        optionOffsetFromPanelTop = selectedIndex * itemHeight;\n      } else if (this._scrollTop === maxScroll) {\n        var\n        /** @type {?} */\n        firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n        var\n        /** @type {?} */\n        selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n        // portion of it is shown in the viewport and account for it in our offset.\n\n        var\n        /** @type {?} */\n        partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n        // there is always extra padding at the top or bottom of the panel. When\n        // scrolled to the very bottom, this padding is at the top of the panel and\n        // must be added to the offset.\n\n        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n      } else {\n        // If the option was scrolled to the middle of the panel using a scroll buffer,\n        // its offset will be the scroll buffer minus the half height that was added to\n        // center it.\n        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n      } // The final offset is the option's offset from the top, adjusted for the height difference,\n      // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n      // The value is rounded to prevent some browsers from blurring the content.\n\n\n      return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkOverlayWithinViewport\",\n    value: function _checkOverlayWithinViewport(maxScroll) {\n      var\n      /** @type {?} */\n      itemHeight = this._getItemHeight();\n\n      var\n      /** @type {?} */\n      viewportSize = this._viewportRuler.getViewportSize();\n\n      var\n      /** @type {?} */\n      topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n      var\n      /** @type {?} */\n      bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n      var\n      /** @type {?} */\n      panelHeightTop = Math.abs(this._offsetY);\n      var\n      /** @type {?} */\n      totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      var\n      /** @type {?} */\n      panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n      if (panelHeightBottom > bottomSpaceAvailable) {\n        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n      } else if (panelHeightTop > topSpaceAvailable) {\n        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n      } else {\n        this._transformOrigin = this._getOriginBasedOnOption();\n      }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustPanelUp\",\n    value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      var\n      /** @type {?} */\n      distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel up into the viewport.\n\n      this._scrollTop -= distanceBelowViewport;\n      this._offsetY -= distanceBelowViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n      // by scrolling, so set the offset to 0 to allow the fallback position to take\n      // effect.\n\n      if (this._scrollTop <= 0) {\n        this._scrollTop = 0;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% bottom 0px\";\n      }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustPanelDown\",\n    value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      var\n      /** @type {?} */\n      distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel down into the viewport.\n\n      this._scrollTop += distanceAboveViewport;\n      this._offsetY += distanceAboveViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n      // panel by scrolling, so set the offset to 0 to allow the fallback position\n      // to take effect.\n\n      if (this._scrollTop >= maxScroll) {\n        this._scrollTop = maxScroll;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% top 0px\";\n        return;\n      }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginBasedOnOption\",\n    value: function _getOriginBasedOnOption() {\n      var\n      /** @type {?} */\n      itemHeight = this._getItemHeight();\n\n      var\n      /** @type {?} */\n      optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      var\n      /** @type {?} */\n      originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n      return \"50% \".concat(originY, \"px 0px\");\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemCount\",\n    value: function _getItemCount() {\n      return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemHeight\",\n    value: function _getItemHeight() {\n      return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return this._panelOpen || !this.empty;\n    }\n  }]);\n\n  return MatSelect;\n}(_MatSelectMixinBase);\n\nMatSelect.ɵfac = function MatSelect_Factory(t) {\n  return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY));\n};\n\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(_c1, 1);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"],\n  hostVars: 17,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 9,\n  consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"], [1, \"mat-select-content\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 12, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  directives: [ɵngcc1.CdkOverlayOrigin, ɵngcc6.NgSwitch, ɵngcc6.NgSwitchCase, ɵngcc1.CdkConnectedOverlay, ɵngcc6.NgSwitchDefault, ɵngcc6.NgClass],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper,.mat-form-field-appearance-standard .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%}.mat-select-panel:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanel, matSelectAnimations.fadeInContent]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSelect.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Self\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SELECT_SCROLL_STRATEGY]\n    }]\n  }];\n};\n\nMatSelect.propDecorators = {\n  \"trigger\": [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  \"panel\": [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  \"overlayDir\": [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  \"options\": [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  \"optionGroups\": [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  \"panelClass\": [{\n    type: Input\n  }],\n  \"customTrigger\": [{\n    type: ContentChild,\n    args: [MatSelectTrigger]\n  }],\n  \"placeholder\": [{\n    type: Input\n  }],\n  \"required\": [{\n    type: Input\n  }],\n  \"multiple\": [{\n    type: Input\n  }],\n  \"disableOptionCentering\": [{\n    type: Input\n  }],\n  \"compareWith\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"ariaLabel\": [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  \"ariaLabelledby\": [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  \"errorStateMatcher\": [{\n    type: Input\n  }],\n  \"id\": [{\n    type: Input\n  }],\n  \"openedChange\": [{\n    type: Output\n  }],\n  \"_openedStream\": [{\n    type: Output,\n    args: ['opened']\n  }],\n  \"_closedStream\": [{\n    type: Output,\n    args: ['closed']\n  }],\n  \"selectionChange\": [{\n    type: Output\n  }],\n  \"valueChange\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\xA0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\xA0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [class.mat-select-panel-done-animating]=\\\"_panelDoneAnimating\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><div class=\\\"mat-select-content\\\" [@fadeInContent]=\\\"'showing'\\\" (@fadeInContent.done)=\\\"_onFadeInDone()\\\"><ng-content></ng-content></div></div></ng-template>\",\n      styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper,.mat-form-field-appearance-standard .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%}.mat-select-panel:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'listbox',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-label]': '_getAriaLabel()',\n        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        'class': 'mat-select',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanel, matSelectAnimations.fadeInContent],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MatSelectTrigger]\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatSelectModule = function MatSelectModule() {\n  _classCallCheck(this, MatSelectModule);\n};\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function declarations() {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatSelectModule, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent }; //# sourceMappingURL=select.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/material/__ivy_ngcc__/esm2015/select.js"],"names":["animate","state","style","transition","trigger","query","animateChild","group","ActiveDescendantKeyManager","Directionality","coerceBooleanProperty","SelectionModel","DOWN_ARROW","END","ENTER","HOME","LEFT_ARROW","RIGHT_ARROW","SPACE","UP_ARROW","A","CdkConnectedOverlay","Overlay","ViewportRuler","OverlayModule","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChild","ContentChildren","Directive","ElementRef","EventEmitter","Inject","InjectionToken","Input","isDevMode","NgZone","Optional","Output","Self","ViewChild","ViewEncapsulation","NgModule","FormGroupDirective","NgControl","NgForm","_countGroupLabelsBeforeOption","_getOptionScrollPosition","ErrorStateMatcher","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisabled","mixinDisableRipple","mixinErrorState","mixinTabIndex","MatCommonModule","MatOptionModule","MatFormField","MatFormFieldControl","MatFormFieldModule","defer","merge","Subject","filter","map","startWith","switchMap","take","takeUntil","distinctUntilChanged","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_0_listener","$event","ɵɵrestoreView","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_0_listener","ctx_r10","_handleKeydown","MatSelect_ng_template_8_Template_div_animation_fadeInContent_done_2_listener","ctx_r11","_onFadeInDone","ctx_r4","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","ɵɵclassProp","_panelDoneAnimating","panelClass","multiple","_c2","_c3","matSelectAnimations","transformPanel","transform","minWidth","opacity","fadeInContent","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","options","option","onSelectionChange","onStable","asObservable","pipe","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","parseInt","id","_placeholder","stateChanges","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","_resetOptions","updateErrorState","complete","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","altKey","preventDefault","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","previouslyFocusedIndex","activeItemIndex","shiftKey","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","isEmpty","Promise","resolve","then","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","withTypeAhead","withVerticalOrientation","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","toArray","sort","a","b","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","reduce","result","current","index","undefined","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","ariaLabelledby","_getAriaLabel","_labelId","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","ids","_ariaDescribedby","MatSelect_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","ɵɵattribute","_getAriaLabelledby","required","toString","errorState","_getAriaActiveDescendant","inputs","disableRipple","disableOptionCentering","compareWith","errorStateMatcher","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","toggle","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","directives","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","propDecorators","descendants","None","OnPush","host","animations","providers","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger, query, animateChild, group } from '@angular/animations';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, A } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, ViewportRuler, OverlayModule } from '@angular/cdk/overlay';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { filter, map, startWith, switchMap, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12, 13);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵelementStart(2, \"div\", 14);\n    ɵngcc0.ɵɵlistener(\"@fadeInContent.done\", function MatSelect_ng_template_8_Template_div_animation_fadeInContent_done_2_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._onFadeInDone(); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵclassProp(\"mat-select-panel-done-animating\", ctx_r4._panelDoneAnimating);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@fadeInContent\", \"showing\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst /** @type {?} */ matSelectAnimations = {\n    /**\n       * This animation transforms the select's overlay panel on and off the page.\n       *\n       * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n       * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n       * side to ensure the option text correctly overlaps the trigger text.\n       *\n       * When the panel is removed from the DOM, it simply fades out linearly.\n       */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n    /**\n       * This animation fades in the background color and text content of the\n       * select's options. It is time delayed to occur 100ms after the overlay\n       * panel has transformed in.\n       */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n */\nconst /** @type {?} */ SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n */\nconst /** @type {?} */ SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nconst /** @type {?} */ SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n */\nconst /** @type {?} */ SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nconst /** @type {?} */ SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst /** @type {?} */ SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nconst /** @type {?} */ MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nconst /** @type {?} */ MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst /** @type {?} */ _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger'\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} _scrollStrategyFactory\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, _scrollStrategyFactory) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._scrollStrategyFactory = _scrollStrategyFactory;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Whether the panel's animation is done.\n         */\n        this._panelDoneAnimating = false;\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * Strategy that will be used to handle scrolling while the select panel is open.\n         */\n        this._scrollStrategy = this._scrollStrategyFactory();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = defer(() => {\n            if (this.options) {\n                return merge(...this.options.map(option => option.onSelectionChange));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this._panelDoneAnimating = false;\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager(); /** @type {?} */\n        ((this._selectionModel.onChange)).pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes[\"disabled\"]) {\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        const /** @type {?} */ keyCode = event.keyCode;\n        const /** @type {?} */ isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const /** @type {?} */ isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        const /** @type {?} */ keyCode = event.keyCode;\n        const /** @type {?} */ isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const /** @type {?} */ manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const /** @type {?} */ hasDeselectedOptions = this.options.some(option => !option.selected);\n            this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n        }\n        else {\n            const /** @type {?} */ previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     * @return {?}\n     */\n    _onFadeInDone() {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            const /** @type {?} */ correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const /** @type {?} */ correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (/** @type {?} */ error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    _resetOptions() {\n        const /** @type {?} */ changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            const /** @type {?} */ options = this.options.toArray();\n            this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        let /** @type {?} */ valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = (/** @type {?} */ (this.selected)).map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? (/** @type {?} */ (this.selected)).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        const /** @type {?} */ activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const /** @type {?} */ labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        const /** @type {?} */ itemHeight = this._getItemHeight();\n        const /** @type {?} */ items = this._getItemCount();\n        const /** @type {?} */ panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const /** @type {?} */ scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let /** @type {?} */ selectedOptionOffset = this.empty ? 0 : /** @type {?} */ ((this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const /** @type {?} */ scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const /** @type {?} */ itemHeight = this._getItemHeight();\n        const /** @type {?} */ optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const /** @type {?} */ halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const /** @type {?} */ viewportSize = this._viewportRuler.getViewportSize();\n        const /** @type {?} */ isRtl = this._isRtl();\n        const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let /** @type {?} */ offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const /** @type {?} */ itemHeight = this._getItemHeight();\n        const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const /** @type {?} */ maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let /** @type {?} */ optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let /** @type {?} */ partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const /** @type {?} */ itemHeight = this._getItemHeight();\n        const /** @type {?} */ viewportSize = this._viewportRuler.getViewportSize();\n        const /** @type {?} */ topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const /** @type {?} */ bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n        const /** @type {?} */ totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const /** @type {?} */ distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const /** @type {?} */ distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        const /** @type {?} */ itemHeight = this._getItemHeight();\n        const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const /** @type {?} */ originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY)); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 17, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"], [1, \"mat-select-content\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 12, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc1.CdkOverlayOrigin, ɵngcc6.NgSwitch, ɵngcc6.NgSwitchCase, ɵngcc1.CdkConnectedOverlay, ɵngcc6.NgSwitchDefault, ɵngcc6.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper,.mat-form-field-appearance-standard .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%}.mat-select-panel:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanel,\n            matSelectAnimations.fadeInContent\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler, },\n    { type: ChangeDetectorRef, },\n    { type: NgZone, },\n    { type: ErrorStateMatcher, },\n    { type: ElementRef, },\n    { type: Directionality, decorators: [{ type: Optional },] },\n    { type: NgForm, decorators: [{ type: Optional },] },\n    { type: FormGroupDirective, decorators: [{ type: Optional },] },\n    { type: MatFormField, decorators: [{ type: Optional },] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional },] },\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] },] },\n];\nMatSelect.propDecorators = {\n    \"trigger\": [{ type: ViewChild, args: ['trigger',] },],\n    \"panel\": [{ type: ViewChild, args: ['panel',] },],\n    \"overlayDir\": [{ type: ViewChild, args: [CdkConnectedOverlay,] },],\n    \"options\": [{ type: ContentChildren, args: [MatOption, { descendants: true },] },],\n    \"optionGroups\": [{ type: ContentChildren, args: [MatOptgroup,] },],\n    \"panelClass\": [{ type: Input },],\n    \"customTrigger\": [{ type: ContentChild, args: [MatSelectTrigger,] },],\n    \"placeholder\": [{ type: Input },],\n    \"required\": [{ type: Input },],\n    \"multiple\": [{ type: Input },],\n    \"disableOptionCentering\": [{ type: Input },],\n    \"compareWith\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"ariaLabel\": [{ type: Input, args: ['aria-label',] },],\n    \"ariaLabelledby\": [{ type: Input, args: ['aria-labelledby',] },],\n    \"errorStateMatcher\": [{ type: Input },],\n    \"id\": [{ type: Input },],\n    \"openedChange\": [{ type: Output },],\n    \"_openedStream\": [{ type: Output, args: ['opened',] },],\n    \"_closedStream\": [{ type: Output, args: ['closed',] },],\n    \"selectionChange\": [{ type: Output },],\n    \"valueChange\": [{ type: Output },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{ selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [class.mat-select-panel-done-animating]=\\\"_panelDoneAnimating\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><div class=\\\"mat-select-content\\\" [@fadeInContent]=\\\"'showing'\\\" (@fadeInContent.done)=\\\"_onFadeInDone()\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper,.mat-form-field-appearance-standard .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%}.mat-select-panel:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanel,\n                    matSelectAnimations.fadeInContent\n                ], providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MatSelectTrigger]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], MatFormFieldModule, MatOptionModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatSelectModule, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n\n//# sourceMappingURL=select.js.map"]},"metadata":{},"sourceType":"module"}
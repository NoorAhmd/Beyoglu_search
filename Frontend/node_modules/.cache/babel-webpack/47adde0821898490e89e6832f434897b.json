{"ast":null,"code":"/**\n * @module ol/geom/LineString\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from '../geom/flat/closest.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { inflateCoordinates } from '../geom/flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from '../geom/flat/interpolate.js';\nimport { intersectsLineString } from '../geom/flat/intersectsextent.js';\nimport { lineStringLength } from '../geom/flat/length.js';\nimport { forEach as forEachSegment } from '../geom/flat/segments.js';\nimport { douglasPeucker } from '../geom/flat/simplify.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\n\nvar LineString = function (SimpleGeometry) {\n  function LineString(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    /**\n     * @private\n     * @type {module:ol/coordinate~Coordinate}\n     */\n\n    this.flatMidpoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.flatMidpointRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) LineString.__proto__ = SimpleGeometry;\n  LineString.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  LineString.prototype.constructor = LineString;\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @api\n   */\n\n  LineString.prototype.appendCoordinate = function appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/LineString} Clone.\n   * @override\n   * @api\n   */\n\n\n  LineString.prototype.clone = function clone() {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LineString.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, module:ol/coordinate~Coordinate, module:ol/coordinate~Coordinate): T} callback Function\n   *     called for each segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n\n\n  LineString.prototype.forEachSegment = function forEachSegment$1(callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {module:ol/coordinate~Coordinate} Coordinate.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAtM = function getCoordinateAtM(m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {module:ol/coordinate~Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {module:ol/coordinate~Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAt = function getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest);\n  };\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n\n\n  LineString.prototype.getLength = function getLength() {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @return {Array.<number>} Flat midpoint.\n   */\n\n\n  LineString.prototype.getFlatMidpoint = function getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n\n    return this.flatMidpoint_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  LineString.prototype.getType = function getType() {\n    return GeometryType.LINE_STRING;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  LineString.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  LineString.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LineString;\n}(SimpleGeometry);\n\nexport default LineString; //# sourceMappingURL=LineString.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/geom/LineString.js"],"names":["extend","closestSquaredDistanceXY","GeometryLayout","GeometryType","SimpleGeometry","assignClosestPoint","maxSquaredDelta","deflateCoordinates","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","forEach","forEachSegment","douglasPeucker","LineString","coordinates","opt_layout","call","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","__proto__","prototype","Object","create","constructor","appendCoordinate","coordinate","flatCoordinates","slice","changed","clone","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","forEachSegment$1","callback","getCoordinateAtM","m","opt_extrapolate","XYM","XYZM","extrapolate","getCoordinates","getCoordinateAt","fraction","opt_dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","LINE_STRING","intersectsExtent","extent","setLayout"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/LineString\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from '../geom/flat/closest.js';\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from '../geom/flat/interpolate.js';\nimport {intersectsLineString} from '../geom/flat/intersectsextent.js';\nimport {lineStringLength} from '../geom/flat/length.js';\nimport {forEach as forEachSegment} from '../geom/flat/segments.js';\nimport {douglasPeucker} from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = (function (SimpleGeometry) {\n  function LineString(coordinates, opt_layout) {\n\n    SimpleGeometry.call(this);\n\n    /**\n     * @private\n     * @type {module:ol/coordinate~Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n\n  }\n\n  if ( SimpleGeometry ) LineString.__proto__ = SimpleGeometry;\n  LineString.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  LineString.prototype.constructor = LineString;\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @api\n   */\n  LineString.prototype.appendCoordinate = function appendCoordinate (coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/LineString} Clone.\n   * @override\n   * @api\n   */\n  LineString.prototype.clone = function clone () {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LineString.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(\n        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, module:ol/coordinate~Coordinate, module:ol/coordinate~Coordinate): T} callback Function\n   *     called for each segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  LineString.prototype.forEachSegment = function forEachSegment$1 (callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {module:ol/coordinate~Coordinate} Coordinate.\n   * @api\n   */\n  LineString.prototype.getCoordinateAtM = function getCoordinateAtM (m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM &&\n        this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0,\n      this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  LineString.prototype.getCoordinates = function getCoordinates () {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {module:ol/coordinate~Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {module:ol/coordinate~Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  LineString.prototype.getCoordinateAt = function getCoordinateAt (fraction, opt_dest) {\n    return interpolatePoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      fraction, opt_dest);\n  };\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  LineString.prototype.getLength = function getLength () {\n    return lineStringLength(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * @return {Array.<number>} Flat midpoint.\n   */\n  LineString.prototype.getFlatMidpoint = function getFlatMidpoint () {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  LineString.prototype.getType = function getType () {\n    return GeometryType.LINE_STRING;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  LineString.prototype.intersectsExtent = function intersectsExtent (extent) {\n    return intersectsLineString(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      extent);\n  };\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  LineString.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LineString;\n}(SimpleGeometry));\n\n\nexport default LineString;\n\n//# sourceMappingURL=LineString.js.map"]},"metadata":{},"sourceType":"module"}
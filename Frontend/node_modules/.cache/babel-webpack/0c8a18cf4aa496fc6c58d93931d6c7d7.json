{"ast":null,"code":"/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\nimport { TRUE } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from '../interaction/Interaction.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {Array.<function(new: module:ol/format/Feature)>} [formatConstructors] Format constructors.\n * @property {module:ol/source/Vector} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {module:ol/proj~ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {Element} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\n\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event module:ol/interaction/DragAndDrop~DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\n\nvar DragAndDropEvent = function (Event) {\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    Event.call(this, type);\n    /**\n     * The features parsed from dropped data.\n     * @type {Array.<module:ol/Feature>|undefined}\n     * @api\n     */\n\n    this.features = opt_features;\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n\n    this.file = file;\n    /**\n     * The feature projection.\n     * @type {module:ol/proj/Projection|undefined}\n     * @api\n     */\n\n    this.projection = opt_projection;\n  }\n\n  if (Event) DragAndDropEvent.__proto__ = Event;\n  DragAndDropEvent.prototype = Object.create(Event && Event.prototype);\n  DragAndDropEvent.prototype.constructor = DragAndDropEvent;\n  return DragAndDropEvent;\n}(Event);\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires module:ol/interaction/DragAndDrop~DragAndDropEvent\n */\n\n\nvar DragAndDrop = function (Interaction) {\n  function DragAndDrop(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Interaction.call(this, {\n      handleEvent: TRUE\n    });\n    /**\n     * @private\n     * @type {Array.<function(new: module:ol/format/Feature)>}\n     */\n\n    this.formatConstructors_ = options.formatConstructors ? options.formatConstructors : [];\n    /**\n     * @private\n     * @type {module:ol/proj/Projection}\n     */\n\n    this.projection_ = options.projection ? getProjection(options.projection) : null;\n    /**\n     * @private\n     * @type {Array.<module:ol/events~EventsKey>}\n     */\n\n    this.dropListenKeys_ = null;\n    /**\n     * @private\n     * @type {module:ol/source/Vector}\n     */\n\n    this.source_ = options.source || null;\n    /**\n     * @private\n     * @type {Element}\n     */\n\n    this.target = options.target ? options.target : null;\n  }\n\n  if (Interaction) DragAndDrop.__proto__ = Interaction;\n  DragAndDrop.prototype = Object.create(Interaction && Interaction.prototype);\n  DragAndDrop.prototype.constructor = DragAndDrop;\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n\n  DragAndDrop.prototype.handleResult_ = function handleResult_(file, event) {\n    var this$1 = this;\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n\n    var formatConstructors = this.formatConstructors_;\n    var features = [];\n\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      /**\n       * Avoid \"cannot instantiate abstract class\" error.\n       * @type {Function}\n       */\n      var formatConstructor = formatConstructors[i];\n      /**\n       * @type {module:ol/format/Feature}\n       */\n\n      var format = new formatConstructor();\n      features = this$1.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n\n    this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n  };\n  /**\n   * @private\n   */\n\n\n  DragAndDrop.prototype.registerListeners_ = function registerListeners_() {\n    var map = this.getMap();\n\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, handleDrop, this), listen(dropArea, EventType.DRAGENTER, handleStop, this), listen(dropArea, EventType.DRAGOVER, handleStop, this), listen(dropArea, EventType.DROP, handleStop, this)];\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragAndDrop.prototype.setActive = function setActive(active) {\n    Interaction.prototype.setActive.call(this, active);\n\n    if (active) {\n      this.registerListeners_();\n    } else {\n      this.unregisterListeners_();\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragAndDrop.prototype.setMap = function setMap(map) {\n    this.unregisterListeners_();\n    Interaction.prototype.setMap.call(this, map);\n\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n  /**\n   * @param {module:ol/format/Feature} format Format.\n   * @param {string} text Text.\n   * @param {module:ol/format/Feature~ReadOptions} options Read options.\n   * @private\n   * @return {Array.<module:ol/Feature>} Features.\n   */\n\n\n  DragAndDrop.prototype.tryReadFeatures_ = function tryReadFeatures_(format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  DragAndDrop.prototype.unregisterListeners_ = function unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n\n  return DragAndDrop;\n}(Interaction);\n/**\n * @param {DragEvent} event Event.\n * @this {module:ol/interaction/DragAndDrop}\n */\n\n\nfunction handleDrop(event) {\n  var this$1 = this;\n  var files = event.dataTransfer.files;\n\n  for (var i = 0, ii = files.length; i < ii; ++i) {\n    var file = files.item(i);\n    var reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this$1.handleResult_.bind(this$1, file));\n    reader.readAsText(file);\n  }\n}\n/**\n * @param {DragEvent} event Event.\n */\n\n\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\n\nexport default DragAndDrop; //# sourceMappingURL=DragAndDrop.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/interaction/DragAndDrop.js"],"names":["TRUE","listen","unlistenByKey","Event","EventType","Interaction","get","getProjection","DragAndDropEventType","ADD_FEATURES","DragAndDropEvent","type","file","opt_features","opt_projection","call","features","projection","__proto__","prototype","Object","create","constructor","DragAndDrop","opt_options","options","handleEvent","formatConstructors_","formatConstructors","projection_","dropListenKeys_","source_","source","target","handleResult_","event","this$1","result","map","getMap","view","getView","i","ii","length","formatConstructor","format","tryReadFeatures_","featureProjection","clear","addFeatures","dispatchEvent","registerListeners_","dropArea","getViewport","DROP","handleDrop","DRAGENTER","handleStop","DRAGOVER","setActive","active","unregisterListeners_","setMap","getActive","text","readFeatures","e","forEach","files","dataTransfer","item","reader","FileReader","addEventListener","LOAD","bind","readAsText","stopPropagation","preventDefault","dropEffect"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport {TRUE} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from '../interaction/Interaction.js';\nimport {get as getProjection} from '../proj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array.<function(new: module:ol/format/Feature)>} [formatConstructors] Format constructors.\n * @property {module:ol/source/Vector} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {module:ol/proj~ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {Element} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n\n/**\n * @enum {string}\n */\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event module:ol/interaction/DragAndDrop~DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nvar DragAndDropEvent = (function (Event) {\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n\n    Event.call(this, type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array.<module:ol/Feature>|undefined}\n     * @api\n     */\n    this.features = opt_features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {module:ol/proj/Projection|undefined}\n     * @api\n     */\n    this.projection = opt_projection;\n\n  }\n\n  if ( Event ) DragAndDropEvent.__proto__ = Event;\n  DragAndDropEvent.prototype = Object.create( Event && Event.prototype );\n  DragAndDropEvent.prototype.constructor = DragAndDropEvent;\n\n  return DragAndDropEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires module:ol/interaction/DragAndDrop~DragAndDropEvent\n */\nvar DragAndDrop = (function (Interaction) {\n  function DragAndDrop(opt_options) {\n\n    var options = opt_options ? opt_options : {};\n\n    Interaction.call(this, {\n      handleEvent: TRUE\n    });\n\n    /**\n     * @private\n     * @type {Array.<function(new: module:ol/format/Feature)>}\n     */\n    this.formatConstructors_ = options.formatConstructors ?\n      options.formatConstructors : [];\n\n    /**\n     * @private\n     * @type {module:ol/proj/Projection}\n     */\n    this.projection_ = options.projection ?\n      getProjection(options.projection) : null;\n\n    /**\n     * @private\n     * @type {Array.<module:ol/events~EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/source/Vector}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {Element}\n     */\n    this.target = options.target ? options.target : null;\n\n  }\n\n  if ( Interaction ) DragAndDrop.__proto__ = Interaction;\n  DragAndDrop.prototype = Object.create( Interaction && Interaction.prototype );\n  DragAndDrop.prototype.constructor = DragAndDrop;\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  DragAndDrop.prototype.handleResult_ = function handleResult_ (file, event) {\n    var this$1 = this;\n\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n\n    var formatConstructors = this.formatConstructors_;\n    var features = [];\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      /**\n       * Avoid \"cannot instantiate abstract class\" error.\n       * @type {Function}\n       */\n      var formatConstructor = formatConstructors[i];\n      /**\n       * @type {module:ol/format/Feature}\n       */\n      var format = new formatConstructor();\n      features = this$1.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n    this.dispatchEvent(\n      new DragAndDropEvent(\n        DragAndDropEventType.ADD_FEATURES, file,\n        features, projection));\n  };\n\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.registerListeners_ = function registerListeners_ () {\n    var map = this.getMap();\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [\n        listen(dropArea, EventType.DROP, handleDrop, this),\n        listen(dropArea, EventType.DRAGENTER, handleStop, this),\n        listen(dropArea, EventType.DRAGOVER, handleStop, this),\n        listen(dropArea, EventType.DROP, handleStop, this)\n      ];\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragAndDrop.prototype.setActive = function setActive (active) {\n    Interaction.prototype.setActive.call(this, active);\n    if (active) {\n      this.registerListeners_();\n    } else {\n      this.unregisterListeners_();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragAndDrop.prototype.setMap = function setMap (map) {\n    this.unregisterListeners_();\n    Interaction.prototype.setMap.call(this, map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n\n  /**\n   * @param {module:ol/format/Feature} format Format.\n   * @param {string} text Text.\n   * @param {module:ol/format/Feature~ReadOptions} options Read options.\n   * @private\n   * @return {Array.<module:ol/Feature>} Features.\n   */\n  DragAndDrop.prototype.tryReadFeatures_ = function tryReadFeatures_ (format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.unregisterListeners_ = function unregisterListeners_ () {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n\n  return DragAndDrop;\n}(Interaction));\n\n\n/**\n * @param {DragEvent} event Event.\n * @this {module:ol/interaction/DragAndDrop}\n */\nfunction handleDrop(event) {\n  var this$1 = this;\n\n  var files = event.dataTransfer.files;\n  for (var i = 0, ii = files.length; i < ii; ++i) {\n    var file = files.item(i);\n    var reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this$1.handleResult_.bind(this$1, file));\n    reader.readAsText(file);\n  }\n}\n\n\n/**\n * @param {DragEvent} event Event.\n */\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\n\n\nexport default DragAndDrop;\n\n//# sourceMappingURL=DragAndDrop.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/render/canvas/TextReplay\n */\nimport { getUid } from '../../util.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { matchingChunk } from '../../geom/flat/straightchunk.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport { CANVAS_LINE_DASH } from '../../has.js';\nimport { labelCache, measureTextWidth, defaultTextAlign, measureTextHeight, defaultPadding, defaultLineCap, defaultLineDashOffset, defaultLineDash, defaultLineJoin, defaultFillStyle, checkFont, defaultFont, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline } from '../canvas.js';\nimport CanvasInstruction from '../canvas/Instruction.js';\nimport CanvasReplay from '../canvas/Replay.js';\nimport { TEXT_ALIGN } from '../replay.js';\nimport TextPlacement from '../../style/TextPlacement.js';\n\nvar CanvasTextReplay = function (CanvasReplay) {\n  function CanvasTextReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n    CanvasReplay.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n    /**\n     * @private\n     * @type {module:ol/render/canvas~DeclutterGroup}\n     */\n\n    this.declutterGroup_;\n    /**\n     * @private\n     * @type {Array.<HTMLCanvasElement>}\n     */\n\n    this.labels_ = null;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.text_ = '';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textOffsetX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textOffsetY_ = 0;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    this.textRotateWithView_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textRotation_ = 0;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n\n    this.textFillState_ = null;\n    /**\n     * @type {!Object.<string, module:ol/render/canvas~FillState>}\n     */\n\n    this.fillStates = {};\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n\n    this.textStrokeState_ = null;\n    /**\n     * @type {!Object.<string, module:ol/render/canvas~StrokeState>}\n     */\n\n    this.strokeStates = {};\n    /**\n     * @private\n     * @type {module:ol/render/canvas~TextState}\n     */\n\n    this.textState_ =\n    /** @type {module:ol/render/canvas~TextState} */\n    {};\n    /**\n     * @type {!Object.<string, module:ol/render/canvas~TextState>}\n     */\n\n    this.textStates = {};\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.textKey_ = '';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.fillKey_ = '';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.strokeKey_ = '';\n    /**\n     * @private\n     * @type {Object.<string, Object.<string, number>>}\n     */\n\n    this.widths_ = {};\n    labelCache.prune();\n  }\n\n  if (CanvasReplay) CanvasTextReplay.__proto__ = CanvasReplay;\n  CanvasTextReplay.prototype = Object.create(CanvasReplay && CanvasReplay.prototype);\n  CanvasTextReplay.prototype.constructor = CanvasTextReplay;\n  /**\n   * @inheritDoc\n   */\n\n  CanvasTextReplay.prototype.drawText = function drawText(geometry, feature) {\n    var this$1 = this;\n    var fillState = this.textFillState_;\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n\n    if (this.text_ === '' || !textState || !fillState && !strokeState) {\n      return;\n    }\n\n    var begin = this.coordinates.length;\n    var geometryType = geometry.getType();\n    var flatCoordinates = null;\n    var end = 2;\n    var stride = 2;\n    var i, ii;\n\n    if (textState.placement === TextPlacement.LINE) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n\n      var ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      stride = geometry.getStride();\n\n      if (geometryType == GeometryType.LINE_STRING) {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n        ends = geometry.getEnds();\n      } else if (geometryType == GeometryType.POLYGON) {\n        ends = geometry.getEnds().slice(0, 1);\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\n        var endss = geometry.getEndss();\n        ends = [];\n\n        for (i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n      var textAlign = textState.textAlign;\n      var flatOffset = 0;\n      var flatEnd;\n\n      for (var o = 0, oo = ends.length; o < oo; ++o) {\n        if (textAlign == undefined) {\n          var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n          flatOffset = range[0];\n          flatEnd = range[1];\n        } else {\n          flatEnd = ends[o];\n        }\n\n        for (i = flatOffset; i < flatEnd; i += stride) {\n          this$1.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        }\n\n        end = this$1.coordinates.length;\n        flatOffset = ends[o];\n        this$1.drawChars_(begin, end, this$1.declutterGroup_);\n        begin = end;\n      }\n\n      this.endGeometry(geometry, feature);\n    } else {\n      var label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);\n      var width = label.width / this.pixelRatio;\n\n      switch (geometryType) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n          flatCoordinates = geometry.getFlatCoordinates();\n          end = flatCoordinates.length;\n          break;\n\n        case GeometryType.LINE_STRING:\n          flatCoordinates =\n          /** @type {module:ol/geom/LineString} */\n          geometry.getFlatMidpoint();\n          break;\n\n        case GeometryType.CIRCLE:\n          flatCoordinates =\n          /** @type {module:ol/geom/Circle} */\n          geometry.getCenter();\n          break;\n\n        case GeometryType.MULTI_LINE_STRING:\n          flatCoordinates =\n          /** @type {module:ol/geom/MultiLineString} */\n          geometry.getFlatMidpoints();\n          end = flatCoordinates.length;\n          break;\n\n        case GeometryType.POLYGON:\n          flatCoordinates =\n          /** @type {module:ol/geom/Polygon} */\n          geometry.getFlatInteriorPoint();\n\n          if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {\n            return;\n          }\n\n          stride = 3;\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          var interiorPoints =\n          /** @type {module:ol/geom/MultiPolygon} */\n          geometry.getFlatInteriorPoints();\n          flatCoordinates = [];\n\n          for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (textState.overflow || interiorPoints[i + 2] / this$1.resolution >= width) {\n              flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n            }\n          }\n\n          end = flatCoordinates.length;\n\n          if (end == 0) {\n            return;\n          }\n\n          break;\n\n        default:\n      }\n\n      end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill, geometry);\n          this.hitDetectionInstructions.push(this.createFill(this.state, geometry));\n        }\n\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n      this.drawTextImage_(label, begin, end);\n      this.endGeometry(geometry, feature);\n    }\n  };\n  /**\n   * @param {string} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {HTMLCanvasElement} Image.\n   */\n\n\n  CanvasTextReplay.prototype.getImage = function getImage(text, textKey, fillKey, strokeKey) {\n    var label;\n    var key = strokeKey + textKey + text + fillKey + this.pixelRatio;\n\n    if (!labelCache.containsKey(key)) {\n      var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;\n      var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;\n      var textState = this.textStates[textKey] || this.textState_;\n      var pixelRatio = this.pixelRatio;\n      var scale = textState.scale * pixelRatio;\n      var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];\n      var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n      var lines = text.split('\\n');\n      var numLines = lines.length;\n      var widths = [];\n      var width = measureTextWidths(textState.font, lines, widths);\n      var lineHeight = measureTextHeight(textState.font);\n      var height = lineHeight * numLines;\n      var renderWidth = width + strokeWidth;\n      var context = createCanvasContext2D(Math.ceil(renderWidth * scale), Math.ceil((height + strokeWidth) * scale));\n      label = context.canvas;\n      labelCache.set(key, label);\n\n      if (scale != 1) {\n        context.scale(scale, scale);\n      }\n\n      context.font = textState.font;\n\n      if (strokeKey) {\n        context.strokeStyle = strokeState.strokeStyle;\n        context.lineWidth = strokeWidth;\n        context.lineCap = strokeState.lineCap;\n        context.lineJoin = strokeState.lineJoin;\n        context.miterLimit = strokeState.miterLimit;\n\n        if (CANVAS_LINE_DASH && strokeState.lineDash.length) {\n          context.setLineDash(strokeState.lineDash);\n          context.lineDashOffset = strokeState.lineDashOffset;\n        }\n      }\n\n      if (fillKey) {\n        context.fillStyle = fillState.fillStyle;\n      }\n\n      context.textBaseline = 'middle';\n      context.textAlign = 'center';\n      var leftRight = 0.5 - align;\n      var x = align * label.width / scale + leftRight * strokeWidth;\n      var i;\n\n      if (strokeKey) {\n        for (i = 0; i < numLines; ++i) {\n          context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n        }\n      }\n\n      if (fillKey) {\n        for (i = 0; i < numLines; ++i) {\n          context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n        }\n      }\n    }\n\n    return labelCache.get(key);\n  };\n  /**\n   * @private\n   * @param {HTMLCanvasElement} label Label.\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n\n\n  CanvasTextReplay.prototype.drawTextImage_ = function drawTextImage_(label, begin, end) {\n    var textState = this.textState_;\n    var strokeState = this.textStrokeState_;\n    var pixelRatio = this.pixelRatio;\n    var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];\n    var baseline = TEXT_ALIGN[textState.textBaseline];\n    var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n    var anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;\n    var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n    this.instructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio, this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_, 1, true, label.width, textState.padding == defaultPadding ? defaultPadding : textState.padding.map(function (p) {\n      return p * pixelRatio;\n    }), !!textState.backgroundFill, !!textState.backgroundStroke]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio, this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_, 1 / pixelRatio, true, label.width, textState.padding, !!textState.backgroundFill, !!textState.backgroundStroke]);\n  };\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.\n   */\n\n\n  CanvasTextReplay.prototype.drawChars_ = function drawChars_(begin, end, declutterGroup) {\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    var fillState = this.textFillState_;\n    var strokeKey = this.strokeKey_;\n\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] =\n        /** @type {module:ol/render/canvas~StrokeState} */\n        {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash\n        };\n      }\n    }\n\n    var textKey = this.textKey_;\n\n    if (!(this.textKey_ in this.textStates)) {\n      this.textStates[this.textKey_] =\n      /** @type {module:ol/render/canvas~TextState} */\n      {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        scale: textState.scale\n      };\n    }\n\n    var fillKey = this.fillKey_;\n\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] =\n        /** @type {module:ol/render/canvas~FillState} */\n        {\n          fillStyle: fillState.fillStyle\n        };\n      }\n    }\n\n    var pixelRatio = this.pixelRatio;\n    var baseline = TEXT_ALIGN[textState.textBaseline];\n    var offsetY = this.textOffsetY_ * pixelRatio;\n    var text = this.text_;\n    var font = textState.font;\n    var textScale = textState.scale;\n    var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;\n    var widths = this.widths_[font];\n\n    if (!widths) {\n      this.widths_[font] = widths = {};\n    }\n\n    this.instructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, declutterGroup, textState.overflow, fillKey, textState.maxAngle, function (text) {\n      var width = widths[text];\n\n      if (!width) {\n        width = widths[text] = measureTextWidth(font, text);\n      }\n\n      return width * textScale * pixelRatio;\n    }, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, declutterGroup, textState.overflow, fillKey, textState.maxAngle, function (text) {\n      var width = widths[text];\n\n      if (!width) {\n        width = widths[text] = measureTextWidth(font, text);\n      }\n\n      return width * textScale;\n    }, offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio]);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasTextReplay.prototype.setTextStyle = function setTextStyle(textStyle, declutterGroup) {\n    var textState, fillState, strokeState;\n\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      this.declutterGroup_ =\n      /** @type {module:ol/render/canvas~DeclutterGroup} */\n      declutterGroup;\n      var textFillStyle = textStyle.getFill();\n\n      if (!textFillStyle) {\n        fillState = this.textFillState_ = null;\n      } else {\n        fillState = this.textFillState_;\n\n        if (!fillState) {\n          fillState = this.textFillState_ =\n          /** @type {module:ol/render/canvas~FillState} */\n          {};\n        }\n\n        fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);\n      }\n\n      var textStrokeStyle = textStyle.getStroke();\n\n      if (!textStrokeStyle) {\n        strokeState = this.textStrokeState_ = null;\n      } else {\n        strokeState = this.textStrokeState_;\n\n        if (!strokeState) {\n          strokeState = this.textStrokeState_ =\n          /** @type {module:ol/render/canvas~StrokeState} */\n          {};\n        }\n\n        var lineDash = textStrokeStyle.getLineDash();\n        var lineDashOffset = textStrokeStyle.getLineDashOffset();\n        var lineWidth = textStrokeStyle.getWidth();\n        var miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset = lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth = lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit = miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);\n      }\n\n      textState = this.textState_;\n      var font = textStyle.getFont() || defaultFont;\n      checkFont(font);\n      var textScale = textStyle.getScale();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? 1 : textScale;\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n      this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n      this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');\n      this.fillKey_ = fillState ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + getUid(fillState.fillStyle) : '';\n    }\n  };\n\n  return CanvasTextReplay;\n}(CanvasReplay);\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array.<string>} lines Lines to measure.\n * @param {Array.<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\n\n\nexport function measureTextWidths(font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n\n  for (var i = 0; i < numLines; ++i) {\n    var currentWidth = measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n\n  return width;\n}\nexport default CanvasTextReplay; //# sourceMappingURL=TextReplay.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/render/canvas/TextReplay.js"],"names":["getUid","asColorLike","createCanvasContext2D","intersects","matchingChunk","GeometryType","CANVAS_LINE_DASH","labelCache","measureTextWidth","defaultTextAlign","measureTextHeight","defaultPadding","defaultLineCap","defaultLineDashOffset","defaultLineDash","defaultLineJoin","defaultFillStyle","checkFont","defaultFont","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","defaultTextBaseline","CanvasInstruction","CanvasReplay","TEXT_ALIGN","TextPlacement","CanvasTextReplay","tolerance","maxExtent","resolution","pixelRatio","overlaps","declutterTree","call","declutterGroup_","labels_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","undefined","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","widths_","prune","__proto__","prototype","Object","create","constructor","drawText","geometry","feature","this$1","fillState","strokeState","textState","begin","coordinates","length","geometryType","getType","flatCoordinates","end","stride","i","ii","placement","LINE","getBufferedMaxExtent","getExtent","ends","getFlatCoordinates","getStride","LINE_STRING","MULTI_LINE_STRING","getEnds","POLYGON","slice","MULTI_POLYGON","endss","getEndss","push","beginGeometry","textAlign","flatOffset","flatEnd","o","oo","range","maxAngle","drawChars_","endGeometry","label","getImage","width","POINT","MULTI_POINT","getFlatMidpoint","CIRCLE","getCenter","getFlatMidpoints","getFlatInteriorPoint","overflow","interiorPoints","getFlatInteriorPoints","appendFlatCoordinates","backgroundFill","backgroundStroke","setFillStrokeStyle","updateFillStyle","state","createFill","hitDetectionInstructions","updateStrokeStyle","applyStroke","createStroke","drawTextImage_","text","textKey","fillKey","strokeKey","key","containsKey","scale","align","strokeWidth","lineWidth","lines","split","numLines","widths","measureTextWidths","font","lineHeight","height","renderWidth","context","Math","ceil","canvas","set","strokeStyle","lineCap","lineJoin","miterLimit","lineDash","setLineDash","lineDashOffset","fillStyle","textBaseline","leftRight","x","strokeText","fillText","get","baseline","anchorX","anchorY","instructions","DRAW_IMAGE","padding","map","p","declutterGroup","offsetY","textScale","DRAW_CHARS","setTextStyle","textStyle","textFillStyle","getFill","getColor","textStrokeStyle","getStroke","getLineDash","getLineDashOffset","getWidth","getMiterLimit","getLineCap","getLineJoin","getFont","getScale","getOverflow","getMaxAngle","getPlacement","getTextAlign","getTextBaseline","getBackgroundFill","getBackgroundStroke","getPadding","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","getRotateWithView","textRotation","getRotation","getText","join","currentWidth","max"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/canvas/TextReplay\n */\nimport {getUid} from '../../util.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {intersects} from '../../extent.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport {CANVAS_LINE_DASH} from '../../has.js';\nimport {labelCache, measureTextWidth, defaultTextAlign, measureTextHeight, defaultPadding, defaultLineCap, defaultLineDashOffset, defaultLineDash, defaultLineJoin, defaultFillStyle, checkFont, defaultFont, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline} from '../canvas.js';\nimport CanvasInstruction from '../canvas/Instruction.js';\nimport CanvasReplay from '../canvas/Replay.js';\nimport {TEXT_ALIGN} from '../replay.js';\nimport TextPlacement from '../../style/TextPlacement.js';\n\nvar CanvasTextReplay = (function (CanvasReplay) {\n  function CanvasTextReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n    CanvasReplay.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n\n    /**\n     * @private\n     * @type {module:ol/render/canvas~DeclutterGroup}\n     */\n    this.declutterGroup_;\n\n    /**\n     * @private\n     * @type {Array.<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object.<string, module:ol/render/canvas~FillState>}\n     */\n    this.fillStates = {};\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object.<string, module:ol/render/canvas~StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {module:ol/render/canvas~TextState}\n     */\n    this.textState_ = /** @type {module:ol/render/canvas~TextState} */ ({});\n\n    /**\n     * @type {!Object.<string, module:ol/render/canvas~TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * @private\n     * @type {Object.<string, Object.<string, number>>}\n     */\n    this.widths_ = {};\n\n    labelCache.prune();\n\n  }\n\n  if ( CanvasReplay ) CanvasTextReplay.__proto__ = CanvasReplay;\n  CanvasTextReplay.prototype = Object.create( CanvasReplay && CanvasReplay.prototype );\n  CanvasTextReplay.prototype.constructor = CanvasTextReplay;\n\n  /**\n   * @inheritDoc\n   */\n  CanvasTextReplay.prototype.drawText = function drawText (geometry, feature) {\n    var this$1 = this;\n\n    var fillState = this.textFillState_;\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    var begin = this.coordinates.length;\n\n    var geometryType = geometry.getType();\n    var flatCoordinates = null;\n    var end = 2;\n    var stride = 2;\n    var i, ii;\n\n    if (textState.placement === TextPlacement.LINE) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      var ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      stride = geometry.getStride();\n      if (geometryType == GeometryType.LINE_STRING) {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n        ends = geometry.getEnds();\n      } else if (geometryType == GeometryType.POLYGON) {\n        ends = geometry.getEnds().slice(0, 1);\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\n        var endss = geometry.getEndss();\n        ends = [];\n        for (i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      var textAlign = textState.textAlign;\n      var flatOffset = 0;\n      var flatEnd;\n      for (var o = 0, oo = ends.length; o < oo; ++o) {\n        if (textAlign == undefined) {\n          var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n          flatOffset = range[0];\n          flatEnd = range[1];\n        } else {\n          flatEnd = ends[o];\n        }\n        for (i = flatOffset; i < flatEnd; i += stride) {\n          this$1.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        }\n        end = this$1.coordinates.length;\n        flatOffset = ends[o];\n        this$1.drawChars_(begin, end, this$1.declutterGroup_);\n        begin = end;\n      }\n      this.endGeometry(geometry, feature);\n\n    } else {\n      var label = this.getImage(this.text_, this.textKey_, this.fillKey_, this.strokeKey_);\n      var width = label.width / this.pixelRatio;\n      switch (geometryType) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n          flatCoordinates = geometry.getFlatCoordinates();\n          end = flatCoordinates.length;\n          break;\n        case GeometryType.LINE_STRING:\n          flatCoordinates = /** @type {module:ol/geom/LineString} */ (geometry).getFlatMidpoint();\n          break;\n        case GeometryType.CIRCLE:\n          flatCoordinates = /** @type {module:ol/geom/Circle} */ (geometry).getCenter();\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          flatCoordinates = /** @type {module:ol/geom/MultiLineString} */ (geometry).getFlatMidpoints();\n          end = flatCoordinates.length;\n          break;\n        case GeometryType.POLYGON:\n          flatCoordinates = /** @type {module:ol/geom/Polygon} */ (geometry).getFlatInteriorPoint();\n          if (!textState.overflow && flatCoordinates[2] / this.resolution < width) {\n            return;\n          }\n          stride = 3;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          var interiorPoints = /** @type {module:ol/geom/MultiPolygon} */ (geometry).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (textState.overflow || interiorPoints[i + 2] / this$1.resolution >= width) {\n              flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n            }\n          }\n          end = flatCoordinates.length;\n          if (end == 0) {\n            return;\n          }\n          break;\n        default:\n      }\n      end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill, geometry);\n          this.hitDetectionInstructions.push(this.createFill(this.state, geometry));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      this.drawTextImage_(label, begin, end);\n      this.endGeometry(geometry, feature);\n    }\n  };\n\n  /**\n   * @param {string} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {HTMLCanvasElement} Image.\n   */\n  CanvasTextReplay.prototype.getImage = function getImage (text, textKey, fillKey, strokeKey) {\n    var label;\n    var key = strokeKey + textKey + text + fillKey + this.pixelRatio;\n\n    if (!labelCache.containsKey(key)) {\n      var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;\n      var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;\n      var textState = this.textStates[textKey] || this.textState_;\n      var pixelRatio = this.pixelRatio;\n      var scale = textState.scale * pixelRatio;\n      var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];\n      var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n      var lines = text.split('\\n');\n      var numLines = lines.length;\n      var widths = [];\n      var width = measureTextWidths(textState.font, lines, widths);\n      var lineHeight = measureTextHeight(textState.font);\n      var height = lineHeight * numLines;\n      var renderWidth = (width + strokeWidth);\n      var context = createCanvasContext2D(\n        Math.ceil(renderWidth * scale),\n        Math.ceil((height + strokeWidth) * scale));\n      label = context.canvas;\n      labelCache.set(key, label);\n      if (scale != 1) {\n        context.scale(scale, scale);\n      }\n      context.font = textState.font;\n      if (strokeKey) {\n        context.strokeStyle = strokeState.strokeStyle;\n        context.lineWidth = strokeWidth;\n        context.lineCap = strokeState.lineCap;\n        context.lineJoin = strokeState.lineJoin;\n        context.miterLimit = strokeState.miterLimit;\n        if (CANVAS_LINE_DASH && strokeState.lineDash.length) {\n          context.setLineDash(strokeState.lineDash);\n          context.lineDashOffset = strokeState.lineDashOffset;\n        }\n      }\n      if (fillKey) {\n        context.fillStyle = fillState.fillStyle;\n      }\n      context.textBaseline = 'middle';\n      context.textAlign = 'center';\n      var leftRight = (0.5 - align);\n      var x = align * label.width / scale + leftRight * strokeWidth;\n      var i;\n      if (strokeKey) {\n        for (i = 0; i < numLines; ++i) {\n          context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n        }\n      }\n      if (fillKey) {\n        for (i = 0; i < numLines; ++i) {\n          context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);\n        }\n      }\n    }\n    return labelCache.get(key);\n  };\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} label Label.\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  CanvasTextReplay.prototype.drawTextImage_ = function drawTextImage_ (label, begin, end) {\n    var textState = this.textState_;\n    var strokeState = this.textStrokeState_;\n    var pixelRatio = this.pixelRatio;\n    var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];\n    var baseline = TEXT_ALIGN[textState.textBaseline];\n    var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    var anchorX = align * label.width / pixelRatio + 2 * (0.5 - align) * strokeWidth;\n    var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n    this.instructions.push([CanvasInstruction.DRAW_IMAGE, begin, end,\n      label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,\n      this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,\n      1, true, label.width,\n      textState.padding == defaultPadding ?\n        defaultPadding : textState.padding.map(function(p) {\n          return p * pixelRatio;\n        }),\n      !!textState.backgroundFill, !!textState.backgroundStroke\n    ]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, begin, end,\n      label, (anchorX - this.textOffsetX_) * pixelRatio, (anchorY - this.textOffsetY_) * pixelRatio,\n      this.declutterGroup_, label.height, 1, 0, 0, this.textRotateWithView_, this.textRotation_,\n      1 / pixelRatio, true, label.width, textState.padding,\n      !!textState.backgroundFill, !!textState.backgroundStroke\n    ]);\n  };\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   * @param {module:ol/render/canvas~DeclutterGroup} declutterGroup Declutter group.\n   */\n  CanvasTextReplay.prototype.drawChars_ = function drawChars_ (begin, end, declutterGroup) {\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    var fillState = this.textFillState_;\n\n    var strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = /** @type {module:ol/render/canvas~StrokeState} */ ({\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash\n        });\n      }\n    }\n    var textKey = this.textKey_;\n    if (!(this.textKey_ in this.textStates)) {\n      this.textStates[this.textKey_] = /** @type {module:ol/render/canvas~TextState} */ ({\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        scale: textState.scale\n      });\n    }\n    var fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = /** @type {module:ol/render/canvas~FillState} */ ({\n          fillStyle: fillState.fillStyle\n        });\n      }\n    }\n\n    var pixelRatio = this.pixelRatio;\n    var baseline = TEXT_ALIGN[textState.textBaseline];\n\n    var offsetY = this.textOffsetY_ * pixelRatio;\n    var text = this.text_;\n    var font = textState.font;\n    var textScale = textState.scale;\n    var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;\n    var widths = this.widths_[font];\n    if (!widths) {\n      this.widths_[font] = widths = {};\n    }\n    this.instructions.push([CanvasInstruction.DRAW_CHARS,\n      begin, end, baseline, declutterGroup,\n      textState.overflow, fillKey, textState.maxAngle,\n      function(text) {\n        var width = widths[text];\n        if (!width) {\n          width = widths[text] = measureTextWidth(font, text);\n        }\n        return width * textScale * pixelRatio;\n      },\n      offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1\n    ]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS,\n      begin, end, baseline, declutterGroup,\n      textState.overflow, fillKey, textState.maxAngle,\n      function(text) {\n        var width = widths[text];\n        if (!width) {\n          width = widths[text] = measureTextWidth(font, text);\n        }\n        return width * textScale;\n      },\n      offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio\n    ]);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasTextReplay.prototype.setTextStyle = function setTextStyle (textStyle, declutterGroup) {\n    var textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      this.declutterGroup_ = /** @type {module:ol/render/canvas~DeclutterGroup} */ (declutterGroup);\n\n      var textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = this.textFillState_ = null;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = this.textFillState_ = /** @type {module:ol/render/canvas~FillState} */ ({});\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle);\n      }\n\n      var textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = this.textStrokeState_ = null;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = this.textStrokeState_ = /** @type {module:ol/render/canvas~StrokeState} */ ({});\n        }\n        var lineDash = textStrokeStyle.getLineDash();\n        var lineDashOffset = textStrokeStyle.getLineDashOffset();\n        var lineWidth = textStrokeStyle.getWidth();\n        var miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n            lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n            lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n            miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle);\n      }\n\n      textState = this.textState_;\n      var font = textStyle.getFont() || defaultFont;\n      checkFont(font);\n      var textScale = textStyle.getScale();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? 1 : textScale;\n\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState ?\n        (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) +\n        strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +\n        strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :\n        '';\n      this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');\n      this.fillKey_ = fillState ?\n        (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + getUid(fillState.fillStyle))) :\n        '';\n    }\n  };\n\n  return CanvasTextReplay;\n}(CanvasReplay));\n\n\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array.<string>} lines Lines to measure.\n * @param {Array.<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\nexport function measureTextWidths(font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n  for (var i = 0; i < numLines; ++i) {\n    var currentWidth = measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n  return width;\n}\n\n\nexport default CanvasTextReplay;\n\n//# sourceMappingURL=TextReplay.js.map"]},"metadata":{},"sourceType":"module"}
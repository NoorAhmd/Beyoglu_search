{"ast":null,"code":"/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { zoom, zoomWithoutConstraints } from '../interaction/Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from '../interaction/Pointer.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\n\nvar PinchZoom = function (PointerInteraction) {\n  function PinchZoom(opt_options) {\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleUpEvent: handleUpEvent,\n      stopDown: FALSE\n    });\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.constrainResolution_ = options.constrainResolution || false;\n    /**\n     * @private\n     * @type {module:ol/coordinate~Coordinate}\n     */\n\n    this.anchor_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastDistance_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.lastScaleDelta_ = 1;\n  }\n\n  if (PointerInteraction) PinchZoom.__proto__ = PointerInteraction;\n  PinchZoom.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchZoom.prototype.constructor = PinchZoom;\n  return PinchZoom;\n}(PointerInteraction);\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/PinchZoom}\n */\n\n\nfunction handleDragEvent(mapBrowserEvent) {\n  var scaleDelta = 1.0;\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1];\n  var dx = touch0.clientX - touch1.clientX;\n  var dy = touch0.clientY - touch1.clientY; // distance between touches\n\n  var distance = Math.sqrt(dx * dx + dy * dy);\n\n  if (this.lastDistance_ !== undefined) {\n    scaleDelta = this.lastDistance_ / distance;\n  }\n\n  this.lastDistance_ = distance;\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  var resolution = view.getResolution();\n  var maxResolution = view.getMaxResolution();\n  var minResolution = view.getMinResolution();\n  var newResolution = resolution * scaleDelta;\n\n  if (newResolution > maxResolution) {\n    scaleDelta = maxResolution / resolution;\n    newResolution = maxResolution;\n  } else if (newResolution < minResolution) {\n    scaleDelta = minResolution / resolution;\n    newResolution = minResolution;\n  }\n\n  if (scaleDelta != 1.0) {\n    this.lastScaleDelta_ = scaleDelta;\n  } // scale anchor point.\n\n\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n  var centroid = centroidFromPointers(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid); // scale, bypass the resolution constraint\n\n  map.render();\n  zoomWithoutConstraints(view, newResolution, this.anchor_);\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/PinchZoom}\n */\n\n\nfunction handleUpEvent(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    var resolution = view.getResolution();\n\n    if (this.constrainResolution_ || resolution < view.getMinResolution() || resolution > view.getMaxResolution()) {\n      // Zoom to final resolution, with an animation, and provide a\n      // direction not to zoom out/in if user was pinching in/out.\n      // Direction is > 0 if pinching out, and < 0 if pinching in.\n      var direction = this.lastScaleDelta_ - 1;\n      zoom(view, resolution, this.anchor_, this.duration_, direction);\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/PinchZoom}\n */\n\n\nfunction handleDownEvent(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastDistance_ = undefined;\n    this.lastScaleDelta_ = 1;\n\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport default PinchZoom; //# sourceMappingURL=PinchZoom.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/interaction/pinchzoom.js"],"names":["ViewHint","FALSE","zoom","zoomWithoutConstraints","PointerInteraction","centroid","centroidFromPointers","PinchZoom","opt_options","call","handleDownEvent","handleDragEvent","handleUpEvent","stopDown","options","constrainResolution_","constrainResolution","anchor_","duration_","duration","undefined","lastDistance_","lastScaleDelta_","__proto__","prototype","Object","create","constructor","mapBrowserEvent","scaleDelta","touch0","targetPointers","touch1","dx","clientX","dy","clientY","distance","Math","sqrt","map","view","getView","resolution","getResolution","maxResolution","getMaxResolution","minResolution","getMinResolution","newResolution","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixel","render","length","setHint","INTERACTING","direction","handlingDownUpSequence"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {zoom, zoomWithoutConstraints} from '../interaction/Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from '../interaction/Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchZoom = (function (PointerInteraction) {\n  function PinchZoom(opt_options) {\n\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleUpEvent: handleUpEvent,\n      stopDown: FALSE\n    });\n\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ = options.constrainResolution || false;\n\n    /**\n     * @private\n     * @type {module:ol/coordinate~Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n\n  }\n\n  if ( PointerInteraction ) PinchZoom.__proto__ = PointerInteraction;\n  PinchZoom.prototype = Object.create( PointerInteraction && PointerInteraction.prototype );\n  PinchZoom.prototype.constructor = PinchZoom;\n\n  return PinchZoom;\n}(PointerInteraction));\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/PinchZoom}\n */\nfunction handleDragEvent(mapBrowserEvent) {\n  var scaleDelta = 1.0;\n\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1];\n  var dx = touch0.clientX - touch1.clientX;\n  var dy = touch0.clientY - touch1.clientY;\n\n  // distance between touches\n  var distance = Math.sqrt(dx * dx + dy * dy);\n\n  if (this.lastDistance_ !== undefined) {\n    scaleDelta = this.lastDistance_ / distance;\n  }\n  this.lastDistance_ = distance;\n\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  var resolution = view.getResolution();\n  var maxResolution = view.getMaxResolution();\n  var minResolution = view.getMinResolution();\n  var newResolution = resolution * scaleDelta;\n  if (newResolution > maxResolution) {\n    scaleDelta = maxResolution / resolution;\n    newResolution = maxResolution;\n  } else if (newResolution < minResolution) {\n    scaleDelta = minResolution / resolution;\n    newResolution = minResolution;\n  }\n\n  if (scaleDelta != 1.0) {\n    this.lastScaleDelta_ = scaleDelta;\n  }\n\n  // scale anchor point.\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n  var centroid = centroidFromPointers(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n  // scale, bypass the resolution constraint\n  map.render();\n  zoomWithoutConstraints(view, newResolution, this.anchor_);\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/PinchZoom}\n */\nfunction handleUpEvent(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    var resolution = view.getResolution();\n    if (this.constrainResolution_ ||\n        resolution < view.getMinResolution() ||\n        resolution > view.getMaxResolution()) {\n      // Zoom to final resolution, with an animation, and provide a\n      // direction not to zoom out/in if user was pinching in/out.\n      // Direction is > 0 if pinching out, and < 0 if pinching in.\n      var direction = this.lastScaleDelta_ - 1;\n      zoom(view, resolution, this.anchor_, this.duration_, direction);\n    }\n    return false;\n  } else {\n    return true;\n  }\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/PinchZoom}\n */\nfunction handleDownEvent(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastDistance_ = undefined;\n    this.lastScaleDelta_ = 1;\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport default PinchZoom;\n\n//# sourceMappingURL=PinchZoom.js.map"]},"metadata":{},"sourceType":"module"}
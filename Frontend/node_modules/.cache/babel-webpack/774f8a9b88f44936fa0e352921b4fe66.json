{"ast":null,"code":"import _toConsumableArray from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { SelectionModel } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nvar _c0 = [\"button\"];\nvar _c1 = [\"*\"];\n\nvar MatButtonToggleGroupBase = function MatButtonToggleGroupBase() {\n  _classCallCheck(this, MatButtonToggleGroupBase);\n};\n\nvar\n/** @type {?} */\n_MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\n\n\nvar\n/** @type {?} */\nMAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatButtonToggleGroup;\n  }),\n  multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 7.0.0\n */\n\nvar MatButtonToggleGroupMultiple = function MatButtonToggleGroupMultiple() {\n  _classCallCheck(this, MatButtonToggleGroupMultiple);\n};\n\nvar\n/** @type {?} */\n_uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\n\nvar MatButtonToggleChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatButtonToggleChange(source, value) {\n  _classCallCheck(this, MatButtonToggleChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\n\n\nvar MatButtonToggleGroup = /*#__PURE__*/function (_MatButtonToggleGroup) {\n  _inherits(MatButtonToggleGroup, _MatButtonToggleGroup);\n\n  var _super = _createSuper(MatButtonToggleGroup);\n\n  /**\n   * @param {?} _changeDetector\n   */\n  function MatButtonToggleGroup(_changeDetector) {\n    var _this;\n\n    _classCallCheck(this, MatButtonToggleGroup);\n\n    _this = _super.call(this);\n    _this._changeDetector = _changeDetector;\n    _this._vertical = false;\n    _this._multiple = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n\n    _this._controlValueAccessorChangeFn = function () {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n\n\n    _this._onTouched = function () {};\n\n    _this._name = \"mat-button-toggle-group-\".concat(_uniqueIdCounter++);\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n    /**\n     * Event emitted when the group's value changes.\n     */\n\n    _this.change = new EventEmitter();\n    return _this;\n  }\n  /**\n   * `name` attribute for the underlying `input` element.\n   * @return {?}\n   */\n\n\n  _createClass(MatButtonToggleGroup, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this2 = this;\n\n      this._name = value;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          return toggle.name = _this2._name;\n        });\n      }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      var\n      /** @type {?} */\n      selected = this._selectionModel ? this._selectionModel.selected : [];\n\n      if (this.multiple) {\n        return selected.map(function (toggle) {\n          return toggle.value;\n        });\n      }\n\n      return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._setSelectionByValue(newValue);\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      var\n      /** @type {?} */\n      selected = this._selectionModel.selected;\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this$_selectionModel;\n\n      (_this$_selectionModel = this._selectionModel).select.apply(_this$_selectionModel, _toConsumableArray(this._buttonToggles.filter(function (toggle) {\n        return toggle.checked;\n      })));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          return toggle._markForCheck();\n        });\n      }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      var\n      /** @type {?} */\n      selected = this.selected;\n      var\n      /** @type {?} */\n      source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      var\n      /** @type {?} */\n      event = new MatButtonToggleChange(\n      /** @type {?} */\n      source, this.value);\n\n      this._controlValueAccessorChangeFn(event.value);\n\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncButtonToggle\",\n    value: function _syncButtonToggle(toggle, select) {\n      var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        /** @type {?} */\n        this.selected.checked = false;\n      }\n\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      } // Only emit the change event for user input.\n\n\n      if (isUserInput) {\n        this._emitChangeEvent();\n      } // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSelected\",\n    value: function _isSelected(toggle) {\n      return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPrechecked\",\n    value: function _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(function (value) {\n          return toggle.value != null && value === toggle.value;\n        });\n      }\n\n      return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this3 = this;\n\n      this._rawValue = value;\n\n      if (!this._buttonToggles) {\n        return;\n      }\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n\n        this._clearSelection();\n\n        value.forEach(function (currentValue) {\n          return _this3._selectValue(currentValue);\n        });\n      } else {\n        this._clearSelection();\n\n        this._selectValue(value);\n      }\n    }\n    /**\n     * Clears the selected toggles.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      this._selectionModel.clear();\n\n      this._buttonToggles.forEach(function (toggle) {\n        return toggle.checked = false;\n      });\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var\n      /** @type {?} */\n      correspondingOption = this._buttonToggles.find(function (toggle) {\n        return toggle.value != null && toggle.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n\n        this._selectionModel.select(correspondingOption);\n      }\n    }\n  }]);\n\n  return MatButtonToggleGroup;\n}(_MatButtonToggleGroupMixinBase);\n\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 2,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MatButtonToggleGroupMultiple,\n    useExisting: MatButtonToggleGroup\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatButtonToggleGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nMatButtonToggleGroup.propDecorators = {\n  \"_buttonToggles\": [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatButtonToggle;\n    })]\n  }],\n  \"name\": [{\n    type: Input\n  }],\n  \"vertical\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"valueChange\": [{\n    type: Output\n  }],\n  \"multiple\": [{\n    type: Input\n  }],\n  \"change\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MatButtonToggleGroupMultiple,\n        useExisting: MatButtonToggleGroup\n      }],\n      inputs: ['disabled'],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[class.mat-button-toggle-vertical]': 'vertical'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    valueChange: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatButtonToggle;\n      })]\n    }]\n  });\n})();\n/**\n * \\@docs-private\n */\n\n\nvar MatButtonToggleBase = function MatButtonToggleBase() {\n  _classCallCheck(this, MatButtonToggleBase);\n};\n\nvar\n/** @type {?} */\n_MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\n\n\nvar MatButtonToggle = /*#__PURE__*/function (_MatButtonToggleMixin) {\n  _inherits(MatButtonToggle, _MatButtonToggleMixin);\n\n  var _super2 = _createSuper(MatButtonToggle);\n\n  /**\n   * @param {?} toggleGroup\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   */\n  function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor) {\n    var _this4;\n\n    _classCallCheck(this, MatButtonToggle);\n\n    _this4 = _super2.call(this);\n    _this4._changeDetectorRef = _changeDetectorRef;\n    _this4._elementRef = _elementRef;\n    _this4._focusMonitor = _focusMonitor;\n    _this4._isSingleSelector = false;\n    _this4._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this4.ariaLabelledby = null;\n    _this4._disabled = false;\n    /**\n     * Event emitted when the group value changes.\n     */\n\n    _this4.change = new EventEmitter();\n    _this4.buttonToggleGroup = toggleGroup;\n    return _this4;\n  }\n  /**\n   * Unique ID for the underlying `button` element.\n   * @return {?}\n   */\n\n\n  _createClass(MatButtonToggle, [{\n    key: \"buttonId\",\n    get: function get() {\n      return \"\".concat(this.id, \"-button\");\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var\n      /** @type {?} */\n      newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._checked) {\n        this._checked = newValue;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n      this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n      this.id = this.id || \"mat-button-toggle-\".concat(_uniqueIdCounter++);\n\n      if (this._isSingleSelector) {\n        this.name = this.buttonToggleGroup.name;\n      }\n\n      if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n        this.checked = true;\n      }\n\n      this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick() {\n      var\n      /** @type {?} */\n      newChecked = this._isSingleSelector ? true : !this._checked;\n\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n\n          this.buttonToggleGroup._onTouched();\n        }\n      } // Emit a change event when it's the single selector\n\n\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatButtonToggle;\n}(_MatButtonToggleMixinBase);\n\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-button-toggle\"],\n  hostVars: 7,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    checked: \"checked\",\n    disabled: \"disabled\",\n    id: \"id\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 8,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"div\", 3);\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵattribute(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  directives: [ɵngcc2.MatRipple],\n  styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0;border-bottom:solid 36px}}.mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatButtonToggle.ctorParameters = function () {\n  return [{\n    type: MatButtonToggleGroup,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nMatButtonToggle.propDecorators = {\n  \"ariaLabel\": [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  \"ariaLabelledby\": [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  \"_buttonElement\": [{\n    type: ViewChild,\n    args: ['button']\n  }],\n  \"id\": [{\n    type: Input\n  }],\n  \"name\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"checked\": [{\n    type: Input\n  }],\n  \"disabled\": [{\n    type: Input\n  }],\n  \"change\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n      styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0;border-bottom:solid 36px}}.mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0}\"],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        'class': 'mat-button-toggle',\n        '[attr.id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatButtonToggleModule = function MatButtonToggleModule() {\n  _classCallCheck(this, MatButtonToggleModule);\n};\n\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n  return new (t || MatButtonToggleModule)();\n};\n\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, MatRippleModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function declarations() {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function imports() {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatButtonToggleGroupBase, _MatButtonToggleGroupMixinBase, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule }; //# sourceMappingURL=button-toggle.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/material/__ivy_ngcc__/esm2015/button-toggle.js"],"names":["FocusMonitor","coerceBooleanProperty","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Directive","ElementRef","EventEmitter","forwardRef","Input","Optional","Output","ViewChild","ViewEncapsulation","NgModule","NG_VALUE_ACCESSOR","mixinDisabled","mixinDisableRipple","MatCommonModule","MatRippleModule","SelectionModel","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","_vertical","_multiple","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","_buttonToggles","forEach","toggle","name","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","select","filter","checked","markForCheck","fn","isDisabled","disabled","_markForCheck","Array","isArray","length","event","isUserInput","deselect","_emitChangeEvent","isSelected","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵclassProp","vertical","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ctorParameters","propDecorators","args","ngDevMode","ɵsetClassMetadata","selector","providers","host","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","_isSingleSelector","_checked","ariaLabelledby","_disabled","buttonToggleGroup","id","_isSelected","_syncButtonToggle","_type","_isPrechecked","monitor","nativeElement","stopMonitoring","_buttonElement","focus","newChecked","MatButtonToggle_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","ɵɵattribute","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","buttonId","ɵɵadvance","directives","MatRipple","styles","encapsulation","changeDetection","decorators","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { SelectionModel } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nclass MatButtonToggleGroupBase {\n}\nconst /** @type {?} */ _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nconst /** @type {?} */ MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 7.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        super();\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle.name = this._name);\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        const /** @type {?} */ selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        const /** @type {?} */ selected = this._selectionModel.selected;\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        const /** @type {?} */ selected = this.selected;\n        const /** @type {?} */ source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const /** @type {?} */ event = new MatButtonToggleChange(/** @type {?} */ ((source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (/** @type {?} */ (this.selected)).checked = false;\n        }\n        if (select) {\n            this._selectionModel.select(toggle);\n        }\n        else {\n            this._selectionModel.deselect(toggle);\n        }\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        const /** @type {?} */ correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 2, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical);\n    } }, inputs: { disabled: \"disabled\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef, },\n];\nMatButtonToggleGroup.propDecorators = {\n    \"_buttonToggles\": [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle),] },],\n    \"name\": [{ type: Input },],\n    \"vertical\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"valueChange\": [{ type: Output },],\n    \"multiple\": [{ type: Input },],\n    \"change\": [{ type: Output },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                inputs: ['disabled'],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[class.mat-button-toggle-vertical]': 'vertical'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle)]\n        }] }); })();\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\nconst /** @type {?} */ _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        this.buttonToggleGroup = toggleGroup;\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        const /** @type {?} */ newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    focus() {\n        this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        const /** @type {?} */ newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 7, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled);\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 8, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0;border-bottom:solid 36px}}.mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional },] },\n    { type: ChangeDetectorRef, },\n    { type: ElementRef, },\n    { type: FocusMonitor, },\n];\nMatButtonToggle.propDecorators = {\n    \"ariaLabel\": [{ type: Input, args: ['aria-label',] },],\n    \"ariaLabelledby\": [{ type: Input, args: ['aria-labelledby',] },],\n    \"_buttonElement\": [{ type: ViewChild, args: ['button',] },],\n    \"id\": [{ type: Input },],\n    \"name\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"checked\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n    \"change\": [{ type: Output },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n                styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;position:relative;-webkit-tap-highlight-color:transparent}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0;border-bottom:solid 36px}}.mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    'class': 'mat-button-toggle',\n                    '[attr.id]': 'id'\n                } }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatButtonToggleGroupBase, _MatButtonToggleGroupMixinBase, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/Map\n */\nimport PluggableMap from './PluggableMap.js';\nimport { defaults as defaultControls } from './control/util.js';\nimport { defaults as defaultInteractions } from './interaction.js';\nimport { assign } from './obj.js';\nimport CanvasImageLayerRenderer from './renderer/canvas/ImageLayer.js';\nimport CanvasMapRenderer from './renderer/canvas/Map.js';\nimport CanvasTileLayerRenderer from './renderer/canvas/TileLayer.js';\nimport CanvasVectorLayerRenderer from './renderer/canvas/VectorLayer.js';\nimport CanvasVectorTileLayerRenderer from './renderer/canvas/VectorTileLayer.js';\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}\n * is a subclass of {@link module:ol/layer/Base}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires module:ol/MapBrowserEvent~MapBrowserEvent\n * @fires module:ol/MapEvent~MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @api\n */\n\nvar Map = function (PluggableMap) {\n  function Map(options) {\n    options = assign({}, options);\n\n    if (!options.controls) {\n      options.controls = defaultControls();\n    }\n\n    if (!options.interactions) {\n      options.interactions = defaultInteractions();\n    }\n\n    PluggableMap.call(this, options);\n  }\n\n  if (PluggableMap) Map.__proto__ = PluggableMap;\n  Map.prototype = Object.create(PluggableMap && PluggableMap.prototype);\n  Map.prototype.constructor = Map;\n\n  Map.prototype.createRenderer = function createRenderer() {\n    var renderer = new CanvasMapRenderer(this);\n    renderer.registerLayerRenderers([CanvasImageLayerRenderer, CanvasTileLayerRenderer, CanvasVectorLayerRenderer, CanvasVectorTileLayerRenderer]);\n    return renderer;\n  };\n\n  return Map;\n}(PluggableMap);\n\nexport default Map; //# sourceMappingURL=Map.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/MAP.js"],"names":["PluggableMap","defaults","defaultControls","defaultInteractions","assign","CanvasImageLayerRenderer","CanvasMapRenderer","CanvasTileLayerRenderer","CanvasVectorLayerRenderer","CanvasVectorTileLayerRenderer","Map","options","controls","interactions","call","__proto__","prototype","Object","create","constructor","createRenderer","renderer","registerLayerRenderers"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,SAAQC,QAAQ,IAAIC,eAApB,QAA0C,mBAA1C;AACA,SAAQD,QAAQ,IAAIE,mBAApB,QAA8C,kBAA9C;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,OAAOC,wBAAP,MAAqC,iCAArC;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAOC,uBAAP,MAAoC,gCAApC;AACA,OAAOC,yBAAP,MAAsC,kCAAtC;AACA,OAAOC,6BAAP,MAA0C,sCAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,GAAG,GAAI,UAAUV,YAAV,EAAwB;AACjC,WAASU,GAAT,CAAaC,OAAb,EAAsB;AACpBA,IAAAA,OAAO,GAAGP,MAAM,CAAC,EAAD,EAAKO,OAAL,CAAhB;;AACA,QAAI,CAACA,OAAO,CAACC,QAAb,EAAuB;AACrBD,MAAAA,OAAO,CAACC,QAAR,GAAmBV,eAAe,EAAlC;AACD;;AACD,QAAI,CAACS,OAAO,CAACE,YAAb,EAA2B;AACzBF,MAAAA,OAAO,CAACE,YAAR,GAAuBV,mBAAmB,EAA1C;AACD;;AAEDH,IAAAA,YAAY,CAACc,IAAb,CAAkB,IAAlB,EAAwBH,OAAxB;AACD;;AAED,MAAKX,YAAL,EAAoBU,GAAG,CAACK,SAAJ,GAAgBf,YAAhB;AACpBU,EAAAA,GAAG,CAACM,SAAJ,GAAgBC,MAAM,CAACC,MAAP,CAAelB,YAAY,IAAIA,YAAY,CAACgB,SAA5C,CAAhB;AACAN,EAAAA,GAAG,CAACM,SAAJ,CAAcG,WAAd,GAA4BT,GAA5B;;AAEAA,EAAAA,GAAG,CAACM,SAAJ,CAAcI,cAAd,GAA+B,SAASA,cAAT,GAA2B;AACxD,QAAIC,QAAQ,GAAG,IAAIf,iBAAJ,CAAsB,IAAtB,CAAf;AACAe,IAAAA,QAAQ,CAACC,sBAAT,CAAgC,CAC9BjB,wBAD8B,EAE9BE,uBAF8B,EAG9BC,yBAH8B,EAI9BC,6BAJ8B,CAAhC;AAMA,WAAOY,QAAP;AACD,GATD;;AAWA,SAAOX,GAAP;AACD,CA7BU,CA6BTV,YA7BS,CAAX;;AAgCA,eAAeU,GAAf,C,CAEA","sourcesContent":["/**\n * @module ol/Map\n */\nimport PluggableMap from './PluggableMap.js';\nimport {defaults as defaultControls} from './control/util.js';\nimport {defaults as defaultInteractions} from './interaction.js';\nimport {assign} from './obj.js';\nimport CanvasImageLayerRenderer from './renderer/canvas/ImageLayer.js';\nimport CanvasMapRenderer from './renderer/canvas/Map.js';\nimport CanvasTileLayerRenderer from './renderer/canvas/TileLayer.js';\nimport CanvasVectorLayerRenderer from './renderer/canvas/VectorLayer.js';\nimport CanvasVectorTileLayerRenderer from './renderer/canvas/VectorTileLayer.js';\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}\n * is a subclass of {@link module:ol/layer/Base}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires module:ol/MapBrowserEvent~MapBrowserEvent\n * @fires module:ol/MapEvent~MapEvent\n * @fires module:ol/render/Event~RenderEvent#postcompose\n * @fires module:ol/render/Event~RenderEvent#precompose\n * @api\n */\nvar Map = (function (PluggableMap) {\n  function Map(options) {\n    options = assign({}, options);\n    if (!options.controls) {\n      options.controls = defaultControls();\n    }\n    if (!options.interactions) {\n      options.interactions = defaultInteractions();\n    }\n\n    PluggableMap.call(this, options);\n  }\n\n  if ( PluggableMap ) Map.__proto__ = PluggableMap;\n  Map.prototype = Object.create( PluggableMap && PluggableMap.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.prototype.createRenderer = function createRenderer () {\n    var renderer = new CanvasMapRenderer(this);\n    renderer.registerLayerRenderers([\n      CanvasImageLayerRenderer,\n      CanvasTileLayerRenderer,\n      CanvasVectorLayerRenderer,\n      CanvasVectorTileLayerRenderer\n    ]);\n    return renderer;\n  };\n\n  return Map;\n}(PluggableMap));\n\n\nexport default Map;\n\n//# sourceMappingURL=Map.js.map"]},"metadata":{},"sourceType":"module"}
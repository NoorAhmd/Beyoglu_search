{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport { getUid } from '../util.js';\nimport rbush from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nvar RBush = function RBush(opt_maxEntries) {\n  /**\n   * @private\n   */\n  this.rbush_ = rbush(opt_maxEntries, undefined);\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object.<number, module:ol/structs/RBush~Entry>}\n   */\n\n  this.items_ = {};\n};\n/**\n * Insert a value into the RBush.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {T} value Value.\n */\n\n\nRBush.prototype.insert = function insert(extent, value) {\n  /** @type {module:ol/structs/RBush~Entry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n  this.rbush_.insert(item);\n  this.items_[getUid(value)] = item;\n};\n/**\n * Bulk-insert values into the RBush.\n * @param {Array.<module:ol/extent~Extent>} extents Extents.\n * @param {Array.<T>} values Values.\n */\n\n\nRBush.prototype.load = function load(extents, values) {\n  var this$1 = this;\n  var items = new Array(values.length);\n\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n    /** @type {module:ol/structs/RBush~Entry} */\n\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this$1.items_[getUid(value)] = item;\n  }\n\n  this.rbush_.load(items);\n};\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\n\n\nRBush.prototype.remove = function remove(value) {\n  var uid = getUid(value); // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n/**\n * Update the extent of a value in the RBush.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {T} value Value.\n */\n\n\nRBush.prototype.update = function update(extent, value) {\n  var item = this.items_[getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n  if (!equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n/**\n * Return all values in the RBush.\n * @return {Array.<T>} All.\n */\n\n\nRBush.prototype.getAll = function getAll() {\n  var items = this.rbush_.all();\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n/**\n * Return all values in the given extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {Array.<T>} All in extent.\n */\n\n\nRBush.prototype.getInExtent = function getInExtent(extent) {\n  /** @type {module:ol/structs/RBush~Entry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n\n\nRBush.prototype.forEach = function forEach(callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\n\n\nRBush.prototype.forEachInExtent = function forEachInExtent(extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n/**\n * @param {Array.<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\n\n\nRBush.prototype.forEach_ = function forEach_(values, callback, opt_this) {\n  var result;\n\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return result;\n};\n/**\n * @return {boolean} Is empty.\n */\n\n\nRBush.prototype.isEmpty = function isEmpty$1() {\n  return isEmpty(this.items_);\n};\n/**\n * Remove all values from the RBush.\n */\n\n\nRBush.prototype.clear = function clear() {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n/**\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\n\nRBush.prototype.getExtent = function getExtent(opt_extent) {\n  // FIXME add getExtent() to rbush\n  var data = this.rbush_.data;\n  return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n/**\n * @param {module:ol/structs/RBush} rbush R-Tree.\n */\n\n\nRBush.prototype.concat = function concat(rbush) {\n  var this$1 = this;\n  this.rbush_.load(rbush.rbush_.all());\n\n  for (var i in rbush.items_) {\n    this$1.items_[i | 0] = rbush.items_[i | 0];\n  }\n};\n\nexport default RBush; //# sourceMappingURL=RBush.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/structs/RBush.js"],"names":["getUid","rbush","createOrUpdate","equals","isEmpty","RBush","opt_maxEntries","rbush_","undefined","items_","prototype","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","this$1","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","opt_this","forEach_","forEachInExtent","result","call","isEmpty$1","clear","getExtent","opt_extent","data","concat"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport {getUid} from '../util.js';\nimport rbush from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = function RBush(opt_maxEntries) {\n\n  /**\n   * @private\n   */\n  this.rbush_ = rbush(opt_maxEntries, undefined);\n\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object.<number, module:ol/structs/RBush~Entry>}\n   */\n  this.items_ = {};\n\n};\n\n/**\n * Insert a value into the RBush.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.insert = function insert (extent, value) {\n  /** @type {module:ol/structs/RBush~Entry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n\n  this.rbush_.insert(item);\n  this.items_[getUid(value)] = item;\n};\n\n\n/**\n * Bulk-insert values into the RBush.\n * @param {Array.<module:ol/extent~Extent>} extents Extents.\n * @param {Array.<T>} values Values.\n */\nRBush.prototype.load = function load (extents, values) {\n    var this$1 = this;\n\n  var items = new Array(values.length);\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n\n    /** @type {module:ol/structs/RBush~Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this$1.items_[getUid(value)] = item;\n  }\n  this.rbush_.load(items);\n};\n\n\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\nRBush.prototype.remove = function remove (value) {\n  var uid = getUid(value);\n\n  // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n\n\n/**\n * Update the extent of a value in the RBush.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.update = function update (extent, value) {\n  var item = this.items_[getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n  if (!equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n\n\n/**\n * Return all values in the RBush.\n * @return {Array.<T>} All.\n */\nRBush.prototype.getAll = function getAll () {\n  var items = this.rbush_.all();\n  return items.map(function(item) {\n    return item.value;\n  });\n};\n\n\n/**\n * Return all values in the given extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {Array.<T>} All in extent.\n */\nRBush.prototype.getInExtent = function getInExtent (extent) {\n  /** @type {module:ol/structs/RBush~Entry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function(item) {\n    return item.value;\n  });\n};\n\n\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach = function forEach (callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n\n\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEachInExtent = function forEachInExtent (extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n\n\n/**\n * @param {Array.<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach_ = function forEach_ (values, callback, opt_this) {\n  var result;\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n    if (result) {\n      return result;\n    }\n  }\n  return result;\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\nRBush.prototype.isEmpty = function isEmpty$1 () {\n  return isEmpty(this.items_);\n};\n\n\n/**\n * Remove all values from the RBush.\n */\nRBush.prototype.clear = function clear () {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n\n\n/**\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nRBush.prototype.getExtent = function getExtent (opt_extent) {\n  // FIXME add getExtent() to rbush\n  var data = this.rbush_.data;\n  return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n\n\n/**\n * @param {module:ol/structs/RBush} rbush R-Tree.\n */\nRBush.prototype.concat = function concat (rbush) {\n    var this$1 = this;\n\n  this.rbush_.load(rbush.rbush_.all());\n  for (var i in rbush.items_) {\n    this$1.items_[i | 0] = rbush.items_[i | 0];\n  }\n};\n\n\nexport default RBush;\n\n//# sourceMappingURL=RBush.js.map"]},"metadata":{},"sourceType":"module"}
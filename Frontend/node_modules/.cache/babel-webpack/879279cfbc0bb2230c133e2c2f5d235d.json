{"ast":null,"code":"/**\n * @module ol/source/Tile\n */\nimport { UNDEFINED } from '../functions.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport { equivalent } from '../proj.js';\nimport { toSize, scale as scaleSize } from '../size.js';\nimport Source from '../source/Source.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { wrapX, getForProjection as getTileGridForProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {number} [cacheSize]\n * @property {module:ol/extent~Extent} [extent]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {module:ol/proj~ProjectionLike} [projection]\n * @property {module:ol/source/State} [state]\n * @property {module:ol/tilegrid/TileGrid} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @api\n */\n\nvar TileSource = function (Source) {\n  function TileSource(options) {\n    Source.call(this, {\n      attributions: options.attributions,\n      extent: options.extent,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\n     * @protected\n     * @type {module:ol/tilegrid/TileGrid}\n     */\n\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    /**\n     * @protected\n     * @type {module:ol/TileCache}\n     */\n\n    this.tileCache = new TileCache(options.cacheSize);\n    /**\n     * @protected\n     * @type {module:ol/size~Size}\n     */\n\n    this.tmpSize = [0, 0];\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.key_ = '';\n    /**\n     * @protected\n     * @type {module:ol/Tile~Options}\n     */\n\n    this.tileOptions = {\n      transition: options.transition\n    };\n  }\n\n  if (Source) TileSource.__proto__ = Source;\n  TileSource.prototype = Object.create(Source && Source.prototype);\n  TileSource.prototype.constructor = TileSource;\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n  TileSource.prototype.canExpireCache = function canExpireCache() {\n    return this.tileCache.canExpireCache();\n  };\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {!Object.<string, module:ol/TileRange>} usedTiles Used tiles.\n   */\n\n\n  TileSource.prototype.expireCache = function expireCache(projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {module:ol/TileRange} tileRange Tile range.\n   * @param {function(module:ol/Tile):(boolean|undefined)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n\n\n  TileSource.prototype.forEachLoadedTile = function forEachLoadedTile(projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile =\n          /** @type {!module:ol/Tile} */\n          tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileSource.prototype.getGutter = function getGutter(projection) {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.getKey = function getKey() {\n    return this.key_;\n  };\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.setKey = function setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileSource.prototype.getOpaque = function getOpaque(projection) {\n    return this.opaque_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileSource.prototype.getResolutions = function getResolutions() {\n    return this.tileGrid.getResolutions();\n  };\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/Tile} Tile.\n   */\n\n\n  TileSource.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {};\n  /**\n   * Return the tile grid of the tile source.\n   * @return {module:ol/tilegrid/TileGrid} Tile grid.\n   * @api\n   */\n\n\n  TileSource.prototype.getTileGrid = function getTileGrid() {\n    return this.tileGrid;\n  };\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/tilegrid/TileGrid} Tile grid.\n   */\n\n\n  TileSource.prototype.getTileGridForProjection = function getTileGridForProjection$1(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/TileCache} Tile cache.\n   * @protected\n   */\n\n\n  TileSource.prototype.getTileCacheForProjection = function getTileCacheForProjection(projection) {\n    var thisProj = this.getProjection();\n\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  };\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileSource.prototype.getTilePixelRatio = function getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/size~Size} Tile size.\n   */\n\n\n  TileSource.prototype.getTilePixelSize = function getTilePixelSize(z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n   * @param {module:ol/proj/Projection=} opt_projection Projection.\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n\n\n  TileSource.prototype.getTileCoordForTileUrlFunction = function getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileSource.prototype.refresh = function refresh() {\n    this.tileCache.clear();\n    this.changed();\n  };\n\n  return TileSource;\n}(Source);\n/**\n * Marks a tile coord as being used, without triggering a load.\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {module:ol/proj/Projection} projection Projection.\n */\n\n\nTileSource.prototype.useTile = UNDEFINED;\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\n\nexport var TileSourceEvent = function (Event) {\n  function TileSourceEvent(type, tile) {\n    Event.call(this, type);\n    /**\n     * The tile related to the event.\n     * @type {module:ol/Tile}\n     * @api\n     */\n\n    this.tile = tile;\n  }\n\n  if (Event) TileSourceEvent.__proto__ = Event;\n  TileSourceEvent.prototype = Object.create(Event && Event.prototype);\n  TileSourceEvent.prototype.constructor = TileSourceEvent;\n  return TileSourceEvent;\n}(Event);\nexport default TileSource; //# sourceMappingURL=Tile.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/source/Tile.js"],"names":["UNDEFINED","TileCache","TileState","Event","equivalent","toSize","scale","scaleSize","Source","getKeyZXY","withinExtentAndZ","wrapX","getForProjection","getTileGridForProjection","TileSource","options","call","attributions","extent","projection","state","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileCache","cacheSize","tmpSize","key_","tileOptions","transition","__proto__","prototype","Object","create","constructor","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","getGutter","getKey","setKey","key","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","getTileGridForProjection$1","thisProj","getProjection","getTilePixelRatio","getTilePixelSize","tileSize","getTileSize","getTileCoordForTileUrlFunction","tileCoord","opt_projection","getWrapX","isGlobal","refresh","clear","useTile","TileSourceEvent","type"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Tile\n */\n\nimport {UNDEFINED} from '../functions.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport Event from '../events/Event.js';\nimport {equivalent} from '../proj.js';\nimport {toSize, scale as scaleSize} from '../size.js';\nimport Source from '../source/Source.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {wrapX, getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {number} [cacheSize]\n * @property {module:ol/extent~Extent} [extent]\n * @property {boolean} [opaque]\n * @property {number} [tilePixelRatio]\n * @property {module:ol/proj~ProjectionLike} [projection]\n * @property {module:ol/source/State} [state]\n * @property {module:ol/tilegrid/TileGrid} [tileGrid]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @api\n */\nvar TileSource = (function (Source) {\n  function TileSource(options) {\n\n    Source.call(this, {\n      attributions: options.attributions,\n      extent: options.extent,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?\n      options.tilePixelRatio : 1;\n\n    /**\n     * @protected\n     * @type {module:ol/tilegrid/TileGrid}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    /**\n     * @protected\n     * @type {module:ol/TileCache}\n     */\n    this.tileCache = new TileCache(options.cacheSize);\n\n    /**\n     * @protected\n     * @type {module:ol/size~Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = '';\n\n    /**\n     * @protected\n     * @type {module:ol/Tile~Options}\n     */\n    this.tileOptions = {transition: options.transition};\n\n  }\n\n  if ( Source ) TileSource.__proto__ = Source;\n  TileSource.prototype = Object.create( Source && Source.prototype );\n  TileSource.prototype.constructor = TileSource;\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  TileSource.prototype.canExpireCache = function canExpireCache () {\n    return this.tileCache.canExpireCache();\n  };\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {!Object.<string, module:ol/TileRange>} usedTiles Used tiles.\n   */\n  TileSource.prototype.expireCache = function expireCache (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {module:ol/TileRange} tileRange Tile range.\n   * @param {function(module:ol/Tile):(boolean|undefined)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  TileSource.prototype.forEachLoadedTile = function forEachLoadedTile (projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!module:ol/Tile} */ (tileCache.get(tileCoordKey));\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = (callback(tile) !== false);\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  };\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {number} Gutter.\n   */\n  TileSource.prototype.getGutter = function getGutter (projection) {\n    return 0;\n  };\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n  TileSource.prototype.getKey = function getKey () {\n    return this.key_;\n  };\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  TileSource.prototype.setKey = function setKey (key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  TileSource.prototype.getOpaque = function getOpaque (projection) {\n    return this.opaque_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileSource.prototype.getResolutions = function getResolutions () {\n    return this.tileGrid.getResolutions();\n  };\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/Tile} Tile.\n   */\n  TileSource.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {};\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {module:ol/tilegrid/TileGrid} Tile grid.\n   * @api\n   */\n  TileSource.prototype.getTileGrid = function getTileGrid () {\n    return this.tileGrid;\n  };\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/tilegrid/TileGrid} Tile grid.\n   */\n  TileSource.prototype.getTileGridForProjection = function getTileGridForProjection$1 (projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n\n  /**\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/TileCache} Tile cache.\n   * @protected\n   */\n  TileSource.prototype.getTileCacheForProjection = function getTileCacheForProjection (projection) {\n    var thisProj = this.getProjection();\n    if (thisProj && !equivalent(thisProj, projection)) {\n      return null;\n    } else {\n      return this.tileCache;\n    }\n  };\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  TileSource.prototype.getTilePixelRatio = function getTilePixelRatio (pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/size~Size} Tile size.\n   */\n  TileSource.prototype.getTilePixelSize = function getTilePixelSize (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n   * @param {module:ol/proj/Projection=} opt_projection Projection.\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  TileSource.prototype.getTileCoordForTileUrlFunction = function getTileCoordForTileUrlFunction (tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ?\n      opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileSource.prototype.refresh = function refresh () {\n    this.tileCache.clear();\n    this.changed();\n  };\n\n  return TileSource;\n}(Source));\n\n\n/**\n * Marks a tile coord as being used, without triggering a load.\n * @param {number} z Tile coordinate z.\n * @param {number} x Tile coordinate x.\n * @param {number} y Tile coordinate y.\n * @param {module:ol/proj/Projection} projection Projection.\n */\nTileSource.prototype.useTile = UNDEFINED;\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport var TileSourceEvent = (function (Event) {\n  function TileSourceEvent(type, tile) {\n\n    Event.call(this, type);\n\n    /**\n     * The tile related to the event.\n     * @type {module:ol/Tile}\n     * @api\n     */\n    this.tile = tile;\n\n  }\n\n  if ( Event ) TileSourceEvent.__proto__ = Event;\n  TileSourceEvent.prototype = Object.create( Event && Event.prototype );\n  TileSourceEvent.prototype.constructor = TileSourceEvent;\n\n  return TileSourceEvent;\n}(Event));\n\nexport default TileSource;\n\n//# sourceMappingURL=Tile.js.map"]},"metadata":{},"sourceType":"module"}
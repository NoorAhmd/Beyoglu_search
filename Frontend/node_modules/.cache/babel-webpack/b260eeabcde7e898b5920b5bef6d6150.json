{"ast":null,"code":"import _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nvar MatTreeNodeOutlet =\n/**\n * @param {?} viewContainer\n */\nfunction MatTreeNodeOutlet(viewContainer) {\n  _classCallCheck(this, MatTreeNodeOutlet);\n\n  this.viewContainer = viewContainer;\n};\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nMatTreeNodeOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\n_MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nvar\n/** @type {?} */\n_MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNode = /*#__PURE__*/function (_MatTreeNodeMixinBase2) {\n  _inherits(MatTreeNode, _MatTreeNodeMixinBase2);\n\n  var _super = _createSuper(MatTreeNode);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} tabIndex\n   */\n  function MatTreeNode(_elementRef, _tree, tabIndex) {\n    var _this;\n\n    _classCallCheck(this, MatTreeNode);\n\n    _this = _super.call(this, _elementRef, _tree);\n    _this._elementRef = _elementRef;\n    _this._tree = _tree;\n    _this.role = 'treeitem';\n    _this.tabIndex = Number(tabIndex) || 0;\n    return _this;\n  }\n\n  return MatTreeNode;\n}(_MatTreeNodeMixinBase);\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  hostVars: 3,\n  hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    role: \"role\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatTreeNode.propDecorators = {\n  \"role\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['disabled', 'tabIndex'],\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'mat-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef) {\n  _inherits(MatTreeNodeDef, _CdkTreeNodeDef);\n\n  var _super2 = _createSuper(MatTreeNodeDef);\n\n  function MatTreeNodeDef() {\n    _classCallCheck(this, MatTreeNodeDef);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatTreeNodeDef;\n}(CdkTreeNodeDef);\n\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) {\n  return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef);\n};\n\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTreeNodeDef.propDecorators = {\n  \"data\": [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\nvar ɵMatTreeNodeDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\n\n\nvar MatNestedTreeNode = /*#__PURE__*/function (_MatNestedTreeNodeMix) {\n  _inherits(MatNestedTreeNode, _MatNestedTreeNodeMix);\n\n  var _super3 = _createSuper(MatNestedTreeNode);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   * @param {?} tabIndex\n   */\n  function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n    var _this2;\n\n    _classCallCheck(this, MatNestedTreeNode);\n\n    _this2 = _super3.call(this, _elementRef, _tree, _differs);\n    _this2._elementRef = _elementRef;\n    _this2._tree = _tree;\n    _this2._differs = _differs;\n    _this2.tabIndex = Number(tabIndex) || 0;\n    return _this2;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatNestedTreeNode, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n  }]);\n\n  return MatNestedTreeNode;\n}(_MatNestedTreeNodeMixinBase);\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatNestedTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatNestedTreeNode.propDecorators = {\n  \"node\": [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  \"nodeOutlet\": [{\n    type: ContentChildren,\n    args: [MatTreeNodeOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'mat-nested-tree-node'\n      },\n      inputs: ['disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [MatTreeNodeOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding) {\n  _inherits(MatTreeNodePadding, _CdkTreeNodePadding);\n\n  var _super4 = _createSuper(MatTreeNodePadding);\n\n  function MatTreeNodePadding() {\n    _classCallCheck(this, MatTreeNodePadding);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return MatTreeNodePadding;\n}(CdkTreeNodePadding);\n\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) {\n  return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding);\n};\n\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTreeNodePadding.propDecorators = {\n  \"level\": [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  \"indent\": [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\nvar ɵMatTreeNodePadding_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\n\n\nvar MatTree = /*#__PURE__*/function (_CdkTree) {\n  _inherits(MatTree, _CdkTree);\n\n  var _super5 = _createSuper(MatTree);\n\n  function MatTree() {\n    _classCallCheck(this, MatTree);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return MatTree;\n}(CdkTree);\n\nMatTree.ɵfac = function MatTree_Factory(t) {\n  return ɵMatTree_BaseFactory(t || MatTree);\n};\n\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatTree.propDecorators = {\n  \"_nodeOutlet\": [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet]\n  }]\n};\nvar ɵMatTree_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n  _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle);\n\n  var _super6 = _createSuper(MatTreeNodeToggle);\n\n  function MatTreeNodeToggle() {\n    var _this3;\n\n    _classCallCheck(this, MatTreeNodeToggle);\n\n    _this3 = _super6.apply(this, arguments);\n    _this3.recursive = false;\n    return _this3;\n  }\n\n  return MatTreeNodeToggle;\n}(CdkTreeNodeToggle);\n\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) {\n  return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle);\n};\n\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  hostBindings: function MatTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTreeNodeToggle.propDecorators = {\n  \"recursive\": [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\nvar ɵMatTreeNodeToggle_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      host: {\n        '(click)': '_toggle($event)'\n      },\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nMAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nvar MatTreeModule = function MatTreeModule() {\n  _classCallCheck(this, MatTreeModule);\n};\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[CdkTreeModule, CommonModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function declarations() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CdkTreeModule, CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, CommonModule, MatCommonModule],\n      exports: MAT_TREE_DIRECTIVES,\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      var\n      /** @type {?} */\n      flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var\n        /** @type {?} */\n        childrenNodes = this.getChildren(node);\n\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(function (children) {\n            _this4._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n\n      return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this5 = this;\n\n      children.forEach(function (child, index) {\n        var\n        /** @type {?} */\n        childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this5._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this6 = this;\n\n      var\n      /** @type {?} */\n      resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this6._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this7 = this;\n\n      var\n      /** @type {?} */\n      results = [];\n      var\n      /** @type {?} */\n      currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var\n        /** @type {?} */\n        expand = true;\n\n        for (var\n        /** @type {?} */\n        i = 0; i <= _this7.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this7.isExpandable(node)) {\n          currentExpand[_this7.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  /**\n   * @param {?} treeControl\n   * @param {?} treeFlattener\n   * @param {?=} initialData\n   */\n  function MatTreeFlatDataSource(treeControl, treeFlattener) {\n    var _this8;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this8 = _super7.call(this);\n    _this8.treeControl = treeControl;\n    _this8.treeFlattener = treeFlattener;\n    _this8._flattenedData = new BehaviorSubject([]);\n    _this8._expandedData = new BehaviorSubject([]);\n    _this8._data = new BehaviorSubject(initialData);\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n\n      this.treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this9 = this;\n\n      var\n      /** @type {?} */\n      changes = [collectionViewer.viewChange,\n      /** @type {?} */\n      this.treeControl.expansionModel.onChange, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this9._expandedData.next(_this9.treeFlattener.expandFlattenedNodes(_this9._flattenedData.value, _this9.treeControl));\n\n        return _this9._expandedData.value;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this10;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this10 = _super8.apply(this, arguments);\n    _this10._data = new BehaviorSubject([]);\n    return _this10;\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data.next(value);\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this11 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this11.data;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource }; //# sourceMappingURL=tree.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/tree.js"],"names":["Directive","ViewContainerRef","Attribute","ContentChildren","ElementRef","Input","IterableDiffers","ChangeDetectionStrategy","Component","ViewChild","ViewEncapsulation","NgModule","CdkNestedTreeNode","CdkTree","CdkTreeNode","CdkTreeNodeDef","CdkTreeNodePadding","CdkTreeNodeToggle","CdkTreeModule","mixinDisabled","mixinTabIndex","MatCommonModule","CommonModule","DataSource","BehaviorSubject","merge","map","take","ɵngcc0","ɵngcc1","MatTreeNodeOutlet","viewContainer","ɵfac","MatTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","args","selector","_MatTreeNodeMixinBase","_MatNestedTreeNodeMixinBase","MatTreeNode","_elementRef","_tree","tabIndex","role","Number","MatTreeNode_Factory","ɵɵinjectAttribute","hostAttrs","hostVars","hostBindings","MatTreeNode_HostBindings","rf","ctx","ɵɵattribute","isExpanded","level","inputs","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","undefined","decorators","propDecorators","host","providers","MatTreeNodeDef","MatTreeNodeDef_Factory","ɵMatTreeNodeDef_BaseFactory","when","data","ɵɵgetInheritedFactory","MatNestedTreeNode","_differs","MatNestedTreeNode_Factory","contentQueries","MatNestedTreeNode_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","nodeOutlet","MatNestedTreeNode_HostBindings","node","MatTreeNodePadding","MatTreeNodePadding_Factory","ɵMatTreeNodePadding_BaseFactory","indent","MatTree","MatTree_Factory","ɵMatTree_BaseFactory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","ɵɵviewQuery","_nodeOutlet","first","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","directives","styles","encapsulation","changeDetection","None","OnPush","MatTreeNodeToggle","arguments","recursive","MatTreeNodeToggle_Factory","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_HostBindings","ɵɵlistener","MatTreeNodeToggle_click_HostBindingHandler","$event","_toggle","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","_flattenNode","structuredData","nodes","treeControl","results","currentExpand","expand","i","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","value","next","flattenNodes","dataNodes","collectionViewer","changes","viewChange","expansionModel","onChange","expandFlattenedNodes","MatTreeNestedDataSource"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     */\n    constructor(viewContainer) {\n        this.viewContainer = viewContainer;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nconst /** @type {?} */ _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: CdkTree, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n];\nMatTreeNode.propDecorators = {\n    \"role\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) { return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef); };\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNodeDef.propDecorators = {\n    \"data\": [{ type: Input, args: ['matTreeNode',] },],\n};\nconst ɵMatTreeNodeDef_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends _MatNestedTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: CdkTree, },\n    { type: IterableDiffers, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n];\nMatNestedTreeNode.propDecorators = {\n    \"node\": [{ type: Input, args: ['matNestedTreeNode',] },],\n    \"nodeOutlet\": [{ type: ContentChildren, args: [MatTreeNodeOutlet,] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                inputs: ['disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }], nodeOutlet: [{\n            type: ContentChildren,\n            args: [MatTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) { return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding); };\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNodePadding.propDecorators = {\n    \"level\": [{ type: Input, args: ['matTreeNodePadding',] },],\n    \"indent\": [{ type: Input, args: ['matTreeNodePaddingIndent',] },],\n};\nconst ɵMatTreeNodePadding_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = function MatTree_Factory(t) { return ɵMatTree_BaseFactory(t || MatTree); };\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatTree.propDecorators = {\n    \"_nodeOutlet\": [{ type: ViewChild, args: [MatTreeNodeOutlet,] },],\n};\nconst ɵMatTree_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{ selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                },\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: CdkTree, useExisting: MatTree }]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) { return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle); };\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], hostBindings: function MatTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNodeToggle.propDecorators = {\n    \"recursive\": [{ type: Input, args: ['matTreeNodeToggleRecursive',] },],\n};\nconst ɵMatTreeNodeToggle_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                host: {\n                    '(click)': '_toggle($event)'\n                },\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CdkTreeModule, CommonModule, MatCommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, CommonModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const /** @type {?} */ flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const /** @type {?} */ childrenNodes = this.getChildren(node);\n            if (Array.isArray(childrenNodes)) {\n                this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n            }\n            else {\n                childrenNodes.pipe(take(1)).subscribe(children => {\n                    this._flattenChildren(children, level, resultNodes, parentMap);\n                });\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let /** @type {?} */ childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        let /** @type {?} */ resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let /** @type {?} */ results = [];\n        let /** @type {?} */ currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let /** @type {?} */ expand = true;\n            for (let /** @type {?} */ i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} treeControl\n     * @param {?} treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(treeControl, treeFlattener, initialData = []) {\n        super();\n        this.treeControl = treeControl;\n        this.treeFlattener = treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        const /** @type {?} */ changes = [\n            collectionViewer.viewChange,\n            /** @type {?} */ ((this.treeControl.expansionModel.onChange)),\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => {\n            return this.data;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\n\n//# sourceMappingURL=tree.js.map"]},"metadata":{},"sourceType":"module"}
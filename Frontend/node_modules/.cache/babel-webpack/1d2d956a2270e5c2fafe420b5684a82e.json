{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { equals } from '../array.js';\nimport { equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment } from '../coordinate.js';\nimport { listen, unlisten } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { always, primaryAction, altKeyOnly, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer, createOrUpdateFromCoordinate } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction, { handleEvent as handlePointerEvent } from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport { createEditingStyle } from '../style/Style.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\n/**\n * @enum {string}\n */\n\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array.<number>} [depth]\n * @property {module:ol/Feature} feature\n * @property {module:ol/geom/SimpleGeometry} geometry\n * @property {number} index\n * @property {Array.<module:ol/extent~Extent>} segment\n * @property {Array.<module:ol/interaction/Modify~SegmentData>} [featureSegments]\n */\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {module:ol/events/condition~Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {module:ol/events/condition~Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {module:ol/source/Vector} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {module:ol/Collection.<module:ol/Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\n\nexport var ModifyEvent = function (Event) {\n  function ModifyEvent(type, features, mapBrowserPointerEvent) {\n    Event.call(this, type);\n    /**\n     * The features being modified.\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     * @api\n     */\n\n    this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {module:ol/MapBrowserEvent}\n     * @api\n     */\n\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n  }\n\n  if (Event) ModifyEvent.__proto__ = Event;\n  ModifyEvent.prototype = Object.create(Event && Event.prototype);\n  ModifyEvent.prototype.constructor = ModifyEvent;\n  return ModifyEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires module:ol/interaction/Modify~ModifyEvent\n * @api\n */\n\nvar Modify = function (PointerInteraction) {\n  function Modify(options) {\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent\n    });\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {module:ol/events/condition~Condition}\n     * @private\n     */\n\n\n    this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n    /**\n     * @type {module:ol/events/condition~Condition}\n     * @private\n     */\n\n    this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {module:ol/Feature}\n     * @private\n     */\n\n    this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n\n    this.vertexSegments_ = null;\n    /**\n     * @type {module:ol/pixel~Pixel}\n     * @private\n     */\n\n    this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n\n    this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.modified_ = false;\n    /**\n     * Segment RTree for each layer\n     * @type {module:ol/structs/RBush.<module:ol/interaction/Modify~SegmentData>}\n     * @private\n     */\n\n    this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n\n    this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n\n    this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object.<string, function(module:ol/Feature, module:ol/geom/Geometry)>}\n     */\n\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n    /**\n     * @type {module:ol/source/Vector}\n     * @private\n     */\n\n    this.source_ = null;\n    var features;\n\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE, this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n    /**\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     * @private\n     */\n\n\n    this.features_ = features;\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this);\n    /**\n     * @type {module:ol/MapBrowserPointerEvent}\n     * @private\n     */\n\n    this.lastPointerEvent_ = null;\n  }\n\n  if (PointerInteraction) Modify.__proto__ = PointerInteraction;\n  Modify.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Modify.prototype.constructor = Modify;\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @private\n   */\n\n  Modify.prototype.addFeature_ = function addFeature_(feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n\n    var map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n  /**\n   * @param {module:ol/MapBrowserPointerEvent} evt Map browser event\n   * @private\n   */\n\n\n  Modify.prototype.willModifyFeatures_ = function willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeature_ = function removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of canditate features\n    // is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    unlisten(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_(feature) {\n    var rBush = this.rBush_;\n    var\n    /** @type {Array.<module:ol/interaction/Modify~SegmentData>} */\n    nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {module:ol/interaction/Modify~SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.setActive = function setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    PointerInteraction.prototype.setActive.call(this, active);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modify.prototype.setMap = function setMap(map) {\n    this.overlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n  /**\n   * @param {module:ol/source/Vector~VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceAdd_ = function handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {module:ol/source/Vector~VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceRemove_ = function handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {module:ol/Collection~CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_(evt) {\n    this.addFeature_(\n    /** @type {module:ol/Feature} */\n    evt.element);\n  };\n  /**\n   * @param {module:ol/events/Event} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureChange_ = function handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      var feature =\n      /** @type {module:ol/Feature} */\n      evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {module:ol/Collection~CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_(evt) {\n    var feature =\n    /** @type {module:ol/Feature} */\n    evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/Point} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePointGeometry_ = function writePointGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    var segmentData =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/MultiPoint} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_(feature, geometry) {\n    var this$1 = this;\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      var segmentData =\n      /** @type {module:ol/interaction/Modify~SegmentData} */\n      {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this$1.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/LineString} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_(feature, geometry) {\n    var this$1 = this;\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData =\n      /** @type {module:ol/interaction/Modify~SegmentData} */\n      {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this$1.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/MultiLineString} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_(feature, geometry) {\n    var this$1 = this;\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData =\n        /** @type {module:ol/interaction/Modify~SegmentData} */\n        {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this$1.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/Polygon} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_(feature, geometry) {\n    var this$1 = this;\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData =\n        /** @type {module:ol/interaction/Modify~SegmentData} */\n        {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this$1.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/MultiPolygon} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_(feature, geometry) {\n    var this$1 = this;\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          var segmentData =\n          /** @type {module:ol/interaction/Modify~SegmentData} */\n          {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this$1.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/geom/Circle} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_(feature, geometry) {\n    var coordinates = geometry.getCenter();\n    var centerSegmentData =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var circumferenceSegmentData =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/GeometryCollection} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_(feature, geometry) {\n    var this$1 = this;\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      this$1.SEGMENT_WRITERS_[geometries[i].getType()].call(this$1, feature, geometries[i]);\n    }\n  };\n  /**\n   * @param {module:ol/coordinate~Coordinate} coordinates Coordinates.\n   * @return {module:ol/Feature} Vertex feature.\n   * @private\n   */\n\n\n  Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_(coordinates) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry =\n      /** @type {module:ol/geom/Point} */\n      vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    return vertexFeature;\n  };\n  /**\n   * @param {module:ol/MapBrowserEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerMove_ = function handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  };\n  /**\n   * @param {module:ol/pixel~Pixel} pixel Pixel\n   * @param {module:ol/PluggableMap} map Map.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_(pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n\n    var sortByDistance = function sortByDistance(a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) - pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n\n    var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate), map.getView().getResolution() * this.pixelTolerance_);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n\n      if (dist <= this.pixelTolerance_) {\n        var vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex);\n\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {module:ol/interaction/Modify~SegmentData} segmentData Segment data.\n   * @param {module:ol/coordinate~Coordinate} vertex Vertex.\n   * @private\n   */\n\n\n  Modify.prototype.insertVertex_ = function insertVertex_(segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index =\n    /** @type {number} */\n    segmentData.index;\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    var newSegmentData =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    var newSegmentData2 =\n    /** @type {module:ol/interaction/Modify~SegmentData} */\n    {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n\n\n  Modify.prototype.removePoint = function removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n\n\n  Modify.prototype.removeVertex_ = function removeVertex_() {\n    var this$1 = this;\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this$1.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n\n        if (left !== undefined) {\n          this$1.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this$1.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          var newSegmentData =\n          /** @type {module:ol/interaction/Modify~SegmentData} */\n          {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this$1.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this$1.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this$1.vertexFeature_) {\n          this$1.overlay_.getSource().removeFeature(this$1.vertexFeature_);\n          this$1.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  };\n  /**\n   * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n\n\n  Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array.<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n\n\n  Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {module:ol/interaction/Modify~SegmentData} a The first segment data.\n * @param {module:ol/interaction/Modify~SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleDownEvent(evt) {\n  var this$1 = this;\n\n  if (!this.condition_(evt)) {\n    return false;\n  }\n\n  this.handlePointerAtPixel_(evt.pixel, evt.map);\n  var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n  this.dragSegments_.length = 0;\n  this.modified_ = false;\n  var vertexFeature = this.vertexFeature_;\n\n  if (vertexFeature) {\n    var insertVertices = [];\n    var geometry =\n    /** @type {module:ol/geom/Point} */\n    vertexFeature.getGeometry();\n    var vertex = geometry.getCoordinates();\n    var vertexExtent = boundingExtent([vertex]);\n    var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n    var componentSegments = {};\n    segmentDataMatches.sort(compareIndexes);\n\n    for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n      var segmentDataMatch = segmentDataMatches[i];\n      var segment = segmentDataMatch.segment;\n      var uid = getUid(segmentDataMatch.feature);\n      var depth = segmentDataMatch.depth;\n\n      if (depth) {\n        uid += '-' + depth.join('-'); // separate feature components\n      }\n\n      if (!componentSegments[uid]) {\n        componentSegments[uid] = new Array(2);\n      }\n\n      if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n\n        if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n          this$1.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        }\n      } else if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n        this$1.dragSegments_.push([segmentDataMatch, 0]);\n        componentSegments[uid][0] = segmentDataMatch;\n      } else if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n        // prevent dragging closed linestrings by the connecting node\n        if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n          continue;\n        }\n\n        this$1.dragSegments_.push([segmentDataMatch, 1]);\n        componentSegments[uid][1] = segmentDataMatch;\n      } else if (this$1.insertVertexCondition_(evt) && getUid(segment) in this$1.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1]) {\n        insertVertices.push([segmentDataMatch, vertex]);\n      }\n    }\n\n    if (insertVertices.length) {\n      this.willModifyFeatures_(evt);\n    }\n\n    for (var j = insertVertices.length - 1; j >= 0; --j) {\n      this$1.insertVertex_.apply(this$1, insertVertices[j]);\n    }\n  }\n\n  return !!this.vertexFeature_;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleDragEvent(evt) {\n  var this$1 = this;\n  this.ignoreNextSingleClick_ = false;\n  this.willModifyFeatures_(evt);\n  var vertex = evt.coordinate;\n\n  for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n    var dragSegment = this$1.dragSegments_[i];\n    var segmentData = dragSegment[0];\n    var depth = segmentData.depth;\n    var geometry = segmentData.geometry;\n    var coordinates = void 0;\n    var segment = segmentData.segment;\n    var index = dragSegment[1];\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(segment[index][vertex.length]);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.POINT:\n        coordinates = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n\n      case GeometryType.MULTI_POINT:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index] = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n\n      case GeometryType.CIRCLE:\n        segment[0] = segment[1] = vertex;\n\n        if (segmentData.index === CIRCLE_CENTER_INDEX) {\n          this$1.changingFeature_ = true;\n          geometry.setCenter(vertex);\n          this$1.changingFeature_ = false;\n        } else {\n          // We're dragging the circle's circumference:\n          this$1.changingFeature_ = true;\n          geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n          this$1.changingFeature_ = false;\n        }\n\n        break;\n\n      default: // pass\n\n    }\n\n    if (coordinates) {\n      this$1.setGeometryCoordinates_(geometry, coordinates);\n    }\n  }\n\n  this.createOrUpdateVertexFeature_(vertex);\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleUpEvent(evt) {\n  var this$1 = this;\n\n  for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n    var segmentData = this$1.dragSegments_[i][0];\n    var geometry = segmentData.geometry;\n\n    if (geometry.getType() === GeometryType.CIRCLE) {\n      // Update a circle object in the R* bush:\n      var coordinates = geometry.getCenter();\n      var centerSegmentData = segmentData.featureSegments[0];\n      var circumferenceSegmentData = segmentData.featureSegments[1];\n      centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n      circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n      this$1.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n      this$1.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n    } else {\n      this$1.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n    }\n  }\n\n  if (this.modified_) {\n    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n    this.modified_ = false;\n  }\n\n  return false;\n}\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the\n * geometry.\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Modify}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n\n  this.lastPointerEvent_ = mapBrowserEvent;\n  var handled;\n\n  if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n\n  if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n    if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n      handled = this.removePoint();\n    } else {\n      handled = true;\n    }\n  }\n\n  if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n    this.ignoreNextSingleClick_ = false;\n  }\n\n  return handlePointerEvent.call(this, mapBrowserEvent) && !handled;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {module:ol/coordinate~Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry =\n    /** @type {module:ol/geom/Circle} */\n    geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {module:ol/coordinate~Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {module:ol/coordinate~Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n/**\n * @return {module:ol/style/Style~StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify; //# sourceMappingURL=Modify.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/interaction/Modify.js"],"names":["getUid","Collection","CollectionEventType","Feature","MapBrowserEventType","MapBrowserPointerEvent","equals","coordinatesEqual","distance","coordinateDistance","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","closestOnSegment","listen","unlisten","Event","EventType","always","primaryAction","altKeyOnly","singleClick","boundingExtent","buffer","createOrUpdateFromCoordinate","GeometryType","Point","PointerInteraction","handleEvent","handlePointerEvent","VectorLayer","VectorSource","VectorEventType","RBush","createEditingStyle","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","type","features","mapBrowserPointerEvent","call","mapBrowserEvent","__proto__","prototype","Object","create","constructor","Modify","options","handleDownEvent","handleDragEvent","handleUpEvent","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","modified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","getFeatures","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","features_","forEach","addFeature_","bind","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","feature","geometry","getGeometry","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","handleFeatureChange_","willModifyFeatures_","evt","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getLength","getSource","removeFeature","rBush","nodesToRemove","node","push","i","length","remove","setActive","active","setMap","event","element","target","coordinates","getCoordinates","segmentData","segment","insert","getExtent","this$1","points","ii","depth","index","slice","lines","j","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","geometries","getGeometriesArray","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","handlePointerMove_","pixel","pixelCoordinate","getCoordinateFromPixel","sortByDistance","a","b","pointDistanceToSegmentDataSquared","box","getView","getResolution","nodes","getInExtent","sort","closestSegment","vertex","closestOnSegmentData","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","CIRCLE","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","insertVertex_","getStride","MULTI_LINE_STRING","splice","POLYGON","MULTI_POLYGON","LINE_STRING","setGeometryCoordinates_","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","removePoint","POINTERDRAG","removeVertex_","dragSegments","segmentsByFeature","deleted","component","dragSegment","left","newIndex","right","uid","join","pop","segments","delta","forEachInExtent","segmentDataMatch","compareIndexes","insertVertices","vertexExtent","segmentDataMatches","componentSegments","Array","closestVertex","apply","coordinate","POINT","MULTI_POINT","setCenter","setRadius","update","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","SINGLECLICK","pointCoordinates","circleGeometry","distanceToCenterSquared","distanceToCircumference","getRadius","getClosestPoint","resolution"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {equals} from '../array.js';\nimport {equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment} from '../coordinate.js';\nimport {listen, unlisten} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {always, primaryAction, altKeyOnly, singleClick} from '../events/condition.js';\nimport {boundingExtent, buffer, createOrUpdateFromCoordinate} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction, {handleEvent as handlePointerEvent} from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array.<number>} [depth]\n * @property {module:ol/Feature} feature\n * @property {module:ol/geom/SimpleGeometry} geometry\n * @property {number} index\n * @property {Array.<module:ol/extent~Extent>} segment\n * @property {Array.<module:ol/interaction/Modify~SegmentData>} [featureSegments]\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {module:ol/events/condition~Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {module:ol/events/condition~Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {module:ol/source/Vector} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {module:ol/Collection.<module:ol/Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport var ModifyEvent = (function (Event) {\n  function ModifyEvent(type, features, mapBrowserPointerEvent) {\n    Event.call(this, type);\n\n    /**\n     * The features being modified.\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {module:ol/MapBrowserEvent}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n\n  }\n\n  if ( Event ) ModifyEvent.__proto__ = Event;\n  ModifyEvent.prototype = Object.create( Event && Event.prototype );\n  ModifyEvent.prototype.constructor = ModifyEvent;\n\n  return ModifyEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires module:ol/interaction/Modify~ModifyEvent\n * @api\n */\nvar Modify = (function (PointerInteraction) {\n  function Modify(options) {\n\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent\n    });\n\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n\n    /**\n     * @private\n     * @param {module:ol/MapBrowserEvent} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function(mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {module:ol/events/condition~Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ?\n      options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {module:ol/events/condition~Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ?\n      options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {module:ol/pixel~Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {module:ol/structs/RBush.<module:ol/interaction/Modify~SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object.<string, function(module:ol/Feature, module:ol/geom/Geometry)>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n\n\n    /**\n     * @type {module:ol/source/Vector}\n     * @private\n     */\n    this.source_ = null;\n\n    var features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD,\n      this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE,\n      this.handleFeatureRemove_, this);\n\n    /**\n     * @type {module:ol/MapBrowserPointerEvent}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n  }\n\n  if ( PointerInteraction ) Modify.__proto__ = PointerInteraction;\n  Modify.prototype = Object.create( PointerInteraction && PointerInteraction.prototype );\n  Modify.prototype.constructor = Modify;\n\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.addFeature_ = function addFeature_ (feature) {\n    var geometry = feature.getGeometry();\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n    var map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    listen(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  };\n\n  /**\n   * @param {module:ol/MapBrowserPointerEvent} evt Map browser event\n   * @private\n   */\n  Modify.prototype.willModifyFeatures_ = function willModifyFeatures_ (evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(\n        ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeature_ = function removeFeature_ (feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features\n    // is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    unlisten(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_ (feature) {\n    var rBush = this.rBush_;\n    var /** @type {Array.<module:ol/interaction/Modify~SegmentData>} */ nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {module:ol/interaction/Modify~SegmentData} node RTree node.\n       */\n      function(node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      });\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.setActive = function setActive (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    PointerInteraction.prototype.setActive.call(this, active);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.setMap = function setMap (map) {\n    this.overlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n\n  /**\n   * @param {module:ol/source/Vector~VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceAdd_ = function handleSourceAdd_ (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n\n  /**\n   * @param {module:ol/source/Vector~VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceRemove_ = function handleSourceRemove_ (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n\n  /**\n   * @param {module:ol/Collection~CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_ (evt) {\n    this.addFeature_(/** @type {module:ol/Feature} */ (evt.element));\n  };\n\n  /**\n   * @param {module:ol/events/Event} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureChange_ = function handleFeatureChange_ (evt) {\n    if (!this.changingFeature_) {\n      var feature = /** @type {module:ol/Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n\n  /**\n   * @param {module:ol/Collection~CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_ (evt) {\n    var feature = /** @type {module:ol/Feature} */ (evt.element);\n    this.removeFeature_(feature);\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/Point} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePointGeometry_ = function writePointGeometry_ (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    var segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    });\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/MultiPoint} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_ (feature, geometry) {\n    var this$1 = this;\n\n    var points = geometry.getCoordinates();\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      var segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      });\n      this$1.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/LineString} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_ (feature, geometry) {\n    var this$1 = this;\n\n    var coordinates = geometry.getCoordinates();\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      });\n      this$1.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/MultiLineString} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_ (feature, geometry) {\n    var this$1 = this;\n\n    var lines = geometry.getCoordinates();\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this$1.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/Polygon} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_ (feature, geometry) {\n    var this$1 = this;\n\n    var rings = geometry.getCoordinates();\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this$1.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/MultiPolygon} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_ (feature, geometry) {\n    var this$1 = this;\n\n    var polygons = geometry.getCoordinates();\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          var segmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          });\n          this$1.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/geom/Circle} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_ (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    var centerSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    var circumferenceSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  };\n\n  /**\n   * @param {module:ol/Feature} feature Feature\n   * @param {module:ol/geom/GeometryCollection} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_ (feature, geometry) {\n    var this$1 = this;\n\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0; i < geometries.length; ++i) {\n      this$1.SEGMENT_WRITERS_[geometries[i].getType()].call(this$1, feature, geometries[i]);\n    }\n  };\n\n  /**\n   * @param {module:ol/coordinate~Coordinate} coordinates Coordinates.\n   * @return {module:ol/Feature} Vertex feature.\n   * @private\n   */\n  Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_ (coordinates) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  };\n\n  /**\n   * @param {module:ol/MapBrowserEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handlePointerMove_ = function handlePointerMove_ (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  };\n\n  /**\n   * @param {module:ol/pixel~Pixel} pixel Pixel\n   * @param {module:ol/PluggableMap} map Map.\n   * @private\n   */\n  Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_ (pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    var sortByDistance = function(a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -\n          pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n\n    var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),\n      map.getView().getResolution() * this.pixelTolerance_);\n\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        var vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE &&\n        node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n            if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1]) ||\n                (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0])))) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n\n  /**\n   * @param {module:ol/interaction/Modify~SegmentData} segmentData Segment data.\n   * @param {module:ol/coordinate~Coordinate} vertex Vertex.\n   * @private\n   */\n  Modify.prototype.insertVertex_ = function insertVertex_ (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = /** @type {number} */ (segmentData.index);\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    var newSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    });\n    rTree.insert(boundingExtent(newSegmentData.segment),\n      newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    var newSegmentData2 = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    });\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  Modify.prototype.removePoint = function removePoint () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  Modify.prototype.removeVertex_ = function removeVertex_ () {\n    var this$1 = this;\n\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n          /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (deleted) {\n        this$1.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n        if (left !== undefined) {\n          this$1.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this$1.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          var newSegmentData = /** @type {module:ol/interaction/Modify~SegmentData} */ ({\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          });\n          this$1.rBush_.insert(boundingExtent(newSegmentData.segment),\n            newSegmentData);\n        }\n        this$1.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this$1.vertexFeature_) {\n          this$1.overlay_.getSource().removeFeature(this$1.vertexFeature_);\n          this$1.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n\n    }\n    return deleted;\n  };\n\n  /**\n   * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_ (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n\n  /**\n   * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array.<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_ (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry &&\n          (depth === undefined || segmentDataMatch.depth === undefined ||\n          equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction));\n\n\n/**\n * @param {module:ol/interaction/Modify~SegmentData} a The first segment data.\n * @param {module:ol/interaction/Modify~SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/Modify}\n */\nfunction handleDownEvent(evt) {\n  var this$1 = this;\n\n  if (!this.condition_(evt)) {\n    return false;\n  }\n  this.handlePointerAtPixel_(evt.pixel, evt.map);\n  var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n  this.dragSegments_.length = 0;\n  this.modified_ = false;\n  var vertexFeature = this.vertexFeature_;\n  if (vertexFeature) {\n    var insertVertices = [];\n    var geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());\n    var vertex = geometry.getCoordinates();\n    var vertexExtent = boundingExtent([vertex]);\n    var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n    var componentSegments = {};\n    segmentDataMatches.sort(compareIndexes);\n    for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n      var segmentDataMatch = segmentDataMatches[i];\n      var segment = segmentDataMatch.segment;\n      var uid = getUid(segmentDataMatch.feature);\n      var depth = segmentDataMatch.depth;\n      if (depth) {\n        uid += '-' + depth.join('-'); // separate feature components\n      }\n      if (!componentSegments[uid]) {\n        componentSegments[uid] = new Array(2);\n      }\n      if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n      segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n        var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n        if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n          this$1.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        }\n      } else if (coordinatesEqual(segment[0], vertex) &&\n          !componentSegments[uid][0]) {\n        this$1.dragSegments_.push([segmentDataMatch, 0]);\n        componentSegments[uid][0] = segmentDataMatch;\n      } else if (coordinatesEqual(segment[1], vertex) &&\n          !componentSegments[uid][1]) {\n\n        // prevent dragging closed linestrings by the connecting node\n        if ((segmentDataMatch.geometry.getType() ===\n            GeometryType.LINE_STRING ||\n            segmentDataMatch.geometry.getType() ===\n            GeometryType.MULTI_LINE_STRING) &&\n            componentSegments[uid][0] &&\n            componentSegments[uid][0].index === 0) {\n          continue;\n        }\n\n        this$1.dragSegments_.push([segmentDataMatch, 1]);\n        componentSegments[uid][1] = segmentDataMatch;\n      } else if (this$1.insertVertexCondition_(evt) && getUid(segment) in this$1.vertexSegments_ &&\n          (!componentSegments[uid][0] && !componentSegments[uid][1])) {\n        insertVertices.push([segmentDataMatch, vertex]);\n      }\n    }\n    if (insertVertices.length) {\n      this.willModifyFeatures_(evt);\n    }\n    for (var j = insertVertices.length - 1; j >= 0; --j) {\n      this$1.insertVertex_.apply(this$1, insertVertices[j]);\n    }\n  }\n  return !!this.vertexFeature_;\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @this {module:ol/interaction/Modify}\n */\nfunction handleDragEvent(evt) {\n  var this$1 = this;\n\n  this.ignoreNextSingleClick_ = false;\n  this.willModifyFeatures_(evt);\n\n  var vertex = evt.coordinate;\n  for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n    var dragSegment = this$1.dragSegments_[i];\n    var segmentData = dragSegment[0];\n    var depth = segmentData.depth;\n    var geometry = segmentData.geometry;\n    var coordinates = (void 0);\n    var segment = segmentData.segment;\n    var index = dragSegment[1];\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(segment[index][vertex.length]);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.POINT:\n        coordinates = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n      case GeometryType.MULTI_POINT:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index] = vertex;\n        segment[0] = segment[1] = vertex;\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n        segment[index] = vertex;\n        break;\n      case GeometryType.CIRCLE:\n        segment[0] = segment[1] = vertex;\n        if (segmentData.index === CIRCLE_CENTER_INDEX) {\n          this$1.changingFeature_ = true;\n          geometry.setCenter(vertex);\n          this$1.changingFeature_ = false;\n        } else { // We're dragging the circle's circumference:\n          this$1.changingFeature_ = true;\n          geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n          this$1.changingFeature_ = false;\n        }\n        break;\n      default:\n        // pass\n    }\n\n    if (coordinates) {\n      this$1.setGeometryCoordinates_(geometry, coordinates);\n    }\n  }\n  this.createOrUpdateVertexFeature_(vertex);\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} evt Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Modify}\n */\nfunction handleUpEvent(evt) {\n  var this$1 = this;\n\n  for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n    var segmentData = this$1.dragSegments_[i][0];\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === GeometryType.CIRCLE) {\n      // Update a circle object in the R* bush:\n      var coordinates = geometry.getCenter();\n      var centerSegmentData = segmentData.featureSegments[0];\n      var circumferenceSegmentData = segmentData.featureSegments[1];\n      centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n      circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n      this$1.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n      this$1.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n    } else {\n      this$1.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n    }\n  }\n  if (this.modified_) {\n    this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n    this.modified_ = false;\n  }\n  return false;\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the\n * geometry.\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Modify}\n */\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n  this.lastPointerEvent_ = mapBrowserEvent;\n\n  var handled;\n  if (!mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n  if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n    if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n      handled = this.removePoint();\n    } else {\n      handled = true;\n    }\n  }\n\n  if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n    this.ignoreNextSingleClick_ = false;\n  }\n\n  return handlePointerEvent.call(this, mapBrowserEvent) && !handled;\n}\n\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {module:ol/coordinate~Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry = /** @type {module:ol/geom/Circle} */ (geometry);\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared =\n            squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference =\n            Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {module:ol/coordinate~Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {module:ol/interaction/Modify~SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {module:ol/coordinate~Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE &&\n  segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n\n\n/**\n * @return {module:ol/style/Style~StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n\nexport default Modify;\n\n//# sourceMappingURL=Modify.js.map"]},"metadata":{},"sourceType":"module"}
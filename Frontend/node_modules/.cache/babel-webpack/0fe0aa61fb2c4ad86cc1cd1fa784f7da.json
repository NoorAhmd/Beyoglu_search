{"ast":null,"code":"/**\n * @module ol/source/TileWMS\n */\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { modulo } from '../math.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { toSize, buffer as bufferSize, scale as scaleSize } from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\nimport { compareVersions } from '../string.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {Object.<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See http://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~TileClass}.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {module:ol/source/WMSServerType|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array.<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\n\nvar TileWMS = function (TileImage) {\n  function TileWMS(opt_options) {\n    var options = opt_options || {};\n    var params = options.params || {};\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    TileImage.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = params;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.v13_ = true;\n    /**\n     * @private\n     * @type {module:ol/source/WMSServerType|undefined}\n     */\n\n    this.serverType_ =\n    /** @type {module:ol/source/WMSServerType|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n\n    this.tmpExtent_ = createEmpty();\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  if (TileImage) TileWMS.__proto__ = TileImage;\n  TileWMS.prototype = Object.create(TileImage && TileImage.prototype);\n  TileWMS.prototype.constructor = TileWMS;\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n  TileWMS.prototype.getGetFeatureInfoUrl = function getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileWMS.prototype.getGutterInternal = function getGutterInternal() {\n    return this.gutter_;\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.getParams = function getParams() {\n    return this.params_;\n  };\n  /**\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n   * @param {module:ol/size~Size} tileSize Tile size.\n   * @param {module:ol/extent~Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  TileWMS.prototype.getRequestUrl_ = function getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox = tileExtent;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      var tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    var url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return appendParams(url, params);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileWMS.prototype.getTilePixelRatio = function getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 :\n    /** @type {number} */\n    pixelRatio;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  TileWMS.prototype.getKeyForParams_ = function getKeyForParams_() {\n    var this$1 = this;\n    var i = 0;\n    var res = [];\n\n    for (var key in this$1.params_) {\n      res[i++] = key + '-' + this$1.params_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileWMS.prototype.fixedTileUrlFunction = function fixedTileUrlFunction(tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.updateParams = function updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @private\n   */\n\n\n  TileWMS.prototype.updateV13_ = function updateV13_() {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return TileWMS;\n}(TileImage);\n\nexport default TileWMS; //# sourceMappingURL=TileWMS.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/source/tilewms.js"],"names":["DEFAULT_WMS_VERSION","assert","buffer","createEmpty","assign","modulo","get","getProjection","transform","transformExtent","calculateSourceResolution","toSize","bufferSize","scale","scaleSize","TileImage","WMSServerType","hash","tileCoordHash","compareVersions","appendParams","TileWMS","opt_options","options","params","transparent","call","attributions","cacheSize","crossOrigin","opaque","projection","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","setKey","getKeyForParams_","__proto__","prototype","Object","create","constructor","getGetFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","getTileGridForProjection","tileCoord","getTileCoordForCoordAndResolution","getResolutions","length","tileResolution","getResolution","tileExtent","getTileCoordExtent","tileSize","getTileSize","tmpSize","baseParams","x","Math","floor","y","getRequestUrl_","getGutterInternal","getParams","pixelRatio","getCode","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","axisOrientation","getAxisOrientation","bbox","substr","tmp","join","index","getTilePixelRatio","this$1","i","res","key","fixedTileUrlFunction","updateParams","version"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {toSize, buffer as bufferSize, scale as scaleSize} from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\nimport {compareVersions} from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {Object.<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See http://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~TileClass}.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {module:ol/source/WMSServerType|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array.<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nvar TileWMS = (function (TileImage) {\n  function TileWMS(opt_options) {\n\n    var options = opt_options || {};\n\n    var params = options.params || {};\n\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    TileImage.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {module:ol/source/WMSServerType|undefined}\n     */\n    this.serverType_ = /** @type {module:ol/source/WMSServerType|undefined} */ (options.serverType);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n\n  }\n\n  if ( TileImage ) TileWMS.__proto__ = TileImage;\n  TileWMS.prototype = Object.create( TileImage && TileImage.prototype );\n  TileWMS.prototype.constructor = TileWMS;\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  TileWMS.prototype.getGetFeatureInfoUrl = function getGetFeatureInfoUrl (coordinate, resolution, projection, params) {\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n\n    var tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n\n    var gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n\n    var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n      1, sourceProjectionObj || projectionObj, baseParams);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileWMS.prototype.getGutterInternal = function getGutterInternal () {\n    return this.gutter_;\n  };\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  TileWMS.prototype.getParams = function getParams () {\n    return this.params_;\n  };\n\n  /**\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n   * @param {module:ol/size~Size} tileSize Tile size.\n   * @param {module:ol/extent~Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  TileWMS.prototype.getRequestUrl_ = function getRequestUrl_ (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n\n    var urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      var tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    var url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileWMS.prototype.getTilePixelRatio = function getTilePixelRatio (pixelRatio) {\n    return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\n    /** @type {number} */ (pixelRatio);\n  };\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  TileWMS.prototype.getKeyForParams_ = function getKeyForParams_ () {\n    var this$1 = this;\n\n    var i = 0;\n    var res = [];\n    for (var key in this$1.params_) {\n      res[i++] = key + '-' + this$1.params_[key];\n    }\n    return res.join('/');\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileWMS.prototype.fixedTileUrlFunction = function fixedTileUrlFunction (tileCoord, pixelRatio, projection) {\n\n    var tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(\n      tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    var gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n      pixelRatio, projection, baseParams);\n  };\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  TileWMS.prototype.updateParams = function updateParams (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  };\n\n  /**\n   * @private\n   */\n  TileWMS.prototype.updateV13_ = function updateV13_ () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return TileWMS;\n}(TileImage));\n\n\nexport default TileWMS;\n\n//# sourceMappingURL=TileWMS.js.map"]},"metadata":{},"sourceType":"module"}
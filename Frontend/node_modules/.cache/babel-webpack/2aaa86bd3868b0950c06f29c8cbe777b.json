{"ast":null,"code":"/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array.<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {module:ol/size~Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\n * @return {module:ol/size~Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {module:ol/size~Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {module:ol/size~Size} size Size.\n * @param {number} ratio Ratio.\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\n * @return {module:ol/size~Size} The scaled size.\n */\n\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] * ratio + 0.5 | 0;\n  opt_size[1] = size[1] * ratio + 0.5 | 0;\n  return opt_size;\n}\n/**\n * Returns an `module:ol/size~Size` array for the passed in number (meaning: square) or\n * `module:ol/size~Size` array.\n * (meaning: non-square),\n * @param {number|module:ol/size~Size} size Width and height.\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\n * @return {module:ol/size~Size} Size.\n * @api\n */\n\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] =\n      /** @type {number} */\n      size;\n    }\n\n    return opt_size;\n  }\n} //# sourceMappingURL=size.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/size.js"],"names":["buffer","size","num","opt_size","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;AAC1C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,IAAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACDA,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAA5B;AACAC,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAA5B;AACA,SAAOC,QAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBJ,IAAjB,EAAuB;AAC5B,SAAOA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAhC;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,KAAT,CAAeL,IAAf,EAAqBM,KAArB,EAA4BJ,QAA5B,EAAsC;AAC3C,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,IAAAA,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACDA,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAeF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACAJ,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAeF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACA,SAAOJ,QAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,MAAT,CAAgBP,IAAhB,EAAsBE,QAAtB,EAAgC;AACrC,MAAIM,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAP;AACD,GAFD,MAEO;AACL,QAAIE,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,MAAAA,QAAQ,GAAG,CAACF,IAAD,EAAOA,IAAP,CAAX;AACD,KAFD,MAEO;AACLE,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAR;AAAc;AAAuBF,MAAAA,IAAnD;AACD;;AACD,WAAOE,QAAP;AACD;AACF,C,CAED","sourcesContent":["/**\n * @module ol/size\n */\n\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array.<number>} Size\n * @api\n */\n\n\n/**\n * Returns a buffered size.\n * @param {module:ol/size~Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\n * @return {module:ol/size~Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n\n\n/**\n * Determines if a size has a positive area.\n * @param {module:ol/size~Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {module:ol/size~Size} size Size.\n * @param {number} ratio Ratio.\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\n * @return {module:ol/size~Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\n  return opt_size;\n}\n\n\n/**\n * Returns an `module:ol/size~Size` array for the passed in number (meaning: square) or\n * `module:ol/size~Size` array.\n * (meaning: non-square),\n * @param {number|module:ol/size~Size} size Width and height.\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\n * @return {module:ol/size~Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] = /** @type {number} */ (size);\n    }\n    return opt_size;\n  }\n}\n\n//# sourceMappingURL=size.js.map"]},"metadata":{},"sourceType":"module"}
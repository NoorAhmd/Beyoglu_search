{"ast":null,"code":"import _toConsumableArray from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge, Subscription } from 'rxjs';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { startWith } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nvar MatChipSelectionChange =\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nfunction MatChipSelectionChange(source, selected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatChipBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar\n/** @type {?} */\n_MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nvar\n/** @type {?} */\nCHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\n\nvar MatChipAvatar = function MatChipAvatar() {\n  _classCallCheck(this, MatChipAvatar);\n};\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\n\n\nvar MatChipTrailingIcon = function MatChipTrailingIcon() {\n  _classCallCheck(this, MatChipTrailingIcon);\n};\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nvar MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n  _inherits(MatChip, _MatChipMixinBase2);\n\n  var _super = _createSuper(MatChip);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} ngZone\n   * @param {?} platform\n   * @param {?} globalOptions\n   */\n  function MatChip(_elementRef, ngZone, platform, globalOptions) {\n    var _this;\n\n    _classCallCheck(this, MatChip);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    /**\n     * Whether the ripples are globally disabled through the RippleGlobalOptions\n     */\n\n    _this._ripplesGloballyDisabled = false;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down.\n     * \\@docs-private\n     */\n\n    _this.rippleConfig = {};\n    /**\n     * Whether the chip has focus.\n     */\n\n    _this._hasFocus = false;\n    /**\n     * Whether the chip list is selectable\n     */\n\n    _this.chipListSelectable = true;\n    _this._selected = false;\n    _this._selectable = true;\n    _this._removable = true;\n    /**\n     * Emits when the chip is focused.\n     */\n\n    _this._onFocus = new Subject();\n    /**\n     * Emits when the chip is blured.\n     */\n\n    _this._onBlur = new Subject();\n    /**\n     * Emitted when the chip is selected or deselected.\n     */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Emitted when the chip is destroyed.\n     */\n\n    _this.destroyed = new EventEmitter();\n    /**\n     * Emitted when a chip is to be removed.\n     */\n\n    _this.removed = new EventEmitter();\n\n    _this._addHostClassName();\n\n    _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), ngZone, _elementRef, platform);\n\n    _this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      _this._ripplesGloballyDisabled = !!globalOptions.disabled; // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n\n      _this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp\n      };\n    }\n\n    return _this;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(MatChip, [{\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selected = coerceBooleanProperty(value);\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: false,\n        selected: value\n      });\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value != undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable && this.chipListSelectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"removable\",\n    get: function get() {\n      return this._removable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ariaSelected\",\n    get: function get() {\n      return this.selectable ? this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addHostClassName\",\n    value: function _addHostClassName() {\n      // Add class for the different chips\n      var _iterator = _createForOfIteratorHelper(CHIP_ATTRIBUTE_NAMES),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var attr = _step.value;\n\n          if (this._elementRef.nativeElement.hasAttribute(attr) || this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n            /** @type {?} */\n            this._elementRef.nativeElement.classList.add(attr);\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      /** @type {?} */\n      this._elementRef.nativeElement.classList.add('mat-standard-chip');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.emit({\n        chip: this\n      });\n\n      this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      this._selected = true;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: false,\n        selected: true\n      });\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      this._selected = false;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: false,\n        selected: false\n      });\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectViaInteraction\",\n    value: function selectViaInteraction() {\n      this._selected = true; // Emit select event when selected changes.\n\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: true,\n        selected: true\n      });\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._selected = !this.selected;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: isUserInput,\n        selected: this._selected\n      });\n      return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this._hasFocus) {\n        this._elementRef.nativeElement.focus();\n\n        this._onFocus.next({\n          chip: this\n        });\n      }\n\n      this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /**\n     * Ensures events fire properly upon click.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      // Check disabled\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case DELETE:\n        case BACKSPACE:\n          // If we are removable, remove the focused chip\n          this.remove(); // Always prevent so page navigation does not occur\n\n          event.preventDefault();\n          break;\n\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this.toggleSelected(true);\n          } // Always prevent space from scrolling the page since the list has focus\n\n\n          event.preventDefault();\n          break;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      this._hasFocus = false;\n\n      this._onBlur.next({\n        chip: this\n      });\n    }\n  }]);\n\n  return MatChip;\n}(_MatChipMixinBase);\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8));\n};\n\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"],\n  hostVars: 12,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatChip.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n    }]\n  }];\n};\n\nMatChip.propDecorators = {\n  \"avatar\": [{\n    type: ContentChild,\n    args: [MatChipAvatar]\n  }],\n  \"trailingIcon\": [{\n    type: ContentChild,\n    args: [MatChipTrailingIcon]\n  }],\n  \"removeIcon\": [{\n    type: ContentChild,\n    args: [forwardRef(function () {\n      return MatChipRemove;\n    })]\n  }],\n  \"selected\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"selectable\": [{\n    type: Input\n  }],\n  \"removable\": [{\n    type: Input\n  }],\n  \"selectionChange\": [{\n    type: Output\n  }],\n  \"destroyed\": [{\n    type: Output\n  }],\n  \"removed\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n      inputs: ['color', 'disabled', 'disableRipple'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MatChipAvatar]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MatChipTrailingIcon]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [forwardRef(function () {\n        return MatChipRemove;\n      })]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nvar MatChipRemove = /*#__PURE__*/function () {\n  /**\n   * @param {?} _parentChip\n   */\n  function MatChipRemove(_parentChip) {\n    _classCallCheck(this, MatChipRemove);\n\n    this._parentChip = _parentChip;\n  }\n  /**\n   * Calls the parent chip's public `remove()` method if applicable.\n   * @return {?}\n   */\n\n\n  _createClass(MatChipRemove, [{\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (this._parentChip.removable) {\n        this._parentChip.remove();\n      }\n    }\n  }]);\n\n  return MatChipRemove;\n}();\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip));\n};\n\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n  }\n});\n/** @nocollapse */\n\nMatChipRemove.ctorParameters = function () {\n  return [{\n    type: MatChip\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token to be used to override the default options for the chips module.\n */\n\n\nvar\n/** @type {?} */\nMAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\nvar MatChipListBase =\n/**\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatChipListBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nvar\n/** @type {?} */\n_MatChipListMixinBase = mixinErrorState(MatChipListBase); // Increasing integer for generating unique ids for chip-list components.\n\n\nvar\n/** @type {?} */\nnextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\n\nvar MatChipListChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatChipListChange(source, value) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n\n\nvar MatChipList = /*#__PURE__*/function (_MatChipListMixinBase2) {\n  _inherits(MatChipList, _MatChipListMixinBase2);\n\n  var _super2 = _createSuper(MatChipList);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} ngControl\n   */\n  function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher,\n  /** @docs-private */\n  ngControl) {\n    var _this2;\n\n    _classCallCheck(this, MatChipList);\n\n    _this2 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this2._elementRef = _elementRef;\n    _this2._changeDetectorRef = _changeDetectorRef;\n    _this2._dir = _dir;\n    _this2.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this2.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n     */\n\n    _this2._lastDestroyedIndex = null;\n    /**\n     * Track which chips we're listening to for focus/destruction.\n     */\n\n    _this2._chipSet = new WeakMap();\n    /**\n     * Subscription to tabbing out from the chip list.\n     */\n\n    _this2._tabOutSubscription = Subscription.EMPTY;\n    /**\n     * Uid of the chip list\n     */\n\n    _this2._uid = \"mat-chip-list-\".concat(nextUniqueId++);\n    /**\n     * Tab index for the chip list.\n     */\n\n    _this2._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    _this2._userTabIndex = null;\n    /**\n     * Function when touched\n     */\n\n    _this2._onTouched = function () {};\n    /**\n     * Function when changed\n     */\n\n\n    _this2._onChange = function () {};\n\n    _this2._multiple = false;\n\n    _this2._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n\n    _this2._required = false;\n    _this2._disabled = false;\n    /**\n     * Orientation of the chip list.\n     */\n\n    _this2.ariaOrientation = 'horizontal';\n    _this2._selectable = true;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     */\n\n    _this2.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this2.valueChange = new EventEmitter();\n\n    if (_this2.ngControl) {\n      _this2.ngControl.valueAccessor = _assertThisInitialized(_this2);\n    }\n\n    return _this2;\n  }\n  /**\n   * The array of selected chips inside chip list.\n   * @return {?}\n   */\n\n\n  _createClass(MatChipList, [{\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"role\",\n    get: function get() {\n      return this.empty ? null : 'listbox';\n    }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.writeValue(value);\n      this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this._chipInput && this._chipInput.focused || this.chips.some(function (chip) {\n        return chip._hasFocus;\n      });\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this3 = this;\n\n      this._selectable = coerceBooleanProperty(value);\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          return chip.chipListSelectable = _this3._selectable;\n        });\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"tabIndex\",\n    set: function set(value) {\n      this._userTabIndex = value;\n      this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipSelectionChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.selectionChange;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipFocusChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onFocus;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipBlurChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onBlur;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipRemoveChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.destroyed;\n      })));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this4 = this;\n\n      this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr'); // Prevents the chip list from capturing focus and redirecting\n      // it back to the first chip when the user tabs out.\n\n      this._tabOutSubscription = this._keyManager.tabOut.subscribe(function () {\n        _this4._tabIndex = -1;\n        setTimeout(function () {\n          return _this4._tabIndex = _this4._userTabIndex || 0;\n        });\n      }); // When the list changes, re-subscribe\n\n      this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(function () {\n        _this4._resetChips(); // Reset chips selected/deselected status\n\n\n        _this4._initializeSelection(); // Check to see if we need to update our tab index\n\n\n        _this4._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n        _this4._updateFocusForDestroyedChips();\n\n        _this4.stateChanges.next();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._tabOutSubscription.unsubscribe();\n\n      if (this._changeSubscription) {\n        this._changeSubscription.unsubscribe();\n      }\n\n      if (this._chipRemoveSubscription) {\n        this._chipRemoveSubscription.unsubscribe();\n      }\n\n      this._dropSubscriptions();\n\n      this.stateChanges.complete();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerInput\",\n    value: function registerInput(inputElement) {\n      this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.chips) {\n        this._setSelectionByValue(value, false);\n      }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._elementRef.nativeElement.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      this.focus();\n    }\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n      // Focus on first element if there's no chipInput inside chip-list\n      if (this._chipInput && this._chipInput.focused) {// do nothing\n      } else if (this.chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n\n        this.stateChanges.next();\n      } else {\n        this._focusInput();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusInput\",\n    value: function _focusInput() {\n      if (this._chipInput) {\n        this._chipInput.focus();\n      }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      var\n      /** @type {?} */\n      target =\n      /** @type {?} */\n      event.target; // If they are on an empty input and hit backspace, focus the last chip\n\n      if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n        this._keyManager.setLastItemActive();\n\n        event.preventDefault();\n      } else if (target && target.classList.contains('mat-chip')) {\n        this._keyManager.onKeydown(event);\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTabIndex\",\n    value: function _updateTabIndex() {\n      // If we have 0 chips, we should not allow keyboard focus\n      this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * Update key manager's active item when chip is deleted.\n     * If the deleted chip is the last chip in chip list, focus the new last chip.\n     * Otherwise focus the next chip in the list.\n     * Save `_lastDestroyedIndex` so we can set the correct focus.\n     * @param {?} chip\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateKeyManager\",\n    value: function _updateKeyManager(chip) {\n      var\n      /** @type {?} */\n      chipIndex = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        if (chip._hasFocus) {\n          // Check whether the chip is not the last item\n          if (chipIndex < this.chips.length - 1) {\n            this._keyManager.setActiveItem(chipIndex);\n          } else if (chipIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(chipIndex - 1);\n          }\n        }\n\n        if (this._keyManager.activeItemIndex === chipIndex) {\n          this._lastDestroyedIndex = chipIndex;\n        }\n      }\n    }\n    /**\n     * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n     * one.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateFocusForDestroyedChips\",\n    value: function _updateFocusForDestroyedChips() {\n      var\n      /** @type {?} */\n      chipsArray = this.chips.toArray();\n\n      if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused || this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1)) {\n        // Check whether the destroyed chip was the last item\n        var\n        /** @type {?} */\n        newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n\n        this._keyManager.setActiveItem(newFocusIndex);\n\n        var\n        /** @type {?} */\n        focusChip = this._keyManager.activeItem; // Focus the chip\n\n        if (focusChip) {\n          focusChip.focus();\n        }\n      } // Reset our destroyed index\n\n\n      this._lastDestroyedIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isInputEmpty\",\n    value: function _isInputEmpty(element) {\n      if (element && element.nodeName.toLowerCase() === 'input') {\n        var\n        /** @type {?} */\n        input =\n        /** @type {?} */\n        element;\n        return !input.value;\n      }\n\n      return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this5 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this._clearSelection();\n\n      this.chips.forEach(function (chip) {\n        return chip.deselect();\n      });\n\n      if (Array.isArray(value)) {\n        value.forEach(function (currentValue) {\n          return _this5._selectValue(currentValue, isUserInput);\n        });\n\n        this._sortValues();\n      } else {\n        var\n        /** @type {?} */\n        correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what chip the user interacted with last.\n\n\n        if (correspondingChip) {\n          if (isUserInput) {\n            this._keyManager.setActiveItem(correspondingChip);\n          }\n        }\n      }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this6 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var\n      /** @type {?} */\n      correspondingChip = this.chips.find(function (chip) {\n        return chip.value != null && _this6._compareWith(chip.value, value);\n      });\n\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n        this._selectionModel.select(correspondingChip);\n      }\n\n      return correspondingChip;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this7 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        if (_this7.ngControl || _this7._value) {\n          _this7._setSelectionByValue(_this7.ngControl ? _this7.ngControl.value : _this7._value, false);\n\n          _this7.stateChanges.next();\n        }\n      });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection(skip) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(function (chip) {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this8 = this;\n\n      if (this._multiple) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(function (chip) {\n          if (chip.selected) {\n            _this8._selectionModel.select(chip);\n          }\n        });\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      var\n      /** @type {?} */\n      valueToEmit = null;\n\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(function (chip) {\n          return chip.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this9 = this;\n\n      this._keyManager.setActiveItem(-1);\n\n      if (!this.disabled) {\n        if (this._chipInput) {\n          // If there's a chip input, we should check whether the focus moved to chip input.\n          // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n          // to chip input, do nothing.\n          // Timeout is needed to wait for the focus() event trigger on chip input.\n          setTimeout(function () {\n            if (!_this9.focused) {\n              _this9._markAsTouched();\n            }\n          });\n        } else {\n          // If there's no chip input, then mark the field as touched.\n          this._markAsTouched();\n        }\n      }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markAsTouched\",\n    value: function _markAsTouched() {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetChips\",\n    value: function _resetChips() {\n      this._dropSubscriptions();\n\n      this._listenToChipsFocus();\n\n      this._listenToChipsSelection();\n\n      this._listenToChipsRemoved();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dropSubscriptions\",\n    value: function _dropSubscriptions() {\n      if (this._chipFocusSubscription) {\n        this._chipFocusSubscription.unsubscribe();\n\n        this._chipFocusSubscription = null;\n      }\n\n      if (this._chipBlurSubscription) {\n        this._chipBlurSubscription.unsubscribe();\n\n        this._chipBlurSubscription = null;\n      }\n\n      if (this._chipSelectionSubscription) {\n        this._chipSelectionSubscription.unsubscribe();\n\n        this._chipSelectionSubscription = null;\n      }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsSelection\",\n    value: function _listenToChipsSelection() {\n      var _this10 = this;\n\n      this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n        event.source.selected ? _this10._selectionModel.select(event.source) : _this10._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n        if (!_this10.multiple) {\n          _this10.chips.forEach(function (chip) {\n            if (!_this10._selectionModel.isSelected(chip) && chip.selected) {\n              chip.deselect();\n            }\n          });\n        }\n\n        if (event.isUserInput) {\n          _this10._propagateChanges();\n        }\n      });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsFocus\",\n    value: function _listenToChipsFocus() {\n      var _this11 = this;\n\n      this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n        var\n        /** @type {?} */\n        chipIndex = _this11.chips.toArray().indexOf(event.chip);\n\n        if (_this11._isValidIndex(chipIndex)) {\n          _this11._keyManager.updateActiveItemIndex(chipIndex);\n        }\n\n        _this11.stateChanges.next();\n      });\n      this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n        _this11._blur();\n\n        _this11.stateChanges.next();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsRemoved\",\n    value: function _listenToChipsRemoved() {\n      var _this12 = this;\n\n      this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n        _this12._updateKeyManager(event.chip);\n      });\n    }\n  }]);\n\n  return MatChipList;\n}(_MatChipListMixinBase);\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:24px;align-items:center;cursor:default}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip:focus{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12);outline:0}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:7px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:7px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:7px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:7px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:32px;height:32px;margin-right:8px;margin-left:0}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:0}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:7px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:7px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden}input.mat-chip-input{width:150px;margin:3px;flex:1 0 150px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatChipList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }];\n};\n\nMatChipList.propDecorators = {\n  \"errorStateMatcher\": [{\n    type: Input\n  }],\n  \"multiple\": [{\n    type: Input\n  }],\n  \"compareWith\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"required\": [{\n    type: Input\n  }],\n  \"placeholder\": [{\n    type: Input\n  }],\n  \"disabled\": [{\n    type: Input\n  }],\n  \"ariaOrientation\": [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  \"selectable\": [{\n    type: Input\n  }],\n  \"tabIndex\": [{\n    type: Input\n  }],\n  \"change\": [{\n    type: Output\n  }],\n  \"valueChange\": [{\n    type: Output\n  }],\n  \"chips\": [{\n    type: ContentChildren,\n    args: [MatChip]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': '_tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:24px;align-items:center;cursor:default}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip:focus{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12);outline:0}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:7px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:7px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:7px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:7px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:32px;height:32px;margin-right:8px;margin-left:0}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:0}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:7px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:7px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden}input.mat-chip-input{width:150px;margin:3px;flex:1 0 150px}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids.\n\n\nvar\n/** @type {?} */\nnextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nvar MatChipInput = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultOptions\n   */\n  function MatChipInput(_elementRef, _defaultOptions) {\n    _classCallCheck(this, MatChipInput);\n\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /**\n     * Whether the control is focused.\n     */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     */\n\n    this.chipEnd = new EventEmitter();\n    /**\n     * The input's placeholder text.\n     */\n\n    this.placeholder = '';\n    /**\n     * Unique id for the input.\n     */\n\n    this.id = \"mat-chip-list-input-\".concat(nextUniqueId$1++);\n    this._inputElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Register input for chip list\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(MatChipInput, [{\n    key: \"chipList\",\n    set: function set(value) {\n      if (value) {\n        this._chipList = value;\n\n        this._chipList.registerInput(this);\n      }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addOnBlur\",\n    get: function get() {\n      return this._addOnBlur;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._inputElement.value;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n\n      this.focused = false; // Blur the chip list if it is not focused\n\n      if (!this._chipList.focused) {\n        this._chipList._blur();\n      }\n\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      this.focused = true;\n\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChipEnd\",\n    value: function _emitChipEnd(event) {\n      if (!this._inputElement.value && !!event) {\n        this._chipList._keydown(event);\n      }\n\n      if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n        this.chipEnd.emit({\n          input: this._inputElement,\n          value: this._inputElement.value\n        });\n\n        if (event) {\n          event.preventDefault();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._inputElement.focus();\n    }\n  }]);\n\n  return MatChipInput;\n}();\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 2,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"placeholder\", ctx.placeholder || null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"]\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatChipInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_CHIPS_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatChipInput.propDecorators = {\n  \"chipList\": [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  \"addOnBlur\": [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  \"separatorKeyCodes\": [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  \"chipEnd\": [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  \"placeholder\": [{\n    type: Input\n  }],\n  \"id\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.placeholder]': 'placeholder || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nCHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nvar MatChipsModule = function MatChipsModule() {\n  _classCallCheck(this, MatChipsModule);\n};\n\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\n\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue:\n    /** @type {?} */\n    ɵ0\n  }]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon],\n    exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue:\n        /** @type {?} */\n        ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS }; //# sourceMappingURL=chips.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/material/__ivy_ngcc__/esm2015/chips.js"],"names":["coerceBooleanProperty","BACKSPACE","DELETE","SPACE","ENTER","Platform","ContentChild","Directive","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","InjectionToken","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Self","ViewEncapsulation","NgModule","MAT_RIPPLE_GLOBAL_OPTIONS","mixinColor","mixinDisabled","mixinDisableRipple","RippleRenderer","ErrorStateMatcher","mixinErrorState","Subject","merge","Subscription","FocusKeyManager","Directionality","SelectionModel","FormGroupDirective","NgControl","NgForm","MatFormFieldControl","startWith","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","ngDevMode","ɵsetClassMetadata","args","selector","host","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","ngZone","platform","globalOptions","_ripplesGloballyDisabled","rippleConfig","_hasFocus","chipListSelectable","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","nativeElement","disabled","speedFactor","baseSpeedFactor","animation","terminateOnPointerUp","disableRipple","value","emit","_value","undefined","textContent","selectable","toString","attr","hasAttribute","tagName","toLowerCase","classList","add","chip","_removeTriggerEvents","focus","next","removable","event","preventDefault","stopPropagation","keyCode","remove","toggleSelected","MatChip_Factory","ɵɵdirectiveInject","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatChipRemove","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ɵɵattribute","ariaSelected","ɵɵclassProp","inputs","color","outputs","exportAs","features","ɵɵInheritDefinitionFeature","ctorParameters","decorators","propDecorators","_parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_changeDetectorRef","_dir","controlType","_lastDestroyedIndex","_chipSet","WeakMap","_tabOutSubscription","EMPTY","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","chips","some","length","forEach","map","_keyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","tabOut","subscribe","setTimeout","_changeSubscription","changes","pipe","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","updateErrorState","unsubscribe","_chipRemoveSubscription","_dropSubscriptions","complete","inputElement","ids","_ariaDescribedby","join","_setSelectionByValue","isDisabled","setFirstItemActive","_focusInput","target","_isInputEmpty","setLastItemActive","contains","onKeydown","chipIndex","toArray","indexOf","_isValidIndex","setActiveItem","activeItemIndex","chipsArray","activeItem","newFocusIndex","Math","min","focusChip","index","element","nodeName","input","_clearSelection","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","Promise","resolve","then","skip","clear","fallbackValue","valueToEmit","markForCheck","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","_updateKeyManager","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","ɵɵhostProperty","required","errorState","role","compareWith","tabIndex","errorStateMatcher","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","providers","None","OnPush","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","registerInput","_emitChipEnd","addOnBlur","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","chipList","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge, Subscription } from 'rxjs';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst /** @type {?} */ _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\nconst /** @type {?} */ CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?} globalOptions\n     */\n    constructor(_elementRef, ngZone, platform, globalOptions) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        /**\n         * Whether the ripples are globally disabled through the RippleGlobalOptions\n         */\n        this._ripplesGloballyDisabled = false;\n        /**\n         * Ripple configuration for ripples that are launched on pointer down.\n         * \\@docs-private\n         */\n        this.rippleConfig = {};\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n        if (globalOptions) {\n            this._ripplesGloballyDisabled = !!globalOptions.disabled;\n            // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n            this.rippleConfig = {\n                speedFactor: globalOptions.baseSpeedFactor,\n                animation: globalOptions.animation,\n                terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n            };\n        }\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = coerceBooleanProperty(value);\n        this.selectionChange.emit({\n            source: this,\n            isUserInput: false,\n            selected: value\n        });\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value != undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if it's parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        return this.selectable ? this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        // Add class for the different chips\n        for (const /** @type {?} */ attr of CHIP_ATTRIBUTE_NAMES) {\n            if (this._elementRef.nativeElement.hasAttribute(attr) ||\n                this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n                (/** @type {?} */ (this._elementRef.nativeElement)).classList.add(attr);\n                return;\n            }\n        }\n        (/** @type {?} */ (this._elementRef.nativeElement)).classList.add('mat-standard-chip');\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        this._selected = true;\n        this.selectionChange.emit({\n            source: this,\n            isUserInput: false,\n            selected: true\n        });\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        this._selected = false;\n        this.selectionChange.emit({\n            source: this,\n            isUserInput: false,\n            selected: false\n        });\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        this._selected = true;\n        // Emit select event when selected changes.\n        this.selectionChange.emit({\n            source: this,\n            isUserInput: true,\n            selected: true\n        });\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Ensures events fire properly upon click.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        // Check disabled\n        if (this.disabled) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        this._hasFocus = false;\n        this._onBlur.next({ chip: this });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8)); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"], hostVars: 12, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: Platform, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] },] },\n];\nMatChip.propDecorators = {\n    \"avatar\": [{ type: ContentChild, args: [MatChipAvatar,] },],\n    \"trailingIcon\": [{ type: ContentChild, args: [MatChipTrailingIcon,] },],\n    \"removeIcon\": [{ type: ContentChild, args: [forwardRef(() => MatChipRemove),] },],\n    \"selected\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"selectable\": [{ type: Input },],\n    \"removable\": [{ type: Input },],\n    \"selectionChange\": [{ type: Output },],\n    \"destroyed\": [{ type: Output },],\n    \"removed\": [{ type: Output },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(() => MatChipRemove)]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._parentChip.removable) {\n            this._parentChip.remove();\n        }\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler() { return ctx._handleClick(); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick()'\n                }\n            }]\n    }], function () { return [{ type: MatChip }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n */\nconst /** @type {?} */ MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst /** @type {?} */ _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n         */\n        this._lastDestroyedIndex = null;\n        /**\n         * Track which chips we're listening to for focus/destruction.\n         */\n        this._chipSet = new WeakMap();\n        /**\n         * Subscription to tabbing out from the chip list.\n         */\n        this._tabOutSubscription = Subscription.EMPTY;\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = () => { };\n        /**\n         * Function when changed\n         */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        // Prevents the chip list from capturing focus and redirecting\n        // it back to the first chip when the user tabs out.\n        this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n            this._tabIndex = -1;\n            setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n        });\n        // When the list changes, re-subscribe\n        this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._tabOutSubscription.unsubscribe();\n        if (this._changeSubscription) {\n            this._changeSubscription.unsubscribe();\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n        }\n        this._dropSubscriptions();\n        this.stateChanges.complete();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._elementRef.nativeElement.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() { this.focus(); }\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @return {?}\n     */\n    focus() {\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @return {?}\n     */\n    _focusInput() {\n        if (this._chipInput) {\n            this._chipInput.focus();\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        const /** @type {?} */ target = /** @type {?} */ (event.target);\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * Update key manager's active item when chip is deleted.\n     * If the deleted chip is the last chip in chip list, focus the new last chip.\n     * Otherwise focus the next chip in the list.\n     * Save `_lastDestroyedIndex` so we can set the correct focus.\n     * @param {?} chip\n     * @return {?}\n     */\n    _updateKeyManager(chip) {\n        let /** @type {?} */ chipIndex = this.chips.toArray().indexOf(chip);\n        if (this._isValidIndex(chipIndex)) {\n            if (chip._hasFocus) {\n                // Check whether the chip is not the last item\n                if (chipIndex < this.chips.length - 1) {\n                    this._keyManager.setActiveItem(chipIndex);\n                }\n                else if (chipIndex - 1 >= 0) {\n                    this._keyManager.setActiveItem(chipIndex - 1);\n                }\n            }\n            if (this._keyManager.activeItemIndex === chipIndex) {\n                this._lastDestroyedIndex = chipIndex;\n            }\n        }\n    }\n    /**\n     * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n     * one.\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        const /** @type {?} */ chipsArray = this.chips.toArray();\n        if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n            (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n            // Check whether the destroyed chip was the last item\n            const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n            this._keyManager.setActiveItem(newFocusIndex);\n            const /** @type {?} */ focusChip = this._keyManager.activeItem;\n            // Focus the chip\n            if (focusChip) {\n                focusChip.focus();\n            }\n        }\n        // Reset our destroyed index\n        this._lastDestroyedIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            let /** @type {?} */ input = /** @type {?} */ (element);\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const /** @type {?} */ correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        let /** @type {?} */ valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        this._keyManager.setActiveItem(-1);\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let /** @type {?} */ chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            this._updateKeyManager(event.chip);\n        });\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:24px;align-items:center;cursor:default}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip:focus{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12);outline:0}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:7px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:7px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:7px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:7px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:32px;height:32px;margin-right:8px;margin-left:0}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:0}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:7px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:7px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden}input.mat-chip-input{width:150px;margin:3px;flex:1 0 150px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: Directionality, decorators: [{ type: Optional },] },\n    { type: NgForm, decorators: [{ type: Optional },] },\n    { type: FormGroupDirective, decorators: [{ type: Optional },] },\n    { type: ErrorStateMatcher, },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self },] },\n];\nMatChipList.propDecorators = {\n    \"errorStateMatcher\": [{ type: Input },],\n    \"multiple\": [{ type: Input },],\n    \"compareWith\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"required\": [{ type: Input },],\n    \"placeholder\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n    \"ariaOrientation\": [{ type: Input, args: ['aria-orientation',] },],\n    \"selectable\": [{ type: Input },],\n    \"tabIndex\": [{ type: Input },],\n    \"change\": [{ type: Output },],\n    \"valueChange\": [{ type: Output },],\n    \"chips\": [{ type: ContentChildren, args: [MatChip,] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{ selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': '_tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:24px;align-items:center;cursor:default}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip:focus{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12);outline:0}@media screen and (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:7px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:7px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:7px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:7px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:32px;height:32px;margin-right:8px;margin-left:0}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:0}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:7px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:7px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden}input.mat-chip-input{width:150px;margin:3px;flex:1 0 150px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids.\nlet /** @type {?} */ nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._inputElement = /** @type {?} */ (this._elementRef.nativeElement);\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    focus() { this._inputElement.focus(); }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 2, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"placeholder\", ctx.placeholder || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"] }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] },] },\n];\nMatChipInput.propDecorators = {\n    \"chipList\": [{ type: Input, args: ['matChipInputFor',] },],\n    \"addOnBlur\": [{ type: Input, args: ['matChipInputAddOnBlur',] },],\n    \"separatorKeyCodes\": [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] },],\n    \"chipEnd\": [{ type: Output, args: ['matChipInputTokenEnd',] },],\n    \"placeholder\": [{ type: Input },],\n    \"id\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.placeholder]': 'placeholder || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: /** @type {?} */ ((ɵ0))\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon], exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: /** @type {?} */ ((ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };\n\n//# sourceMappingURL=chips.js.map"]},"metadata":{},"sourceType":"module"}
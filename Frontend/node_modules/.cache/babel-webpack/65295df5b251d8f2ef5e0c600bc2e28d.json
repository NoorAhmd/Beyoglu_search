{"ast":null,"code":"import _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, supportsPassiveEventListeners, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Options to pass to the animationstart listener.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar\n/** @type {?} */\nlistenerOptions = supportsPassiveEventListeners() ? {\n  passive: true\n} : false;\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nvar AutofillMonitor = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  function AutofillMonitor(_platform, _ngZone) {\n    _classCallCheck(this, AutofillMonitor);\n\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param {?} element The element to monitor.\n   * @return {?} A stream of autofill state changes.\n   */\n\n\n  _createClass(AutofillMonitor, [{\n    key: \"monitor\",\n    value: function monitor(element) {\n      var _this = this;\n\n      if (!this._platform.isBrowser) {\n        return EMPTY;\n      }\n\n      var\n      /** @type {?} */\n      info = this._monitoredElements.get(element);\n\n      if (info) {\n        return info.subject.asObservable();\n      }\n\n      var\n      /** @type {?} */\n      result = new Subject();\n      var\n      /** @type {?} */\n      cssClass = 'cdk-text-field-autofilled';\n\n      var\n      /** @type {?} */\n      listener = function listener(event) {\n        // Animation events fire on initial element render, we check for the presence of the autofill\n        // CSS class to make sure this is a real change in state, not just the initial render before\n        // we fire off events.\n        if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n          element.classList.add(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target:\n              /** @type {?} */\n              event.target,\n              isAutofilled: true\n            });\n          });\n        } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n          element.classList.remove(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target:\n              /** @type {?} */\n              event.target,\n              isAutofilled: false\n            });\n          });\n        }\n      };\n\n      this._ngZone.runOutsideAngular(function () {\n        element.addEventListener('animationstart', listener, listenerOptions);\n        element.classList.add('cdk-text-field-autofill-monitored');\n      });\n\n      this._monitoredElements.set(element, {\n        subject: result,\n        unlisten: function unlisten() {\n          element.removeEventListener('animationstart', listener, listenerOptions);\n        }\n      });\n\n      return result.asObservable();\n    }\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(element) {\n      var\n      /** @type {?} */\n      info = this._monitoredElements.get(element);\n\n      if (info) {\n        info.unlisten();\n        info.subject.complete();\n        element.classList.remove('cdk-text-field-autofill-monitored');\n        element.classList.remove('cdk-text-field-autofilled');\n\n        this._monitoredElements.delete(element);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this2 = this;\n\n      this._monitoredElements.forEach(function (_info, element) {\n        return _this2.stopMonitoring(element);\n      });\n    }\n  }]);\n\n  return AutofillMonitor;\n}();\n\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nAutofillMonitor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: AutofillMonitor,\n  factory: AutofillMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nAutofillMonitor.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nAutofillMonitor.ngInjectableDef = defineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(inject(Platform), inject(NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\n\n\nvar CdkAutofill = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _autofillMonitor\n   */\n  function CdkAutofill(_elementRef, _autofillMonitor) {\n    _classCallCheck(this, CdkAutofill);\n\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /**\n     * Emits when the autofill state of the element changes.\n     */\n\n    this.cdkAutofill = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkAutofill, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n        return _this3.cdkAutofill.emit(event);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }]);\n\n  return CdkAutofill;\n}();\n\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\n\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n/** @nocollapse */\n\nCdkAutofill.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: AutofillMonitor\n  }];\n};\n\nCdkAutofill.propDecorators = {\n  \"cdkAutofill\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n\n\nvar CdkTextareaAutosize = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _platform\n   * @param {?} _ngZone\n   */\n  function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n    _classCallCheck(this, CdkTextareaAutosize);\n\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    this._textareaElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Minimum amount of rows in the textarea.\n   * @return {?}\n   */\n\n\n  _createClass(CdkTextareaAutosize, [{\n    key: \"minRows\",\n    get: function get() {\n      return this._minRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minRows = value;\n\n      this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxRows\",\n    get: function get() {\n      return this._maxRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxRows = value;\n\n      this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n      // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n      if (this._enabled !== value) {\n        (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n      }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMinHeight\",\n    value: function _setMinHeight() {\n      var\n      /** @type {?} */\n      minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n      if (minHeight) {\n        this._setTextareaStyle('minHeight', minHeight);\n      }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMaxHeight\",\n    value: function _setMaxHeight() {\n      var\n      /** @type {?} */\n      maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n      if (maxHeight) {\n        this._setTextareaStyle('maxHeight', maxHeight);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      if (this._platform.isBrowser) {\n        // Remember the height which we started with in case autosizing is disabled\n        this._initialHeight = this._textareaElement.style.height;\n        this.resizeToFitContent();\n\n        this._ngZone.runOutsideAngular(function () {\n          fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this4._destroyed)).subscribe(function () {\n            return _this4.resizeToFitContent(true);\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTextareaStyle\",\n    value: function _setTextareaStyle(property, value) {\n      this._textareaElement.style[property] = value;\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheTextareaLineHeight\",\n    value: function _cacheTextareaLineHeight() {\n      if (this._cachedLineHeight) {\n        return;\n      } // Use a clone element because we have to override some styles.\n\n\n      var\n      /** @type {?} */\n      textareaClone =\n      /** @type {?} */\n      this._textareaElement.cloneNode(false);\n\n      textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n      // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n      // would affect the height.\n\n      textareaClone.style.position = 'absolute';\n      textareaClone.style.visibility = 'hidden';\n      textareaClone.style.border = 'none';\n      textareaClone.style.padding = '0';\n      textareaClone.style.height = '';\n      textareaClone.style.minHeight = '';\n      textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n      // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n      // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n      // to hidden. This ensures that there is no invalid calculation of the line height.\n      // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n      textareaClone.style.overflow = 'hidden';\n      /** @type {?} */\n\n      this._textareaElement.parentNode.appendChild(textareaClone);\n\n      this._cachedLineHeight = textareaClone.clientHeight;\n      /** @type {?} */\n\n      this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n      this._setMinHeight();\n\n      this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._platform.isBrowser) {\n        this.resizeToFitContent();\n      }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n\n  }, {\n    key: \"resizeToFitContent\",\n    value: function resizeToFitContent() {\n      var _this5 = this;\n\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // If autosizing is disabled, just skip everything else\n      if (!this._enabled) {\n        return;\n      }\n\n      this._cacheTextareaLineHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n      // in checking the height of the textarea.\n\n\n      if (!this._cachedLineHeight) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      textarea =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n      var\n      /** @type {?} */\n      value = textarea.value; // Only resize of the value changed since these calculations can be expensive.\n\n      if (value === this._previousValue && !force) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      placeholderText = textarea.placeholder; // Reset the textarea height to auto in order to shrink back to its default size.\n      // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n      // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n      // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n      // need to be removed temporarily.\n\n      textarea.classList.add('cdk-textarea-autosize-measuring');\n      textarea.placeholder = ''; // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n      // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n\n      var\n      /** @type {?} */\n      height = textarea.scrollHeight - 4; // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n      textarea.style.height = \"\".concat(height, \"px\");\n      textarea.classList.remove('cdk-textarea-autosize-measuring');\n      textarea.placeholder = placeholderText; // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n      // We need to re-set the selection in order for it to scroll to the proper position.\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          return requestAnimationFrame(function () {\n            var selectionStart = textarea.selectionStart,\n                selectionEnd = textarea.selectionEnd; // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n            // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n            // between the time we requested the animation frame and when it was executed.\n            // Also note that we have to assert that the textarea is focused before we set the\n            // selection range. Setting the selection range on a non-focused textarea will cause\n            // it to receive focus on IE and Edge.\n\n            if (!_this5._destroyed.isStopped && document.activeElement === textarea) {\n              textarea.setSelectionRange(selectionStart, selectionEnd);\n            }\n          });\n        });\n      }\n\n      this._previousValue = value;\n    }\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Do not try to change the textarea, if the initialHeight has not been determined yet\n      // This might potentially remove styles when reset() is called before ngAfterViewInit\n      if (this._initialHeight === undefined) {\n        return;\n      }\n\n      this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_noopInputHandler\",\n    value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n    }\n  }]);\n\n  return CdkTextareaAutosize;\n}();\n\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n/** @nocollapse */\n\nCdkTextareaAutosize.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkTextareaAutosize.propDecorators = {\n  \"minRows\": [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  \"maxRows\": [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  \"enabled\": [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1',\n        '(input)': '_noopInputHandler()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar TextFieldModule = function TextFieldModule() {\n  _classCallCheck(this, TextFieldModule);\n};\n\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n  return new (t || TextFieldModule)();\n};\n\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function declarations() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule }; //# sourceMappingURL=text-field.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/text-field.js"],"names":["Platform","supportsPassiveEventListeners","PlatformModule","Directive","ElementRef","EventEmitter","Injectable","NgZone","Output","Input","NgModule","defineInjectable","inject","EMPTY","Subject","fromEvent","coerceBooleanProperty","auditTime","takeUntil","ɵngcc0","ɵngcc1","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","element","isBrowser","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","delete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","ngInjectableDef","ngDevMode","ɵsetClassMetadata","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","nativeElement","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","_destroyed","_enabled","_textareaElement","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxHeight","maxRows","_initialHeight","style","height","window","pipe","property","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","force","_cacheTextareaLineHeight","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","selectionStart","selectionEnd","isStopped","document","activeElement","setSelectionRange","undefined","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, supportsPassiveEventListeners, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst /** @type {?} */ listenerOptions = supportsPassiveEventListeners() ? { passive: true } : false;\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param {?} element The element to monitor.\n     * @return {?} A stream of autofill state changes.\n     */\n    monitor(element) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const /** @type {?} */ info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        const /** @type {?} */ result = new Subject();\n        const /** @type {?} */ cssClass = 'cdk-text-field-autofilled';\n        const /** @type {?} */ listener = (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: /** @type {?} */ (event.target), isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: /** @type {?} */ (event.target), isAutofilled: false }));\n            }\n        };\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result.asObservable();\n    }\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n    stopMonitoring(element) {\n        const /** @type {?} */ info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AutofillMonitor, factory: AutofillMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform, },\n    { type: NgZone, },\n];\n/** @nocollapse */ AutofillMonitor.ngInjectableDef = defineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(inject(Platform), inject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef.nativeElement)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: AutofillMonitor, },\n];\nCdkAutofill.propDecorators = {\n    \"cdkAutofill\": [{ type: Output },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        this._textareaElement = /** @type {?} */ (this._elementRef.nativeElement);\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = value;\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = value;\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._setTextareaStyle('minHeight', minHeight);\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._setTextareaStyle('maxHeight', maxHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setTextareaStyle(property, value) {\n        this._textareaElement.style[property] = value;\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let /** @type {?} */ textareaClone = /** @type {?} */ (this._textareaElement.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden'; /** @type {?} */\n        ((this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */\n        ((this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const /** @type {?} */ textarea = /** @type {?} */ (this._elementRef.nativeElement);\n        const /** @type {?} */ value = textarea.value;\n        // Only resize of the value changed since these calculations can be expensive.\n        if (value === this._previousValue && !force) {\n            return;\n        }\n        const /** @type {?} */ placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const /** @type {?} */ height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n        // We need to re-set the selection in order for it to scroll to the proper position.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => requestAnimationFrame(() => {\n                const { selectionStart, selectionEnd } = textarea;\n                // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n                // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n                // between the time we requested the animation frame and when it was executed.\n                // Also note that we have to assert that the textarea is focused before we set the\n                // selection range. Setting the selection range on a non-focused textarea will cause\n                // it to receive focus on IE and Edge.\n                if (!this._destroyed.isStopped && document.activeElement === textarea) {\n                    textarea.setSelectionRange(selectionStart, selectionEnd);\n                }\n            }));\n        }\n        this._previousValue = value;\n    }\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n            return;\n        }\n        this._textareaElement.style.height = this._initialHeight;\n    }\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Platform, },\n    { type: NgZone, },\n];\nCdkTextareaAutosize.propDecorators = {\n    \"minRows\": [{ type: Input, args: ['cdkAutosizeMinRows',] },],\n    \"maxRows\": [{ type: Input, args: ['cdkAutosizeMaxRows',] },],\n    \"enabled\": [{ type: Input, args: ['cdkTextareaAutosize',] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                    '(input)': '_noopInputHandler()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map"]},"metadata":{},"sourceType":"module"}
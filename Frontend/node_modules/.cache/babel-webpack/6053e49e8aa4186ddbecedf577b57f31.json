{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array.<module:ol/extent~Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array.<module:ol/extent~Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @return {function(module:ol/extent~Extent, number): Array.<module:ol/extent~Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {module:ol/extent~Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array.<module:ol/extent~Extent>} Extents.\n     */\n    function (extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array.<module:ol/extent~Extent>} */\n\n      var extents = [];\n      /** @type {module:ol/tilecoord~TileCoord} */\n\n      var tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n\n      return extents;\n    }\n  );\n} //# sourceMappingURL=loadingstrategy.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/loadingstrategy.js"],"names":["all","extent","resolution","Infinity","bbox","tile","tileGrid","z","getZForResolution","tileRange","getTileRangeForExtentAndZ","extents","tileCoord","minX","maxX","minY","maxY","push","getTileCoordExtent"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,GAAT,CAAaC,MAAb,EAAqBC,UAArB,EAAiC;AACtC,SAAO,CAAC,CAAC,CAACC,QAAF,EAAY,CAACA,QAAb,EAAuBA,QAAvB,EAAiCA,QAAjC,CAAD,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcH,MAAd,EAAsBC,UAAtB,EAAkC;AACvC,SAAO,CAACD,MAAD,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,IAAT,CAAcC,QAAd,EAAwB;AAC7B;AACE;AACJ;AACA;AACA;AACA;AACI,cAASL,MAAT,EAAiBC,UAAjB,EAA6B;AAC3B,UAAIK,CAAC,GAAGD,QAAQ,CAACE,iBAAT,CAA2BN,UAA3B,CAAR;AACA,UAAIO,SAAS,GAAGH,QAAQ,CAACI,yBAAT,CAAmCT,MAAnC,EAA2CM,CAA3C,CAAhB;AACA;;AACA,UAAII,OAAO,GAAG,EAAd;AACA;;AACA,UAAIC,SAAS,GAAG,CAACL,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB;;AACA,WAAKK,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACI,IAA9B,EAAoCD,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACK,IAA9D,EAAoE,EAAEF,SAAS,CAAC,CAAD,CAA/E,EAAoF;AAClF,aAAKA,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACM,IAA9B,EAAoCH,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACO,IAA9D,EAAoE,EAAEJ,SAAS,CAAC,CAAD,CAA/E,EAAoF;AAClFD,UAAAA,OAAO,CAACM,IAAR,CAAaX,QAAQ,CAACY,kBAAT,CAA4BN,SAA5B,CAAb;AACD;AACF;;AACD,aAAOD,OAAP;AACD;AAnBH;AAqBD,C,CAED","sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array.<module:ol/extent~Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array.<module:ol/extent~Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @return {function(module:ol/extent~Extent, number): Array.<module:ol/extent~Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {module:ol/extent~Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array.<module:ol/extent~Extent>} Extents.\n     */\n    function(extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array.<module:ol/extent~Extent>} */\n      var extents = [];\n      /** @type {module:ol/tilecoord~TileCoord} */\n      var tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}\n\n//# sourceMappingURL=loadingstrategy.js.map"]},"metadata":{},"sourceType":"module"}
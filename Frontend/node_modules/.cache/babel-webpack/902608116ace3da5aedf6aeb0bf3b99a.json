{"ast":null,"code":"/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { getChangeEventType } from '../Object.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport { listen } from '../events.js';\nimport Event from '../events/Event.js';\nimport { noModifierKeys, always, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { TRUE, FALSE } from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport { POINTER_TYPE } from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport PointerInteraction, { handleEvent as handlePointerEvent } from '../interaction/Pointer.js';\nimport InteractionProperty from '../interaction/Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/geom/GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {module:ol/Collection.<module:ol/Feature>} [features]\n * Destination collection for the drawn features.\n * @property {module:ol/source/Vector} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {module:ol/events/condition~Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]\n * Style for sketch features.\n * @property {module:ol/interaction/Draw~GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {module:ol/events/condition~Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!Array.<module:ol/coordinate~Coordinate>, module:ol/geom/SimpleGeometry=):\n *     module:ol/geom/SimpleGeometry} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\n\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\n\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event module:ol/interaction/Draw~DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n\n  /**\n   * Triggered upon feature draw end\n   * @event module:ol/interaction/Draw~DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\n\nvar DrawEvent = function (Event) {\n  function DrawEvent(type, feature) {\n    Event.call(this, type);\n    /**\n     * The feature being drawn.\n     * @type {module:ol/Feature}\n     * @api\n     */\n\n    this.feature = feature;\n  }\n\n  if (Event) DrawEvent.__proto__ = Event;\n  DrawEvent.prototype = Object.create(Event && Event.prototype);\n  DrawEvent.prototype.constructor = DrawEvent;\n  return DrawEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires module:ol/interaction/Draw~DrawEvent\n * @api\n */\n\n\nvar Draw = function (PointerInteraction) {\n  function Draw(options) {\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent,\n      stopDown: FALSE\n    });\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.shouldHandle_ = false;\n    /**\n     * @type {module:ol/pixel~Pixel}\n     * @private\n     */\n\n    this.downPx_ = null;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    this.lastDragTime_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {module:ol/source/Vector}\n     * @private\n     */\n\n    this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     * @private\n     */\n\n    this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {module:ol/geom/GeometryType}\n     * @private\n     */\n\n    this.type_ =\n    /** @type {module:ol/geom/GeometryType} */\n    options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {module:ol/interaction/Draw~Mode}\n     * @private\n     */\n\n    this.mode_ = getMode(this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n\n    this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n\n    this.minPoints_ = options.minPoints ? options.minPoints : this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates\n         *     The coordinates.\n         * @param {module:ol/geom/SimpleGeometry=} opt_geometry Optional geometry.\n         * @return {module:ol/geom/SimpleGeometry} A geometry.\n         */\n        geometryFunction = function geometryFunction(coordinates, opt_geometry) {\n          var circle = opt_geometry ?\n          /** @type {module:ol/geom/Circle} */\n          opt_geometry : new Circle([NaN, NaN]);\n          var squaredLength = squaredCoordinateDistance(coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        var Constructor;\n        var mode = this.mode_;\n\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates\n         *     The coordinates.\n         * @param {module:ol/geom/SimpleGeometry=} opt_geometry Optional geometry.\n         * @return {module:ol/geom/SimpleGeometry} A geometry.\n         */\n\n\n        geometryFunction = function geometryFunction(coordinates, opt_geometry) {\n          var geometry = opt_geometry;\n\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {module:ol/interaction/Draw~GeometryFunction}\n     * @private\n     */\n\n\n    this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {module:ol/coordinate~Coordinate}\n     * @private\n     */\n\n    this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {module:ol/Feature}\n     * @private\n     */\n\n    this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {module:ol/Feature}\n     * @private\n     */\n\n    this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {module:ol/coordinate~Coordinate|Array.<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>}\n     * @private\n     */\n\n    this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {module:ol/Feature}\n     * @private\n     */\n\n    this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {Array.<module:ol/coordinate~Coordinate>}\n     * @private\n     */\n\n    this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n\n    this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n\n    this.freehandCondition_;\n\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    listen(this, getChangeEventType(InteractionProperty.ACTIVE), this.updateState_, this);\n  }\n\n  if (PointerInteraction) Draw.__proto__ = PointerInteraction;\n  Draw.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Draw.prototype.constructor = Draw;\n  /**\n   * @inheritDoc\n   */\n\n  Draw.prototype.setMap = function setMap(map) {\n    PointerInteraction.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n  /**\n   * Handle move events.\n   * @param {module:ol/MapBrowserEvent} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n\n\n  Draw.prototype.handlePointerMove_ = function handlePointerMove_(event) {\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n\n    return true;\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n\n\n  Draw.prototype.atFinish_ = function atFinish_(event) {\n    var this$1 = this;\n    var at = false;\n\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        potentiallyDone = this.sketchCoords_[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [this.sketchCoords_[0][0], this.sketchCoords_[0][this.sketchCoords_[0].length - 2]];\n      }\n\n      if (potentiallyDone) {\n        var map = event.map;\n\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this$1.freehand_ ? 1 : this$1.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n\n          if (at) {\n            this$1.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n\n    return at;\n  };\n  /**\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_(event) {\n    var coordinates = event.coordinate.slice();\n\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom =\n      /** @type {module:ol/geom/Point} */\n      this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.startDrawing_ = function startDrawing_(event) {\n    var start = event.coordinate;\n    this.finishCoordinate_ = start;\n\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n\n    var geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.modifyDrawing_ = function modifyDrawing_(event) {\n    var coordinate = event.coordinate;\n    var geometry =\n    /** @type {module:ol/geom/SimpleGeometry} */\n    this.sketchFeature_.getGeometry();\n    var coordinates, last;\n\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n    /** @type {!Array.<module:ol/coordinate~Coordinate>} */\n    this.sketchCoords_, geometry);\n\n    if (this.sketchPoint_) {\n      var sketchPointGeom =\n      /** @type {module:ol/geom/Point} */\n      this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n\n    var sketchLineGeom;\n\n    if (geometry instanceof Polygon && this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n\n      var ring = geometry.getLinearRing(0);\n      sketchLineGeom =\n      /** @type {module:ol/geom/LineString} */\n      this.sketchLine_.getGeometry();\n\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom =\n      /** @type {module:ol/geom/LineString} */\n      this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n\n\n  Draw.prototype.addToDrawing_ = function addToDrawing_(event) {\n    var coordinate = event.coordinate;\n    var geometry =\n    /** @type {module:ol/geom/SimpleGeometry} */\n    this.sketchFeature_.getGeometry();\n    var done;\n    var coordinates;\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = this.sketchCoords_;\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = this.sketchCoords_[0];\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    this.updateSketchFeatures_();\n\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n\n\n  Draw.prototype.removeLastPoint = function removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n\n    var geometry =\n    /** @type {module:ol/geom/SimpleGeometry} */\n    this.sketchFeature_.getGeometry();\n    var coordinates, sketchLineGeom;\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom =\n      /** @type {module:ol/geom/LineString} */\n      this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n\n\n  Draw.prototype.finishDrawing = function finishDrawing() {\n    var sketchFeature = this.abortDrawing_();\n\n    if (!sketchFeature) {\n      return;\n    }\n\n    var coordinates = this.sketchCoords_;\n    var geometry =\n    /** @type {module:ol/geom/SimpleGeometry} */\n    sketchFeature.getGeometry();\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    } // cast multi-part geometries\n\n\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([coordinates]));\n    } // First dispatch event to allow full set up of feature\n\n\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature)); // Then insert feature\n\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {module:ol/Feature} The sketch feature (or null if none).\n   * @private\n   */\n\n\n  Draw.prototype.abortDrawing_ = function abortDrawing_() {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      this.overlay_.getSource().clear(true);\n    }\n\n    return sketchFeature;\n  };\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!module:ol/Feature} feature Feature to be extended.\n   * @api\n   */\n\n\n  Draw.prototype.extend = function extend(feature) {\n    var geometry = feature.getGeometry();\n    var lineString =\n    /** @type {module:ol/geom/LineString} */\n    geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n\n\n  Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_() {\n    var sketchFeatures = [];\n\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n\n\n  Draw.prototype.updateState_ = function updateState_() {\n    var map = this.getMap();\n    var active = this.getActive();\n\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {module:ol/style/Style~StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually\n * draw or finish the drawing.\n * @param {module:ol/MapBrowserEvent} event Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Draw}\n * @api\n */\n\n\nexport function handleEvent(event) {\n  if (event.originalEvent.type === EventType.CONTEXTMENU) {\n    // Avoid context menu for long taps when drawing on mobile\n    event.preventDefault();\n  }\n\n  this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n  var move = event.type === MapBrowserEventType.POINTERMOVE;\n  var pass = true;\n\n  if (this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n    var now = Date.now();\n\n    if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n      this.downPx_ = event.pixel;\n      this.shouldHandle_ = !this.freehand_;\n      move = true;\n    } else {\n      this.lastDragTime_ = undefined;\n    }\n\n    if (this.shouldHandle_ && this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n  }\n\n  if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n    this.addToDrawing_(event);\n    pass = false;\n  } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n    pass = false;\n  } else if (move) {\n    pass = event.type === MapBrowserEventType.POINTERMOVE;\n\n    if (pass && this.freehand_) {\n      pass = this.handlePointerMove_(event);\n    } else if (event.pointerEvent.pointerType == POINTER_TYPE || event.type === MapBrowserEventType.POINTERDRAG && !this.downTimeout_) {\n      this.handlePointerMove_(event);\n    }\n  } else if (event.type === MapBrowserEventType.DBLCLICK) {\n    pass = false;\n  }\n\n  return handlePointerEvent.call(this, event) && pass;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/Draw}\n */\n\nfunction handleDownEvent(event) {\n  this.shouldHandle_ = !this.freehand_;\n\n  if (this.freehand_) {\n    this.downPx_ = event.pixel;\n\n    if (!this.finishCoordinate_) {\n      this.startDrawing_(event);\n    }\n\n    return true;\n  } else if (this.condition_(event)) {\n    this.lastDragTime_ = Date.now();\n    this.downTimeout_ = setTimeout(function () {\n      this.handlePointerMove_(new MapBrowserPointerEvent(MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, event.frameState));\n    }.bind(this), this.dragVertexDelay_);\n    this.downPx_ = event.pixel;\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Draw}\n */\n\n\nfunction handleUpEvent(event) {\n  var pass = true;\n\n  if (this.downTimeout_) {\n    clearTimeout(this.downTimeout_);\n    this.downTimeout_ = undefined;\n  }\n\n  this.handlePointerMove_(event);\n  var circleMode = this.mode_ === Mode.CIRCLE;\n\n  if (this.shouldHandle_) {\n    if (!this.finishCoordinate_) {\n      this.startDrawing_(event);\n\n      if (this.mode_ === Mode.POINT) {\n        this.finishDrawing();\n      }\n    } else if (this.freehand_ || circleMode) {\n      this.finishDrawing();\n    } else if (this.atFinish_(event)) {\n      if (this.finishCondition_(event)) {\n        this.finishDrawing();\n      }\n    } else {\n      this.addToDrawing_(event);\n    }\n\n    pass = false;\n  } else if (this.freehand_) {\n    this.finishCoordinate_ = null;\n    this.abortDrawing_();\n  }\n\n  if (!pass && this.stopClick_) {\n    event.stopPropagation();\n  }\n\n  return pass;\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `module:ol/geom/Circle~Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {module:ol/interaction/Draw~GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\n\n\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry) {\n    var center = coordinates[0];\n    var end = coordinates[1];\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ?\n    /** @type {module:ol/geom/Polygon} */\n    opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle ? opt_angle : Math.atan((end[1] - center[1]) / (end[0] - center[0]));\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {module:ol/interaction/Draw~GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\n\nexport function createBox() {\n  return function (coordinates, opt_geometry) {\n    var extent = boundingExtent(coordinates);\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {module:ol/geom/GeometryType} type Geometry type.\n * @return {module:ol/interaction/Draw~Mode} Drawing mode.\n */\n\nfunction getMode(type) {\n  var mode;\n\n  if (type === GeometryType.POINT || type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING || type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON || type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n\n  return (\n    /** @type {!module:ol/interaction/Draw~Mode} */\n    mode\n  );\n}\n\nexport default Draw; //# sourceMappingURL=Draw.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/interaction/Draw.js"],"names":["EventType","Feature","MapBrowserEventType","MapBrowserPointerEvent","getChangeEventType","squaredDistance","squaredCoordinateDistance","listen","Event","noModifierKeys","always","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","TRUE","FALSE","Circle","GeometryType","LineString","MultiLineString","MultiPoint","MultiPolygon","POINTER_TYPE","Point","Polygon","fromCircle","makeRegular","PointerInteraction","handleEvent","handlePointerEvent","InteractionProperty","VectorLayer","VectorSource","createEditingStyle","Mode","POINT","LINE_STRING","POLYGON","CIRCLE","DrawEventType","DRAWSTART","DRAWEND","DrawEvent","type","feature","call","__proto__","prototype","Object","create","constructor","Draw","options","handleDownEvent","handleUpEvent","stopDown","shouldHandle_","downPx_","downTimeout_","lastDragTime_","freehand_","source_","source","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryFunction","coordinates","opt_geometry","circle","NaN","squaredLength","setCenterAndRadius","Math","sqrt","Constructor","mode","geometry","length","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","ACTIVE","updateState_","setMap","map","handlePointerMove_","event","downPx","clickPx","pixel","dx","dy","modifyDrawing_","createOrUpdateSketchPoint_","atFinish_","this$1","at","potentiallyDone","potentiallyFinishCoordinates","i","ii","finishCoordinate","finishPixel","getPixelFromCoordinate","coordinate","slice","updateSketchFeatures_","sketchPointGeom","getGeometry","startDrawing_","start","setGeometryName","setGeometry","dispatchEvent","last","sketchLineGeom","ring","getLinearRing","getFlatCoordinates","getLayout","setFlatCoordinates","changed","addToDrawing_","done","pop","push","finishDrawing","removeLastPoint","splice","sketchFeature","abortDrawing_","getCoordinates","MULTI_POINT","MULTI_LINE_STRING","MULTI_POLYGON","addFeature","getSource","clear","extend","lineString","sketchFeatures","overlaySource","addFeatures","getMap","active","getActive","styles","resolution","getType","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","clearTimeout","POINTERDOWN","pointerEvent","pointerType","DBLCLICK","setTimeout","frameState","bind","circleMode","stopPropagation","createRegularPolygon","opt_sides","opt_angle","center","end","radius","angle","atan","createBox","extent","boxCoordinates"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,SAAQC,kBAAR,QAAiC,cAAjC;AACA,SAAQC,eAAe,IAAIC,yBAA3B,QAA2D,kBAA3D;AACA,SAAQC,MAAR,QAAqB,cAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAAQC,cAAR,EAAwBC,MAAxB,EAAgCC,YAAhC,QAAmD,wBAAnD;AACA,SAAQC,cAAR,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,UAAvD,EAAmEC,WAAnE,QAAqF,cAArF;AACA,SAAQC,IAAR,EAAcC,KAAd,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,IAAiBC,UAAjB,EAA6BC,WAA7B,QAA+C,oBAA/C;AACA,OAAOC,kBAAP,IAA4BC,WAAW,IAAIC,kBAA3C,QAAoE,2BAApE;AACA,OAAOC,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAAQC,kBAAR,QAAiC,mBAAjC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAG;AACTC,EAAAA,KAAK,EAAE,OADE;AAETC,EAAAA,WAAW,EAAE,YAFJ;AAGTC,EAAAA,OAAO,EAAE,SAHA;AAITC,EAAAA,MAAM,EAAE;AAJC,CAAX;AAQA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG;AAClB;AACF;AACA;AACA;AACA;AACEC,EAAAA,SAAS,EAAE,WANO;;AAOlB;AACF;AACA;AACA;AACA;AACEC,EAAAA,OAAO,EAAE;AAZS,CAApB;AAgBA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAI,UAAUrC,KAAV,EAAiB;AAChC,WAASqC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AAEhCvC,IAAAA,KAAK,CAACwC,IAAN,CAAW,IAAX,EAAiBF,IAAjB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,OAAL,GAAeA,OAAf;AAED;;AAED,MAAKvC,KAAL,EAAaqC,SAAS,CAACI,SAAV,GAAsBzC,KAAtB;AACbqC,EAAAA,SAAS,CAACK,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAe5C,KAAK,IAAIA,KAAK,CAAC0C,SAA9B,CAAtB;AACAL,EAAAA,SAAS,CAACK,SAAV,CAAoBG,WAApB,GAAkCR,SAAlC;AAEA,SAAOA,SAAP;AACD,CAnBgB,CAmBfrC,KAnBe,CAAjB;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI8C,IAAI,GAAI,UAAUxB,kBAAV,EAA8B;AACxC,WAASwB,IAAT,CAAcC,OAAd,EAAuB;AAErBzB,IAAAA,kBAAkB,CAACkB,IAAnB,CAAwB,IAAxB,EAA8B;AAC5BQ,MAAAA,eAAe,EAAEA,eADW;AAE5BzB,MAAAA,WAAW,EAAEA,WAFe;AAG5B0B,MAAAA,aAAa,EAAEA,aAHa;AAI5BC,MAAAA,QAAQ,EAAExC;AAJkB,KAA9B;AAOA;AACJ;AACA;AACA;;AACI,SAAKyC,aAAL,GAAqB,KAArB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAe,IAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,YAAL;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,aAAL;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,SAAL,GAAiB,KAAjB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,OAAL,GAAeT,OAAO,CAACU,MAAR,GAAiBV,OAAO,CAACU,MAAzB,GAAkC,IAAjD;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,SAAL,GAAiBX,OAAO,CAACY,QAAR,GAAmBZ,OAAO,CAACY,QAA3B,GAAsC,IAAvD;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,cAAL,GAAsBb,OAAO,CAACc,aAAR,GAAwBd,OAAO,CAACc,aAAhC,GAAgD,EAAtE;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,KAAL;AAAa;AAA4Cf,IAAAA,OAAO,CAACT,IAAjE;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKyB,KAAL,GAAaC,OAAO,CAAC,KAAKF,KAAN,CAApB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKG,UAAL,GAAkB,CAAC,CAAClB,OAAO,CAACmB,SAA5B;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,UAAL,GAAkBpB,OAAO,CAACqB,SAAR,GAChBrB,OAAO,CAACqB,SADQ,GAEf,KAAKL,KAAL,KAAelC,IAAI,CAACG,OAApB,GAA8B,CAA9B,GAAkC,CAFrC;AAIA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKqC,UAAL,GAAkBtB,OAAO,CAACuB,SAAR,GAAoBvB,OAAO,CAACuB,SAA5B,GAAwCC,QAA1D;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,gBAAL,GAAwBzB,OAAO,CAAC0B,eAAR,GAA0B1B,OAAO,CAAC0B,eAAlC,GAAoDhE,IAA5E;AAEA,QAAIiE,gBAAgB,GAAG3B,OAAO,CAAC2B,gBAA/B;;AACA,QAAI,CAACA,gBAAL,EAAuB;AACrB,UAAI,KAAKZ,KAAL,KAAelD,YAAY,CAACqB,MAAhC,EAAwC;AACtC;AACR;AACA;AACA;AACA;AACA;AACQyC,QAAAA,gBAAgB,GAAG,0BAASC,WAAT,EAAsBC,YAAtB,EAAoC;AACrD,cAAIC,MAAM,GAAGD,YAAY;AAAG;AAAsCA,UAAAA,YAAzC,GACvB,IAAIjE,MAAJ,CAAW,CAACmE,GAAD,EAAMA,GAAN,CAAX,CADF;AAEA,cAAIC,aAAa,GAAGjF,yBAAyB,CAC3C6E,WAAW,CAAC,CAAD,CADgC,EAC3BA,WAAW,CAAC,CAAD,CADgB,CAA7C;AAEAE,UAAAA,MAAM,CAACG,kBAAP,CAA0BL,WAAW,CAAC,CAAD,CAArC,EAA0CM,IAAI,CAACC,IAAL,CAAUH,aAAV,CAA1C;AACA,iBAAOF,MAAP;AACD,SAPD;AAQD,OAfD,MAeO;AACL,YAAIM,WAAJ;AACA,YAAIC,IAAI,GAAG,KAAKrB,KAAhB;;AACA,YAAIqB,IAAI,KAAKvD,IAAI,CAACC,KAAlB,EAAyB;AACvBqD,UAAAA,WAAW,GAAGjE,KAAd;AACD,SAFD,MAEO,IAAIkE,IAAI,KAAKvD,IAAI,CAACE,WAAlB,EAA+B;AACpCoD,UAAAA,WAAW,GAAGtE,UAAd;AACD,SAFM,MAEA,IAAIuE,IAAI,KAAKvD,IAAI,CAACG,OAAlB,EAA2B;AAChCmD,UAAAA,WAAW,GAAGhE,OAAd;AACD;AACD;AACR;AACA;AACA;AACA;AACA;;;AACQuD,QAAAA,gBAAgB,GAAG,0BAASC,WAAT,EAAsBC,YAAtB,EAAoC;AACrD,cAAIS,QAAQ,GAAGT,YAAf;;AACA,cAAIS,QAAJ,EAAc;AACZ,gBAAID,IAAI,KAAKvD,IAAI,CAACG,OAAlB,EAA2B;AACzB,kBAAI2C,WAAW,CAAC,CAAD,CAAX,CAAeW,MAAnB,EAA2B;AACzB;AACAD,gBAAAA,QAAQ,CAACE,cAAT,CAAwB,CAACZ,WAAW,CAAC,CAAD,CAAX,CAAea,MAAf,CAAsB,CAACb,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAAD,CAAtB,CAAD,CAAxB;AACD,eAHD,MAGO;AACLU,gBAAAA,QAAQ,CAACE,cAAT,CAAwB,EAAxB;AACD;AACF,aAPD,MAOO;AACLF,cAAAA,QAAQ,CAACE,cAAT,CAAwBZ,WAAxB;AACD;AACF,WAXD,MAWO;AACLU,YAAAA,QAAQ,GAAG,IAAIF,WAAJ,CAAgBR,WAAhB,CAAX;AACD;;AACD,iBAAOU,QAAP;AACD,SAjBD;AAkBD;AACF;AAED;AACJ;AACA;AACA;;;AACI,SAAKI,iBAAL,GAAyBf,gBAAzB;AAEA;AACJ;AACA;AACA;;AACI,SAAKgB,gBAAL,GAAwB3C,OAAO,CAAC4C,eAAR,KAA4BC,SAA5B,GAAwC7C,OAAO,CAAC4C,eAAhD,GAAkE,GAA1F;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKE,iBAAL,GAAyB,IAAzB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,cAAL,GAAsB,IAAtB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,YAAL,GAAoB,IAApB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB,IAArB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,WAAL,GAAmB,IAAnB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,iBAAL,GAAyB,IAAzB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,SAAKC,sBAAL,GAA8BpD,OAAO,CAACqD,cAAR,GAC5BrD,OAAO,CAACqD,cAAR,GAAyBrD,OAAO,CAACqD,cADL,GACsB,EADpD;AAGA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,IAAI3E,WAAJ,CAAgB;AAC9B+B,MAAAA,MAAM,EAAE,IAAI9B,YAAJ,CAAiB;AACvB2E,QAAAA,eAAe,EAAE,KADM;AAEvBC,QAAAA,KAAK,EAAExD,OAAO,CAACwD,KAAR,GAAgBxD,OAAO,CAACwD,KAAxB,GAAgC;AAFhB,OAAjB,CADsB;AAK9BC,MAAAA,KAAK,EAAEzD,OAAO,CAACyD,KAAR,GAAgBzD,OAAO,CAACyD,KAAxB,GACLC,uBAAuB,EANK;AAO9BC,MAAAA,sBAAsB,EAAE;AAPM,KAAhB,CAAhB;AAUA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB5D,OAAO,CAAC6D,YAA7B;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,UAAL,GAAkB9D,OAAO,CAAC+D,SAAR,GAAoB/D,OAAO,CAAC+D,SAA5B,GAAwC7G,cAA1D;AAEA;AACJ;AACA;AACA;;AACI,SAAK8G,kBAAL;;AACA,QAAIhE,OAAO,CAACiE,QAAZ,EAAsB;AACpB,WAAKD,kBAAL,GAA0B7G,MAA1B;AACD,KAFD,MAEO;AACL,WAAK6G,kBAAL,GAA0BhE,OAAO,CAACkE,iBAAR,GACxBlE,OAAO,CAACkE,iBADgB,GACI9G,YAD9B;AAED;;AAEDJ,IAAAA,MAAM,CAAC,IAAD,EACJH,kBAAkB,CAAC6B,mBAAmB,CAACyF,MAArB,CADd,EAEJ,KAAKC,YAFD,EAEe,IAFf,CAAN;AAID;;AAED,MAAK7F,kBAAL,EAA0BwB,IAAI,CAACL,SAAL,GAAiBnB,kBAAjB;AAC1BwB,EAAAA,IAAI,CAACJ,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAetB,kBAAkB,IAAIA,kBAAkB,CAACoB,SAAxD,CAAjB;AACAI,EAAAA,IAAI,CAACJ,SAAL,CAAeG,WAAf,GAA6BC,IAA7B;AAEA;AACF;AACA;;AACEA,EAAAA,IAAI,CAACJ,SAAL,CAAe0E,MAAf,GAAwB,SAASA,MAAT,CAAiBC,GAAjB,EAAsB;AAC5C/F,IAAAA,kBAAkB,CAACoB,SAAnB,CAA6B0E,MAA7B,CAAoC5E,IAApC,CAAyC,IAAzC,EAA+C6E,GAA/C;AACA,SAAKF,YAAL;AACD,GAHD;AAKA;AACF;AACA;AACA;AACA;AACA;;;AACErE,EAAAA,IAAI,CAACJ,SAAL,CAAe4E,kBAAf,GAAoC,SAASA,kBAAT,CAA6BC,KAA7B,EAAoC;AACtE,QAAI,KAAKnE,OAAL,KACE,CAAC,KAAKG,SAAN,IAAmB,KAAKJ,aAAzB,IACA,KAAKI,SAAL,IAAkB,CAAC,KAAKJ,aAFzB,CAAJ,EAE8C;AAC5C,UAAIqE,MAAM,GAAG,KAAKpE,OAAlB;AACA,UAAIqE,OAAO,GAAGF,KAAK,CAACG,KAApB;AACA,UAAIC,EAAE,GAAGH,MAAM,CAAC,CAAD,CAAN,GAAYC,OAAO,CAAC,CAAD,CAA5B;AACA,UAAIG,EAAE,GAAGJ,MAAM,CAAC,CAAD,CAAN,GAAYC,OAAO,CAAC,CAAD,CAA5B;AACA,UAAI5H,eAAe,GAAG8H,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAArC;AACA,WAAKzE,aAAL,GAAqB,KAAKI,SAAL,GACnB1D,eAAe,GAAG,KAAKsG,sBADJ,GAEnBtG,eAAe,IAAI,KAAKsG,sBAF1B;;AAGA,UAAI,CAAC,KAAKhD,aAAV,EAAyB;AACvB,eAAO,IAAP;AACD;AACF;;AAED,QAAI,KAAK0C,iBAAT,EAA4B;AAC1B,WAAKgC,cAAL,CAAoBN,KAApB;AACD,KAFD,MAEO;AACL,WAAKO,0BAAL,CAAgCP,KAAhC;AACD;;AACD,WAAO,IAAP;AACD,GAvBD;AAyBA;AACF;AACA;AACA;AACA;AACA;;;AACEzE,EAAAA,IAAI,CAACJ,SAAL,CAAeqF,SAAf,GAA2B,SAASA,SAAT,CAAoBR,KAApB,EAA2B;AACpD,QAAIS,MAAM,GAAG,IAAb;AAEA,QAAIC,EAAE,GAAG,KAAT;;AACA,QAAI,KAAKnC,cAAT,EAAyB;AACvB,UAAIoC,eAAe,GAAG,KAAtB;AACA,UAAIC,4BAA4B,GAAG,CAAC,KAAKtC,iBAAN,CAAnC;;AACA,UAAI,KAAK9B,KAAL,KAAelC,IAAI,CAACE,WAAxB,EAAqC;AACnCmG,QAAAA,eAAe,GAAG,KAAKlC,aAAL,CAAmBV,MAAnB,GAA4B,KAAKnB,UAAnD;AACD,OAFD,MAEO,IAAI,KAAKJ,KAAL,KAAelC,IAAI,CAACG,OAAxB,EAAiC;AACtCkG,QAAAA,eAAe,GAAG,KAAKlC,aAAL,CAAmB,CAAnB,EAAsBV,MAAtB,GACd,KAAKnB,UADT;AAEAgE,QAAAA,4BAA4B,GAAG,CAAC,KAAKnC,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CAAD,EAC7B,KAAKA,aAAL,CAAmB,CAAnB,EAAsB,KAAKA,aAAL,CAAmB,CAAnB,EAAsBV,MAAtB,GAA+B,CAArD,CAD6B,CAA/B;AAED;;AACD,UAAI4C,eAAJ,EAAqB;AACnB,YAAIb,GAAG,GAAGE,KAAK,CAACF,GAAhB;;AACA,aAAK,IAAIe,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,4BAA4B,CAAC7C,MAAlD,EAA0D8C,CAAC,GAAGC,EAA9D,EAAkED,CAAC,EAAnE,EAAuE;AACrE,cAAIE,gBAAgB,GAAGH,4BAA4B,CAACC,CAAD,CAAnD;AACA,cAAIG,WAAW,GAAGlB,GAAG,CAACmB,sBAAJ,CAA2BF,gBAA3B,CAAlB;AACA,cAAIZ,KAAK,GAAGH,KAAK,CAACG,KAAlB;AACA,cAAIC,EAAE,GAAGD,KAAK,CAAC,CAAD,CAAL,GAAWa,WAAW,CAAC,CAAD,CAA/B;AACA,cAAIX,EAAE,GAAGF,KAAK,CAAC,CAAD,CAAL,GAAWa,WAAW,CAAC,CAAD,CAA/B;AACA,cAAI1E,aAAa,GAAGmE,MAAM,CAACzE,SAAP,GAAmB,CAAnB,GAAuByE,MAAM,CAACpE,cAAlD;AACAqE,UAAAA,EAAE,GAAGhD,IAAI,CAACC,IAAL,CAAUyC,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,KAAgC/D,aAArC;;AACA,cAAIoE,EAAJ,EAAQ;AACND,YAAAA,MAAM,CAACnC,iBAAP,GAA2ByC,gBAA3B;AACA;AACD;AACF;AACF;AACF;;AACD,WAAOL,EAAP;AACD,GAjCD;AAmCA;AACF;AACA;AACA;;;AACEnF,EAAAA,IAAI,CAACJ,SAAL,CAAeoF,0BAAf,GAA4C,SAASA,0BAAT,CAAqCP,KAArC,EAA4C;AACtF,QAAI5C,WAAW,GAAG4C,KAAK,CAACkB,UAAN,CAAiBC,KAAjB,EAAlB;;AACA,QAAI,CAAC,KAAK3C,YAAV,EAAwB;AACtB,WAAKA,YAAL,GAAoB,IAAItG,OAAJ,CAAY,IAAIyB,KAAJ,CAAUyD,WAAV,CAAZ,CAApB;AACA,WAAKgE,qBAAL;AACD,KAHD,MAGO;AACL,UAAIC,eAAe;AAAG;AAAqC,WAAK7C,YAAL,CAAkB8C,WAAlB,EAA3D;AACAD,MAAAA,eAAe,CAACrD,cAAhB,CAA+BZ,WAA/B;AACD;AACF,GATD;AAWA;AACF;AACA;AACA;AACA;;;AACE7B,EAAAA,IAAI,CAACJ,SAAL,CAAeoG,aAAf,GAA+B,SAASA,aAAT,CAAwBvB,KAAxB,EAA+B;AAC5D,QAAIwB,KAAK,GAAGxB,KAAK,CAACkB,UAAlB;AACA,SAAK5C,iBAAL,GAAyBkD,KAAzB;;AACA,QAAI,KAAKhF,KAAL,KAAelC,IAAI,CAACC,KAAxB,EAA+B;AAC7B,WAAKkE,aAAL,GAAqB+C,KAAK,CAACL,KAAN,EAArB;AACD,KAFD,MAEO,IAAI,KAAK3E,KAAL,KAAelC,IAAI,CAACG,OAAxB,EAAiC;AACtC,WAAKgE,aAAL,GAAqB,CAAC,CAAC+C,KAAK,CAACL,KAAN,EAAD,EAAgBK,KAAK,CAACL,KAAN,EAAhB,CAAD,CAArB;AACA,WAAKxC,iBAAL,GAAyB,KAAKF,aAAL,CAAmB,CAAnB,CAAzB;AACD,KAHM,MAGA;AACL,WAAKA,aAAL,GAAqB,CAAC+C,KAAK,CAACL,KAAN,EAAD,EAAgBK,KAAK,CAACL,KAAN,EAAhB,CAArB;AACD;;AACD,QAAI,KAAKxC,iBAAT,EAA4B;AAC1B,WAAKD,WAAL,GAAmB,IAAIxG,OAAJ,CACjB,IAAIoB,UAAJ,CAAe,KAAKqF,iBAApB,CADiB,CAAnB;AAED;;AACD,QAAIb,QAAQ,GAAG,KAAKI,iBAAL,CAAuB,KAAKO,aAA5B,CAAf;AACA,SAAKF,cAAL,GAAsB,IAAIrG,OAAJ,EAAtB;;AACA,QAAI,KAAKkH,aAAT,EAAwB;AACtB,WAAKb,cAAL,CAAoBkD,eAApB,CAAoC,KAAKrC,aAAzC;AACD;;AACD,SAAKb,cAAL,CAAoBmD,WAApB,CAAgC5D,QAAhC;AACA,SAAKsD,qBAAL;AACA,SAAKO,aAAL,CAAmB,IAAI7G,SAAJ,CAAcH,aAAa,CAACC,SAA5B,EAAuC,KAAK2D,cAA5C,CAAnB;AACD,GAvBD;AAyBA;AACF;AACA;AACA;AACA;;;AACEhD,EAAAA,IAAI,CAACJ,SAAL,CAAemF,cAAf,GAAgC,SAASA,cAAT,CAAyBN,KAAzB,EAAgC;AAC9D,QAAIkB,UAAU,GAAGlB,KAAK,CAACkB,UAAvB;AACA,QAAIpD,QAAQ;AAAG;AAA8C,SAAKS,cAAL,CAAoB+C,WAApB,EAA7D;AACA,QAAIlE,WAAJ,EAAiBwE,IAAjB;;AACA,QAAI,KAAKpF,KAAL,KAAelC,IAAI,CAACC,KAAxB,EAA+B;AAC7BqH,MAAAA,IAAI,GAAG,KAAKnD,aAAZ;AACD,KAFD,MAEO,IAAI,KAAKjC,KAAL,KAAelC,IAAI,CAACG,OAAxB,EAAiC;AACtC2C,MAAAA,WAAW,GAAG,KAAKqB,aAAL,CAAmB,CAAnB,CAAd;AACAmD,MAAAA,IAAI,GAAGxE,WAAW,CAACA,WAAW,CAACW,MAAZ,GAAqB,CAAtB,CAAlB;;AACA,UAAI,KAAKyC,SAAL,CAAeR,KAAf,CAAJ,EAA2B;AACzB;AACAkB,QAAAA,UAAU,GAAG,KAAK5C,iBAAL,CAAuB6C,KAAvB,EAAb;AACD;AACF,KAPM,MAOA;AACL/D,MAAAA,WAAW,GAAG,KAAKqB,aAAnB;AACAmD,MAAAA,IAAI,GAAGxE,WAAW,CAACA,WAAW,CAACW,MAAZ,GAAqB,CAAtB,CAAlB;AACD;;AACD6D,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUV,UAAU,CAAC,CAAD,CAApB;AACAU,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUV,UAAU,CAAC,CAAD,CAApB;AACA,SAAKhD,iBAAL;AAAuB;AAAyD,SAAKO,aAArF,EAAqGX,QAArG;;AACA,QAAI,KAAKU,YAAT,EAAuB;AACrB,UAAI6C,eAAe;AAAG;AAAqC,WAAK7C,YAAL,CAAkB8C,WAAlB,EAA3D;AACAD,MAAAA,eAAe,CAACrD,cAAhB,CAA+BkD,UAA/B;AACD;;AACD,QAAIW,cAAJ;;AACA,QAAI/D,QAAQ,YAAYlE,OAApB,IACA,KAAK4C,KAAL,KAAelC,IAAI,CAACG,OADxB,EACiC;AAC/B,UAAI,CAAC,KAAKiE,WAAV,EAAuB;AACrB,aAAKA,WAAL,GAAmB,IAAIxG,OAAJ,EAAnB;AACD;;AACD,UAAI4J,IAAI,GAAGhE,QAAQ,CAACiE,aAAT,CAAuB,CAAvB,CAAX;AACAF,MAAAA,cAAc;AAAG;AAA0C,WAAKnD,WAAL,CAAiB4C,WAAjB,EAA3D;;AACA,UAAI,CAACO,cAAL,EAAqB;AACnBA,QAAAA,cAAc,GAAG,IAAIvI,UAAJ,CAAewI,IAAI,CAACE,kBAAL,EAAf,EAA0CF,IAAI,CAACG,SAAL,EAA1C,CAAjB;AACA,aAAKvD,WAAL,CAAiBgD,WAAjB,CAA6BG,cAA7B;AACD,OAHD,MAGO;AACLA,QAAAA,cAAc,CAACK,kBAAf,CACEJ,IAAI,CAACG,SAAL,EADF,EACoBH,IAAI,CAACE,kBAAL,EADpB;AAEAH,QAAAA,cAAc,CAACM,OAAf;AACD;AACF,KAfD,MAeO,IAAI,KAAKxD,iBAAT,EAA4B;AACjCkD,MAAAA,cAAc;AAAG;AAA0C,WAAKnD,WAAL,CAAiB4C,WAAjB,EAA3D;AACAO,MAAAA,cAAc,CAAC7D,cAAf,CAA8B,KAAKW,iBAAnC;AACD;;AACD,SAAKyC,qBAAL;AACD,GA7CD;AA+CA;AACF;AACA;AACA;AACA;;;AACE7F,EAAAA,IAAI,CAACJ,SAAL,CAAeiH,aAAf,GAA+B,SAASA,aAAT,CAAwBpC,KAAxB,EAA+B;AAC5D,QAAIkB,UAAU,GAAGlB,KAAK,CAACkB,UAAvB;AACA,QAAIpD,QAAQ;AAAG;AAA8C,SAAKS,cAAL,CAAoB+C,WAApB,EAA7D;AACA,QAAIe,IAAJ;AACA,QAAIjF,WAAJ;;AACA,QAAI,KAAKZ,KAAL,KAAelC,IAAI,CAACE,WAAxB,EAAqC;AACnC,WAAK8D,iBAAL,GAAyB4C,UAAU,CAACC,KAAX,EAAzB;AACA/D,MAAAA,WAAW,GAAG,KAAKqB,aAAnB;;AACA,UAAIrB,WAAW,CAACW,MAAZ,IAAsB,KAAKjB,UAA/B,EAA2C;AACzC,YAAI,KAAKd,SAAT,EAAoB;AAClBoB,UAAAA,WAAW,CAACkF,GAAZ;AACD,SAFD,MAEO;AACLD,UAAAA,IAAI,GAAG,IAAP;AACD;AACF;;AACDjF,MAAAA,WAAW,CAACmF,IAAZ,CAAiBrB,UAAU,CAACC,KAAX,EAAjB;AACA,WAAKjD,iBAAL,CAAuBd,WAAvB,EAAoCU,QAApC;AACD,KAZD,MAYO,IAAI,KAAKtB,KAAL,KAAelC,IAAI,CAACG,OAAxB,EAAiC;AACtC2C,MAAAA,WAAW,GAAG,KAAKqB,aAAL,CAAmB,CAAnB,CAAd;;AACA,UAAIrB,WAAW,CAACW,MAAZ,IAAsB,KAAKjB,UAA/B,EAA2C;AACzC,YAAI,KAAKd,SAAT,EAAoB;AAClBoB,UAAAA,WAAW,CAACkF,GAAZ;AACD,SAFD,MAEO;AACLD,UAAAA,IAAI,GAAG,IAAP;AACD;AACF;;AACDjF,MAAAA,WAAW,CAACmF,IAAZ,CAAiBrB,UAAU,CAACC,KAAX,EAAjB;;AACA,UAAIkB,IAAJ,EAAU;AACR,aAAK/D,iBAAL,GAAyBlB,WAAW,CAAC,CAAD,CAApC;AACD;;AACD,WAAKc,iBAAL,CAAuB,KAAKO,aAA5B,EAA2CX,QAA3C;AACD;;AACD,SAAKsD,qBAAL;;AACA,QAAIiB,IAAJ,EAAU;AACR,WAAKG,aAAL;AACD;AACF,GApCD;AAsCA;AACF;AACA;AACA;;;AACEjH,EAAAA,IAAI,CAACJ,SAAL,CAAesH,eAAf,GAAiC,SAASA,eAAT,GAA4B;AAC3D,QAAI,CAAC,KAAKlE,cAAV,EAA0B;AACxB;AACD;;AACD,QAAIT,QAAQ;AAAG;AAA8C,SAAKS,cAAL,CAAoB+C,WAApB,EAA7D;AACA,QAAIlE,WAAJ,EAAiByE,cAAjB;;AACA,QAAI,KAAKrF,KAAL,KAAelC,IAAI,CAACE,WAAxB,EAAqC;AACnC4C,MAAAA,WAAW,GAAG,KAAKqB,aAAnB;AACArB,MAAAA,WAAW,CAACsF,MAAZ,CAAmB,CAAC,CAApB,EAAuB,CAAvB;AACA,WAAKxE,iBAAL,CAAuBd,WAAvB,EAAoCU,QAApC;;AACA,UAAIV,WAAW,CAACW,MAAZ,IAAsB,CAA1B,EAA6B;AAC3B,aAAKO,iBAAL,GAAyBlB,WAAW,CAACA,WAAW,CAACW,MAAZ,GAAqB,CAAtB,CAAX,CAAoCoD,KAApC,EAAzB;AACD;AACF,KAPD,MAOO,IAAI,KAAK3E,KAAL,KAAelC,IAAI,CAACG,OAAxB,EAAiC;AACtC2C,MAAAA,WAAW,GAAG,KAAKqB,aAAL,CAAmB,CAAnB,CAAd;AACArB,MAAAA,WAAW,CAACsF,MAAZ,CAAmB,CAAC,CAApB,EAAuB,CAAvB;AACAb,MAAAA,cAAc;AAAG;AAA0C,WAAKnD,WAAL,CAAiB4C,WAAjB,EAA3D;AACAO,MAAAA,cAAc,CAAC7D,cAAf,CAA8BZ,WAA9B;AACA,WAAKc,iBAAL,CAAuB,KAAKO,aAA5B,EAA2CX,QAA3C;AACD;;AAED,QAAIV,WAAW,CAACW,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAKO,iBAAL,GAAyB,IAAzB;AACD;;AAED,SAAK8C,qBAAL;AACD,GA1BD;AA4BA;AACF;AACA;AACA;AACA;AACA;;;AACE7F,EAAAA,IAAI,CAACJ,SAAL,CAAeqH,aAAf,GAA+B,SAASA,aAAT,GAA0B;AACvD,QAAIG,aAAa,GAAG,KAAKC,aAAL,EAApB;;AACA,QAAI,CAACD,aAAL,EAAoB;AAClB;AACD;;AACD,QAAIvF,WAAW,GAAG,KAAKqB,aAAvB;AACA,QAAIX,QAAQ;AAAG;AAA8C6E,IAAAA,aAAa,CAACrB,WAAd,EAA7D;;AACA,QAAI,KAAK9E,KAAL,KAAelC,IAAI,CAACE,WAAxB,EAAqC;AACnC;AACA4C,MAAAA,WAAW,CAACkF,GAAZ;AACA,WAAKpE,iBAAL,CAAuBd,WAAvB,EAAoCU,QAApC;AACD,KAJD,MAIO,IAAI,KAAKtB,KAAL,KAAelC,IAAI,CAACG,OAAxB,EAAiC;AACtC;AACA2C,MAAAA,WAAW,CAAC,CAAD,CAAX,CAAekF,GAAf;AACA,WAAKpE,iBAAL,CAAuBd,WAAvB,EAAoCU,QAApC;AACAV,MAAAA,WAAW,GAAGU,QAAQ,CAAC+E,cAAT,EAAd;AACD,KAhBsD,CAkBvD;;;AACA,QAAI,KAAKtG,KAAL,KAAelD,YAAY,CAACyJ,WAAhC,EAA6C;AAC3CH,MAAAA,aAAa,CAACjB,WAAd,CAA0B,IAAIlI,UAAJ,CAAe,CAAC4D,WAAD,CAAf,CAA1B;AACD,KAFD,MAEO,IAAI,KAAKb,KAAL,KAAelD,YAAY,CAAC0J,iBAAhC,EAAmD;AACxDJ,MAAAA,aAAa,CAACjB,WAAd,CAA0B,IAAInI,eAAJ,CAAoB,CAAC6D,WAAD,CAApB,CAA1B;AACD,KAFM,MAEA,IAAI,KAAKb,KAAL,KAAelD,YAAY,CAAC2J,aAAhC,EAA+C;AACpDL,MAAAA,aAAa,CAACjB,WAAd,CAA0B,IAAIjI,YAAJ,CAAiB,CAAC2D,WAAD,CAAjB,CAA1B;AACD,KAzBsD,CA2BvD;;;AACA,SAAKuE,aAAL,CAAmB,IAAI7G,SAAJ,CAAcH,aAAa,CAACE,OAA5B,EAAqC8H,aAArC,CAAnB,EA5BuD,CA8BvD;;AACA,QAAI,KAAKxG,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAeoG,IAAf,CAAoBI,aAApB;AACD;;AACD,QAAI,KAAK1G,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAagH,UAAb,CAAwBN,aAAxB;AACD;AACF,GArCD;AAuCA;AACF;AACA;AACA;AACA;;;AACEpH,EAAAA,IAAI,CAACJ,SAAL,CAAeyH,aAAf,GAA+B,SAASA,aAAT,GAA0B;AACvD,SAAKtE,iBAAL,GAAyB,IAAzB;AACA,QAAIqE,aAAa,GAAG,KAAKpE,cAAzB;;AACA,QAAIoE,aAAJ,EAAmB;AACjB,WAAKpE,cAAL,GAAsB,IAAtB;AACA,WAAKC,YAAL,GAAoB,IAApB;AACA,WAAKE,WAAL,GAAmB,IAAnB;AACA,WAAKI,QAAL,CAAcoE,SAAd,GAA0BC,KAA1B,CAAgC,IAAhC;AACD;;AACD,WAAOR,aAAP;AACD,GAVD;AAYA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEpH,EAAAA,IAAI,CAACJ,SAAL,CAAeiI,MAAf,GAAwB,SAASA,MAAT,CAAiBpI,OAAjB,EAA0B;AAChD,QAAI8C,QAAQ,GAAG9C,OAAO,CAACsG,WAAR,EAAf;AACA,QAAI+B,UAAU;AAAG;AAA0CvF,IAAAA,QAA3D;AACA,SAAKS,cAAL,GAAsBvD,OAAtB;AACA,SAAKyD,aAAL,GAAqB4E,UAAU,CAACR,cAAX,EAArB;AACA,QAAIjB,IAAI,GAAG,KAAKnD,aAAL,CAAmB,KAAKA,aAAL,CAAmBV,MAAnB,GAA4B,CAA/C,CAAX;AACA,SAAKO,iBAAL,GAAyBsD,IAAI,CAACT,KAAL,EAAzB;AACA,SAAK1C,aAAL,CAAmB8D,IAAnB,CAAwBX,IAAI,CAACT,KAAL,EAAxB;AACA,SAAKC,qBAAL;AACA,SAAKO,aAAL,CAAmB,IAAI7G,SAAJ,CAAcH,aAAa,CAACC,SAA5B,EAAuC,KAAK2D,cAA5C,CAAnB;AACD,GAVD;AAYA;AACF;AACA;AACA;;;AACEhD,EAAAA,IAAI,CAACJ,SAAL,CAAeiG,qBAAf,GAAuC,SAASA,qBAAT,GAAkC;AACvE,QAAIkC,cAAc,GAAG,EAArB;;AACA,QAAI,KAAK/E,cAAT,EAAyB;AACvB+E,MAAAA,cAAc,CAACf,IAAf,CAAoB,KAAKhE,cAAzB;AACD;;AACD,QAAI,KAAKG,WAAT,EAAsB;AACpB4E,MAAAA,cAAc,CAACf,IAAf,CAAoB,KAAK7D,WAAzB;AACD;;AACD,QAAI,KAAKF,YAAT,EAAuB;AACrB8E,MAAAA,cAAc,CAACf,IAAf,CAAoB,KAAK/D,YAAzB;AACD;;AACD,QAAI+E,aAAa,GAAG,KAAKzE,QAAL,CAAcoE,SAAd,EAApB;AACAK,IAAAA,aAAa,CAACJ,KAAd,CAAoB,IAApB;AACAI,IAAAA,aAAa,CAACC,WAAd,CAA0BF,cAA1B;AACD,GAdD;AAgBA;AACF;AACA;;;AACE/H,EAAAA,IAAI,CAACJ,SAAL,CAAeyE,YAAf,GAA8B,SAASA,YAAT,GAAyB;AACrD,QAAIE,GAAG,GAAG,KAAK2D,MAAL,EAAV;AACA,QAAIC,MAAM,GAAG,KAAKC,SAAL,EAAb;;AACA,QAAI,CAAC7D,GAAD,IAAQ,CAAC4D,MAAb,EAAqB;AACnB,WAAKd,aAAL;AACD;;AACD,SAAK9D,QAAL,CAAce,MAAd,CAAqB6D,MAAM,GAAG5D,GAAH,GAAS,IAApC;AACD,GAPD;;AASA,SAAOvE,IAAP;AACD,CApoBW,CAooBVxB,kBApoBU,CAAZ;AAuoBA;AACA;AACA;;;AACA,SAASmF,uBAAT,GAAmC;AACjC,MAAI0E,MAAM,GAAGvJ,kBAAkB,EAA/B;AACA,SAAO,UAASW,OAAT,EAAkB6I,UAAlB,EAA8B;AACnC,WAAOD,MAAM,CAAC5I,OAAO,CAACsG,WAAR,GAAsBwC,OAAtB,EAAD,CAAb;AACD,GAFD;AAGD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAS9J,WAAT,CAAqBgG,KAArB,EAA4B;AACjC,MAAIA,KAAK,CAAC+D,aAAN,CAAoBhJ,IAApB,KAA6B9C,SAAS,CAAC+L,WAA3C,EAAwD;AACtD;AACAhE,IAAAA,KAAK,CAACiE,cAAN;AACD;;AACD,OAAKjI,SAAL,GAAiB,KAAKQ,KAAL,KAAelC,IAAI,CAACC,KAApB,IAA6B,KAAKiF,kBAAL,CAAwBQ,KAAxB,CAA9C;AACA,MAAIkE,IAAI,GAAGlE,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACgM,WAA9C;AACA,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAI,KAAKrI,aAAL,IAAsBiE,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACkM,WAA7D,EAA0E;AACxE,QAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAV;;AACA,QAAIA,GAAG,GAAG,KAAKvI,aAAX,IAA4B,KAAKoC,gBAArC,EAAuD;AACrD,WAAKtC,OAAL,GAAemE,KAAK,CAACG,KAArB;AACA,WAAKvE,aAAL,GAAqB,CAAC,KAAKI,SAA3B;AACAkI,MAAAA,IAAI,GAAG,IAAP;AACD,KAJD,MAIO;AACL,WAAKnI,aAAL,GAAqBsC,SAArB;AACD;;AACD,QAAI,KAAKzC,aAAL,IAAsB,KAAKE,YAA/B,EAA6C;AAC3C0I,MAAAA,YAAY,CAAC,KAAK1I,YAAN,CAAZ;AACA,WAAKA,YAAL,GAAoBuC,SAApB;AACD;AACF;;AACD,MAAI,KAAKrC,SAAL,IACAgE,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACkM,WADnC,IAEA,KAAK9F,cAAL,KAAwB,IAF5B,EAEkC;AAChC,SAAK6D,aAAL,CAAmBpC,KAAnB;AACAoE,IAAAA,IAAI,GAAG,KAAP;AACD,GALD,MAKO,IAAI,KAAKpI,SAAL,IACPgE,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACsM,WADhC,EAC6C;AAClDL,IAAAA,IAAI,GAAG,KAAP;AACD,GAHM,MAGA,IAAIF,IAAJ,EAAU;AACfE,IAAAA,IAAI,GAAGpE,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACgM,WAA1C;;AACA,QAAIC,IAAI,IAAI,KAAKpI,SAAjB,EAA4B;AAC1BoI,MAAAA,IAAI,GAAG,KAAKrE,kBAAL,CAAwBC,KAAxB,CAAP;AACD,KAFD,MAEO,IAAIA,KAAK,CAAC0E,YAAN,CAAmBC,WAAnB,IAAkCjL,YAAlC,IACNsG,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACkM,WAAnC,IAAkD,CAAC,KAAKvI,YADtD,EACqE;AAC1E,WAAKiE,kBAAL,CAAwBC,KAAxB;AACD;AACF,GARM,MAQA,IAAIA,KAAK,CAACjF,IAAN,KAAe5C,mBAAmB,CAACyM,QAAvC,EAAiD;AACtDR,IAAAA,IAAI,GAAG,KAAP;AACD;;AAED,SAAOnK,kBAAkB,CAACgB,IAAnB,CAAwB,IAAxB,EAA8B+E,KAA9B,KAAwCoE,IAA/C;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,SAAS3I,eAAT,CAAyBuE,KAAzB,EAAgC;AAC9B,OAAKpE,aAAL,GAAqB,CAAC,KAAKI,SAA3B;;AAEA,MAAI,KAAKA,SAAT,EAAoB;AAClB,SAAKH,OAAL,GAAemE,KAAK,CAACG,KAArB;;AACA,QAAI,CAAC,KAAK7B,iBAAV,EAA6B;AAC3B,WAAKiD,aAAL,CAAmBvB,KAAnB;AACD;;AACD,WAAO,IAAP;AACD,GAND,MAMO,IAAI,KAAKV,UAAL,CAAgBU,KAAhB,CAAJ,EAA4B;AACjC,SAAKjE,aAAL,GAAqBwI,IAAI,CAACD,GAAL,EAArB;AACA,SAAKxI,YAAL,GAAoB+I,UAAU,CAAC,YAAW;AACxC,WAAK9E,kBAAL,CAAwB,IAAI3H,sBAAJ,CACtBD,mBAAmB,CAACgM,WADE,EACWnE,KAAK,CAACF,GADjB,EACsBE,KAAK,CAAC0E,YAD5B,EAC0C1E,KAAK,CAAC8E,UADhD,CAAxB;AAED,KAH8B,CAG7BC,IAH6B,CAGxB,IAHwB,CAAD,EAGhB,KAAK5G,gBAHW,CAA9B;AAIA,SAAKtC,OAAL,GAAemE,KAAK,CAACG,KAArB;AACA,WAAO,IAAP;AACD,GARM,MAQA;AACL,WAAO,KAAP;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAASzE,aAAT,CAAuBsE,KAAvB,EAA8B;AAC5B,MAAIoE,IAAI,GAAG,IAAX;;AAEA,MAAI,KAAKtI,YAAT,EAAuB;AACrB0I,IAAAA,YAAY,CAAC,KAAK1I,YAAN,CAAZ;AACA,SAAKA,YAAL,GAAoBuC,SAApB;AACD;;AAED,OAAK0B,kBAAL,CAAwBC,KAAxB;AAEA,MAAIgF,UAAU,GAAG,KAAKxI,KAAL,KAAelC,IAAI,CAACI,MAArC;;AAEA,MAAI,KAAKkB,aAAT,EAAwB;AACtB,QAAI,CAAC,KAAK0C,iBAAV,EAA6B;AAC3B,WAAKiD,aAAL,CAAmBvB,KAAnB;;AACA,UAAI,KAAKxD,KAAL,KAAelC,IAAI,CAACC,KAAxB,EAA+B;AAC7B,aAAKiI,aAAL;AACD;AACF,KALD,MAKO,IAAI,KAAKxG,SAAL,IAAkBgJ,UAAtB,EAAkC;AACvC,WAAKxC,aAAL;AACD,KAFM,MAEA,IAAI,KAAKhC,SAAL,CAAeR,KAAf,CAAJ,EAA2B;AAChC,UAAI,KAAK/C,gBAAL,CAAsB+C,KAAtB,CAAJ,EAAkC;AAChC,aAAKwC,aAAL;AACD;AACF,KAJM,MAIA;AACL,WAAKJ,aAAL,CAAmBpC,KAAnB;AACD;;AACDoE,IAAAA,IAAI,GAAG,KAAP;AACD,GAhBD,MAgBO,IAAI,KAAKpI,SAAT,EAAoB;AACzB,SAAKsC,iBAAL,GAAyB,IAAzB;AACA,SAAKsE,aAAL;AACD;;AACD,MAAI,CAACwB,IAAD,IAAS,KAAK1H,UAAlB,EAA8B;AAC5BsD,IAAAA,KAAK,CAACiF,eAAN;AACD;;AACD,SAAOb,IAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASc,oBAAT,CAA8BC,SAA9B,EAAyCC,SAAzC,EAAoD;AACzD,SAAO,UAAShI,WAAT,EAAsBC,YAAtB,EAAoC;AACzC,QAAIgI,MAAM,GAAGjI,WAAW,CAAC,CAAD,CAAxB;AACA,QAAIkI,GAAG,GAAGlI,WAAW,CAAC,CAAD,CAArB;AACA,QAAImI,MAAM,GAAG7H,IAAI,CAACC,IAAL,CACXpF,yBAAyB,CAAC8M,MAAD,EAASC,GAAT,CADd,CAAb;AAEA,QAAIxH,QAAQ,GAAGT,YAAY;AAAG;AAAuCA,IAAAA,YAA1C,GACzBxD,UAAU,CAAC,IAAIT,MAAJ,CAAWiM,MAAX,CAAD,EAAqBF,SAArB,CADZ;AAEA,QAAIK,KAAK,GAAGJ,SAAS,GAAGA,SAAH,GACnB1H,IAAI,CAAC+H,IAAL,CAAU,CAACH,GAAG,CAAC,CAAD,CAAH,GAASD,MAAM,CAAC,CAAD,CAAhB,KAAwBC,GAAG,CAAC,CAAD,CAAH,GAASD,MAAM,CAAC,CAAD,CAAvC,CAAV,CADF;AAEAvL,IAAAA,WAAW,CAACgE,QAAD,EAAWuH,MAAX,EAAmBE,MAAnB,EAA2BC,KAA3B,CAAX;AACA,WAAO1H,QAAP;AACD,GAXD;AAYD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4H,SAAT,GAAqB;AAC1B,SACE,UAAStI,WAAT,EAAsBC,YAAtB,EAAoC;AAClC,QAAIsI,MAAM,GAAG9M,cAAc,CAACuE,WAAD,CAA3B;AACA,QAAIwI,cAAc,GAAG,CAAC,CACpB9M,aAAa,CAAC6M,MAAD,CADO,EAEpB5M,cAAc,CAAC4M,MAAD,CAFM,EAGpB1M,WAAW,CAAC0M,MAAD,CAHS,EAIpB3M,UAAU,CAAC2M,MAAD,CAJU,EAKpB7M,aAAa,CAAC6M,MAAD,CALO,CAAD,CAArB;AAOA,QAAI7H,QAAQ,GAAGT,YAAf;;AACA,QAAIS,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACE,cAAT,CAAwB4H,cAAxB;AACD,KAFD,MAEO;AACL9H,MAAAA,QAAQ,GAAG,IAAIlE,OAAJ,CAAYgM,cAAZ,CAAX;AACD;;AACD,WAAO9H,QAAP;AACD,GAjBH;AAmBD;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,SAASrB,OAAT,CAAiB1B,IAAjB,EAAuB;AACrB,MAAI8C,IAAJ;;AACA,MAAI9C,IAAI,KAAK1B,YAAY,CAACkB,KAAtB,IACAQ,IAAI,KAAK1B,YAAY,CAACyJ,WAD1B,EACuC;AACrCjF,IAAAA,IAAI,GAAGvD,IAAI,CAACC,KAAZ;AACD,GAHD,MAGO,IAAIQ,IAAI,KAAK1B,YAAY,CAACmB,WAAtB,IACPO,IAAI,KAAK1B,YAAY,CAAC0J,iBADnB,EACsC;AAC3ClF,IAAAA,IAAI,GAAGvD,IAAI,CAACE,WAAZ;AACD,GAHM,MAGA,IAAIO,IAAI,KAAK1B,YAAY,CAACoB,OAAtB,IACPM,IAAI,KAAK1B,YAAY,CAAC2J,aADnB,EACkC;AACvCnF,IAAAA,IAAI,GAAGvD,IAAI,CAACG,OAAZ;AACD,GAHM,MAGA,IAAIM,IAAI,KAAK1B,YAAY,CAACqB,MAA1B,EAAkC;AACvCmD,IAAAA,IAAI,GAAGvD,IAAI,CAACI,MAAZ;AACD;;AACD;AACE;AAAiDmD,IAAAA;AADnD;AAGD;;AAGD,eAAetC,IAAf,C,CAEA","sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {getChangeEventType} from '../Object.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport {noModifierKeys, always, shiftKeyOnly} from '../events/condition.js';\nimport {boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../extent.js';\nimport {TRUE, FALSE} from '../functions.js';\nimport Circle from '../geom/Circle.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport {POINTER_TYPE} from '../pointer/MouseSource.js';\nimport Point from '../geom/Point.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport PointerInteraction, {handleEvent as handlePointerEvent} from '../interaction/Pointer.js';\nimport InteractionProperty from '../interaction/Property.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/geom/GeometryType} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {module:ol/Collection.<module:ol/Feature>} [features]\n * Destination collection for the drawn features.\n * @property {module:ol/source/Vector} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {module:ol/events/condition~Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style]\n * Style for sketch features.\n * @property {module:ol/interaction/Draw~GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {module:ol/events/condition~Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry as\n * arguments, and returns a geometry. The optional existing geometry is the\n * geometry that is returned when the function is called without a second\n * argument.\n * @typedef {function(!Array.<module:ol/coordinate~Coordinate>, module:ol/geom/SimpleGeometry=):\n *     module:ol/geom/SimpleGeometry} GeometryFunction\n */\n\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n\n\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event module:ol/interaction/Draw~DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event module:ol/interaction/Draw~DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = (function (Event) {\n  function DrawEvent(type, feature) {\n\n    Event.call(this, type);\n\n    /**\n     * The feature being drawn.\n     * @type {module:ol/Feature}\n     * @api\n     */\n    this.feature = feature;\n\n  }\n\n  if ( Event ) DrawEvent.__proto__ = Event;\n  DrawEvent.prototype = Object.create( Event && Event.prototype );\n  DrawEvent.prototype.constructor = DrawEvent;\n\n  return DrawEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires module:ol/interaction/Draw~DrawEvent\n * @api\n */\nvar Draw = (function (PointerInteraction) {\n  function Draw(options) {\n\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent,\n      stopDown: FALSE\n    });\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {module:ol/pixel~Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {module:ol/source/Vector}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {module:ol/Collection.<module:ol/Feature>}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {module:ol/geom/GeometryType}\n     * @private\n     */\n    this.type_ = /** @type {module:ol/geom/GeometryType} */ (options.type);\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {module:ol/interaction/Draw~Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints ?\n      options.minPoints :\n      (this.mode_ === Mode.POLYGON ? 3 : 2);\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n\n    var geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates\n         *     The coordinates.\n         * @param {module:ol/geom/SimpleGeometry=} opt_geometry Optional geometry.\n         * @return {module:ol/geom/SimpleGeometry} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          var circle = opt_geometry ? /** @type {module:ol/geom/Circle} */ (opt_geometry) :\n            new Circle([NaN, NaN]);\n          var squaredLength = squaredCoordinateDistance(\n            coordinates[0], coordinates[1]);\n          circle.setCenterAndRadius(coordinates[0], Math.sqrt(squaredLength));\n          return circle;\n        };\n      } else {\n        var Constructor;\n        var mode = this.mode_;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates\n         *     The coordinates.\n         * @param {module:ol/geom/SimpleGeometry=} opt_geometry Optional geometry.\n         * @return {module:ol/geom/SimpleGeometry} A geometry.\n         */\n        geometryFunction = function(coordinates, opt_geometry) {\n          var geometry = opt_geometry;\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {module:ol/interaction/Draw~GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {module:ol/coordinate~Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {module:ol/coordinate~Coordinate|Array.<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {Array.<module:ol/coordinate~Coordinate>}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance ?\n      options.clickTolerance * options.clickTolerance : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ?\n        options.freehandCondition : shiftKeyOnly;\n    }\n\n    listen(this,\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.updateState_, this);\n\n  }\n\n  if ( PointerInteraction ) Draw.__proto__ = PointerInteraction;\n  Draw.prototype = Object.create( PointerInteraction && PointerInteraction.prototype );\n  Draw.prototype.constructor = Draw;\n\n  /**\n   * @inheritDoc\n   */\n  Draw.prototype.setMap = function setMap (map) {\n    PointerInteraction.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n\n  /**\n   * Handle move events.\n   * @param {module:ol/MapBrowserEvent} event A move event.\n   * @return {boolean} Pass the event to other interactions.\n   * @private\n   */\n  Draw.prototype.handlePointerMove_ = function handlePointerMove_ (event) {\n    if (this.downPx_ &&\n        ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ?\n        squaredDistance > this.squaredClickTolerance_ :\n        squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return true;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n    return true;\n  };\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  Draw.prototype.atFinish_ = function atFinish_ (event) {\n    var this$1 = this;\n\n    var at = false;\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        potentiallyDone = this.sketchCoords_[0].length >\n            this.minPoints_;\n        potentiallyFinishCoordinates = [this.sketchCoords_[0][0],\n          this.sketchCoords_[0][this.sketchCoords_[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        var map = event.map;\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this$1.freehand_ ? 1 : this$1.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this$1.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  };\n\n  /**\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n  Draw.prototype.createOrUpdateSketchPoint_ = function createOrUpdateSketchPoint_ (event) {\n    var coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = /** @type {module:ol/geom/Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n\n  /**\n   * Start the drawing.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n  Draw.prototype.startDrawing_ = function startDrawing_ (event) {\n    var start = event.coordinate;\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(\n        new LineString(this.sketchLineCoords_));\n    }\n    var geometry = this.geometryFunction_(this.sketchCoords_);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n\n  /**\n   * Modify the drawing.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n  Draw.prototype.modifyDrawing_ = function modifyDrawing_ (event) {\n    var coordinate = event.coordinate;\n    var geometry = /** @type {module:ol/geom/SimpleGeometry} */ (this.sketchFeature_.getGeometry());\n    var coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(/** @type {!Array.<module:ol/coordinate~Coordinate>} */ (this.sketchCoords_), geometry);\n    if (this.sketchPoint_) {\n      var sketchPointGeom = /** @type {module:ol/geom/Point} */ (this.sketchPoint_.getGeometry());\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    var sketchLineGeom;\n    if (geometry instanceof Polygon &&\n        this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      var ring = geometry.getLinearRing(0);\n      sketchLineGeom = /** @type {module:ol/geom/LineString} */ (this.sketchLine_.getGeometry());\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(\n          ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = /** @type {module:ol/geom/LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  };\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {module:ol/MapBrowserEvent} event Event.\n   * @private\n   */\n  Draw.prototype.addToDrawing_ = function addToDrawing_ (event) {\n    var coordinate = event.coordinate;\n    var geometry = /** @type {module:ol/geom/SimpleGeometry} */ (this.sketchFeature_.getGeometry());\n    var done;\n    var coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = this.sketchCoords_;\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = this.sketchCoords_[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  Draw.prototype.removeLastPoint = function removeLastPoint () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    var geometry = /** @type {module:ol/geom/SimpleGeometry} */ (this.sketchFeature_.getGeometry());\n    var coordinates, sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = /** @type {module:ol/geom/LineString} */ (this.sketchLine_.getGeometry());\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry);\n    }\n\n    if (coordinates.length === 0) {\n      this.finishCoordinate_ = null;\n    }\n\n    this.updateSketchFeatures_();\n  };\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  Draw.prototype.finishDrawing = function finishDrawing () {\n    var sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    var coordinates = this.sketchCoords_;\n    var geometry = /** @type {module:ol/geom/SimpleGeometry} */ (sketchFeature.getGeometry());\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([coordinates]));\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {module:ol/Feature} The sketch feature (or null if none).\n   * @private\n   */\n  Draw.prototype.abortDrawing_ = function abortDrawing_ () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    if (sketchFeature) {\n      this.sketchFeature_ = null;\n      this.sketchPoint_ = null;\n      this.sketchLine_ = null;\n      this.overlay_.getSource().clear(true);\n    }\n    return sketchFeature;\n  };\n\n  /**\n   * Extend an existing geometry by adding additional points. This only works\n   * on features with `LineString` geometries, where the interaction will\n   * extend lines by adding points to the end of the coordinates array.\n   * @param {!module:ol/Feature} feature Feature to be extended.\n   * @api\n   */\n  Draw.prototype.extend = function extend (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = /** @type {module:ol/geom/LineString} */ (geometry);\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  Draw.prototype.updateSketchFeatures_ = function updateSketchFeatures_ () {\n    var sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n\n  /**\n   * @private\n   */\n  Draw.prototype.updateState_ = function updateState_ () {\n    var map = this.getMap();\n    var active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing_();\n    }\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction));\n\n\n/**\n * @return {module:ol/style/Style~StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function(feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually\n * draw or finish the drawing.\n * @param {module:ol/MapBrowserEvent} event Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Draw}\n * @api\n */\nexport function handleEvent(event) {\n  if (event.originalEvent.type === EventType.CONTEXTMENU) {\n    // Avoid context menu for long taps when drawing on mobile\n    event.preventDefault();\n  }\n  this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n  var move = event.type === MapBrowserEventType.POINTERMOVE;\n  var pass = true;\n  if (this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n    var now = Date.now();\n    if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n      this.downPx_ = event.pixel;\n      this.shouldHandle_ = !this.freehand_;\n      move = true;\n    } else {\n      this.lastDragTime_ = undefined;\n    }\n    if (this.shouldHandle_ && this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n  }\n  if (this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null) {\n    this.addToDrawing_(event);\n    pass = false;\n  } else if (this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN) {\n    pass = false;\n  } else if (move) {\n    pass = event.type === MapBrowserEventType.POINTERMOVE;\n    if (pass && this.freehand_) {\n      pass = this.handlePointerMove_(event);\n    } else if (event.pointerEvent.pointerType == POINTER_TYPE ||\n        (event.type === MapBrowserEventType.POINTERDRAG && !this.downTimeout_)) {\n      this.handlePointerMove_(event);\n    }\n  } else if (event.type === MapBrowserEventType.DBLCLICK) {\n    pass = false;\n  }\n\n  return handlePointerEvent.call(this, event) && pass;\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/Draw}\n */\nfunction handleDownEvent(event) {\n  this.shouldHandle_ = !this.freehand_;\n\n  if (this.freehand_) {\n    this.downPx_ = event.pixel;\n    if (!this.finishCoordinate_) {\n      this.startDrawing_(event);\n    }\n    return true;\n  } else if (this.condition_(event)) {\n    this.lastDragTime_ = Date.now();\n    this.downTimeout_ = setTimeout(function() {\n      this.handlePointerMove_(new MapBrowserPointerEvent(\n        MapBrowserEventType.POINTERMOVE, event.map, event.pointerEvent, event.frameState));\n    }.bind(this), this.dragVertexDelay_);\n    this.downPx_ = event.pixel;\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} event Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Draw}\n */\nfunction handleUpEvent(event) {\n  var pass = true;\n\n  if (this.downTimeout_) {\n    clearTimeout(this.downTimeout_);\n    this.downTimeout_ = undefined;\n  }\n\n  this.handlePointerMove_(event);\n\n  var circleMode = this.mode_ === Mode.CIRCLE;\n\n  if (this.shouldHandle_) {\n    if (!this.finishCoordinate_) {\n      this.startDrawing_(event);\n      if (this.mode_ === Mode.POINT) {\n        this.finishDrawing();\n      }\n    } else if (this.freehand_ || circleMode) {\n      this.finishDrawing();\n    } else if (this.atFinish_(event)) {\n      if (this.finishCondition_(event)) {\n        this.finishDrawing();\n      }\n    } else {\n      this.addToDrawing_(event);\n    }\n    pass = false;\n  } else if (this.freehand_) {\n    this.finishCoordinate_ = null;\n    this.abortDrawing_();\n  }\n  if (!pass && this.stopClick_) {\n    event.stopPropagation();\n  }\n  return pass;\n}\n\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `module:ol/geom/Circle~Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {module:ol/interaction/Draw~GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function(coordinates, opt_geometry) {\n    var center = coordinates[0];\n    var end = coordinates[1];\n    var radius = Math.sqrt(\n      squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ? /** @type {module:ol/geom/Polygon} */ (opt_geometry) :\n      fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle ? opt_angle :\n      Math.atan((end[1] - center[1]) / (end[0] - center[0]));\n    makeRegular(geometry, center, radius, angle);\n    return geometry;\n  };\n}\n\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {module:ol/interaction/Draw~GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return (\n    function(coordinates, opt_geometry) {\n      var extent = boundingExtent(coordinates);\n      var boxCoordinates = [[\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent)\n      ]];\n      var geometry = opt_geometry;\n      if (geometry) {\n        geometry.setCoordinates(boxCoordinates);\n      } else {\n        geometry = new Polygon(boxCoordinates);\n      }\n      return geometry;\n    }\n  );\n}\n\n\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {module:ol/geom/GeometryType} type Geometry type.\n * @return {module:ol/interaction/Draw~Mode} Drawing mode.\n */\nfunction getMode(type) {\n  var mode;\n  if (type === GeometryType.POINT ||\n      type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING ||\n      type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON ||\n      type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return (\n    /** @type {!module:ol/interaction/Draw~Mode} */ (mode)\n  );\n}\n\n\nexport default Draw;\n\n//# sourceMappingURL=Draw.js.map"]},"metadata":{},"sourceType":"module"}
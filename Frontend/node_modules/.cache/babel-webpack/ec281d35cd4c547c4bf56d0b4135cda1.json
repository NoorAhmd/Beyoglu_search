{"ast":null,"code":"/**\n * @module ol/control/Control\n */\nimport { UNDEFINED } from '../functions.js';\nimport MapEventType from '../MapEventType.js';\nimport BaseObject from '../Object.js';\nimport { removeNode } from '../dom.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(module:ol/MapEvent)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\n\nvar Control = function (BaseObject) {\n  function Control(options) {\n    BaseObject.call(this);\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    this.element = options.element ? options.element : null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.target_ = null;\n    /**\n     * @private\n     * @type {module:ol/PluggableMap}\n     */\n\n    this.map_ = null;\n    /**\n     * @protected\n     * @type {!Array.<module:ol/events~EventsKey>}\n     */\n\n    this.listenerKeys = [];\n    /**\n     * @type {function(module:ol/MapEvent)}\n     */\n\n    this.render = options.render ? options.render : UNDEFINED;\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  if (BaseObject) Control.__proto__ = BaseObject;\n  Control.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Control.prototype.constructor = Control;\n  /**\n   * @inheritDoc\n   */\n\n  Control.prototype.disposeInternal = function disposeInternal() {\n    removeNode(this.element);\n    BaseObject.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Get the map associated with this control.\n   * @return {module:ol/PluggableMap} Map.\n   * @api\n   */\n\n\n  Control.prototype.getMap = function getMap() {\n    return this.map_;\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {module:ol/PluggableMap} map Map.\n   * @api\n   */\n\n\n  Control.prototype.setMap = function setMap(map) {\n    var this$1 = this;\n\n    if (this.map_) {\n      removeNode(this.element);\n    }\n\n    for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this$1.listenerKeys[i]);\n    }\n\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n\n    if (this.map_) {\n      var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n\n      if (this.render !== UNDEFINED) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n\n      map.render();\n    }\n  };\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n\n\n  Control.prototype.setTarget = function setTarget(target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  };\n\n  return Control;\n}(BaseObject);\n\nexport default Control; //# sourceMappingURL=Control.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/control/Control.js"],"names":["UNDEFINED","MapEventType","BaseObject","removeNode","listen","unlistenByKey","Control","options","call","element","target_","map_","listenerKeys","render","target","setTarget","__proto__","prototype","Object","create","constructor","disposeInternal","getMap","setMap","map","this$1","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","document","getElementById"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/Control\n */\nimport {UNDEFINED} from '../functions.js';\nimport MapEventType from '../MapEventType.js';\nimport BaseObject from '../Object.js';\nimport {removeNode} from '../dom.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(module:ol/MapEvent)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nvar Control = (function (BaseObject) {\n  function Control(options) {\n\n    BaseObject.call(this);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = options.element ? options.element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/PluggableMap}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array.<module:ol/events~EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    /**\n     * @type {function(module:ol/MapEvent)}\n     */\n    this.render = options.render ? options.render : UNDEFINED;\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n\n  }\n\n  if ( BaseObject ) Control.__proto__ = BaseObject;\n  Control.prototype = Object.create( BaseObject && BaseObject.prototype );\n  Control.prototype.constructor = Control;\n\n  /**\n   * @inheritDoc\n   */\n  Control.prototype.disposeInternal = function disposeInternal () {\n    removeNode(this.element);\n    BaseObject.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * Get the map associated with this control.\n   * @return {module:ol/PluggableMap} Map.\n   * @api\n   */\n  Control.prototype.getMap = function getMap () {\n    return this.map_;\n  };\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {module:ol/PluggableMap} map Map.\n   * @api\n   */\n  Control.prototype.setMap = function setMap (map) {\n    var this$1 = this;\n\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this$1.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (this.map_) {\n      var target = this.target_ ?\n        this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== UNDEFINED) {\n        this.listenerKeys.push(listen(map,\n          MapEventType.POSTRENDER, this.render, this));\n      }\n      map.render();\n    }\n  };\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  Control.prototype.setTarget = function setTarget (target) {\n    this.target_ = typeof target === 'string' ?\n      document.getElementById(target) :\n      target;\n  };\n\n  return Control;\n}(BaseObject));\n\n\nexport default Control;\n\n//# sourceMappingURL=Control.js.map"]},"metadata":{},"sourceType":"module"}
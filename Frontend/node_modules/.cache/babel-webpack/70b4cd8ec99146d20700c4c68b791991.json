{"ast":null,"code":"/**\n * @module ol/pointer/EventSource\n */\nvar EventSource = function EventSource(dispatcher, mapping) {\n  /**\n   * @type {module:ol/pointer/PointerEventHandler}\n   */\n  this.dispatcher = dispatcher;\n  /**\n   * @private\n   * @const\n   * @type {!Object.<string, function(Event)>}\n   */\n\n  this.mapping_ = mapping;\n};\n/**\n * List of events supported by this source.\n * @return {Array.<string>} Event names\n */\n\n\nEventSource.prototype.getEvents = function getEvents() {\n  return Object.keys(this.mapping_);\n};\n/**\n * Returns the handler that should handle a given event type.\n * @param {string} eventType The event type.\n * @return {function(Event)} Handler\n */\n\n\nEventSource.prototype.getHandlerForEvent = function getHandlerForEvent(eventType) {\n  return this.mapping_[eventType];\n};\n\nexport default EventSource; //# sourceMappingURL=EventSource.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/pointer/EventSource.js"],"names":["EventSource","dispatcher","mapping","mapping_","prototype","getEvents","Object","keys","getHandlerForEvent","eventType"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,WAAW,GAAG,SAASA,WAAT,CAAqBC,UAArB,EAAiCC,OAAjC,EAA0C;AAE1D;AACF;AACA;AACE,OAAKD,UAAL,GAAkBA,UAAlB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAKE,QAAL,GAAgBD,OAAhB;AACD,CAbD;AAeA;AACA;AACA;AACA;;;AACAF,WAAW,CAACI,SAAZ,CAAsBC,SAAtB,GAAkC,SAASA,SAAT,GAAsB;AACtD,SAAOC,MAAM,CAACC,IAAP,CAAY,KAAKJ,QAAjB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAH,WAAW,CAACI,SAAZ,CAAsBI,kBAAtB,GAA2C,SAASA,kBAAT,CAA6BC,SAA7B,EAAwC;AACjF,SAAO,KAAKN,QAAL,CAAcM,SAAd,CAAP;AACD,CAFD;;AAIA,eAAeT,WAAf,C,CAEA","sourcesContent":["/**\n * @module ol/pointer/EventSource\n */\n\nvar EventSource = function EventSource(dispatcher, mapping) {\n\n  /**\n   * @type {module:ol/pointer/PointerEventHandler}\n   */\n  this.dispatcher = dispatcher;\n\n  /**\n   * @private\n   * @const\n   * @type {!Object.<string, function(Event)>}\n   */\n  this.mapping_ = mapping;\n};\n\n/**\n * List of events supported by this source.\n * @return {Array.<string>} Event names\n */\nEventSource.prototype.getEvents = function getEvents () {\n  return Object.keys(this.mapping_);\n};\n\n/**\n * Returns the handler that should handle a given event type.\n * @param {string} eventType The event type.\n * @return {function(Event)} Handler\n */\nEventSource.prototype.getHandlerForEvent = function getHandlerForEvent (eventType) {\n  return this.mapping_[eventType];\n};\n\nexport default EventSource;\n\n//# sourceMappingURL=EventSource.js.map"]},"metadata":{},"sourceType":"module"}
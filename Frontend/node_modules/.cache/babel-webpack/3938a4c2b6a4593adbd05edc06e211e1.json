{"ast":null,"code":"import _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for radio components.\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar\n/** @type {?} */\nnextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\n\nvar\n/** @type {?} */\nMAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatRadioGroup;\n  }),\n  multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\n\nvar MatRadioChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatRadioChange(source, value) {\n  _classCallCheck(this, MatRadioChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatRadioGroupBase = function MatRadioGroupBase() {\n  _classCallCheck(this, MatRadioGroupBase);\n};\n\nvar\n/** @type {?} */\n_MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nvar MatRadioGroup = /*#__PURE__*/function (_MatRadioGroupMixinBa) {\n  _inherits(MatRadioGroup, _MatRadioGroupMixinBa);\n\n  var _super = _createSuper(MatRadioGroup);\n\n  /**\n   * @param {?} _changeDetector\n   */\n  function MatRadioGroup(_changeDetector) {\n    var _this;\n\n    _classCallCheck(this, MatRadioGroup);\n\n    _this = _super.call(this);\n    _this._changeDetector = _changeDetector;\n    /**\n     * Selected value for the radio group.\n     */\n\n    _this._value = null;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     */\n\n    _this._name = \"mat-radio-group-\".concat(nextUniqueId++);\n    /**\n     * The currently selected radio button. Should match value.\n     */\n\n    _this._selected = null;\n    /**\n     * Whether the `value` has been set to its initial value.\n     */\n\n    _this._isInitialized = false;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     */\n\n    _this._labelPosition = 'after';\n    /**\n     * Whether the radio group is disabled.\n     */\n\n    _this._disabled = false;\n    /**\n     * Whether the radio group is required.\n     */\n\n    _this._required = false;\n    /**\n     * The method to be called in order to update ngModel\n     */\n\n    _this._controlValueAccessorChangeFn = function () {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     */\n\n\n    _this.onTouched = function () {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n\n    _this.change = new EventEmitter();\n    return _this;\n  }\n  /**\n   * Name of the radio button group. All radio buttons inside this group will use this name.\n   * @return {?}\n   */\n\n\n  _createClass(MatRadioGroup, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._name = value;\n\n      this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n\n  }, {\n    key: \"labelPosition\",\n    get: function get() {\n      return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._labelPosition = v === 'before' ? 'before' : 'after';\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (this._value !== newValue) {\n        // Set this before proceeding to ensure no circular loop occurs with selection.\n        this._value = newValue;\n\n        this._updateSelectedRadioFromValue();\n\n        this._checkSelectedRadioButton();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkSelectedRadioButton\",\n    value: function _checkSelectedRadioButton() {\n      if (this._selected && !this._selected.checked) {\n        this._selected.checked = true;\n      }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    ,\n    set: function set(selected) {\n      this._selected = selected;\n      this.value = selected ? selected.value : null;\n\n      this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      // Mark this component as initialized in AfterContentInit because the initial value can\n      // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n      // NgModel occurs *after* the OnInit of the MatRadioGroup.\n      this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_touch\",\n    value: function _touch() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRadioButtonNames\",\n    value: function _updateRadioButtonNames() {\n      var _this2 = this;\n\n      if (this._radios) {\n        this._radios.forEach(function (radio) {\n          radio.name = _this2.name;\n        });\n      }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateSelectedRadioFromValue\",\n    value: function _updateSelectedRadioFromValue() {\n      var _this3 = this;\n\n      // If the value already matches the selected radio, do nothing.\n      var\n      /** @type {?} */\n      isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n      if (this._radios && !isAlreadySelected) {\n        this._selected = null;\n\n        this._radios.forEach(function (radio) {\n          radio.checked = _this3.value === radio.value;\n\n          if (radio.checked) {\n            _this3._selected = radio;\n          }\n        });\n      }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      if (this._isInitialized) {\n        this.change.emit(new MatRadioChange(\n        /** @type {?} */\n        this._selected, this._value));\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markRadiosForCheck\",\n    value: function _markRadiosForCheck() {\n      if (this._radios) {\n        this._radios.forEach(function (radio) {\n          return radio._markForCheck();\n        });\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetector.markForCheck();\n    }\n  }]);\n\n  return MatRadioGroup;\n}(_MatRadioGroupMixinBase);\n\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) {\n  return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatRadioGroup,\n  selectors: [[\"mat-radio-group\"]],\n  contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n  inputs: {\n    disabled: \"disabled\",\n    name: \"name\",\n    labelPosition: \"labelPosition\",\n    value: \"value\",\n    selected: \"selected\",\n    required: \"required\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matRadioGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatRadioGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nMatRadioGroup.propDecorators = {\n  \"change\": [{\n    type: Output\n  }],\n  \"_radios\": [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatRadioButton;\n    }), {\n      descendants: true\n    }]\n  }],\n  \"name\": [{\n    type: Input\n  }],\n  \"labelPosition\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"selected\": [{\n    type: Input\n  }],\n  \"disabled\": [{\n    type: Input\n  }],\n  \"required\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-radio-group',\n      exportAs: 'matRadioGroup',\n      providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n      host: {\n        'role': 'radiogroup',\n        'class': 'mat-radio-group'\n      },\n      inputs: ['disabled']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    change: [{\n      type: Output\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatRadioButton;\n      }), {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * \\@docs-private\n */\n\n\nvar MatRadioButtonBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatRadioButtonBase(_elementRef) {\n  _classCallCheck(this, MatRadioButtonBase);\n\n  this._elementRef = _elementRef;\n}; // As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n\n\nvar\n/** @type {?} */\n_MatRadioButtonMixinBase = mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nvar MatRadioButton = /*#__PURE__*/function (_MatRadioButtonMixinB) {\n  _inherits(MatRadioButton, _MatRadioButtonMixinB);\n\n  var _super2 = _createSuper(MatRadioButton);\n\n  /**\n   * @param {?} radioGroup\n   * @param {?} elementRef\n   * @param {?} _changeDetector\n   * @param {?} _focusMonitor\n   * @param {?} _radioDispatcher\n   * @param {?=} _animationMode\n   */\n  function MatRadioButton(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode) {\n    var _this4;\n\n    _classCallCheck(this, MatRadioButton);\n\n    _this4 = _super2.call(this, elementRef);\n    _this4._changeDetector = _changeDetector;\n    _this4._focusMonitor = _focusMonitor;\n    _this4._radioDispatcher = _radioDispatcher;\n    _this4._animationMode = _animationMode;\n    _this4._uniqueId = \"mat-radio-\".concat(++nextUniqueId);\n    /**\n     * The unique ID for the radio button.\n     */\n\n    _this4.id = _this4._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n    _this4.change = new EventEmitter();\n    /**\n     * Whether this radio is checked.\n     */\n\n    _this4._checked = false;\n    /**\n     * Value assigned to this radio.\n     */\n\n    _this4._value = null;\n    /**\n     * Unregister function for _radioDispatcher\n     */\n\n    _this4._removeUniqueSelectionListener = function () {}; // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n    _this4.radioGroup = radioGroup;\n    _this4._removeUniqueSelectionListener = _radioDispatcher.listen(function (id, name) {\n      if (id !== _this4.id && name === _this4.name) {\n        _this4.checked = false;\n      }\n    });\n    return _this4;\n  }\n  /**\n   * Whether this radio button is checked.\n   * @return {?}\n   */\n\n\n  _createClass(MatRadioButton, [{\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var\n      /** @type {?} */\n      newCheckedState = coerceBooleanProperty(value);\n\n      if (this._checked !== newCheckedState) {\n        this._checked = newCheckedState;\n\n        if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n          this.radioGroup.selected = this;\n        } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n          // When unchecking the selected radio button, update the selected radio\n          // property on the group.\n          this.radioGroup.selected = null;\n        }\n\n        if (newCheckedState) {\n          // Notify all radio buttons with the same name to un-check.\n          this._radioDispatcher.notify(this.id, this.name);\n        }\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._value !== value) {\n        this._value = value;\n\n        if (this.radioGroup !== null) {\n          if (!this.checked) {\n            // Update checked when the value changed to match the radio group's value\n            this.checked = this.radioGroup.value === value;\n          }\n\n          if (this.checked) {\n            this.radioGroup.selected = this;\n          }\n        }\n      }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n\n  }, {\n    key: \"labelPosition\",\n    get: function get() {\n      return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var\n      /** @type {?} */\n      newDisabledState = coerceBooleanProperty(value);\n\n      if (this._disabled !== newDisabledState) {\n        this._disabled = newDisabledState;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required || this.radioGroup && this.radioGroup.required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n      // update radio button's status\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.radioGroup) {\n        // If the radio is inside a radio group, determine if it should be checked\n        this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group\n\n        this.name = this.radioGroup.name;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this5 = this;\n\n      this._focusMonitor.monitor(this._inputElement.nativeElement).subscribe(function (focusOrigin) {\n        return _this5._onInputFocusChange(focusOrigin);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n\n      this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `radio-button` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputChange\",\n    value: function _onInputChange(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n      var\n      /** @type {?} */\n      groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n\n      this._emitChangeEvent();\n\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n        this.radioGroup._touch();\n\n        if (groupValueChanged) {\n          this.radioGroup._emitChangeEvent();\n        }\n      }\n    }\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputFocusChange\",\n    value: function _onInputFocusChange(focusOrigin) {\n      // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n      if (!this._focusRipple && focusOrigin === 'keyboard') {\n        this._focusRipple = this._ripple.launch(0, 0, {\n          persistent: true\n        });\n      } else if (!focusOrigin) {\n        if (this.radioGroup) {\n          this.radioGroup._touch();\n        }\n\n        if (this._focusRipple) {\n          this._focusRipple.fadeOut();\n\n          this._focusRipple = null;\n        }\n      }\n    }\n  }]);\n\n  return MatRadioButton;\n}(_MatRadioButtonMixinBase);\n\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n  return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatRadioButton,\n  selectors: [[\"mat-radio-button\"]],\n  viewQuery: function MatRadioButton_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._ripple = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-radio-button\"],\n  hostVars: 7,\n  hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n        return ctx._inputElement.nativeElement.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    id: \"id\",\n    checked: \"checked\",\n    value: \"value\",\n    labelPosition: \"labelPosition\",\n    disabled: \"disabled\",\n    required: \"required\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matRadioButton\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 12,\n  vars: 18,\n  consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n  template: function MatRadioButton_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelement(3, \"div\", 3);\n      ɵngcc0.ɵɵelement(4, \"div\", 4);\n      ɵngcc0.ɵɵelement(5, \"div\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"input\", 6, 7);\n      ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_6_listener($event) {\n        return ctx._onInputChange($event);\n      })(\"click\", function MatRadioButton_Template_input_click_6_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n      ɵngcc0.ɵɵtext(10, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(11);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 23)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c1));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    }\n  },\n  directives: [ɵngcc3.MatRipple],\n  styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media screen and (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatRadioButton.ctorParameters = function () {\n  return [{\n    type: MatRadioGroup,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: UniqueSelectionDispatcher\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatRadioButton.propDecorators = {\n  \"id\": [{\n    type: Input\n  }],\n  \"name\": [{\n    type: Input\n  }],\n  \"ariaLabel\": [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  \"ariaLabelledby\": [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  \"ariaDescribedby\": [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  \"checked\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"labelPosition\": [{\n    type: Input\n  }],\n  \"disabled\": [{\n    type: Input\n  }],\n  \"required\": [{\n    type: Input\n  }],\n  \"change\": [{\n    type: Output\n  }],\n  \"_ripple\": [{\n    type: ViewChild,\n    args: [MatRipple]\n  }],\n  \"_inputElement\": [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'mat-radio-button',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"23\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n      styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media screen and (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"],\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRadioButton',\n      host: {\n        'class': 'mat-radio-button',\n        '[class.mat-radio-checked]': 'checked',\n        '[class.mat-radio-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[attr.id]': 'id',\n        // Note: under normal conditions focus shouldn't land on this element, however it may be\n        // programmatically set, for example inside of a focus trap, in this case we want to forward\n        // the focus to the native element.\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: MatRadioGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc2.UniqueSelectionDispatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    checked: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    _ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatRadioModule = function MatRadioModule() {\n  _classCallCheck(this, MatRadioModule);\n};\n\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) {\n  return new (t || MatRadioModule)();\n};\n\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatRadioModule\n});\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatRippleModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n    declarations: function declarations() {\n      return [MatRadioGroup, MatRadioButton];\n    },\n    imports: function imports() {\n      return [CommonModule, MatRippleModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatRadioGroup, MatRadioButton, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule],\n      exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n      declarations: [MatRadioGroup, MatRadioButton]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatRadioModule, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroupBase, _MatRadioGroupMixinBase, MatRadioGroup, MatRadioButtonBase, _MatRadioButtonMixinBase, MatRadioButton }; //# sourceMappingURL=radio.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/radio.js"],"names":["FocusMonitor","coerceBooleanProperty","UniqueSelectionDispatcher","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Directive","ElementRef","EventEmitter","forwardRef","Input","Optional","Output","ViewChild","ViewEncapsulation","Inject","NgModule","NG_VALUE_ACCESSOR","MatRipple","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","enterDuration","_c2","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","source","value","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","_radios","forEach","radio","name","isAlreadySelected","emit","_markForCheck","markForCheck","fn","isDisabled","disabled","ɵfac","MatRadioGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatRadioGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatRadioButton","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","inputs","labelPosition","required","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ctorParameters","propDecorators","args","descendants","ngDevMode","ɵsetClassMetadata","selector","providers","host","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","focusVia","_inputElement","nativeElement","monitor","subscribe","focusOrigin","_onInputFocusChange","stopMonitoring","disableRipple","event","stopPropagation","groupValueChanged","_emitChangeEvent","_touch","_focusRipple","_ripple","launch","persistent","fadeOut","MatRadioButton_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatRadioButton_Query","ɵɵviewQuery","first","hostVars","hostBindings","MatRadioButton_HostBindings","ɵɵlistener","MatRadioButton_focus_HostBindingHandler","focus","ɵɵattribute","ɵɵclassProp","color","tabIndex","ariaLabel","ariaLabelledby","ariaDescribedby","ngContentSelectors","decls","vars","consts","template","MatRadioButton_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","MatRadioButton_Template_input_change_6_listener","$event","_onInputChange","MatRadioButton_Template_input_click_6_listener","_onInputClick","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","inputId","ɵɵadvance","ɵɵproperty","_isRippleDisabled","ɵɵpureFunction0","directives","styles","encapsulation","changeDetection","decorators","undefined","None","OnPush","MatRadioModule","MatRadioModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for radio components.\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nconst /** @type {?} */ MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatRadioGroupBase {\n}\nconst /** @type {?} */ _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupMixinBase {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        super();\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n            });\n        }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @return {?}\n     */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const /** @type {?} */ isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(/** @type {?} */ ((this._selected)), this._value));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], inputs: { disabled: \"disabled\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", required: \"required\" }, outputs: { change: \"change\" }, exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef, },\n];\nMatRadioGroup.propDecorators = {\n    \"change\": [{ type: Output },],\n    \"_radios\": [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] },],\n    \"name\": [{ type: Input },],\n    \"labelPosition\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"selected\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n    \"required\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                },\n                inputs: ['disabled']\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst /** @type {?} */ _MatRadioButtonMixinBase = mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonMixinBase {\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     */\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /**\n         * The unique ID for the radio button.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        const /** @type {?} */ newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        const /** @type {?} */ newDisabledState = coerceBooleanProperty(value);\n        if (this._disabled !== newDisabledState) {\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const /** @type {?} */ groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            this.radioGroup._touch();\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    _onInputFocusChange(focusOrigin) {\n        // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true });\n        }\n        else if (!focusOrigin) {\n            if (this.radioGroup) {\n                this.radioGroup._touch();\n            }\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], viewQuery: function MatRadioButton_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._ripple = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-radio-button\"], hostVars: 7, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 12, vars: 18, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelement(5, \"div\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"input\", 6, 7);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_6_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_6_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵtext(10, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 23)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c1));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media screen and (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional },] },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: FocusMonitor, },\n    { type: UniqueSelectionDispatcher, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n];\nMatRadioButton.propDecorators = {\n    \"id\": [{ type: Input },],\n    \"name\": [{ type: Input },],\n    \"ariaLabel\": [{ type: Input, args: ['aria-label',] },],\n    \"ariaLabelledby\": [{ type: Input, args: ['aria-labelledby',] },],\n    \"ariaDescribedby\": [{ type: Input, args: ['aria-describedby',] },],\n    \"checked\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n    \"labelPosition\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n    \"required\": [{ type: Input },],\n    \"change\": [{ type: Output },],\n    \"_ripple\": [{ type: ViewChild, args: [MatRipple,] },],\n    \"_inputElement\": [{ type: ViewChild, args: ['input',] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{ selector: 'mat-radio-button',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"23\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent}.mat-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media screen and (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"],\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[attr.id]': 'id',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [CommonModule, MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatRadioModule, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroupBase, _MatRadioGroupMixinBase, MatRadioGroup, MatRadioButtonBase, _MatRadioButtonMixinBase, MatRadioButton };\n\n//# sourceMappingURL=radio.js.map"]},"metadata":{},"sourceType":"module"}
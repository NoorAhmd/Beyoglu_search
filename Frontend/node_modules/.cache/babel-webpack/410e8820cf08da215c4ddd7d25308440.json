{"ast":null,"code":"/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from '../layer/Property.js';\nimport { clamp } from '../math.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\n\nvar BaseLayer = function (BaseObject) {\n  function BaseLayer(options) {\n    BaseObject.call(this);\n    /**\n    * @type {Object.<string, *>}\n    */\n\n    var properties = assign({}, options);\n    properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex !== undefined ? options.zIndex : 0;\n    properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    this.setProperties(properties);\n    /**\n    * @type {module:ol/layer/Layer~State}\n    * @private\n    */\n\n    this.state_ =\n    /** @type {module:ol/layer/Layer~State} */\n    {\n      layer:\n      /** @type {module:ol/layer/Layer} */\n      this,\n      managed: true\n    };\n    /**\n    * The layer type.\n    * @type {module:ol/LayerType}\n    * @protected;\n    */\n\n    this.type;\n  }\n\n  if (BaseObject) BaseLayer.__proto__ = BaseObject;\n  BaseLayer.prototype = Object.create(BaseObject && BaseObject.prototype);\n  BaseLayer.prototype.constructor = BaseLayer;\n  /**\n  * Get the layer type (used when creating a layer renderer).\n  * @return {module:ol/LayerType} The layer type.\n  */\n\n  BaseLayer.prototype.getType = function getType() {\n    return this.type;\n  };\n  /**\n  * @return {module:ol/layer/Layer~State} Layer state.\n  */\n\n\n  BaseLayer.prototype.getLayerState = function getLayerState() {\n    this.state_.opacity = clamp(this.getOpacity(), 0, 1);\n    this.state_.sourceState = this.getSourceState();\n    this.state_.visible = this.getVisible();\n    this.state_.extent = this.getExtent();\n    this.state_.zIndex = this.getZIndex();\n    this.state_.maxResolution = this.getMaxResolution();\n    this.state_.minResolution = Math.max(this.getMinResolution(), 0);\n    return this.state_;\n  };\n  /**\n  * @abstract\n  * @param {Array.<module:ol/layer/Layer>=} opt_array Array of layers (to be\n  *     modified in place).\n  * @return {Array.<module:ol/layer/Layer>} Array of layers.\n  */\n\n\n  BaseLayer.prototype.getLayersArray = function getLayersArray(opt_array) {};\n  /**\n  * @abstract\n  * @param {Array.<module:ol/layer/Layer~State>=} opt_states Optional list of layer\n  *     states (to be modified in place).\n  * @return {Array.<module:ol/layer/Layer~State>} List of layer states.\n  */\n\n\n  BaseLayer.prototype.getLayerStatesArray = function getLayerStatesArray(opt_states) {};\n  /**\n  * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n  * will be visible regardless of extent.\n  * @return {module:ol/extent~Extent|undefined} The layer extent.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.getExtent = function getExtent() {\n    return (\n      /** @type {module:ol/extent~Extent|undefined} */\n      this.get(LayerProperty.EXTENT)\n    );\n  };\n  /**\n  * Return the maximum resolution of the layer.\n  * @return {number} The maximum resolution of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.getMaxResolution = function getMaxResolution() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MAX_RESOLUTION)\n    );\n  };\n  /**\n  * Return the minimum resolution of the layer.\n  * @return {number} The minimum resolution of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.getMinResolution = function getMinResolution() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.MIN_RESOLUTION)\n    );\n  };\n  /**\n  * Return the opacity of the layer (between 0 and 1).\n  * @return {number} The opacity of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.getOpacity = function getOpacity() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.OPACITY)\n    );\n  };\n  /**\n  * @abstract\n  * @return {module:ol/source/State} Source state.\n  */\n\n\n  BaseLayer.prototype.getSourceState = function getSourceState() {};\n  /**\n  * Return the visibility of the layer (`true` or `false`).\n  * @return {boolean} The visibility of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.getVisible = function getVisible() {\n    return (\n      /** @type {boolean} */\n      this.get(LayerProperty.VISIBLE)\n    );\n  };\n  /**\n  * Return the Z-index of the layer, which is used to order layers before\n  * rendering. The default Z-index is 0.\n  * @return {number} The Z-index of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.getZIndex = function getZIndex() {\n    return (\n      /** @type {number} */\n      this.get(LayerProperty.Z_INDEX)\n    );\n  };\n  /**\n  * Set the extent at which the layer is visible.  If `undefined`, the layer\n  * will be visible at all extents.\n  * @param {module:ol/extent~Extent|undefined} extent The extent of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.setExtent = function setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  };\n  /**\n  * Set the maximum resolution at which the layer is visible.\n  * @param {number} maxResolution The maximum resolution of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.setMaxResolution = function setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  };\n  /**\n  * Set the minimum resolution at which the layer is visible.\n  * @param {number} minResolution The minimum resolution of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.setMinResolution = function setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  };\n  /**\n  * Set the opacity of the layer, allowed values range from 0 to 1.\n  * @param {number} opacity The opacity of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.setOpacity = function setOpacity(opacity) {\n    this.set(LayerProperty.OPACITY, opacity);\n  };\n  /**\n  * Set the visibility of the layer (`true` or `false`).\n  * @param {boolean} visible The visibility of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.setVisible = function setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  };\n  /**\n  * Set Z-index of the layer, which is used to order layers before rendering.\n  * The default Z-index is 0.\n  * @param {number} zindex The z-index of the layer.\n  * @observable\n  * @api\n  */\n\n\n  BaseLayer.prototype.setZIndex = function setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  };\n\n  return BaseLayer;\n}(BaseObject);\n\nexport default BaseLayer; //# sourceMappingURL=Base.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/layer/Base.js"],"names":["BaseObject","LayerProperty","clamp","assign","BaseLayer","options","call","properties","OPACITY","opacity","undefined","VISIBLE","visible","Z_INDEX","zIndex","MAX_RESOLUTION","maxResolution","Infinity","MIN_RESOLUTION","minResolution","setProperties","state_","layer","managed","type","__proto__","prototype","Object","create","constructor","getType","getLayerState","getOpacity","sourceState","getSourceState","getVisible","extent","getExtent","getZIndex","getMaxResolution","Math","max","getMinResolution","getLayersArray","opt_array","getLayerStatesArray","opt_states","get","EXTENT","setExtent","set","setMaxResolution","setMinResolution","setOpacity","setVisible","setZIndex","zindex"],"mappings":"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","sourcesContent":["/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from '../layer/Property.js';\nimport {clamp} from '../math.js';\nimport {assign} from '../obj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nvar BaseLayer = (function (BaseObject) {\n  function BaseLayer(options) {\n\n    BaseObject.call(this);\n\n    /**\n    * @type {Object.<string, *>}\n    */\n    var properties = assign({}, options);\n    properties[LayerProperty.OPACITY] =\n       options.opacity !== undefined ? options.opacity : 1;\n    properties[LayerProperty.VISIBLE] =\n       options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] =\n       options.zIndex !== undefined ? options.zIndex : 0;\n    properties[LayerProperty.MAX_RESOLUTION] =\n       options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n       options.minResolution !== undefined ? options.minResolution : 0;\n\n    this.setProperties(properties);\n\n    /**\n    * @type {module:ol/layer/Layer~State}\n    * @private\n    */\n    this.state_ = /** @type {module:ol/layer/Layer~State} */ ({\n      layer: /** @type {module:ol/layer/Layer} */ (this),\n      managed: true\n    });\n\n    /**\n    * The layer type.\n    * @type {module:ol/LayerType}\n    * @protected;\n    */\n    this.type;\n\n  }\n\n  if ( BaseObject ) BaseLayer.__proto__ = BaseObject;\n  BaseLayer.prototype = Object.create( BaseObject && BaseObject.prototype );\n  BaseLayer.prototype.constructor = BaseLayer;\n\n  /**\n  * Get the layer type (used when creating a layer renderer).\n  * @return {module:ol/LayerType} The layer type.\n  */\n  BaseLayer.prototype.getType = function getType () {\n    return this.type;\n  };\n\n  /**\n  * @return {module:ol/layer/Layer~State} Layer state.\n  */\n  BaseLayer.prototype.getLayerState = function getLayerState () {\n    this.state_.opacity = clamp(this.getOpacity(), 0, 1);\n    this.state_.sourceState = this.getSourceState();\n    this.state_.visible = this.getVisible();\n    this.state_.extent = this.getExtent();\n    this.state_.zIndex = this.getZIndex();\n    this.state_.maxResolution = this.getMaxResolution();\n    this.state_.minResolution = Math.max(this.getMinResolution(), 0);\n\n    return this.state_;\n  };\n\n  /**\n  * @abstract\n  * @param {Array.<module:ol/layer/Layer>=} opt_array Array of layers (to be\n  *     modified in place).\n  * @return {Array.<module:ol/layer/Layer>} Array of layers.\n  */\n  BaseLayer.prototype.getLayersArray = function getLayersArray (opt_array) {};\n\n  /**\n  * @abstract\n  * @param {Array.<module:ol/layer/Layer~State>=} opt_states Optional list of layer\n  *     states (to be modified in place).\n  * @return {Array.<module:ol/layer/Layer~State>} List of layer states.\n  */\n  BaseLayer.prototype.getLayerStatesArray = function getLayerStatesArray (opt_states) {};\n\n  /**\n  * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n  * will be visible regardless of extent.\n  * @return {module:ol/extent~Extent|undefined} The layer extent.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.getExtent = function getExtent () {\n    return (\n    /** @type {module:ol/extent~Extent|undefined} */ (this.get(LayerProperty.EXTENT))\n    );\n  };\n\n  /**\n  * Return the maximum resolution of the layer.\n  * @return {number} The maximum resolution of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.getMaxResolution = function getMaxResolution () {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  };\n\n  /**\n  * Return the minimum resolution of the layer.\n  * @return {number} The minimum resolution of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.getMinResolution = function getMinResolution () {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  };\n\n  /**\n  * Return the opacity of the layer (between 0 and 1).\n  * @return {number} The opacity of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.getOpacity = function getOpacity () {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  };\n\n  /**\n  * @abstract\n  * @return {module:ol/source/State} Source state.\n  */\n  BaseLayer.prototype.getSourceState = function getSourceState () {};\n\n  /**\n  * Return the visibility of the layer (`true` or `false`).\n  * @return {boolean} The visibility of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.getVisible = function getVisible () {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  };\n\n  /**\n  * Return the Z-index of the layer, which is used to order layers before\n  * rendering. The default Z-index is 0.\n  * @return {number} The Z-index of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.getZIndex = function getZIndex () {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  };\n\n  /**\n  * Set the extent at which the layer is visible.  If `undefined`, the layer\n  * will be visible at all extents.\n  * @param {module:ol/extent~Extent|undefined} extent The extent of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.setExtent = function setExtent (extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  };\n\n  /**\n  * Set the maximum resolution at which the layer is visible.\n  * @param {number} maxResolution The maximum resolution of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.setMaxResolution = function setMaxResolution (maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  };\n\n  /**\n  * Set the minimum resolution at which the layer is visible.\n  * @param {number} minResolution The minimum resolution of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.setMinResolution = function setMinResolution (minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  };\n\n  /**\n  * Set the opacity of the layer, allowed values range from 0 to 1.\n  * @param {number} opacity The opacity of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.setOpacity = function setOpacity (opacity) {\n    this.set(LayerProperty.OPACITY, opacity);\n  };\n\n  /**\n  * Set the visibility of the layer (`true` or `false`).\n  * @param {boolean} visible The visibility of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.setVisible = function setVisible (visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  };\n\n  /**\n  * Set Z-index of the layer, which is used to order layers before rendering.\n  * The default Z-index is 0.\n  * @param {number} zindex The z-index of the layer.\n  * @observable\n  * @api\n  */\n  BaseLayer.prototype.setZIndex = function setZIndex (zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  };\n\n  return BaseLayer;\n}(BaseObject));\n\n\nexport default BaseLayer;\n\n//# sourceMappingURL=Base.js.map"]},"metadata":{},"sourceType":"module"}
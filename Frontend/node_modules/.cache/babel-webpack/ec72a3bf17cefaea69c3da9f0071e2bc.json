{"ast":null,"code":"/**\n * @module ol/dom\n */\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(opt_width, opt_height) {\n  var canvas =\n  /** @type {HTMLCanvasElement} */\n  document.createElement('CANVAS');\n\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n\n  return (\n    /** @type {CanvasRenderingContext2D} */\n    canvas.getContext('2d')\n  );\n}\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\n\nexport function outerWidth(element) {\n  var width = element.offsetWidth;\n  var style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n  return width;\n}\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\n\nexport function outerHeight(element) {\n  var height = element.offsetHeight;\n  var style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n  return height;\n}\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\n\nexport function replaceNode(newNode, oldNode) {\n  var parent = oldNode.parentNode;\n\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\n\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n/**\n * @param {Node} node The node to remove the children from.\n */\n\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n} //# sourceMappingURL=dom.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/dom.js"],"names":["createCanvasContext2D","opt_width","opt_height","canvas","document","createElement","width","height","getContext","outerWidth","element","offsetWidth","style","getComputedStyle","parseInt","marginLeft","marginRight","outerHeight","offsetHeight","marginTop","marginBottom","replaceNode","newNode","oldNode","parent","parentNode","replaceChild","removeNode","node","removeChild","removeChildren","lastChild"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAT,CAA+BC,SAA/B,EAA0CC,UAA1C,EAAsD;AAC3D,MAAIC,MAAM;AAAG;AAAkCC,EAAAA,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA/C;;AACA,MAAIJ,SAAJ,EAAe;AACbE,IAAAA,MAAM,CAACG,KAAP,GAAeL,SAAf;AACD;;AACD,MAAIC,UAAJ,EAAgB;AACdC,IAAAA,MAAM,CAACI,MAAP,GAAgBL,UAAhB;AACD;;AACD;AAAO;AAAyCC,IAAAA,MAAM,CAACK,UAAP,CAAkB,IAAlB;AAAhD;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAClC,MAAIJ,KAAK,GAAGI,OAAO,CAACC,WAApB;AACA,MAAIC,KAAK,GAAGC,gBAAgB,CAACH,OAAD,CAA5B;AACAJ,EAAAA,KAAK,IAAIQ,QAAQ,CAACF,KAAK,CAACG,UAAP,EAAmB,EAAnB,CAAR,GAAiCD,QAAQ,CAACF,KAAK,CAACI,WAAP,EAAoB,EAApB,CAAlD;AAEA,SAAOV,KAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,WAAT,CAAqBP,OAArB,EAA8B;AACnC,MAAIH,MAAM,GAAGG,OAAO,CAACQ,YAArB;AACA,MAAIN,KAAK,GAAGC,gBAAgB,CAACH,OAAD,CAA5B;AACAH,EAAAA,MAAM,IAAIO,QAAQ,CAACF,KAAK,CAACO,SAAP,EAAkB,EAAlB,CAAR,GAAgCL,QAAQ,CAACF,KAAK,CAACQ,YAAP,EAAqB,EAArB,CAAlD;AAEA,SAAOb,MAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASc,WAAT,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuC;AAC5C,MAAIC,MAAM,GAAGD,OAAO,CAACE,UAArB;;AACA,MAAID,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACE,YAAP,CAAoBJ,OAApB,EAA6BC,OAA7B;AACD;AACF;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASI,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAOA,IAAI,IAAIA,IAAI,CAACH,UAAb,GAA0BG,IAAI,CAACH,UAAL,CAAgBI,WAAhB,CAA4BD,IAA5B,CAA1B,GAA8D,IAArE;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASE,cAAT,CAAwBF,IAAxB,EAA8B;AACnC,SAAOA,IAAI,CAACG,SAAZ,EAAuB;AACrBH,IAAAA,IAAI,CAACC,WAAL,CAAiBD,IAAI,CAACG,SAAtB;AACD;AACF,C,CAED","sourcesContent":["/**\n * @module ol/dom\n */\n\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(opt_width, opt_height) {\n  var canvas = /** @type {HTMLCanvasElement} */ (document.createElement('CANVAS'));\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n  return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n}\n\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  var width = element.offsetWidth;\n  var style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  var height = element.offsetHeight;\n  var style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  var parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n\n//# sourceMappingURL=dom.js.map"]},"metadata":{},"sourceType":"module"}
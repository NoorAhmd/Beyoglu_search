{"ast":null,"code":"/**\n * @module ol/events\n */\nimport { clear } from './obj.js';\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {module:ol/events~ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {module:ol/events~ListenerFunction} listener\n * @property {EventTarget|module:ol/events/EventTarget} target\n * @property {string} type\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function(module:ol/events/Event)|function(module:ol/events/Event): boolean} ListenerFunction\n * @api\n */\n\n/**\n * @param {module:ol/events~EventsKey} listenerObj Listener object.\n * @return {module:ol/events~ListenerFunction} Bound listener.\n */\n\nexport function bindListener(listenerObj) {\n  var boundListener = function boundListener(evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n\n    return listener.call(bindTo, evt);\n  };\n\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!module:ol/events~EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {module:ol/events~EventsKey|undefined} The matching listener object.\n */\n\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  var listenerObj;\n\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n\n    if (listenerObj.listener === listener && listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n\n      return listenerObj;\n    }\n  }\n\n  return undefined;\n}\n/**\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array.<module:ol/events~EventsKey>|undefined} Listeners.\n */\n\nexport function getListeners(target, type) {\n  var listenerMap = target.ol_lm;\n  return listenerMap ? listenerMap[type] : undefined;\n}\n/**\n * Get the lookup of listeners.  If one does not exist on the target, it is\n * created.\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @return {!Object.<string, Array.<module:ol/events~EventsKey>>} Map of\n *     listeners by event type.\n */\n\nfunction getListenerMap(target) {\n  var listenerMap = target.ol_lm;\n\n  if (!listenerMap) {\n    listenerMap = target.ol_lm = {};\n  }\n\n  return listenerMap;\n}\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @param {string} type Type.\n */\n\n\nfunction removeListeners(target, type) {\n  var listeners = getListeners(target, type);\n\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      target.removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n\n    listeners.length = 0;\n    var listenerMap = target.ol_lm;\n\n    if (listenerMap) {\n      delete listenerMap[type];\n\n      if (Object.keys(listenerMap).length === 0) {\n        delete target.ol_lm;\n      }\n    }\n  }\n}\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {module:ol/events~EventsKey} Unique key for the listener.\n */\n\n\nexport function listen(target, type, listener, opt_this, opt_once) {\n  var listenerMap = getListenerMap(target);\n  var listeners = listenerMap[type];\n\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n\n  var listenerObj = findListener(listeners, listener, opt_this, false);\n\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj =\n    /** @type {module:ol/events~EventsKey} */\n    {\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    };\n    target.addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {module:ol/events~EventsKey} Key for unlistenByKey.\n */\n\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\n\nexport function unlisten(target, type, listener, opt_this) {\n  var listeners = getListeners(target, type);\n\n  if (listeners) {\n    var listenerObj = findListener(listeners, listener, opt_this, true);\n\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {module:ol/events~EventsKey} key The key.\n */\n\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.boundListener);\n    var listeners = getListeners(key.target, key.type);\n\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n\n    clear(key);\n  }\n}\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n */\n\nexport function unlistenAll(target) {\n  var listenerMap = getListenerMap(target);\n\n  for (var type in listenerMap) {\n    removeListeners(target, type);\n  }\n} //# sourceMappingURL=events.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/events.js"],"names":["clear","bindListener","listenerObj","boundListener","evt","listener","bindTo","target","callOnce","unlistenByKey","call","findListener","listeners","opt_this","opt_setDeleteIndex","i","ii","length","deleteIndex","undefined","getListeners","type","listenerMap","ol_lm","getListenerMap","removeListeners","removeEventListener","Object","keys","listen","opt_once","addEventListener","push","listenOnce","unlisten","key","indexOf","splice","unlistenAll"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,KAAR,QAAoB,UAApB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,WAAtB,EAAmC;AACxC,MAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAASC,GAAT,EAAc;AAChC,QAAIC,QAAQ,GAAGH,WAAW,CAACG,QAA3B;AACA,QAAIC,MAAM,GAAGJ,WAAW,CAACI,MAAZ,IAAsBJ,WAAW,CAACK,MAA/C;;AACA,QAAIL,WAAW,CAACM,QAAhB,EAA0B;AACxBC,MAAAA,aAAa,CAACP,WAAD,CAAb;AACD;;AACD,WAAOG,QAAQ,CAACK,IAAT,CAAcJ,MAAd,EAAsBF,GAAtB,CAAP;AACD,GAPD;;AAQAF,EAAAA,WAAW,CAACC,aAAZ,GAA4BA,aAA5B;AACA,SAAOA,aAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,YAAT,CAAsBC,SAAtB,EAAiCP,QAAjC,EAA2CQ,QAA3C,EAAqDC,kBAArD,EAAyE;AAC9E,MAAIZ,WAAJ;;AACA,OAAK,IAAIa,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,SAAS,CAACK,MAA/B,EAAuCF,CAAC,GAAGC,EAA3C,EAA+C,EAAED,CAAjD,EAAoD;AAClDb,IAAAA,WAAW,GAAGU,SAAS,CAACG,CAAD,CAAvB;;AACA,QAAIb,WAAW,CAACG,QAAZ,KAAyBA,QAAzB,IACAH,WAAW,CAACI,MAAZ,KAAuBO,QAD3B,EACqC;AACnC,UAAIC,kBAAJ,EAAwB;AACtBZ,QAAAA,WAAW,CAACgB,WAAZ,GAA0BH,CAA1B;AACD;;AACD,aAAOb,WAAP;AACD;AACF;;AACD,SAAOiB,SAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBb,MAAtB,EAA8Bc,IAA9B,EAAoC;AACzC,MAAIC,WAAW,GAAGf,MAAM,CAACgB,KAAzB;AACA,SAAOD,WAAW,GAAGA,WAAW,CAACD,IAAD,CAAd,GAAuBF,SAAzC;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,cAAT,CAAwBjB,MAAxB,EAAgC;AAC9B,MAAIe,WAAW,GAAGf,MAAM,CAACgB,KAAzB;;AACA,MAAI,CAACD,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAGf,MAAM,CAACgB,KAAP,GAAe,EAA7B;AACD;;AACD,SAAOD,WAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,eAAT,CAAyBlB,MAAzB,EAAiCc,IAAjC,EAAuC;AACrC,MAAIT,SAAS,GAAGQ,YAAY,CAACb,MAAD,EAASc,IAAT,CAA5B;;AACA,MAAIT,SAAJ,EAAe;AACb,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,SAAS,CAACK,MAA/B,EAAuCF,CAAC,GAAGC,EAA3C,EAA+C,EAAED,CAAjD,EAAoD;AAClDR,MAAAA,MAAM,CAACmB,mBAAP,CAA2BL,IAA3B,EAAiCT,SAAS,CAACG,CAAD,CAAT,CAAaZ,aAA9C;AACAH,MAAAA,KAAK,CAACY,SAAS,CAACG,CAAD,CAAV,CAAL;AACD;;AACDH,IAAAA,SAAS,CAACK,MAAV,GAAmB,CAAnB;AACA,QAAIK,WAAW,GAAGf,MAAM,CAACgB,KAAzB;;AACA,QAAID,WAAJ,EAAiB;AACf,aAAOA,WAAW,CAACD,IAAD,CAAlB;;AACA,UAAIM,MAAM,CAACC,IAAP,CAAYN,WAAZ,EAAyBL,MAAzB,KAAoC,CAAxC,EAA2C;AACzC,eAAOV,MAAM,CAACgB,KAAd;AACD;AACF;AACF;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASM,MAAT,CAAgBtB,MAAhB,EAAwBc,IAAxB,EAA8BhB,QAA9B,EAAwCQ,QAAxC,EAAkDiB,QAAlD,EAA4D;AACjE,MAAIR,WAAW,GAAGE,cAAc,CAACjB,MAAD,CAAhC;AACA,MAAIK,SAAS,GAAGU,WAAW,CAACD,IAAD,CAA3B;;AACA,MAAI,CAACT,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAGU,WAAW,CAACD,IAAD,CAAX,GAAoB,EAAhC;AACD;;AACD,MAAInB,WAAW,GAAGS,YAAY,CAACC,SAAD,EAAYP,QAAZ,EAAsBQ,QAAtB,EAAgC,KAAhC,CAA9B;;AACA,MAAIX,WAAJ,EAAiB;AACf,QAAI,CAAC4B,QAAL,EAAe;AACb;AACA5B,MAAAA,WAAW,CAACM,QAAZ,GAAuB,KAAvB;AACD;AACF,GALD,MAKO;AACLN,IAAAA,WAAW;AAAG;AAA2C;AACvDI,MAAAA,MAAM,EAAEO,QAD+C;AAEvDL,MAAAA,QAAQ,EAAE,CAAC,CAACsB,QAF2C;AAGvDzB,MAAAA,QAAQ,EAAEA,QAH6C;AAIvDE,MAAAA,MAAM,EAAEA,MAJ+C;AAKvDc,MAAAA,IAAI,EAAEA;AALiD,KAAzD;AAOAd,IAAAA,MAAM,CAACwB,gBAAP,CAAwBV,IAAxB,EAA8BpB,YAAY,CAACC,WAAD,CAA1C;AACAU,IAAAA,SAAS,CAACoB,IAAV,CAAe9B,WAAf;AACD;;AAED,SAAOA,WAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+B,UAAT,CAAoB1B,MAApB,EAA4Bc,IAA5B,EAAkChB,QAAlC,EAA4CQ,QAA5C,EAAsD;AAC3D,SAAOgB,MAAM,CAACtB,MAAD,EAASc,IAAT,EAAehB,QAAf,EAAyBQ,QAAzB,EAAmC,IAAnC,CAAb;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqB,QAAT,CAAkB3B,MAAlB,EAA0Bc,IAA1B,EAAgChB,QAAhC,EAA0CQ,QAA1C,EAAoD;AACzD,MAAID,SAAS,GAAGQ,YAAY,CAACb,MAAD,EAASc,IAAT,CAA5B;;AACA,MAAIT,SAAJ,EAAe;AACb,QAAIV,WAAW,GAAGS,YAAY,CAACC,SAAD,EAAYP,QAAZ,EAAsBQ,QAAtB,EAAgC,IAAhC,CAA9B;;AACA,QAAIX,WAAJ,EAAiB;AACfO,MAAAA,aAAa,CAACP,WAAD,CAAb;AACD;AACF;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,aAAT,CAAuB0B,GAAvB,EAA4B;AACjC,MAAIA,GAAG,IAAIA,GAAG,CAAC5B,MAAf,EAAuB;AACrB4B,IAAAA,GAAG,CAAC5B,MAAJ,CAAWmB,mBAAX,CAA+BS,GAAG,CAACd,IAAnC,EAAyCc,GAAG,CAAChC,aAA7C;AACA,QAAIS,SAAS,GAAGQ,YAAY,CAACe,GAAG,CAAC5B,MAAL,EAAa4B,GAAG,CAACd,IAAjB,CAA5B;;AACA,QAAIT,SAAJ,EAAe;AACb,UAAIG,CAAC,GAAG,iBAAiBoB,GAAjB,GAAuBA,GAAG,CAACjB,WAA3B,GAAyCN,SAAS,CAACwB,OAAV,CAAkBD,GAAlB,CAAjD;;AACA,UAAIpB,CAAC,KAAK,CAAC,CAAX,EAAc;AACZH,QAAAA,SAAS,CAACyB,MAAV,CAAiBtB,CAAjB,EAAoB,CAApB;AACD;;AACD,UAAIH,SAAS,CAACK,MAAV,KAAqB,CAAzB,EAA4B;AAC1BQ,QAAAA,eAAe,CAACU,GAAG,CAAC5B,MAAL,EAAa4B,GAAG,CAACd,IAAjB,CAAf;AACD;AACF;;AACDrB,IAAAA,KAAK,CAACmC,GAAD,CAAL;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,CAAqB/B,MAArB,EAA6B;AAClC,MAAIe,WAAW,GAAGE,cAAc,CAACjB,MAAD,CAAhC;;AACA,OAAK,IAAIc,IAAT,IAAiBC,WAAjB,EAA8B;AAC5BG,IAAAA,eAAe,CAAClB,MAAD,EAASc,IAAT,CAAf;AACD;AACF,C,CAED","sourcesContent":["/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n\n/**\n * Key to use with {@link module:ol/Observable~Observable#unByKey}.\n * @typedef {Object} EventsKey\n * @property {Object} [bindTo]\n * @property {module:ol/events~ListenerFunction} [boundListener]\n * @property {boolean} callOnce\n * @property {number} [deleteIndex]\n * @property {module:ol/events~ListenerFunction} listener\n * @property {EventTarget|module:ol/events/EventTarget} target\n * @property {string} type\n * @api\n */\n\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function(module:ol/events/Event)|function(module:ol/events/Event): boolean} ListenerFunction\n * @api\n */\n\n\n/**\n * @param {module:ol/events~EventsKey} listenerObj Listener object.\n * @return {module:ol/events~ListenerFunction} Bound listener.\n */\nexport function bindListener(listenerObj) {\n  var boundListener = function(evt) {\n    var listener = listenerObj.listener;\n    var bindTo = listenerObj.bindTo || listenerObj.target;\n    if (listenerObj.callOnce) {\n      unlistenByKey(listenerObj);\n    }\n    return listener.call(bindTo, evt);\n  };\n  listenerObj.boundListener = boundListener;\n  return boundListener;\n}\n\n\n/**\n * Finds the matching {@link module:ol/events~EventsKey} in the given listener\n * array.\n *\n * @param {!Array<!module:ol/events~EventsKey>} listeners Array of listeners.\n * @param {!Function} listener The listener function.\n * @param {Object=} opt_this The `this` value inside the listener.\n * @param {boolean=} opt_setDeleteIndex Set the deleteIndex on the matching\n *     listener, for {@link module:ol/events~unlistenByKey}.\n * @return {module:ol/events~EventsKey|undefined} The matching listener object.\n */\nexport function findListener(listeners, listener, opt_this, opt_setDeleteIndex) {\n  var listenerObj;\n  for (var i = 0, ii = listeners.length; i < ii; ++i) {\n    listenerObj = listeners[i];\n    if (listenerObj.listener === listener &&\n        listenerObj.bindTo === opt_this) {\n      if (opt_setDeleteIndex) {\n        listenerObj.deleteIndex = i;\n      }\n      return listenerObj;\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @param {string} type Type.\n * @return {Array.<module:ol/events~EventsKey>|undefined} Listeners.\n */\nexport function getListeners(target, type) {\n  var listenerMap = target.ol_lm;\n  return listenerMap ? listenerMap[type] : undefined;\n}\n\n\n/**\n * Get the lookup of listeners.  If one does not exist on the target, it is\n * created.\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @return {!Object.<string, Array.<module:ol/events~EventsKey>>} Map of\n *     listeners by event type.\n */\nfunction getListenerMap(target) {\n  var listenerMap = target.ol_lm;\n  if (!listenerMap) {\n    listenerMap = target.ol_lm = {};\n  }\n  return listenerMap;\n}\n\n\n/**\n * Clean up all listener objects of the given type.  All properties on the\n * listener objects will be removed, and if no listeners remain in the listener\n * map, it will be removed from the target.\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n * @param {string} type Type.\n */\nfunction removeListeners(target, type) {\n  var listeners = getListeners(target, type);\n  if (listeners) {\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      target.removeEventListener(type, listeners[i].boundListener);\n      clear(listeners[i]);\n    }\n    listeners.length = 0;\n    var listenerMap = target.ol_lm;\n    if (listenerMap) {\n      delete listenerMap[type];\n      if (Object.keys(listenerMap).length === 0) {\n        delete target.ol_lm;\n      }\n    }\n  }\n}\n\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events~unlistenByKey}.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean=} opt_once If true, add the listener as one-off listener.\n * @return {module:ol/events~EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, opt_this, opt_once) {\n  var listenerMap = getListenerMap(target);\n  var listeners = listenerMap[type];\n  if (!listeners) {\n    listeners = listenerMap[type] = [];\n  }\n  var listenerObj = findListener(listeners, listener, opt_this, false);\n  if (listenerObj) {\n    if (!opt_once) {\n      // Turn one-off listener into a permanent one.\n      listenerObj.callOnce = false;\n    }\n  } else {\n    listenerObj = /** @type {module:ol/events~EventsKey} */ ({\n      bindTo: opt_this,\n      callOnce: !!opt_once,\n      listener: listener,\n      target: target,\n      type: type\n    });\n    target.addEventListener(type, bindListener(listenerObj));\n    listeners.push(listenerObj);\n  }\n\n  return listenerObj;\n}\n\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events~unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events~listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {module:ol/events~EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n\n\n/**\n * Unregisters an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * To return a listener, this function needs to be called with the exact same\n * arguments that were used for a previous {@link module:ol/events~listen} call.\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {module:ol/events~ListenerFunction} listener Listener.\n * @param {Object=} opt_this Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n */\nexport function unlisten(target, type, listener, opt_this) {\n  var listeners = getListeners(target, type);\n  if (listeners) {\n    var listenerObj = findListener(listeners, listener, opt_this, true);\n    if (listenerObj) {\n      unlistenByKey(listenerObj);\n    }\n  }\n}\n\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.\n *\n * @param {module:ol/events~EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.boundListener);\n    var listeners = getListeners(key.target, key.type);\n    if (listeners) {\n      var i = 'deleteIndex' in key ? key.deleteIndex : listeners.indexOf(key);\n      if (i !== -1) {\n        listeners.splice(i, 1);\n      }\n      if (listeners.length === 0) {\n        removeListeners(key.target, key.type);\n      }\n    }\n    clear(key);\n  }\n}\n\n\n/**\n * Unregisters all event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * @param {module:ol/events/EventTarget~EventTargetLike} target Target.\n */\nexport function unlistenAll(target) {\n  var listenerMap = getListenerMap(target);\n  for (var type in listenerMap) {\n    removeListeners(target, type);\n  }\n}\n\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}
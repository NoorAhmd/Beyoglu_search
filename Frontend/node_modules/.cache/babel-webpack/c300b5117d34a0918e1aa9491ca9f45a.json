{"ast":null,"code":"/**\n * @module ol/layer/Image\n */\nimport LayerType from '../LayerType.js';\nimport Layer from '../layer/Layer.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {module:ol/source/Image} [source] Source for this layer.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires module:ol/render/Event~RenderEvent\n * @api\n */\n\nvar ImageLayer = function (Layer) {\n  function ImageLayer(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Layer.call(this, options);\n    /**\n     * The layer type.\n     * @protected\n     * @type {module:ol/LayerType}\n     */\n\n    this.type = LayerType.IMAGE;\n  }\n\n  if (Layer) ImageLayer.__proto__ = Layer;\n  ImageLayer.prototype = Object.create(Layer && Layer.prototype);\n  ImageLayer.prototype.constructor = ImageLayer;\n  return ImageLayer;\n}(Layer);\n/**\n * Return the associated {@link module:ol/source/Image source} of the image layer.\n * @function\n * @return {module:ol/source/Image} Source.\n * @api\n */\n\n\nImageLayer.prototype.getSource;\nexport default ImageLayer; //# sourceMappingURL=Image.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/layer/Image.js"],"names":["LayerType","Layer","ImageLayer","opt_options","options","call","type","IMAGE","__proto__","prototype","Object","create","constructor","getSource"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAI,UAAUD,KAAV,EAAiB;AACjC,WAASC,UAAT,CAAoBC,WAApB,EAAiC;AAC/B,QAAIC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA1C;AACAF,IAAAA,KAAK,CAACI,IAAN,CAAW,IAAX,EAAiBD,OAAjB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKE,IAAL,GAAYN,SAAS,CAACO,KAAtB;AAED;;AAED,MAAKN,KAAL,EAAaC,UAAU,CAACM,SAAX,GAAuBP,KAAvB;AACbC,EAAAA,UAAU,CAACO,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAeV,KAAK,IAAIA,KAAK,CAACQ,SAA9B,CAAvB;AACAP,EAAAA,UAAU,CAACO,SAAX,CAAqBG,WAArB,GAAmCV,UAAnC;AAEA,SAAOA,UAAP;AACD,CAnBiB,CAmBhBD,KAnBgB,CAAlB;AAsBA;AACA;AACA;AACA;AACA;AACA;;;AACAC,UAAU,CAACO,SAAX,CAAqBI,SAArB;AACA,eAAeX,UAAf,C,CAEA","sourcesContent":["/**\n * @module ol/layer/Image\n */\nimport LayerType from '../LayerType.js';\nimport Layer from '../layer/Layer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {module:ol/source/Image} [source] Source for this layer.\n */\n\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires module:ol/render/Event~RenderEvent\n * @api\n */\nvar ImageLayer = (function (Layer) {\n  function ImageLayer(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Layer.call(this, options);\n\n    /**\n     * The layer type.\n     * @protected\n     * @type {module:ol/LayerType}\n     */\n    this.type = LayerType.IMAGE;\n\n  }\n\n  if ( Layer ) ImageLayer.__proto__ = Layer;\n  ImageLayer.prototype = Object.create( Layer && Layer.prototype );\n  ImageLayer.prototype.constructor = ImageLayer;\n\n  return ImageLayer;\n}(Layer));\n\n\n/**\n * Return the associated {@link module:ol/source/Image source} of the image layer.\n * @function\n * @return {module:ol/source/Image} Source.\n * @api\n */\nImageLayer.prototype.getSource;\nexport default ImageLayer;\n\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}
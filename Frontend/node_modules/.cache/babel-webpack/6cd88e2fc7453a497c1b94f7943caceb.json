{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport { targetNotEditable } from '../events/condition.js';\nimport Interaction, { zoomByDelta } from '../interaction/Interaction.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link moudle:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\n\nvar KeyboardZoom = function (Interaction) {\n  function KeyboardZoom(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.delta_ = options.delta ? options.delta : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  if (Interaction) KeyboardZoom.__proto__ = Interaction;\n  KeyboardZoom.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardZoom.prototype.constructor = KeyboardZoom;\n  return KeyboardZoom;\n}(Interaction);\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/KeyboardZoom}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n\n  if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var charCode = keyEvent.charCode;\n\n    if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      var map = mapBrowserEvent.map;\n      var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n      var view = map.getView();\n      zoomByDelta(view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n\n  return !stopEvent;\n}\n\nexport default KeyboardZoom; //# sourceMappingURL=KeyboardZoom.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/interaction/KeyboardZoom.js"],"names":["EventType","targetNotEditable","Interaction","zoomByDelta","KeyboardZoom","opt_options","call","handleEvent","options","condition_","condition","delta_","delta","duration_","duration","undefined","__proto__","prototype","Object","create","constructor","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","preventDefault"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AACA,OAAOC,WAAP,IAAqBC,WAArB,QAAuC,+BAAvC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAI,UAAUF,WAAV,EAAuB;AACzC,WAASE,YAAT,CAAsBC,WAAtB,EAAmC;AAEjCH,IAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAjB,EAAuB;AACrBC,MAAAA,WAAW,EAAEA;AADQ,KAAvB;AAIA,QAAIC,OAAO,GAAGH,WAAW,GAAGA,WAAH,GAAiB,EAA1C;AAEA;AACJ;AACA;AACA;;AACI,SAAKI,UAAL,GAAkBD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAA5B,GAAwCT,iBAA1D;AAEA;AACJ;AACA;AACA;;AACI,SAAKU,MAAL,GAAcH,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACI,KAAxB,GAAgC,CAA9C;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,SAAL,GAAiBL,OAAO,CAACM,QAAR,KAAqBC,SAArB,GAAiCP,OAAO,CAACM,QAAzC,GAAoD,GAArE;AAED;;AAED,MAAKZ,WAAL,EAAmBE,YAAY,CAACY,SAAb,GAAyBd,WAAzB;AACnBE,EAAAA,YAAY,CAACa,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAejB,WAAW,IAAIA,WAAW,CAACe,SAA1C,CAAzB;AACAb,EAAAA,YAAY,CAACa,SAAb,CAAuBG,WAAvB,GAAqChB,YAArC;AAEA,SAAOA,YAAP;AACD,CAlCmB,CAkClBF,WAlCkB,CAApB;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,WAAT,CAAqBc,eAArB,EAAsC;AACpC,MAAIC,SAAS,GAAG,KAAhB;;AACA,MAAID,eAAe,CAACE,IAAhB,IAAwBvB,SAAS,CAACwB,OAAlC,IACAH,eAAe,CAACE,IAAhB,IAAwBvB,SAAS,CAACyB,QADtC,EACgD;AAC9C,QAAIC,QAAQ,GAAGL,eAAe,CAACM,aAA/B;AACA,QAAIC,QAAQ,GAAGF,QAAQ,CAACE,QAAxB;;AACA,QAAI,KAAKnB,UAAL,CAAgBY,eAAhB,MACCO,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAZ,IAAiCD,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAD9C,CAAJ,EACsE;AACpE,UAAIC,GAAG,GAAGT,eAAe,CAACS,GAA1B;AACA,UAAIlB,KAAK,GAAIgB,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAb,GAAkC,KAAKlB,MAAvC,GAAgD,CAAC,KAAKA,MAAlE;AACA,UAAIoB,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAX;AACA7B,MAAAA,WAAW,CAAC4B,IAAD,EAAOnB,KAAP,EAAcG,SAAd,EAAyB,KAAKF,SAA9B,CAAX;AACAQ,MAAAA,eAAe,CAACY,cAAhB;AACAX,MAAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AACD,SAAO,CAACA,SAAR;AACD;;AAED,eAAelB,YAAf,C,CAEA","sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport {targetNotEditable} from '../events/condition.js';\nimport Interaction, {zoomByDelta} from '../interaction/Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {module:ol/events/condition~Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link moudle:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nvar KeyboardZoom = (function (Interaction) {\n  function KeyboardZoom(opt_options) {\n\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {module:ol/events/condition~Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n  }\n\n  if ( Interaction ) KeyboardZoom.__proto__ = Interaction;\n  KeyboardZoom.prototype = Object.create( Interaction && Interaction.prototype );\n  KeyboardZoom.prototype.constructor = KeyboardZoom;\n\n  return KeyboardZoom;\n}(Interaction));\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n * key pressed was '+' or '-').\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/KeyboardZoom}\n */\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS) {\n    var keyEvent = mapBrowserEvent.originalEvent;\n    var charCode = keyEvent.charCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n      var map = mapBrowserEvent.map;\n      var delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;\n      var view = map.getView();\n      zoomByDelta(view, delta, undefined, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardZoom;\n\n//# sourceMappingURL=KeyboardZoom.js.map"]},"metadata":{},"sourceType":"module"}
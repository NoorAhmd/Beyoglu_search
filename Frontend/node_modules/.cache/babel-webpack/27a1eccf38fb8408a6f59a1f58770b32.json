{"ast":null,"code":"/**\n * @module ol/Tile\n */\nimport TileState from './TileState.js';\nimport { easeIn } from './easing.js';\nimport EventTarget from './events/EventTarget.js';\nimport EventType from './events/EventType.js';\n/**\n * A function that takes an {@link module:ol/Tile} for the tile and a\n * `{string}` for the url as arguments.\n *\n * @typedef {function(module:ol/Tile, string)} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~Tile} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(module:ol/tilecoord~TileCoord, number,\n *           module:ol/proj/Projection): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n  */\n\nvar Tile = function (EventTarget) {\n  function Tile(tileCoord, state, opt_options) {\n    EventTarget.call(this);\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {module:ol/tilecoord~TileCoord}\n     */\n\n    this.tileCoord = tileCoord;\n    /**\n     * @protected\n     * @type {module:ol/TileState}\n     */\n\n    this.state = state;\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {module:ol/Tile}\n     */\n\n    this.interimTile = null;\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n\n    this.key = '';\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n\n    this.transition_ = options.transition === undefined ? 250 : options.transition;\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object.<number, number>}\n     */\n\n    this.transitionStarts_ = {};\n  }\n\n  if (EventTarget) Tile.__proto__ = EventTarget;\n  Tile.prototype = Object.create(EventTarget && EventTarget.prototype);\n  Tile.prototype.constructor = Tile;\n  /**\n   * @protected\n   */\n\n  Tile.prototype.changed = function changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * @return {string} Key.\n   */\n\n\n  Tile.prototype.getKey = function getKey() {\n    return this.key + '/' + this.tileCoord;\n  };\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!module:ol/Tile} Best tile for rendering.\n   */\n\n\n  Tile.prototype.getInterimTile = function getInterimTile() {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n\n    var tile = this.interimTile; // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        return tile;\n      }\n\n      tile = tile.interimTile;\n    } while (tile); // we can not find a better tile\n\n\n    return this;\n  };\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n\n\n  Tile.prototype.refreshInterimChain = function refreshInterimChain() {\n    if (!this.interimTile) {\n      return;\n    }\n\n    var tile = this.interimTile;\n    var prev = this;\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n\n      tile = prev.interimTile;\n    } while (tile);\n  };\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {module:ol/tilecoord~TileCoord} The tile coordinate.\n   * @api\n   */\n\n\n  Tile.prototype.getTileCoord = function getTileCoord() {\n    return this.tileCoord;\n  };\n  /**\n   * @return {module:ol/TileState} State.\n   */\n\n\n  Tile.prototype.getState = function getState() {\n    return this.state;\n  };\n  /**\n   * @param {module:ol/TileState} state State.\n   */\n\n\n  Tile.prototype.setState = function setState(state) {\n    this.state = state;\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n\n\n  Tile.prototype.load = function load() {};\n  /**\n   * Get the alpha value for rendering.\n   * @param {number} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n\n\n  Tile.prototype.getAlpha = function getAlpha(id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    var start = this.transitionStarts_[id];\n\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    var delta = time - start + 1000 / 60; // avoid rendering at 0\n\n    if (delta >= this.transition_) {\n      return 1;\n    }\n\n    return easeIn(delta / this.transition_);\n  };\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {number} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n\n\n  Tile.prototype.inTransition = function inTransition(id) {\n    if (!this.transition_) {\n      return false;\n    }\n\n    return this.transitionStarts_[id] !== -1;\n  };\n  /**\n   * Mark a transition as complete.\n   * @param {number} id An id for the renderer.\n   */\n\n\n  Tile.prototype.endTransition = function endTransition(id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  };\n\n  return Tile;\n}(EventTarget);\n\nexport default Tile; //# sourceMappingURL=Tile.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/Tile.js"],"names":["TileState","easeIn","EventTarget","EventType","Tile","tileCoord","state","opt_options","call","options","interimTile","key","transition_","transition","undefined","transitionStarts_","__proto__","prototype","Object","create","constructor","changed","dispatchEvent","CHANGE","getKey","getInterimTile","tile","getState","LOADED","refreshInterimChain","prev","LOADING","IDLE","getTileCoord","setState","load","getAlpha","id","time","start","delta","inTransition","endTransition"],"mappings":"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","sourcesContent":["/**\n * @module ol/Tile\n */\nimport TileState from './TileState.js';\nimport {easeIn} from './easing.js';\nimport EventTarget from './events/EventTarget.js';\nimport EventType from './events/EventType.js';\n\n\n/**\n * A function that takes an {@link module:ol/Tile} for the tile and a\n * `{string}` for the url as arguments.\n *\n * @typedef {function(module:ol/Tile, string)} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~Tile} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(module:ol/tilecoord~TileCoord, number,\n *           module:ol/proj/Projection): (string|undefined)} UrlFunction\n * @api\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @api\n */\n\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n  */\nvar Tile = (function (EventTarget) {\n  function Tile(tileCoord, state, opt_options) {\n    EventTarget.call(this);\n\n    var options = opt_options ? opt_options : {};\n\n    /**\n     * @type {module:ol/tilecoord~TileCoord}\n     */\n    this.tileCoord = tileCoord;\n\n    /**\n     * @protected\n     * @type {module:ol/TileState}\n     */\n    this.state = state;\n\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {module:ol/Tile}\n     */\n    this.interimTile = null;\n\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n    this.key = '';\n\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n    this.transition_ = options.transition === undefined ? 250 : options.transition;\n\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object.<number, number>}\n     */\n    this.transitionStarts_ = {};\n\n  }\n\n  if ( EventTarget ) Tile.__proto__ = EventTarget;\n  Tile.prototype = Object.create( EventTarget && EventTarget.prototype );\n  Tile.prototype.constructor = Tile;\n\n  /**\n   * @protected\n   */\n  Tile.prototype.changed = function changed () {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n\n  /**\n   * @return {string} Key.\n   */\n  Tile.prototype.getKey = function getKey () {\n    return this.key + '/' + this.tileCoord;\n  };\n\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!module:ol/Tile} Best tile for rendering.\n   */\n  Tile.prototype.getInterimTile = function getInterimTile () {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n    var tile = this.interimTile;\n\n    // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        return tile;\n      }\n      tile = tile.interimTile;\n    } while (tile);\n\n    // we can not find a better tile\n    return this;\n  };\n\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n  Tile.prototype.refreshInterimChain = function refreshInterimChain () {\n    if (!this.interimTile) {\n      return;\n    }\n\n    var tile = this.interimTile;\n    var prev = this;\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n      tile = prev.interimTile;\n    } while (tile);\n  };\n\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {module:ol/tilecoord~TileCoord} The tile coordinate.\n   * @api\n   */\n  Tile.prototype.getTileCoord = function getTileCoord () {\n    return this.tileCoord;\n  };\n\n  /**\n   * @return {module:ol/TileState} State.\n   */\n  Tile.prototype.getState = function getState () {\n    return this.state;\n  };\n\n  /**\n   * @param {module:ol/TileState} state State.\n   */\n  Tile.prototype.setState = function setState (state) {\n    this.state = state;\n    this.changed();\n  };\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n  Tile.prototype.load = function load () {};\n\n  /**\n   * Get the alpha value for rendering.\n   * @param {number} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n  Tile.prototype.getAlpha = function getAlpha (id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    var start = this.transitionStarts_[id];\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    var delta = time - start + (1000 / 60); // avoid rendering at 0\n    if (delta >= this.transition_) {\n      return 1;\n    }\n    return easeIn(delta / this.transition_);\n  };\n\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {number} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n  Tile.prototype.inTransition = function inTransition (id) {\n    if (!this.transition_) {\n      return false;\n    }\n    return this.transitionStarts_[id] !== -1;\n  };\n\n  /**\n   * Mark a transition as complete.\n   * @param {number} id An id for the renderer.\n   */\n  Tile.prototype.endTransition = function endTransition (id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  };\n\n  return Tile;\n}(EventTarget));\n\n\nexport default Tile;\n\n//# sourceMappingURL=Tile.js.map"]},"metadata":{},"sourceType":"module"}
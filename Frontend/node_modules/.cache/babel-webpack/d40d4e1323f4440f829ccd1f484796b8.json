{"ast":null,"code":"/**\n * @module ol/render/canvas/LineStringReplay\n */\nimport CanvasInstruction, { strokeInstruction, beginPathInstruction } from '../canvas/Instruction.js';\nimport CanvasReplay from '../canvas/Replay.js';\n\nvar CanvasLineStringReplay = function (CanvasReplay) {\n  function CanvasLineStringReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n    CanvasReplay.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n  }\n\n  if (CanvasReplay) CanvasLineStringReplay.__proto__ = CanvasReplay;\n  CanvasLineStringReplay.prototype = Object.create(CanvasReplay && CanvasReplay.prototype);\n  CanvasLineStringReplay.prototype.constructor = CanvasLineStringReplay;\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n\n  CanvasLineStringReplay.prototype.drawFlatCoordinates_ = function drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    var myBegin = this.coordinates.length;\n    var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);\n    var moveToLineToInstruction = [CanvasInstruction.MOVE_TO_LINE_TO, myBegin, myEnd];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasLineStringReplay.prototype.drawLineString = function drawLineString(lineStringGeometry, feature) {\n    var state = this.state;\n    var strokeStyle = state.strokeStyle;\n    var lineWidth = state.lineWidth;\n\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature);\n    this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, state.lineDash, state.lineDashOffset], beginPathInstruction);\n    var flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    var stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(lineStringGeometry, feature);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasLineStringReplay.prototype.drawMultiLineString = function drawMultiLineString(multiLineStringGeometry, feature) {\n    var this$1 = this;\n    var state = this.state;\n    var strokeStyle = state.strokeStyle;\n    var lineWidth = state.lineWidth;\n\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature);\n    this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, state.lineDash, state.lineDashOffset], beginPathInstruction);\n    var ends = multiLineStringGeometry.getEnds();\n    var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    var stride = multiLineStringGeometry.getStride();\n    var offset = 0;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this$1.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);\n    }\n\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(multiLineStringGeometry, feature);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasLineStringReplay.prototype.finish = function finish() {\n    var state = this.state;\n\n    if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n      this.instructions.push(strokeInstruction);\n    }\n\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n  };\n  /**\n   * @inheritDoc.\n   */\n\n\n  CanvasLineStringReplay.prototype.applyStroke = function applyStroke(state) {\n    if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n\n    state.lastStroke = 0;\n    CanvasReplay.prototype.applyStroke.call(this, state);\n    this.instructions.push(beginPathInstruction);\n  };\n\n  return CanvasLineStringReplay;\n}(CanvasReplay);\n\nexport default CanvasLineStringReplay; //# sourceMappingURL=LineStringReplay.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/render/canvas/LineStringReplay.js"],"names":["CanvasInstruction","strokeInstruction","beginPathInstruction","CanvasReplay","CanvasLineStringReplay","tolerance","maxExtent","resolution","pixelRatio","overlaps","declutterTree","call","__proto__","prototype","Object","create","constructor","drawFlatCoordinates_","flatCoordinates","offset","end","stride","myBegin","coordinates","length","myEnd","appendFlatCoordinates","moveToLineToInstruction","MOVE_TO_LINE_TO","instructions","push","hitDetectionInstructions","drawLineString","lineStringGeometry","feature","state","strokeStyle","lineWidth","undefined","updateStrokeStyle","applyStroke","beginGeometry","SET_STROKE_STYLE","lineCap","lineJoin","miterLimit","lineDash","lineDashOffset","getFlatCoordinates","getStride","endGeometry","drawMultiLineString","multiLineStringGeometry","this$1","ends","getEnds","i","ii","finish","lastStroke","reverseHitDetectionInstructions"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/canvas/LineStringReplay\n */\nimport CanvasInstruction, {strokeInstruction, beginPathInstruction} from '../canvas/Instruction.js';\nimport CanvasReplay from '../canvas/Replay.js';\n\nvar CanvasLineStringReplay = (function (CanvasReplay) {\n  function CanvasLineStringReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n    CanvasReplay.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree);\n  }\n\n  if ( CanvasReplay ) CanvasLineStringReplay.__proto__ = CanvasReplay;\n  CanvasLineStringReplay.prototype = Object.create( CanvasReplay && CanvasReplay.prototype );\n  CanvasLineStringReplay.prototype.constructor = CanvasLineStringReplay;\n\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  CanvasLineStringReplay.prototype.drawFlatCoordinates_ = function drawFlatCoordinates_ (flatCoordinates, offset, end, stride) {\n    var myBegin = this.coordinates.length;\n    var myEnd = this.appendFlatCoordinates(\n      flatCoordinates, offset, end, stride, false, false);\n    var moveToLineToInstruction = [CanvasInstruction.MOVE_TO_LINE_TO, myBegin, myEnd];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasLineStringReplay.prototype.drawLineString = function drawLineString (lineStringGeometry, feature) {\n    var state = this.state;\n    var strokeStyle = state.strokeStyle;\n    var lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,\n      state.miterLimit, state.lineDash, state.lineDashOffset\n    ], beginPathInstruction);\n    var flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    var stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(lineStringGeometry, feature);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasLineStringReplay.prototype.drawMultiLineString = function drawMultiLineString (multiLineStringGeometry, feature) {\n    var this$1 = this;\n\n    var state = this.state;\n    var strokeStyle = state.strokeStyle;\n    var lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,\n      state.miterLimit, state.lineDash, state.lineDashOffset\n    ], beginPathInstruction);\n    var ends = multiLineStringGeometry.getEnds();\n    var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    var stride = multiLineStringGeometry.getStride();\n    var offset = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this$1.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);\n    }\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(multiLineStringGeometry, feature);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasLineStringReplay.prototype.finish = function finish () {\n    var state = this.state;\n    if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n      this.instructions.push(strokeInstruction);\n    }\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n  };\n\n  /**\n   * @inheritDoc.\n   */\n  CanvasLineStringReplay.prototype.applyStroke = function applyStroke (state) {\n    if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n    state.lastStroke = 0;\n    CanvasReplay.prototype.applyStroke.call(this, state);\n    this.instructions.push(beginPathInstruction);\n  };\n\n  return CanvasLineStringReplay;\n}(CanvasReplay));\n\n\nexport default CanvasLineStringReplay;\n\n//# sourceMappingURL=LineStringReplay.js.map"]},"metadata":{},"sourceType":"module"}
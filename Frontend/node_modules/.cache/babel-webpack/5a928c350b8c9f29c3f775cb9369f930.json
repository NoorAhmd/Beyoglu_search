{"ast":null,"code":"/**\n * @module ol/Feature\n */\nimport { assert } from './asserts.js';\nimport { listen, unlisten, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport Geometry from './geom/Geometry.js';\nimport Style from './style/Style.js';\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n */\n\nvar Feature = function (BaseObject) {\n  function Feature(opt_geometryOrProperties) {\n    BaseObject.call(this);\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n\n    this.id_ = undefined;\n    /**\n     * @type {string}\n     * @private\n     */\n\n    this.geometryName_ = 'geometry';\n    /**\n     * User provided style.\n     * @private\n     * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\n     */\n\n    this.style_ = null;\n    /**\n     * @private\n     * @type {module:ol/style/Style~StyleFunction|undefined}\n     */\n\n    this.styleFunction_ = undefined;\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n\n    this.geometryChangeKey_ = null;\n    listen(this, getChangeEventType(this.geometryName_), this.handleGeometryChanged_, this);\n\n    if (opt_geometryOrProperties !== undefined) {\n      if (opt_geometryOrProperties instanceof Geometry || !opt_geometryOrProperties) {\n        var geometry = opt_geometryOrProperties;\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object.<string, *>} */\n        var properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  if (BaseObject) Feature.__proto__ = BaseObject;\n  Feature.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Feature.prototype.constructor = Feature;\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {module:ol/Feature} The clone.\n   * @api\n   */\n\n  Feature.prototype.clone = function clone() {\n    var clone = new Feature(this.getProperties());\n    clone.setGeometryName(this.getGeometryName());\n    var geometry = this.getGeometry();\n\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n\n    var style = this.getStyle();\n\n    if (style) {\n      clone.setStyle(style);\n    }\n\n    return clone;\n  };\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {module:ol/geom/Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n\n\n  Feature.prototype.getGeometry = function getGeometry() {\n    return (\n      /** @type {module:ol/geom/Geometry|undefined} */\n      this.get(this.geometryName_)\n    );\n  };\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Feature.prototype.getId = function getId() {\n    return this.id_;\n  };\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n\n\n  Feature.prototype.getGeometryName = function getGeometryName() {\n    return this.geometryName_;\n  };\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} The feature style.\n   * @api\n   */\n\n\n  Feature.prototype.getStyle = function getStyle() {\n    return this.style_;\n  };\n  /**\n   * Get the feature's style function.\n   * @return {module:ol/style/Style~StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n\n\n  Feature.prototype.getStyleFunction = function getStyleFunction() {\n    return this.styleFunction_;\n  };\n  /**\n   * @private\n   */\n\n\n  Feature.prototype.handleGeometryChange_ = function handleGeometryChange_() {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Feature.prototype.handleGeometryChanged_ = function handleGeometryChanged_() {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n\n    var geometry = this.getGeometry();\n\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {module:ol/geom/Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n\n\n  Feature.prototype.setGeometry = function setGeometry(geometry) {\n    this.set(this.geometryName_, geometry);\n  };\n  /**\n   * Set the style for the feature.  This can be a single style object, an array\n   * of styles, or a function that takes a resolution and returns an array of\n   * styles. If it is `null` the feature has no style (a `null` style).\n   * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} style Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n\n\n  Feature.prototype.setStyle = function setStyle(style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  };\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n\n\n  Feature.prototype.setId = function setId(id) {\n    this.id_ = id;\n    this.changed();\n  };\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n\n\n  Feature.prototype.setGeometryName = function setGeometryName(name) {\n    unlisten(this, getChangeEventType(this.geometryName_), this.handleGeometryChanged_, this);\n    this.geometryName_ = name;\n    listen(this, getChangeEventType(this.geometryName_), this.handleGeometryChanged_, this);\n    this.handleGeometryChanged_();\n  };\n\n  return Feature;\n}(BaseObject);\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of module:ol/style/Style or single style objects wrapped\n * in a new feature style function.\n * @param {module:ol/style/Style~StyleFunction|!Array.<module:ol/style/Style>|!module:ol/style/Style} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {module:ol/style/Style~StyleFunction} A style function.\n */\n\n\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array.<module:ol/style/Style>}\n     */\n    var styles;\n\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(obj instanceof Style, 41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`\n\n      styles = [obj];\n    }\n\n    return function () {\n      return styles;\n    };\n  }\n}\nexport default Feature; //# sourceMappingURL=Feature.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/Feature.js"],"names":["assert","listen","unlisten","unlistenByKey","EventType","BaseObject","getChangeEventType","Geometry","Style","Feature","opt_geometryOrProperties","call","id_","undefined","geometryName_","style_","styleFunction_","geometryChangeKey_","handleGeometryChanged_","geometry","setGeometry","properties","setProperties","__proto__","prototype","Object","create","constructor","clone","getProperties","setGeometryName","getGeometryName","getGeometry","style","getStyle","setStyle","get","getId","getStyleFunction","handleGeometryChange_","changed","CHANGE","set","createStyleFunction","setId","id","name","obj","styles","Array","isArray"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,MAAR,QAAqB,cAArB;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,aAA1B,QAA8C,aAA9C;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,UAAP,IAAoBC,kBAApB,QAA6C,aAA7C;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAI,UAAUJ,UAAV,EAAsB;AACnC,WAASI,OAAT,CAAiBC,wBAAjB,EAA2C;AAEzCL,IAAAA,UAAU,CAACM,IAAX,CAAgB,IAAhB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,GAAL,GAAWC,SAAX;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,aAAL,GAAqB,UAArB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,IAAd;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,cAAL,GAAsBH,SAAtB;AAEA;AACJ;AACA;AACA;;AACI,SAAKI,kBAAL,GAA0B,IAA1B;AAEAhB,IAAAA,MAAM,CACJ,IADI,EACEK,kBAAkB,CAAC,KAAKQ,aAAN,CADpB,EAEJ,KAAKI,sBAFD,EAEyB,IAFzB,CAAN;;AAIA,QAAIR,wBAAwB,KAAKG,SAAjC,EAA4C;AAC1C,UAAIH,wBAAwB,YAAYH,QAApC,IACA,CAACG,wBADL,EAC+B;AAC7B,YAAIS,QAAQ,GAAGT,wBAAf;AACA,aAAKU,WAAL,CAAiBD,QAAjB;AACD,OAJD,MAIO;AACL;AACA,YAAIE,UAAU,GAAGX,wBAAjB;AACA,aAAKY,aAAL,CAAmBD,UAAnB;AACD;AACF;AACF;;AAED,MAAKhB,UAAL,EAAkBI,OAAO,CAACc,SAAR,GAAoBlB,UAApB;AAClBI,EAAAA,OAAO,CAACe,SAAR,GAAoBC,MAAM,CAACC,MAAP,CAAerB,UAAU,IAAIA,UAAU,CAACmB,SAAxC,CAApB;AACAf,EAAAA,OAAO,CAACe,SAAR,CAAkBG,WAAlB,GAAgClB,OAAhC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACEA,EAAAA,OAAO,CAACe,SAAR,CAAkBI,KAAlB,GAA0B,SAASA,KAAT,GAAkB;AAC1C,QAAIA,KAAK,GAAG,IAAInB,OAAJ,CAAY,KAAKoB,aAAL,EAAZ,CAAZ;AACAD,IAAAA,KAAK,CAACE,eAAN,CAAsB,KAAKC,eAAL,EAAtB;AACA,QAAIZ,QAAQ,GAAG,KAAKa,WAAL,EAAf;;AACA,QAAIb,QAAJ,EAAc;AACZS,MAAAA,KAAK,CAACR,WAAN,CAAkBD,QAAQ,CAACS,KAAT,EAAlB;AACD;;AACD,QAAIK,KAAK,GAAG,KAAKC,QAAL,EAAZ;;AACA,QAAID,KAAJ,EAAW;AACTL,MAAAA,KAAK,CAACO,QAAN,CAAeF,KAAf;AACD;;AACD,WAAOL,KAAP;AACD,GAZD;AAcA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEnB,EAAAA,OAAO,CAACe,SAAR,CAAkBQ,WAAlB,GAAgC,SAASA,WAAT,GAAwB;AACtD;AACE;AAAkD,WAAKI,GAAL,CAAS,KAAKtB,aAAd;AADpD;AAGD,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEL,EAAAA,OAAO,CAACe,SAAR,CAAkBa,KAAlB,GAA0B,SAASA,KAAT,GAAkB;AAC1C,WAAO,KAAKzB,GAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEH,EAAAA,OAAO,CAACe,SAAR,CAAkBO,eAAlB,GAAoC,SAASA,eAAT,GAA4B;AAC9D,WAAO,KAAKjB,aAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AACEL,EAAAA,OAAO,CAACe,SAAR,CAAkBU,QAAlB,GAA6B,SAASA,QAAT,GAAqB;AAChD,WAAO,KAAKnB,MAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AACEN,EAAAA,OAAO,CAACe,SAAR,CAAkBc,gBAAlB,GAAqC,SAASA,gBAAT,GAA6B;AAChE,WAAO,KAAKtB,cAAZ;AACD,GAFD;AAIA;AACF;AACA;;;AACEP,EAAAA,OAAO,CAACe,SAAR,CAAkBe,qBAAlB,GAA0C,SAASA,qBAAT,GAAkC;AAC1E,SAAKC,OAAL;AACD,GAFD;AAIA;AACF;AACA;;;AACE/B,EAAAA,OAAO,CAACe,SAAR,CAAkBN,sBAAlB,GAA2C,SAASA,sBAAT,GAAmC;AAC5E,QAAI,KAAKD,kBAAT,EAA6B;AAC3Bd,MAAAA,aAAa,CAAC,KAAKc,kBAAN,CAAb;AACA,WAAKA,kBAAL,GAA0B,IAA1B;AACD;;AACD,QAAIE,QAAQ,GAAG,KAAKa,WAAL,EAAf;;AACA,QAAIb,QAAJ,EAAc;AACZ,WAAKF,kBAAL,GAA0BhB,MAAM,CAACkB,QAAD,EAC9Bf,SAAS,CAACqC,MADoB,EACZ,KAAKF,qBADO,EACgB,IADhB,CAAhC;AAED;;AACD,SAAKC,OAAL;AACD,GAXD;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE/B,EAAAA,OAAO,CAACe,SAAR,CAAkBJ,WAAlB,GAAgC,SAASA,WAAT,CAAsBD,QAAtB,EAAgC;AAC9D,SAAKuB,GAAL,CAAS,KAAK5B,aAAd,EAA6BK,QAA7B;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEV,EAAAA,OAAO,CAACe,SAAR,CAAkBW,QAAlB,GAA6B,SAASA,QAAT,CAAmBF,KAAnB,EAA0B;AACrD,SAAKlB,MAAL,GAAckB,KAAd;AACA,SAAKjB,cAAL,GAAsB,CAACiB,KAAD,GAASpB,SAAT,GAAqB8B,mBAAmB,CAACV,KAAD,CAA9D;AACA,SAAKO,OAAL;AACD,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE/B,EAAAA,OAAO,CAACe,SAAR,CAAkBoB,KAAlB,GAA0B,SAASA,KAAT,CAAgBC,EAAhB,EAAoB;AAC5C,SAAKjC,GAAL,GAAWiC,EAAX;AACA,SAAKL,OAAL;AACD,GAHD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE/B,EAAAA,OAAO,CAACe,SAAR,CAAkBM,eAAlB,GAAoC,SAASA,eAAT,CAA0BgB,IAA1B,EAAgC;AAClE5C,IAAAA,QAAQ,CACN,IADM,EACAI,kBAAkB,CAAC,KAAKQ,aAAN,CADlB,EAEN,KAAKI,sBAFC,EAEuB,IAFvB,CAAR;AAGA,SAAKJ,aAAL,GAAqBgC,IAArB;AACA7C,IAAAA,MAAM,CACJ,IADI,EACEK,kBAAkB,CAAC,KAAKQ,aAAN,CADpB,EAEJ,KAAKI,sBAFD,EAEyB,IAFzB,CAAN;AAGA,SAAKA,sBAAL;AACD,GATD;;AAWA,SAAOT,OAAP;AACD,CAtNc,CAsNbJ,UAtNa,CAAf;AAyNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASsC,mBAAT,CAA6BI,GAA7B,EAAkC;AACvC,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,WAAOA,GAAP;AACD,GAFD,MAEO;AACL;AACJ;AACA;AACI,QAAIC,MAAJ;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AACtBC,MAAAA,MAAM,GAAGD,GAAT;AACD,KAFD,MAEO;AACL/C,MAAAA,MAAM,CAAC+C,GAAG,YAAYvC,KAAhB,EACJ,EADI,CAAN,CADK,CAEE;;AACPwC,MAAAA,MAAM,GAAG,CAACD,GAAD,CAAT;AACD;;AACD,WAAO,YAAW;AAChB,aAAOC,MAAP;AACD,KAFD;AAGD;AACF;AACD,eAAevC,OAAf,C,CAEA","sourcesContent":["/**\n * @module ol/Feature\n */\nimport {assert} from './asserts.js';\nimport {listen, unlisten, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\nimport Geometry from './geom/Geometry.js';\nimport Style from './style/Style.js';\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n */\nvar Feature = (function (BaseObject) {\n  function Feature(opt_geometryOrProperties) {\n\n    BaseObject.call(this);\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/style/Style~StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n\n    if (opt_geometryOrProperties !== undefined) {\n      if (opt_geometryOrProperties instanceof Geometry ||\n          !opt_geometryOrProperties) {\n        var geometry = opt_geometryOrProperties;\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object.<string, *>} */\n        var properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  if ( BaseObject ) Feature.__proto__ = BaseObject;\n  Feature.prototype = Object.create( BaseObject && BaseObject.prototype );\n  Feature.prototype.constructor = Feature;\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {module:ol/Feature} The clone.\n   * @api\n   */\n  Feature.prototype.clone = function clone () {\n    var clone = new Feature(this.getProperties());\n    clone.setGeometryName(this.getGeometryName());\n    var geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n    var style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  };\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {module:ol/geom/Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  Feature.prototype.getGeometry = function getGeometry () {\n    return (\n      /** @type {module:ol/geom/Geometry|undefined} */ (this.get(this.geometryName_))\n    );\n  };\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  Feature.prototype.getId = function getId () {\n    return this.id_;\n  };\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  Feature.prototype.getGeometryName = function getGeometryName () {\n    return this.geometryName_;\n  };\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} The feature style.\n   * @api\n   */\n  Feature.prototype.getStyle = function getStyle () {\n    return this.style_;\n  };\n\n  /**\n   * Get the feature's style function.\n   * @return {module:ol/style/Style~StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  Feature.prototype.getStyleFunction = function getStyleFunction () {\n    return this.styleFunction_;\n  };\n\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChange_ = function handleGeometryChange_ () {\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChanged_ = function handleGeometryChanged_ () {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    var geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry,\n        EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n    this.changed();\n  };\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {module:ol/geom/Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  Feature.prototype.setGeometry = function setGeometry (geometry) {\n    this.set(this.geometryName_, geometry);\n  };\n\n  /**\n   * Set the style for the feature.  This can be a single style object, an array\n   * of styles, or a function that takes a resolution and returns an array of\n   * styles. If it is `null` the feature has no style (a `null` style).\n   * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} style Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  Feature.prototype.setStyle = function setStyle (style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  };\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  Feature.prototype.setId = function setId (id) {\n    this.id_ = id;\n    this.changed();\n  };\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  Feature.prototype.setGeometryName = function setGeometryName (name) {\n    unlisten(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.geometryName_ = name;\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.handleGeometryChanged_();\n  };\n\n  return Feature;\n}(BaseObject));\n\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of module:ol/style/Style or single style objects wrapped\n * in a new feature style function.\n * @param {module:ol/style/Style~StyleFunction|!Array.<module:ol/style/Style>|!module:ol/style/Style} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {module:ol/style/Style~StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array.<module:ol/style/Style>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(obj instanceof Style,\n        41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`\n      styles = [obj];\n    }\n    return function() {\n      return styles;\n    };\n  }\n}\nexport default Feature;\n\n//# sourceMappingURL=Feature.js.map"]},"metadata":{},"sourceType":"module"}
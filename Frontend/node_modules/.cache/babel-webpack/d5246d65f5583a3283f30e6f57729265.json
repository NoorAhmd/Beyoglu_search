{"ast":null,"code":"/**\n * @module ol/pointer/MsSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport EventSource from '../pointer/EventSource.js';\n/**\n * @const\n * @type {Array.<string>}\n */\n\nvar POINTER_TYPES = ['', 'unavailable', 'touch', 'pen', 'mouse'];\n/**\n * Handler for `msPointerDown`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\nfunction msPointerDown(inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n}\n/**\n * Handler for `msPointerMove`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerMove(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n}\n/**\n * Handler for `msPointerUp`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerUp(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n/**\n * Handler for `msPointerOut`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerOut(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n}\n/**\n * Handler for `msPointerOver`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerOver(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n}\n/**\n * Handler for `msPointerCancel`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msPointerCancel(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msLostPointerCapture(inEvent) {\n  var e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\n\n\nfunction msGotPointerCapture(inEvent) {\n  var e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n\nvar MsSource = function (EventSource) {\n  function MsSource(dispatcher) {\n    var mapping = {\n      'MSPointerDown': msPointerDown,\n      'MSPointerMove': msPointerMove,\n      'MSPointerUp': msPointerUp,\n      'MSPointerOut': msPointerOut,\n      'MSPointerOver': msPointerOver,\n      'MSPointerCancel': msPointerCancel,\n      'MSGotPointerCapture': msGotPointerCapture,\n      'MSLostPointerCapture': msLostPointerCapture\n    };\n    EventSource.call(this, dispatcher, mapping);\n    /**\n     * @const\n     * @type {!Object.<string, MSPointerEvent|Object>}\n     */\n\n    this.pointerMap = dispatcher.pointerMap;\n  }\n\n  if (EventSource) MsSource.__proto__ = EventSource;\n  MsSource.prototype = Object.create(EventSource && EventSource.prototype);\n  MsSource.prototype.constructor = MsSource;\n  /**\n   * Creates a copy of the original event that will be used\n   * for the fake pointer event.\n   *\n   * @private\n   * @param {MSPointerEvent} inEvent The in event.\n   * @return {Object} The copied event.\n   */\n\n  MsSource.prototype.prepareEvent_ = function prepareEvent_(inEvent) {\n    var e = inEvent;\n\n    if (typeof inEvent.pointerType === 'number') {\n      e = this.dispatcher.cloneEvent(inEvent, inEvent);\n      e.pointerType = POINTER_TYPES[inEvent.pointerType];\n    }\n\n    return e;\n  };\n  /**\n   * Remove this pointer from the list of active pointers.\n   * @param {number} pointerId Pointer identifier.\n   */\n\n\n  MsSource.prototype.cleanup = function cleanup(pointerId) {\n    delete this.pointerMap[pointerId.toString()];\n  };\n\n  return MsSource;\n}(EventSource);\n\nexport default MsSource; //# sourceMappingURL=MsSource.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/pointer/MsSource.js"],"names":["EventSource","POINTER_TYPES","msPointerDown","inEvent","pointerMap","pointerId","toString","e","prepareEvent_","dispatcher","down","msPointerMove","move","msPointerUp","up","cleanup","msPointerOut","leaveOut","msPointerOver","enterOver","msPointerCancel","cancel","msLostPointerCapture","makeEvent","dispatchEvent","msGotPointerCapture","MsSource","mapping","call","__proto__","prototype","Object","create","constructor","pointerType","cloneEvent"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/MsSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport EventSource from '../pointer/EventSource.js';\n\n\n/**\n * @const\n * @type {Array.<string>}\n */\nvar POINTER_TYPES = [\n  '',\n  'unavailable',\n  'touch',\n  'pen',\n  'mouse'\n];\n\n/**\n * Handler for `msPointerDown`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerDown(inEvent) {\n  this.pointerMap[inEvent.pointerId.toString()] = inEvent;\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.down(e, inEvent);\n}\n\n/**\n * Handler for `msPointerMove`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerMove(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.move(e, inEvent);\n}\n\n/**\n * Handler for `msPointerUp`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerUp(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.up(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n\n/**\n * Handler for `msPointerOut`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerOut(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.leaveOut(e, inEvent);\n}\n\n/**\n * Handler for `msPointerOver`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerOver(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.enterOver(e, inEvent);\n}\n\n/**\n * Handler for `msPointerCancel`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msPointerCancel(inEvent) {\n  var e = this.prepareEvent_(inEvent);\n  this.dispatcher.cancel(e, inEvent);\n  this.cleanup(inEvent.pointerId);\n}\n\n/**\n * Handler for `msLostPointerCapture`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msLostPointerCapture(inEvent) {\n  var e = this.dispatcher.makeEvent('lostpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n\n/**\n * Handler for `msGotPointerCapture`.\n *\n * @this {module:ol/pointer/MsSource}\n * @param {MSPointerEvent} inEvent The in event.\n */\nfunction msGotPointerCapture(inEvent) {\n  var e = this.dispatcher.makeEvent('gotpointercapture', inEvent, inEvent);\n  this.dispatcher.dispatchEvent(e);\n}\n\nvar MsSource = (function (EventSource) {\n  function MsSource(dispatcher) {\n    var mapping = {\n      'MSPointerDown': msPointerDown,\n      'MSPointerMove': msPointerMove,\n      'MSPointerUp': msPointerUp,\n      'MSPointerOut': msPointerOut,\n      'MSPointerOver': msPointerOver,\n      'MSPointerCancel': msPointerCancel,\n      'MSGotPointerCapture': msGotPointerCapture,\n      'MSLostPointerCapture': msLostPointerCapture\n    };\n    EventSource.call(this, dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object.<string, MSPointerEvent|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n  }\n\n  if ( EventSource ) MsSource.__proto__ = EventSource;\n  MsSource.prototype = Object.create( EventSource && EventSource.prototype );\n  MsSource.prototype.constructor = MsSource;\n\n  /**\n   * Creates a copy of the original event that will be used\n   * for the fake pointer event.\n   *\n   * @private\n   * @param {MSPointerEvent} inEvent The in event.\n   * @return {Object} The copied event.\n   */\n  MsSource.prototype.prepareEvent_ = function prepareEvent_ (inEvent) {\n    var e = inEvent;\n    if (typeof inEvent.pointerType === 'number') {\n      e = this.dispatcher.cloneEvent(inEvent, inEvent);\n      e.pointerType = POINTER_TYPES[inEvent.pointerType];\n    }\n\n    return e;\n  };\n\n  /**\n   * Remove this pointer from the list of active pointers.\n   * @param {number} pointerId Pointer identifier.\n   */\n  MsSource.prototype.cleanup = function cleanup (pointerId) {\n    delete this.pointerMap[pointerId.toString()];\n  };\n\n  return MsSource;\n}(EventSource));\n\nexport default MsSource;\n\n//# sourceMappingURL=MsSource.js.map"]},"metadata":{},"sourceType":"module"}
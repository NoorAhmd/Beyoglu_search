{"ast":null,"code":"import _get from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ViewEncapsulation, ElementRef, Input, ContentChildren, Directive, ChangeDetectionStrategy, Optional, NgModule } from '@angular/core';\nimport { MatLine, MatLineSetter, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nvar _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\n\nfunction coerceToString(value) {\n  return \"\".concat(value || '');\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\n\n\nfunction coerceToNumber(value) {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatGridTile = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   */\n  function MatGridTile(_element) {\n    _classCallCheck(this, MatGridTile);\n\n    this._element = _element;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTile, [{\n    key: \"rowspan\",\n    get: function get() {\n      return this._rowspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._rowspan = coerceToNumber(value);\n    }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n\n  }, {\n    key: \"colspan\",\n    get: function get() {\n      return this._colspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._colspan = coerceToNumber(value);\n    }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(property, value) {\n      this._element.nativeElement.style[property] = value;\n    }\n  }]);\n\n  return MatGridTile;\n}();\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-figure\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTile.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMatGridTile.propDecorators = {\n  \"rowspan\": [{\n    type: Input\n  }],\n  \"colspan\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile'\n      },\n      template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatGridTileText = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   */\n  function MatGridTileText(_element) {\n    _classCallCheck(this, MatGridTileText);\n\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTileText, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._lineSetter = new MatLineSetter(this._lines, this._element);\n    }\n  }]);\n\n  return MatGridTileText;\n}();\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTileText.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMatGridTileText.propDecorators = {\n  \"_lines\": [{\n    type: ContentChildren,\n    args: [MatLine]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridAvatarCssMatStyler = function MatGridAvatarCssMatStyler() {\n  _classCallCheck(this, MatGridAvatarCssMatStyler);\n};\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileHeaderCssMatStyler = function MatGridTileHeaderCssMatStyler() {\n  _classCallCheck(this, MatGridTileHeaderCssMatStyler);\n};\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileFooterCssMatStyler = function MatGridTileFooterCssMatStyler() {\n  _classCallCheck(this, MatGridTileFooterCssMatStyler);\n};\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\n\n\nvar TileCoordinator = /*#__PURE__*/function () {\n  /**\n   * @param {?} numColumns\n   * @param {?} tiles\n   */\n  function TileCoordinator(numColumns, tiles) {\n    var _this = this;\n\n    _classCallCheck(this, TileCoordinator);\n\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(function (tile) {\n      return _this._trackTile(tile);\n    });\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n\n\n  _createClass(TileCoordinator, [{\n    key: \"rowCount\",\n    get: function get() {\n      return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      var\n      /** @type {?} */\n      lastRowMax = Math.max.apply(Math, _toConsumableArray(this.tracker)); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n      // add the difference to the rowcount\n\n      return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackTile\",\n    value: function _trackTile(tile) {\n      // Find a gap large enough for this tile.\n      var\n      /** @type {?} */\n      gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n      this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n      // immediately after the tile that has just been placed.\n\n\n      this.columnIndex = gapStartIndex + tile.colspan;\n      return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findMatchingGap\",\n    value: function _findMatchingGap(tileCols) {\n      if (tileCols > this.tracker.length) {\n        throw Error(\"mat-grid-list: tile with colspan \".concat(tileCols, \" is wider than \") + \"grid with cols=\\\"\".concat(this.tracker.length, \"\\\".\"));\n      } // Start index is inclusive, end index is exclusive.\n\n\n      var\n      /** @type {?} */\n      gapStartIndex = -1;\n      var\n      /** @type {?} */\n      gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n      do {\n        // If we've reached the end of the row, go to the next row.\n        if (this.columnIndex + tileCols > this.tracker.length) {\n          this._nextRow();\n\n          continue;\n        }\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n        if (gapStartIndex == -1) {\n          this._nextRow();\n\n          continue;\n        }\n\n        gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n        // gap on the next iteration.\n\n        this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile.\n      } while (gapEndIndex - gapStartIndex < tileCols); // If we still didn't manage to find a gap, ensure that the index is\n      // at least zero so the tile doesn't get pulled out of the grid.\n\n\n      return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_nextRow\",\n    value: function _nextRow() {\n      this.columnIndex = 0;\n      this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n      for (var\n      /** @type {?} */\n      i = 0; i < this.tracker.length; i++) {\n        this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n      }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findGapEndIndex\",\n    value: function _findGapEndIndex(gapStartIndex) {\n      for (var\n      /** @type {?} */\n      i = gapStartIndex + 1; i < this.tracker.length; i++) {\n        if (this.tracker[i] != 0) {\n          return i;\n        }\n      } // The gap ends with the end of the row.\n\n\n      return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markTilePosition\",\n    value: function _markTilePosition(start, tile) {\n      for (var\n      /** @type {?} */\n      i = 0; i < tile.colspan; i++) {\n        this.tracker[start + i] = tile.rowspan;\n      }\n    }\n  }]);\n\n  return TileCoordinator;\n}();\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\n\n\nvar TilePosition =\n/**\n * @param {?} row\n * @param {?} col\n */\nfunction TilePosition(row, col) {\n  _classCallCheck(this, TilePosition);\n\n  this.row = row;\n  this.col = col;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\n\n\nvar TileStyler = /*#__PURE__*/function () {\n  function TileStyler() {\n    _classCallCheck(this, TileStyler);\n\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n\n\n  _createClass(TileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      this._gutterSize = normalizeUnits(gutterSize);\n      this._rows = tracker.rowCount;\n      this._rowspan = tracker.rowspan;\n      this._cols = cols;\n      this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n\n  }, {\n    key: \"getBaseTileSize\",\n    value: function getBaseTileSize(sizePercent, gutterFraction) {\n      // Take the base size percent (as would be if evenly dividing the size between cells),\n      // and then subtracting the size of one gutter. However, since there are no gutters on the\n      // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n      // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n      // edge evenly among the cells).\n      return \"(\".concat(sizePercent, \"% - (\").concat(this._gutterSize, \" * \").concat(gutterFraction, \"))\");\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTilePosition\",\n    value: function getTilePosition(baseSize, offset) {\n      // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n      // row/column (offset).\n      return offset === 0 ? '0' : calc(\"(\".concat(baseSize, \" + \").concat(this._gutterSize, \") * \").concat(offset));\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTileSize\",\n    value: function getTileSize(baseSize, span) {\n      return \"(\".concat(baseSize, \" * \").concat(span, \") + (\").concat(span - 1, \" * \").concat(this._gutterSize, \")\");\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(tile, rowIndex, colIndex) {\n      // Percent of the available horizontal space that one column takes up.\n      var\n      /** @type {?} */\n      percentWidthPerTile = 100 / this._cols; // Fraction of the vertical gutter size that each column takes up.\n      // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n\n      var\n      /** @type {?} */\n      gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n      this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n      this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n\n  }, {\n    key: \"setColStyles\",\n    value: function setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n      // Base horizontal size of a column.\n      var\n      /** @type {?} */\n      baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth); // The width and horizontal position of each tile is always calculated the same way, but the\n      // height and vertical position depends on the rowMode.\n\n      var\n      /** @type {?} */\n      side = this._direction === 'rtl' ? 'right' : 'left';\n\n      tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n      tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getGutterSpan\",\n    value: function getGutterSpan() {\n      return \"\".concat(this._gutterSize, \" * (\").concat(this._rowspan, \" - 1)\");\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTileSpan\",\n    value: function getTileSpan(tileHeight) {\n      return \"\".concat(this._rowspan, \" * \").concat(this.getTileSize(tileHeight, 1));\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return null;\n    }\n  }]);\n\n  return TileStyler;\n}();\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\n\n\nvar FixedTileStyler = /*#__PURE__*/function (_TileStyler) {\n  _inherits(FixedTileStyler, _TileStyler);\n\n  var _super = _createSuper(FixedTileStyler);\n\n  /**\n   * @param {?} fixedRowHeight\n   */\n  function FixedTileStyler(fixedRowHeight) {\n    var _this2;\n\n    _classCallCheck(this, FixedTileStyler);\n\n    _this2 = _super.call(this);\n    _this2.fixedRowHeight = fixedRowHeight;\n    return _this2;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  _createClass(FixedTileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      _get(_getPrototypeOf(FixedTileStyler.prototype), \"init\", this).call(this, gutterSize, tracker, cols, direction);\n\n      this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex) {\n      tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['height', calc(\"\".concat(this.getTileSpan(this.fixedRowHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['height', null]);\n\n      list._tiles.forEach(function (tile) {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }]);\n\n  return FixedTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\n\n\nvar RatioTileStyler = /*#__PURE__*/function (_TileStyler2) {\n  _inherits(RatioTileStyler, _TileStyler2);\n\n  var _super2 = _createSuper(RatioTileStyler);\n\n  /**\n   * @param {?} value\n   */\n  function RatioTileStyler(value) {\n    var _this3;\n\n    _classCallCheck(this, RatioTileStyler);\n\n    _this3 = _super2.call(this);\n\n    _this3._parseRatio(value);\n\n    return _this3;\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n\n  _createClass(RatioTileStyler, [{\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n      var\n      /** @type {?} */\n      percentHeightPerTile = percentWidth / this.rowHeightRatio;\n      this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n      // a percentage-based value for these properties is applied versus the *width* of the\n      // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n      tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n      tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['paddingBottom', calc(\"\".concat(this.getTileSpan(this.baseTileHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['paddingBottom', null]);\n\n      list._tiles.forEach(function (tile) {\n        tile._setStyle('marginTop', null);\n\n        tile._setStyle('paddingTop', null);\n      });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseRatio\",\n    value: function _parseRatio(value) {\n      var\n      /** @type {?} */\n      ratioParts = value.split(':');\n\n      if (ratioParts.length !== 2) {\n        throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\".concat(value, \"\\\"\"));\n      }\n\n      this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n  }]);\n\n  return RatioTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\n\n\nvar FitTileStyler = /*#__PURE__*/function (_TileStyler3) {\n  _inherits(FitTileStyler, _TileStyler3);\n\n  var _super3 = _createSuper(FitTileStyler);\n\n  function FitTileStyler() {\n    _classCallCheck(this, FitTileStyler);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FitTileStyler, [{\n    key: \"setRowStyles\",\n    value:\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    function setRowStyles(tile, rowIndex) {\n      // Percent of the available vertical space that one row takes up.\n      var\n      /** @type {?} */\n      percentHeightPerTile = 100 / this._rowspan; // Fraction of the horizontal gutter size that each column takes up.\n\n      var\n      /** @type {?} */\n      gutterHeightPerTile = (this._rows - 1) / this._rows; // Base vertical size of a column.\n\n      var\n      /** @type {?} */\n      baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n      tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._tiles.forEach(function (tile) {\n        tile._setStyle('top', null);\n\n        tile._setStyle('height', null);\n      });\n    }\n  }]);\n\n  return FitTileStyler;\n}(TileStyler);\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\n\n\nfunction calc(exp) {\n  return \"calc(\".concat(exp, \")\");\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/px|em|rem/) ? value : value + 'px';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\n\nvar\n/** @type {?} */\nMAT_FIT_MODE = 'fit';\n\nvar MatGridList = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  function MatGridList(_element, _dir) {\n    _classCallCheck(this, MatGridList);\n\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridList, [{\n    key: \"cols\",\n    get: function get() {\n      return this._cols;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._cols = coerceToNumber(value);\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"gutterSize\",\n    get: function get() {\n      return this._gutter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._gutter = coerceToString(value);\n    }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowHeight\",\n    set: function set(value) {\n      var\n      /** @type {?} */\n      newValue = coerceToString(value);\n\n      if (newValue !== this._rowHeight) {\n        this._rowHeight = newValue;\n\n        this._setTileStyler(this._rowHeight);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._checkCols();\n\n      this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkCols\",\n    value: function _checkCols() {\n      if (!this.cols) {\n        throw Error(\"mat-grid-list: must pass in number of columns. \" + \"Example: <mat-grid-list cols=\\\"3\\\">\");\n      }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkRowHeight\",\n    value: function _checkRowHeight() {\n      if (!this._rowHeight) {\n        this._setTileStyler('1:1');\n      }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTileStyler\",\n    value: function _setTileStyler(rowHeight) {\n      if (this._tileStyler) {\n        this._tileStyler.reset(this);\n      }\n\n      if (rowHeight === MAT_FIT_MODE) {\n        this._tileStyler = new FitTileStyler();\n      } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n        this._tileStyler = new RatioTileStyler(rowHeight);\n      } else {\n        this._tileStyler = new FixedTileStyler(rowHeight);\n      }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_layoutTiles\",\n    value: function _layoutTiles() {\n      var _this4 = this;\n\n      var\n      /** @type {?} */\n      tracker = new TileCoordinator(this.cols, this._tiles);\n      var\n      /** @type {?} */\n      direction = this._dir ? this._dir.value : 'ltr';\n\n      this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n      this._tiles.forEach(function (tile, index) {\n        var\n        /** @type {?} */\n        pos = tracker.positions[index];\n\n        _this4._tileStyler.setStyle(tile, pos.row, pos.col);\n      });\n\n      this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setListStyle\",\n    value: function _setListStyle(style) {\n      if (style) {\n        this._element.nativeElement.style[style[0]] = style[1];\n      }\n    }\n  }]);\n\n  return MatGridList;\n}();\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 0);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatGridList.propDecorators = {\n  \"_tiles\": [{\n    type: ContentChildren,\n    args: [MatGridTile]\n  }],\n  \"cols\": [{\n    type: Input\n  }],\n  \"gutterSize\": [{\n    type: Input\n  }],\n  \"rowHeight\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div><ng-content></ng-content></div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n      host: {\n        'class': 'mat-grid-list'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatGridListModule = function MatGridListModule() {\n  _classCallCheck(this, MatGridListModule);\n};\n\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) {\n  return new (t || MatGridListModule)();\n};\n\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatLineModule, MatCommonModule], MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function declarations() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler }; //# sourceMappingURL=grid-list.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/grid-list.js"],"names":["Component","ViewEncapsulation","ElementRef","Input","ContentChildren","Directive","ChangeDetectionStrategy","Optional","NgModule","MatLine","MatLineSetter","MatLineModule","MatCommonModule","Directionality","ɵngcc0","ɵngcc1","_c0","_c1","_c2","_c3","coerceToString","value","coerceToNumber","parseInt","MatGridTile","_element","_rowspan","_colspan","property","nativeElement","style","ɵfac","MatGridTile_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","inputs","rowspan","colspan","exportAs","ngContentSelectors","decls","vars","consts","template","MatGridTile_Template","rf","ctx","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","ctorParameters","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","host","None","OnPush","MatGridTileText","_lineSetter","_lines","MatGridTileText_Factory","contentQueries","MatGridTileText_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatGridTileText_Template","MatGridAvatarCssMatStyler","MatGridAvatarCssMatStyler_Factory","ɵdir","ɵɵdefineDirective","MatGridTileHeaderCssMatStyler","MatGridTileHeaderCssMatStyler_Factory","MatGridTileFooterCssMatStyler","MatGridTileFooterCssMatStyler_Factory","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","Array","fill","length","positions","map","tile","_trackTile","lastRowMax","Math","max","rowCount","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","TileStyler","_rows","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","getTileSpan","getGutterSpan","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_dir","_gutter","newValue","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","reset","init","index","pos","setStyle","getComputedHeight","MatGridList_Factory","MatGridList_ContentQueries","MatGridList_Template","decorators","MatGridListModule","MatGridListModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ViewEncapsulation, ElementRef, Input, ContentChildren, Directive, ChangeDetectionStrategy, Optional, NgModule } from '@angular/core';\nimport { MatLine, MatLineSetter, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nfunction coerceToString(value) {\n    return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nfunction coerceToNumber(value) {\n    return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = coerceToNumber(value); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = coerceToNumber(value); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        this._element.nativeElement.style[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef, },\n];\nMatGridTile.propDecorators = {\n    \"rowspan\": [{ type: Input },],\n    \"colspan\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile'\n                },\n                template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._lineSetter = new MatLineSetter(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef, },\n];\nMatGridTileText.propDecorators = {\n    \"_lines\": [{ type: ContentChildren, args: [MatLine,] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine]\n        }] }); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    /**\n     * @param {?} numColumns\n     * @param {?} tiles\n     */\n    constructor(numColumns, tiles) {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let /** @type {?} */ gapStartIndex = -1;\n        let /** @type {?} */ gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile.\n        } while (gapEndIndex - gapStartIndex < tileCols);\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let /** @type {?} */ side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('top', null);\n            tile._setStyle('height', null);\n        });\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        const /** @type {?} */ ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._tiles.forEach(tile => {\n            tile._setStyle('top', null);\n            tile._setStyle('height', null);\n        });\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst /** @type {?} */ MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) { this._cols = coerceToNumber(value); }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = coerceToString(value); }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        const /** @type {?} */ newValue = coerceToString(value);\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    _layoutTiles() {\n        const /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n        const /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        this._tiles.forEach((tile, index) => {\n            const /** @type {?} */ pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        });\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            this._element.nativeElement.style[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, 0);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [_c3], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Directionality, decorators: [{ type: Optional },] },\n];\nMatGridList.propDecorators = {\n    \"_tiles\": [{ type: ContentChildren, args: [MatGridTile,] },],\n    \"cols\": [{ type: Input },],\n    \"gutterSize\": [{ type: Input },],\n    \"rowHeight\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{ selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div><ng-content></ng-content></div>\",\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n                host: {\n                    'class': 'mat-grid-list'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵfac = function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); };\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler };\n\n//# sourceMappingURL=grid-list.js.map"]},"metadata":{},"sourceType":"module"}
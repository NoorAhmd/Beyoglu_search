{"ast":null,"code":"/**\n * @module ol/css\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_HIDDEN = 'ol-hidden';\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_SELECTABLE = 'ol-selectable';\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSELECTABLE = 'ol-unselectable';\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSUPPORTED = 'ol-unsupported';\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_CONTROL = 'ol-control';\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_COLLAPSED = 'ol-collapsed';\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {Object.<string>} The font families (or null if the input spec is invalid).\n */\n\nexport var getFontFamilies = function () {\n  var style;\n  var cache = {};\n  return function (font) {\n    if (!style) {\n      style = document.createElement('div').style;\n    }\n\n    if (!(font in cache)) {\n      style.font = font;\n      var family = style.fontFamily;\n      style.font = '';\n\n      if (!family) {\n        return null;\n      }\n\n      cache[font] = family.split(/,\\s?/);\n    }\n\n    return cache[font];\n  };\n}(); //# sourceMappingURL=css.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/css.js"],"names":["CLASS_HIDDEN","CLASS_SELECTABLE","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","CLASS_CONTROL","CLASS_COLLAPSED","getFontFamilies","style","cache","font","document","createElement","family","fontFamily","split"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,YAAY,GAAG,WAAnB;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAvB;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,kBAAkB,GAAG,iBAAzB;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAG,gBAAxB;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,YAApB;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,cAAtB;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAI,YAAW;AACvC,MAAIC,KAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,SAAO,UAASC,IAAT,EAAe;AACpB,QAAI,CAACF,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAGG,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BJ,KAAtC;AACD;;AACD,QAAI,EAAEE,IAAI,IAAID,KAAV,CAAJ,EAAsB;AACpBD,MAAAA,KAAK,CAACE,IAAN,GAAaA,IAAb;AACA,UAAIG,MAAM,GAAGL,KAAK,CAACM,UAAnB;AACAN,MAAAA,KAAK,CAACE,IAAN,GAAa,EAAb;;AACA,UAAI,CAACG,MAAL,EAAa;AACX,eAAO,IAAP;AACD;;AACDJ,MAAAA,KAAK,CAACC,IAAD,CAAL,GAAcG,MAAM,CAACE,KAAP,CAAa,MAAb,CAAd;AACD;;AACD,WAAON,KAAK,CAACC,IAAD,CAAZ;AACD,GAdD;AAeD,CAlB4B,EAAtB,C,CAoBP","sourcesContent":["/**\n * @module ol/css\n */\n\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_HIDDEN = 'ol-hidden';\n\n\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_SELECTABLE = 'ol-selectable';\n\n\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_UNSELECTABLE = 'ol-unselectable';\n\n\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_UNSUPPORTED = 'ol-unsupported';\n\n\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_CONTROL = 'ol-control';\n\n\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_COLLAPSED = 'ol-collapsed';\n\n\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} The CSS font property.\n * @return {Object.<string>} The font families (or null if the input spec is invalid).\n */\nexport var getFontFamilies = (function() {\n  var style;\n  var cache = {};\n  return function(font) {\n    if (!style) {\n      style = document.createElement('div').style;\n    }\n    if (!(font in cache)) {\n      style.font = font;\n      var family = style.fontFamily;\n      style.font = '';\n      if (!family) {\n        return null;\n      }\n      cache[font] = family.split(/,\\s?/);\n    }\n    return cache[font];\n  };\n})();\n\n//# sourceMappingURL=css.js.map"]},"metadata":{},"sourceType":"module"}
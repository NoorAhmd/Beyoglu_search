{"ast":null,"code":"import _slicedToArray from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate, __param } from 'tslib';\nimport { Directive, EventEmitter, Inject, ChangeDetectorRef, Optional, Input, Output, ViewChild, ElementRef, ContentChild, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { SELECT_PANEL_MAX_HEIGHT, MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/checkbox';\nimport * as ɵngcc6 from '@angular/material/tooltip';\nimport * as ɵngcc7 from '@angular/material/progress-spinner';\nimport * as ɵngcc8 from '@angular/material/button';\nimport * as ɵngcc9 from '@angular/material/icon';\nimport * as ɵngcc10 from '@angular/material/select';\nimport * as ɵngcc11 from '@angular/material/core';\nimport * as ɵngcc12 from '@angular/material/form-field';\nvar _c0 = [\"searchSelectInput\"];\nvar _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    ɵngcc0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6._emitSelectAllBooleanToParent($event.checked);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-icon\");\n    ɵngcc0.ɵɵtext(1, \"close\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11._reset(true);\n    });\n    ɵngcc0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 0, \"ng-template\", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var _r9 = ɵngcc0.ɵɵreference(3);\n\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.noEntriesFoundLabel, \"\\n\");\n  }\n}\n\nvar _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]]];\n\nvar _c3 = function _c3(a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nvar _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\"];\n\nvar MatSelectSearchClearDirective = function MatSelectSearchClearDirective() {\n  _classCallCheck(this, MatSelectSearchClearDirective);\n};\n\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n  return new (t || MatSelectSearchClearDirective)();\n};\n\nMatSelectSearchClearDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectSearchClearDirective,\n  selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n});\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatSelectSearchComponent_1;\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\nvar MatSelectSearchComponent = MatSelectSearchComponent_1 = /*#__PURE__*/function () {\n  function MatSelectSearchComponent(matSelect, changeDetectorRef, _viewportRuler) {\n    var _this = this;\n\n    var matOption = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var liveAnnouncer = arguments.length > 4 ? arguments[4] : undefined;\n    var matFormField = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    _classCallCheck(this, MatSelectSearchComponent);\n\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.liveAnnouncer = liveAnnouncer;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n\n    this.type = 'text';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n     *  Text that is appended to the currently active item label announced by screen readers,\n     *  informing the user of the current index, value and total options.\n     *  eg: Bank R (Germany) 1 of 6\n    */\n\n    this.indexAndLengthScreenReaderText = ' of ';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n\n    this.toogleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n\n    this.hideClearSearchButton = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n\n    this.toggleAll = new EventEmitter();\n\n    this.onTouched = function (_) {};\n\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(function (_options) {\n      return _options ? _options.changes.pipe(map(function (options) {\n        return options.toArray();\n      }), startWith(_options.toArray())) : of(null);\n    }));\n    this.optionsLength$ = this.optionsList$.pipe(map(function (options) {\n      return options ? options.length : 0;\n    }));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          value = _ref2[0],\n          optionsLength = _ref2[1];\n\n      return _this.noEntriesFoundLabel && value && optionsLength === _this.getOptionsLengthOffset();\n    }));\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n  }\n\n  _createClass(MatSelectSearchComponent, [{\n    key: \"isInsideMatOption\",\n    get: function get() {\n      return !!this.matOption;\n    }\n    /** Current search value */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n\n  }, {\n    key: \"_options\",\n    get: function get() {\n      return this._options$.getValue();\n    },\n    set: function set(_options) {\n      this._options$.next(_options);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      // set custom panel class\n      var panelClass = 'mat-select-search-panel';\n\n      if (this.matSelect.panelClass) {\n        if (Array.isArray(this.matSelect.panelClass)) {\n          this.matSelect.panelClass.push(panelClass);\n        } else if (typeof this.matSelect.panelClass === 'string') {\n          this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n        } else if (typeof this.matSelect.panelClass === 'object') {\n          this.matSelect.panelClass[panelClass] = true;\n        }\n      } else {\n        this.matSelect.panelClass = panelClass;\n      } // set custom mat-option class if the component was placed inside a mat-option\n\n\n      if (this.matOption) {\n        this.matOption.disabled = true;\n\n        this.matOption._getHostElement().classList.add('contains-mat-select-search');\n      } else {\n        console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n      } // when the select dropdown panel is opened or closed\n\n\n      this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(function (opened) {\n        if (opened) {\n          _this2.updateInputWidth(); // focus the search field when opening\n\n\n          if (!_this2.disableInitialFocus) {\n            _this2._focus();\n          }\n        } else {\n          // clear it when closing\n          if (_this2.clearSearchInput) {\n            _this2._reset();\n          }\n        }\n      }); // set the first item active after the options changed\n\n      this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        if (_this2.matSelect._keyManager) {\n          _this2.matSelect._keyManager.change.pipe(takeUntil(_this2._onDestroy)).subscribe(function () {\n            return _this2.adjustScrollTopToFitActiveOptionIntoView();\n          });\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        _this2._options = _this2.matSelect.options; // Closure variable for tracking the most recent first option.\n        // In order to avoid avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n\n        var previousFirstOption = _this2._options.toArray()[_this2.getOptionsLengthOffset()];\n\n        _this2._options.changes.pipe(takeUntil(_this2._onDestroy)).subscribe(function () {\n          // avoid \"expression has been changed\" error\n          setTimeout(function () {\n            // Convert the QueryList to an array\n            var options = _this2._options.toArray(); // The true first item is offset by 1\n\n\n            var currentFirstOption = options[_this2.getOptionsLengthOffset()];\n\n            var keyManager = _this2.matSelect._keyManager;\n\n            if (keyManager && _this2.matSelect.panelOpen) {\n              // set first item active and input width\n              // Check to see if the first option in these changes is different from the previous.\n              var firstOptionIsChanged = !_this2.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n              // Indiciates we should set it as active and scroll to the top.\n\n              if (firstOptionIsChanged || !keyManager.activeItem || !options.find(function (option) {\n                return _this2.matSelect.compareWith(option, keyManager.activeItem);\n              })) {\n                keyManager.setFirstItemActive();\n              } // wait for panel width changes\n\n\n              setTimeout(function () {\n                _this2.updateInputWidth();\n              });\n\n              if (!_this2.disableScrollToActiveOnOptionsChanged) {\n                _this2.adjustScrollTopToFitActiveOptionIntoView();\n              }\n            } // Update our reference\n\n\n            previousFirstOption = currentFirstOption;\n          });\n        });\n      }); // add or remove css class depending on whether to show the no entries found message\n      // note: this is hacky\n\n      this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(function (showNoEntriesFound) {\n        // set no entries found class on mat option\n        if (_this2.matOption) {\n          if (showNoEntriesFound) {\n            _this2.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n          } else {\n            _this2.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n          }\n        }\n      }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        if (_this2.matSelect.panelOpen) {\n          _this2.updateInputWidth();\n        }\n      });\n\n      this.initMultipleHandling();\n      this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(function () {\n        // update view when available options change\n        _this2.changeDetectorRef.markForCheck();\n      });\n    }\n  }, {\n    key: \"_emitSelectAllBooleanToParent\",\n    value: function _emitSelectAllBooleanToParent(state) {\n      this.toggleAll.emit(state);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n    }\n  }, {\n    key: \"_isToggleAllCheckboxVisible\",\n    value: function _isToggleAllCheckboxVisible() {\n      return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var _this3 = this;\n\n      // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n      if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n        event.stopPropagation();\n      }\n\n      if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n        // Regain focus after multiselect, so we can further type\n        setTimeout(function () {\n          return _this3._focus();\n        });\n      } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n      if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n        this._reset(true);\n\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n\n  }, {\n    key: \"_handleKeyup\",\n    value: function _handleKeyup(event) {\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        var ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n        var index = this._options.toArray().findIndex(function (item) {\n          return item.id === ariaActiveDescendantId;\n        });\n\n        if (index !== -1) {\n          var activeDescendant = this._options.toArray()[index];\n\n          this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());\n        }\n      }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n\n  }, {\n    key: \"getAriaIndex\",\n    value: function getAriaIndex(optionIndex) {\n      if (this.getOptionsLengthOffset() === 0) {\n        return optionIndex + 1;\n      }\n\n      return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n\n  }, {\n    key: \"getAriaLength\",\n    value: function getAriaLength() {\n      return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this._lastExternalInputValue = value;\n\n      this._formControl.setValue(value);\n\n      this.changeDetectorRef.markForCheck();\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.onTouched();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      var _this4 = this;\n\n      this._formControl.valueChanges.pipe(filter(function (value) {\n        return value !== _this4._lastExternalInputValue;\n      }), tap(function () {\n        return _this4._lastExternalInputValue = undefined;\n      }), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      if (!this.searchSelectInput || !this.matSelect.panel) {\n        return;\n      } // save and restore scrollTop of panel, since it will be reset by focus()\n      // note: this is hacky\n\n\n      var panel = this.matSelect.panel.nativeElement;\n      var scrollTop = panel.scrollTop; // focus\n\n      this.searchSelectInput.nativeElement.focus();\n      panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset(focus) {\n      this._formControl.setValue('');\n\n      if (focus) {\n        this._focus();\n      }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n\n  }, {\n    key: \"initMultipleHandling\",\n    value: function initMultipleHandling() {\n      var _this5 = this;\n\n      if (!this.matSelect.ngControl) {\n        if (this.matSelect.multiple) {\n          // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n          // is necessary to properly work in multi-selection mode.\n          console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n        }\n\n        return;\n      } // if <mat-select [multiple]=\"true\">\n      // store previously selected values and restore them when they are deselected\n      // because the option is not available while we are currently filtering\n\n\n      this.previousSelectedValues = this.matSelect.ngControl.value;\n      this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(function (values) {\n        var restoreSelectedValues = false;\n\n        if (_this5.matSelect.multiple) {\n          if (_this5._formControl.value && _this5._formControl.value.length && _this5.previousSelectedValues && Array.isArray(_this5.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n\n            var optionValues = _this5.matSelect.options.map(function (option) {\n              return option.value;\n            });\n\n            _this5.previousSelectedValues.forEach(function (previousValue) {\n              if (!values.some(function (v) {\n                return _this5.matSelect.compareWith(v, previousValue);\n              }) && !optionValues.some(function (v) {\n                return _this5.matSelect.compareWith(v, previousValue);\n              })) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n        }\n\n        _this5.previousSelectedValues = values;\n\n        if (restoreSelectedValues) {\n          _this5.matSelect._onChange(values);\n        }\n      });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n\n  }, {\n    key: \"adjustScrollTopToFitActiveOptionIntoView\",\n    value: function adjustScrollTopToFitActiveOptionIntoView() {\n      if (this.matSelect.panel && this.matSelect.options.length > 0) {\n        var matOptionHeight = this.getMatOptionHeight();\n        var activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n\n        var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups); // If the component is in a MatOption, the activeItemIndex will be offset by one.\n\n\n        var indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n        var currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n        var searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n        var amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n        var indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n        if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n          this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n        } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n          this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n        }\n      }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n\n  }, {\n    key: \"updateInputWidth\",\n    value: function updateInputWidth() {\n      if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n        return;\n      }\n\n      var element = this.innerSelectSearch.nativeElement;\n      var panelElement;\n\n      while (element = element.parentElement) {\n        if (element.classList.contains('mat-select-panel')) {\n          panelElement = element;\n          break;\n        }\n      }\n\n      if (panelElement) {\n        this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n      }\n    }\n  }, {\n    key: \"getMatOptionHeight\",\n    value: function getMatOptionHeight() {\n      if (this.matSelect.options.length > 0) {\n        return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n      }\n\n      return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n\n  }, {\n    key: \"getOptionsLengthOffset\",\n    value: function getOptionsLengthOffset() {\n      if (this.matOption) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }]);\n\n  return MatSelectSearchComponent;\n}();\n\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n  return new (t || MatSelectSearchComponent)(ɵngcc0.ɵɵdirectiveInject(MatSelect), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MatOption, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MatFormField, 8));\n};\n\nMatSelectSearchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 3, ElementRef);\n      ɵngcc0.ɵɵviewQuery(_c1, 3, ElementRef);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return MatSelectSearchComponent_1;\n    }),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 11,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [1, \"mat-select-search-no-entries-found\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelement(0, \"input\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n      ɵngcc0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      ɵngcc0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      ɵngcc0.ɵɵprojection(8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 2, 1, \"div\", 8);\n      ɵngcc0.ɵɵpipe(10, \"async\");\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.searching);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  directives: [ɵngcc3.NgClass, ɵngcc3.NgIf, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc5.MatCheckbox, ɵngcc6.MatTooltip, ɵngcc7.MatSpinner, ɵngcc8.MatButton, ɵngcc9.MatIcon],\n  pipes: [ɵngcc3.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n  changeDetection: 0\n});\n\nMatSelectSearchComponent.ctorParameters = function () {\n  return [{\n    type: MatSelect,\n    decorators: [{\n      type: Inject,\n      args: [MatSelect]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ViewportRuler\n  }, {\n    type: MatOption,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MatOption]\n    }]\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MatFormField]\n    }]\n  }];\n};\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"placeholderLabel\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"type\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"noEntriesFoundLabel\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"indexAndLengthScreenReaderText\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"clearSearchInput\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"searching\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"disableInitialFocus\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"enableClearOnEscapePressed\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"preventHomeEndKeyPropagation\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"disableScrollToActiveOnOptionsChanged\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"ariaLabel\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"showToggleAllCheckbox\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toggleAllCheckboxChecked\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toggleAllCheckboxIndeterminate\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toggleAllCheckboxTooltipMessage\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"toogleAllCheckboxTooltipPosition\", void 0);\n\n__decorate([Input()], MatSelectSearchComponent.prototype, \"hideClearSearchButton\", void 0);\n\n__decorate([Output()], MatSelectSearchComponent.prototype, \"toggleAll\", void 0);\n\n__decorate([ViewChild('searchSelectInput', {\n  read: ElementRef,\n  static: true\n})], MatSelectSearchComponent.prototype, \"searchSelectInput\", void 0);\n\n__decorate([ViewChild('innerSelectSearch', {\n  read: ElementRef,\n  static: true\n})], MatSelectSearchComponent.prototype, \"innerSelectSearch\", void 0);\n\n__decorate([ContentChild(MatSelectSearchClearDirective, {\n  static: false\n})], MatSelectSearchComponent.prototype, \"clearIcon\", void 0);\n\n__decorate([HostBinding('class.mat-select-search-inside-mat-option')], MatSelectSearchComponent.prototype, \"isInsideMatOption\", null);\n\nMatSelectSearchComponent = MatSelectSearchComponent_1 = __decorate([__param(0, Inject(MatSelect)), __param(3, Optional()), __param(3, Inject(MatOption)), __param(5, Optional()), __param(5, Inject(MatFormField))], MatSelectSearchComponent);\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar MatSelectSearchVersion = '3.2.0';\n\nvar NgxMatSelectSearchModule = function NgxMatSelectSearchModule() {\n  _classCallCheck(this, NgxMatSelectSearchModule);\n};\n\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n  return new (t || NgxMatSelectSearchModule)();\n};\n\nNgxMatSelectSearchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxMatSelectSearchModule\n});\nNgxMatSelectSearchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectSearchClear]'\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-select-search',\n      template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon>close</mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  {{noEntriesFoundLabel}}\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return MatSelectSearchComponent_1;\n        }),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc10.MatSelect,\n      decorators: [{\n        type: Inject,\n        args: [MatSelect]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc11.MatOption,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatOption]\n      }]\n    }, {\n      type: ɵngcc2.LiveAnnouncer\n    }, {\n      type: ɵngcc12.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }];\n  }, {\n    placeholderLabel: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    noEntriesFoundLabel: [{\n      type: Input\n    }],\n    indexAndLengthScreenReaderText: [{\n      type: Input\n    }],\n    clearSearchInput: [{\n      type: Input\n    }],\n    searching: [{\n      type: Input\n    }],\n    disableInitialFocus: [{\n      type: Input\n    }],\n    enableClearOnEscapePressed: [{\n      type: Input\n    }],\n    preventHomeEndKeyPropagation: [{\n      type: Input\n    }],\n    disableScrollToActiveOnOptionsChanged: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    showToggleAllCheckbox: [{\n      type: Input\n    }],\n    toggleAllCheckboxChecked: [{\n      type: Input\n    }],\n    toggleAllCheckboxIndeterminate: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipMessage: [{\n      type: Input\n    }],\n    toogleAllCheckboxTooltipPosition: [{\n      type: Input\n    }],\n    hideClearSearchButton: [{\n      type: Input\n    }],\n    toggleAll: [{\n      type: Output\n    }],\n    isInsideMatOption: [{\n      type: HostBinding,\n      args: ['class.mat-select-search-inside-mat-option']\n    }],\n    searchSelectInput: [{\n      type: ViewChild,\n      args: ['searchSelectInput', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    innerSelectSearch: [{\n      type: ViewChild,\n      args: ['innerSelectSearch', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    clearIcon: [{\n      type: ContentChild,\n      args: [MatSelectSearchClearDirective, {\n        static: false\n      }]\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMatSelectSearchModule, {\n    declarations: function declarations() {\n      return [MatSelectSearchComponent, MatSelectSearchClearDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule];\n    },\n    exports: function exports() {\n      return [MatSelectSearchComponent, MatSelectSearchClearDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule],\n      declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective],\n      exports: [MatSelectSearchComponent, MatSelectSearchClearDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa }; //# sourceMappingURL=ngx-mat-select-search.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ngx-mat-select-search/__ivy_ngcc__/fesm2015/ngx-mat-select-search.js"],"names":["__decorate","__param","Directive","EventEmitter","Inject","ChangeDetectorRef","Optional","Input","Output","ViewChild","ElementRef","ContentChild","HostBinding","Component","forwardRef","ChangeDetectionStrategy","NgModule","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","_countGroupLabelsBeforeOption","MatOption","SELECT_PANEL_MAX_HEIGHT","MatSelect","MatFormField","A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","ViewportRuler","LiveAnnouncer","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","filter","tap","MatButtonModule","MatCheckboxModule","MatIconModule","MatProgressSpinnerModule","MatTooltipModule","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","ɵngcc9","ɵngcc10","ɵngcc11","ɵngcc12","_c0","_c1","MatSelectSearchComponent_mat_checkbox_3_Template","rf","ctx","_r7","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener","$event","ɵɵrestoreView","ctx_r6","ɵɵnextContext","_emitSelectAllBooleanToParent","checked","ɵɵelementEnd","ctx_r1","ɵɵproperty","matFormField","color","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toogleAllCheckboxTooltipPosition","MatSelectSearchComponent_mat_spinner_6_Template","ɵɵelement","MatSelectSearchComponent_button_7_ng_content_1_Template","ɵɵprojection","MatSelectSearchComponent_button_7_ng_template_2_Template","ɵɵtext","MatSelectSearchComponent_button_7_Template","_r12","MatSelectSearchComponent_button_7_Template_button_click_0_listener","ctx_r11","_reset","ɵɵtemplate","ɵɵtemplateRefExtractor","_r9","ɵɵreference","ctx_r4","ɵɵadvance","clearIcon","MatSelectSearchComponent_div_9_Template","ctx_r5","ɵɵtextInterpolate1","noEntriesFoundLabel","_c2","_c3","a0","a1","_c4","MatSelectSearchClearDirective","ɵfac","MatSelectSearchClearDirective_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","MatSelectSearchComponent_1","MatSelectSearchComponent","matSelect","changeDetectorRef","_viewportRuler","matOption","liveAnnouncer","placeholderLabel","indexAndLengthScreenReaderText","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","hideClearSearchButton","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","getValue","next","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_keyManager","change","adjustScrollTopToFitActiveOptionIntoView","log","previousFirstOption","setTimeout","currentFirstOption","keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","initMultipleHandling","markForCheck","state","emit","complete","multiple","event","key","keyCode","stopPropagation","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","activeDescendant","announce","viewValue","getAriaIndex","getAriaLength","optionIndex","_lastExternalInputValue","setValue","fn","undefined","searchSelectInput","panel","nativeElement","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","optionValues","forEach","previousValue","some","v","_onChange","matOptionHeight","getMatOptionHeight","activeOptionIndex","activeItemIndex","labelCount","optionGroups","indexOfOptionToFitIntoView","currentScrollTop","searchInputHeight","innerSelectSearch","offsetHeight","amountOfVisibleOptions","Math","floor","indexOfFirstVisibleOption","round","element","panelElement","parentElement","contains","style","width","clientWidth","first","getBoundingClientRect","height","MatSelectSearchComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelectSearchComponent_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelectSearchComponent_Query","ɵɵviewQuery","hostVars","hostBindings","MatSelectSearchComponent_HostBindings","ɵɵclassProp","isInsideMatOption","inputs","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ngContentSelectors","decls","vars","consts","template","MatSelectSearchComponent_Template","ɵɵprojectionDef","MatSelectSearchComponent_Template_input_keydown_4_listener","_handleKeydown","MatSelectSearchComponent_Template_input_keyup_4_listener","_handleKeyup","MatSelectSearchComponent_Template_input_blur_4_listener","onBlur","ɵɵpipe","ɵɵpureFunction2","_isToggleAllCheckboxVisible","ɵɵattribute","ɵɵpipeBind1","directives","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","MatCheckbox","MatTooltip","MatSpinner","MatButton","MatIcon","pipes","AsyncPipe","styles","changeDetection","ctorParameters","decorators","args","prototype","read","static","MatSelectSearchVersion","NgxMatSelectSearchModule","NgxMatSelectSearchModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngDevMode","ɵsetClassMetadata","selector","providers","OnPush","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵa"],"mappings":"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V,GAAP;AAAoD,CAA7I;;AACAA,6BAA6B,CAACI,IAA9B,GAAqCrE,MAAM,CAACsE,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEN,6BAAR;AAAuCO,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,yBAAL,EAAgC,EAAhC,CAAD;AAAlD,CAAzB,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,0BAAJ;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,wBAAwB,GAAGD,0BAA0B;AACrD,oCAAYE,SAAZ,EAAuBC,iBAAvB,EAA0CC,cAA1C,EAAgH;AAAA;;AAAA,QAAtDC,SAAsD,uEAA1C,IAA0C;AAAA,QAApCC,aAAoC;AAAA,QAArB/C,YAAqB,uEAAN,IAAM;;AAAA;;AAC5G,SAAK2C,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAK/C,YAAL,GAAoBA,YAApB;AACA;;AACA,SAAKgD,gBAAL,GAAwB,OAAxB;AACA;;AACA,SAAKT,IAAL,GAAY,MAAZ;AACA;;AACA,SAAKZ,mBAAL,GAA2B,yBAA3B;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKsB,8BAAL,GAAsC,MAAtC;AACA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;AACA;;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA;;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA;;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACA;AACR;AACA;AACA;;AACQ,SAAKC,4BAAL,GAAoC,KAApC;AACA;;AACA,SAAKC,qCAAL,GAA6C,KAA7C;AACA;;AACA,SAAKC,SAAL,GAAiB,iBAAjB;AACA;;AACA,SAAKC,qBAAL,GAA6B,KAA7B;AACA;;AACA,SAAKvD,wBAAL,GAAgC,KAAhC;AACA;;AACA,SAAKC,8BAAL,GAAsC,KAAtC;AACA;;AACA,SAAKC,+BAAL,GAAuC,EAAvC;AACA;;AACA,SAAKC,gCAAL,GAAwC,OAAxC;AACA;;AACA,SAAKqD,qBAAL,GAA6B,KAA7B;AACA;;AACA,SAAKC,SAAL,GAAiB,IAAIhJ,YAAJ,EAAjB;;AACA,SAAKiJ,SAAL,GAAiB,UAACC,CAAD,EAAO,CAAG,CAA3B;;AACA,SAAKC,SAAL,GAAiB,IAAIhH,eAAJ,CAAoB,IAApB,CAAjB;AACA,SAAKiH,YAAL,GAAoB,KAAKD,SAAL,CAAeE,IAAf,CAAoB9G,SAAS,CAAC,UAAA+G,QAAQ;AAAA,aAAIA,QAAQ,GAClEA,QAAQ,CAACC,OAAT,CAAiBF,IAAjB,CAAsB7G,GAAG,CAAC,UAAAgH,OAAO;AAAA,eAAIA,OAAO,CAACC,OAAR,EAAJ;AAAA,OAAR,CAAzB,EAAyDhH,SAAS,CAAC6G,QAAQ,CAACG,OAAT,EAAD,CAAlE,CADkE,GACwBrH,EAAE,CAAC,IAAD,CADtC;AAAA,KAAT,CAA7B,CAApB;AAEA,SAAKsH,cAAL,GAAsB,KAAKN,YAAL,CAAkBC,IAAlB,CAAuB7G,GAAG,CAAC,UAAAgH,OAAO;AAAA,aAAIA,OAAO,GAAGA,OAAO,CAACG,MAAX,GAAoB,CAA/B;AAAA,KAAR,CAA1B,CAAtB;AACA,SAAKC,YAAL,GAAoB,IAAI9I,WAAJ,CAAgB,EAAhB,CAApB;AACA;;AACA,SAAK+I,oBAAL,GAA4BxH,aAAa,CAAC,CACtC,KAAKuH,YAAL,CAAkBE,YADoB,EAEtC,KAAKJ,cAFiC,CAAD,CAAb,CAGzBL,IAHyB,CAGpB7G,GAAG,CAAC;AAAA;AAAA,UAAEuH,KAAF;AAAA,UAASC,aAAT;;AAAA,aAA4B,KAAI,CAAChD,mBAAL,IAA4B+C,KAA5B,IACjCC,aAAa,KAAK,KAAI,CAACC,sBAAL,EADb;AAAA,KAAD,CAHiB,CAA5B;AAKA;;AACA,SAAKC,UAAL,GAAkB,IAAI5H,OAAJ,EAAlB;AACH;;AApEoD;AAAA;AAAA,SAqErD,eAAwB;AACpB,aAAO,CAAC,CAAC,KAAK6F,SAAd;AACH;AACD;;AAxEqD;AAAA;AAAA,SAyErD,eAAY;AACR,aAAO,KAAKyB,YAAL,CAAkBG,KAAzB;AACH;AACD;;AA5EqD;AAAA;AAAA,SAgFrD,eAAe;AACX,aAAO,KAAKZ,SAAL,CAAegB,QAAf,EAAP;AACH,KAlFoD;AAAA,SA6ErD,aAAab,QAAb,EAAuB;AACnB,WAAKH,SAAL,CAAeiB,IAAf,CAAoBd,QAApB;AACH;AA/EoD;AAAA;AAAA,WAmFrD,oBAAW;AAAA;;AACP;AACA,UAAMe,UAAU,GAAG,yBAAnB;;AACA,UAAI,KAAKrC,SAAL,CAAeqC,UAAnB,EAA+B;AAC3B,YAAIC,KAAK,CAACC,OAAN,CAAc,KAAKvC,SAAL,CAAeqC,UAA7B,CAAJ,EAA8C;AAC1C,eAAKrC,SAAL,CAAeqC,UAAf,CAA0BG,IAA1B,CAA+BH,UAA/B;AACH,SAFD,MAGK,IAAI,OAAO,KAAKrC,SAAL,CAAeqC,UAAtB,KAAqC,QAAzC,EAAmD;AACpD,eAAKrC,SAAL,CAAeqC,UAAf,GAA4B,CAAC,KAAKrC,SAAL,CAAeqC,UAAhB,EAA4BA,UAA5B,CAA5B;AACH,SAFI,MAGA,IAAI,OAAO,KAAKrC,SAAL,CAAeqC,UAAtB,KAAqC,QAAzC,EAAmD;AACpD,eAAKrC,SAAL,CAAeqC,UAAf,CAA0BA,UAA1B,IAAwC,IAAxC;AACH;AACJ,OAVD,MAWK;AACD,aAAKrC,SAAL,CAAeqC,UAAf,GAA4BA,UAA5B;AACH,OAhBM,CAiBP;;;AACA,UAAI,KAAKlC,SAAT,EAAoB;AAChB,aAAKA,SAAL,CAAesC,QAAf,GAA0B,IAA1B;;AACA,aAAKtC,SAAL,CAAeuC,eAAf,GAAiCC,SAAjC,CAA2CC,GAA3C,CAA+C,4BAA/C;AACH,OAHD,MAIK;AACDC,QAAAA,OAAO,CAACC,KAAR,CAAc,sEAAd;AACH,OAxBM,CAyBP;;;AACA,WAAK9C,SAAL,CAAe+C,YAAf,CACK1B,IADL,CACU3G,KAAK,CAAC,CAAD,CADf,EACoBC,SAAS,CAAC,KAAKuH,UAAN,CAD7B,EAEKc,SAFL,CAEe,UAACC,MAAD,EAAY;AACvB,YAAIA,MAAJ,EAAY;AACR,UAAA,MAAI,CAACC,gBAAL,GADQ,CAER;;;AACA,cAAI,CAAC,MAAI,CAACzC,mBAAV,EAA+B;AAC3B,YAAA,MAAI,CAAC0C,MAAL;AACH;AACJ,SAND,MAOK;AACD;AACA,cAAI,MAAI,CAAC5C,gBAAT,EAA2B;AACvB,YAAA,MAAI,CAAClC,MAAL;AACH;AACJ;AACJ,OAhBD,EA1BO,CA2CP;;AACA,WAAK2B,SAAL,CAAe+C,YAAf,CACK1B,IADL,CACUzG,IAAI,CAAC,CAAD,CADd,EAEKyG,IAFL,CAEU1G,SAAS,CAAC,KAAKuH,UAAN,CAFnB,EAGKc,SAHL,CAGe,YAAM;AACjB,YAAI,MAAI,CAAChD,SAAL,CAAeoD,WAAnB,EAAgC;AAC5B,UAAA,MAAI,CAACpD,SAAL,CAAeoD,WAAf,CAA2BC,MAA3B,CAAkChC,IAAlC,CAAuC1G,SAAS,CAAC,MAAI,CAACuH,UAAN,CAAhD,EACKc,SADL,CACe;AAAA,mBAAM,MAAI,CAACM,wCAAL,EAAN;AAAA,WADf;AAEH,SAHD,MAIK;AACDT,UAAAA,OAAO,CAACU,GAAR,CAAY,kCAAZ;AACH;;AACD,QAAA,MAAI,CAACjC,QAAL,GAAgB,MAAI,CAACtB,SAAL,CAAewB,OAA/B,CARiB,CASjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAIgC,mBAAmB,GAAG,MAAI,CAAClC,QAAL,CAAcG,OAAd,GAAwB,MAAI,CAACQ,sBAAL,EAAxB,CAA1B;;AACA,QAAA,MAAI,CAACX,QAAL,CAAcC,OAAd,CACKF,IADL,CACU1G,SAAS,CAAC,MAAI,CAACuH,UAAN,CADnB,EAEKc,SAFL,CAEe,YAAM;AACjB;AACAS,UAAAA,UAAU,CAAC,YAAM;AACb;AACA,gBAAMjC,OAAO,GAAG,MAAI,CAACF,QAAL,CAAcG,OAAd,EAAhB,CAFa,CAGb;;;AACA,gBAAMiC,kBAAkB,GAAGlC,OAAO,CAAC,MAAI,CAACS,sBAAL,EAAD,CAAlC;;AACA,gBAAM0B,UAAU,GAAG,MAAI,CAAC3D,SAAL,CAAeoD,WAAlC;;AACA,gBAAIO,UAAU,IAAI,MAAI,CAAC3D,SAAL,CAAe4D,SAAjC,EAA4C;AACxC;AACA;AACA,kBAAMC,oBAAoB,GAAG,CAAC,MAAI,CAAC7D,SAAL,CAAe8D,WAAf,CAA2BN,mBAA3B,EAAgDE,kBAAhD,CAA9B,CAHwC,CAIxC;AACA;;AACA,kBAAIG,oBAAoB,IACjB,CAACF,UAAU,CAACI,UADf,IAEG,CAACvC,OAAO,CAACwC,IAAR,CAAa,UAAAC,MAAM;AAAA,uBAAI,MAAI,CAACjE,SAAL,CAAe8D,WAAf,CAA2BG,MAA3B,EAAmCN,UAAU,CAACI,UAA9C,CAAJ;AAAA,eAAnB,CAFR,EAE2F;AACvFJ,gBAAAA,UAAU,CAACO,kBAAX;AACH,eAVuC,CAWxC;;;AACAT,cAAAA,UAAU,CAAC,YAAM;AACb,gBAAA,MAAI,CAACP,gBAAL;AACH,eAFS,CAAV;;AAGA,kBAAI,CAAC,MAAI,CAACtC,qCAAV,EAAiD;AAC7C,gBAAA,MAAI,CAAC0C,wCAAL;AACH;AACJ,aAxBY,CAyBb;;;AACAE,YAAAA,mBAAmB,GAAGE,kBAAtB;AACH,WA3BS,CAAV;AA4BH,SAhCD;AAiCH,OAxDD,EA5CO,CAqGP;AACA;;AACA,WAAK7B,oBAAL,CAA0BR,IAA1B,CAA+B1G,SAAS,CAAC,KAAKuH,UAAN,CAAxC,EAA2Dc,SAA3D,CAAqE,UAAAmB,kBAAkB,EAAI;AACvF;AACA,YAAI,MAAI,CAAChE,SAAT,EAAoB;AAChB,cAAIgE,kBAAJ,EAAwB;AACpB,YAAA,MAAI,CAAChE,SAAL,CAAeuC,eAAf,GAAiCC,SAAjC,CAA2CC,GAA3C,CAA+C,oCAA/C;AACH,WAFD,MAGK;AACD,YAAA,MAAI,CAACzC,SAAL,CAAeuC,eAAf,GAAiCC,SAAjC,CAA2CyB,MAA3C,CAAkD,oCAAlD;AACH;AACJ;AACJ,OAVD,EAvGO,CAkHP;;;AACA,WAAKlE,cAAL,CAAoBmD,MAApB,GACKhC,IADL,CACU1G,SAAS,CAAC,KAAKuH,UAAN,CADnB,EAEKc,SAFL,CAEe,YAAM;AACjB,YAAI,MAAI,CAAChD,SAAL,CAAe4D,SAAnB,EAA8B;AAC1B,UAAA,MAAI,CAACV,gBAAL;AACH;AACJ,OAND;;AAOA,WAAKmB,oBAAL;AACA,WAAKjD,YAAL,CAAkBC,IAAlB,CAAuB1G,SAAS,CAAC,KAAKuH,UAAN,CAAhC,EAAmDc,SAAnD,CAA6D,YAAM;AAC/D;AACA,QAAA,MAAI,CAAC/C,iBAAL,CAAuBqE,YAAvB;AACH,OAHD;AAIH;AAlNoD;AAAA;AAAA,WAmNrD,uCAA8BC,KAA9B,EAAqC;AACjC,WAAKvD,SAAL,CAAewD,IAAf,CAAoBD,KAApB;AACH;AArNoD;AAAA;AAAA,WAsNrD,uBAAc;AACV,WAAKrC,UAAL,CAAgBE,IAAhB;;AACA,WAAKF,UAAL,CAAgBuC,QAAhB;AACH;AAzNoD;AAAA;AAAA,WA0NrD,uCAA8B;AAC1B,aAAO,KAAKzE,SAAL,CAAe0E,QAAf,IAA2B,KAAK5D,qBAAvC;AACH;AACD;AACJ;AACA;AACA;AACA;;AAjOyD;AAAA;AAAA,WAkOrD,wBAAe6D,KAAf,EAAsB;AAAA;;AAClB;AACA,UAAKA,KAAK,CAACC,GAAN,IAAaD,KAAK,CAACC,GAAN,CAAUjD,MAAV,KAAqB,CAAnC,IACCgD,KAAK,CAACE,OAAN,IAAiBvL,CAAjB,IAAsBqL,KAAK,CAACE,OAAN,IAAiBtL,CADxC,IAECoL,KAAK,CAACE,OAAN,IAAiBrL,IAAjB,IAAyBmL,KAAK,CAACE,OAAN,IAAiBpL,IAF3C,IAGCkL,KAAK,CAACE,OAAN,KAAkBnL,KAHnB,IAII,KAAKiH,4BAAL,KAAsCgE,KAAK,CAACE,OAAN,KAAkBlL,IAAlB,IAA0BgL,KAAK,CAACE,OAAN,KAAkBjL,GAAlF,CAJR,EAIiG;AAC7F+K,QAAAA,KAAK,CAACG,eAAN;AACH;;AACD,UAAI,KAAK9E,SAAL,CAAe0E,QAAf,IAA2BC,KAAK,CAACC,GAAjC,IAAwCD,KAAK,CAACE,OAAN,KAAkBhL,KAA9D,EAAqE;AACjE;AACA4J,QAAAA,UAAU,CAAC;AAAA,iBAAM,MAAI,CAACN,MAAL,EAAN;AAAA,SAAD,CAAV;AACH,OAZiB,CAalB;;;AACA,UAAI,KAAKzC,0BAAL,KAAoC,IAApC,IAA4CiE,KAAK,CAACE,OAAN,KAAkB/K,MAA9D,IAAwE,KAAKiI,KAAjF,EAAwF;AACpF,aAAK1D,MAAL,CAAY,IAAZ;;AACAsG,QAAAA,KAAK,CAACG,eAAN;AACH;AACJ;AACD;AACJ;AACA;AACA;;AAxPyD;AAAA;AAAA,WAyPrD,sBAAaH,KAAb,EAAoB;AAChB,UAAIA,KAAK,CAACE,OAAN,KAAkB9K,QAAlB,IAA8B4K,KAAK,CAACE,OAAN,KAAkB7K,UAApD,EAAgE;AAC5D,YAAM+K,sBAAsB,GAAG,KAAK/E,SAAL,CAAegF,wBAAf,EAA/B;;AACA,YAAMC,KAAK,GAAG,KAAK3D,QAAL,CAAcG,OAAd,GAAwByD,SAAxB,CAAkC,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACC,EAAL,KAAYL,sBAAhB;AAAA,SAAtC,CAAd;;AACA,YAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,cAAMI,gBAAgB,GAAG,KAAK/D,QAAL,CAAcG,OAAd,GAAwBwD,KAAxB,CAAzB;;AACA,eAAK7E,aAAL,CAAmBkF,QAAnB,CAA4BD,gBAAgB,CAACE,SAAjB,GAA6B,GAA7B,GACtB,KAAKC,YAAL,CAAkBP,KAAlB,CADsB,GAEtB,KAAK3E,8BAFiB,GAGtB,KAAKmF,aAAL,EAHN;AAIH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;AA3QyD;AAAA;AAAA,WA4QrD,sBAAaC,WAAb,EAA0B;AACtB,UAAI,KAAKzD,sBAAL,OAAkC,CAAtC,EAAyC;AACrC,eAAOyD,WAAW,GAAG,CAArB;AACH;;AACD,aAAOA,WAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;AAvRyD;AAAA;AAAA,WAwRrD,yBAAgB;AACZ,aAAO,KAAKpE,QAAL,CAAcG,OAAd,GAAwBE,MAAxB,GAAiC,KAAKM,sBAAL,EAAxC;AACH;AA1RoD;AAAA;AAAA,WA2RrD,oBAAWF,KAAX,EAAkB;AACd,WAAK4D,uBAAL,GAA+B5D,KAA/B;;AACA,WAAKH,YAAL,CAAkBgE,QAAlB,CAA2B7D,KAA3B;;AACA,WAAK9B,iBAAL,CAAuBqE,YAAvB;AACH;AA/RoD;AAAA;AAAA,WAgSrD,kBAAS;AACL,WAAKrD,SAAL;AACH;AAlSoD;AAAA;AAAA,WAmSrD,0BAAiB4E,EAAjB,EAAqB;AAAA;;AACjB,WAAKjE,YAAL,CAAkBE,YAAlB,CAA+BT,IAA/B,CAAoCxG,MAAM,CAAC,UAAAkH,KAAK;AAAA,eAAIA,KAAK,KAAK,MAAI,CAAC4D,uBAAnB;AAAA,OAAN,CAA1C,EAA6F7K,GAAG,CAAC;AAAA,eAAM,MAAI,CAAC6K,uBAAL,GAA+BG,SAArC;AAAA,OAAD,CAAhG,EAAkJnL,SAAS,CAAC,KAAKuH,UAAN,CAA3J,EAA8Kc,SAA9K,CAAwL6C,EAAxL;AACH;AArSoD;AAAA;AAAA,WAsSrD,2BAAkBA,EAAlB,EAAsB;AAClB,WAAK5E,SAAL,GAAiB4E,EAAjB;AACH;AACD;AACJ;AACA;;AA3SyD;AAAA;AAAA,WA4SrD,kBAAS;AACL,UAAI,CAAC,KAAKE,iBAAN,IAA2B,CAAC,KAAK/F,SAAL,CAAegG,KAA/C,EAAsD;AAClD;AACH,OAHI,CAIL;AACA;;;AACA,UAAMA,KAAK,GAAG,KAAKhG,SAAL,CAAegG,KAAf,CAAqBC,aAAnC;AACA,UAAMC,SAAS,GAAGF,KAAK,CAACE,SAAxB,CAPK,CAQL;;AACA,WAAKH,iBAAL,CAAuBE,aAAvB,CAAqCE,KAArC;AACAH,MAAAA,KAAK,CAACE,SAAN,GAAkBA,SAAlB;AACH;AACD;AACJ;AACA;AACA;;AA3TyD;AAAA;AAAA,WA4TrD,gBAAOC,KAAP,EAAc;AACV,WAAKvE,YAAL,CAAkBgE,QAAlB,CAA2B,EAA3B;;AACA,UAAIO,KAAJ,EAAW;AACP,aAAKhD,MAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;AArUyD;AAAA;AAAA,WAsUrD,gCAAuB;AAAA;;AACnB,UAAI,CAAC,KAAKnD,SAAL,CAAeoG,SAApB,EAA+B;AAC3B,YAAI,KAAKpG,SAAL,CAAe0E,QAAnB,EAA6B;AACzB;AACA;AACA7B,UAAAA,OAAO,CAACC,KAAR,CAAc,iHAAd;AACH;;AACD;AACH,OARkB,CASnB;AACA;AACA;;;AACA,WAAKuD,sBAAL,GAA8B,KAAKrG,SAAL,CAAeoG,SAAf,CAAyBrE,KAAvD;AACA,WAAK/B,SAAL,CAAeoG,SAAf,CAAyBtE,YAAzB,CACKT,IADL,CACU1G,SAAS,CAAC,KAAKuH,UAAN,CADnB,EAEKc,SAFL,CAEe,UAACsD,MAAD,EAAY;AACvB,YAAIC,qBAAqB,GAAG,KAA5B;;AACA,YAAI,MAAI,CAACvG,SAAL,CAAe0E,QAAnB,EAA6B;AACzB,cAAI,MAAI,CAAC9C,YAAL,CAAkBG,KAAlB,IAA2B,MAAI,CAACH,YAAL,CAAkBG,KAAlB,CAAwBJ,MAAnD,IACG,MAAI,CAAC0E,sBADR,IACkC/D,KAAK,CAACC,OAAN,CAAc,MAAI,CAAC8D,sBAAnB,CADtC,EACkF;AAC9E,gBAAI,CAACC,MAAD,IAAW,CAAChE,KAAK,CAACC,OAAN,CAAc+D,MAAd,CAAhB,EAAuC;AACnCA,cAAAA,MAAM,GAAG,EAAT;AACH;;AACD,gBAAME,YAAY,GAAG,MAAI,CAACxG,SAAL,CAAewB,OAAf,CAAuBhH,GAAvB,CAA2B,UAAAyJ,MAAM;AAAA,qBAAIA,MAAM,CAAClC,KAAX;AAAA,aAAjC,CAArB;;AACA,YAAA,MAAI,CAACsE,sBAAL,CAA4BI,OAA5B,CAAoC,UAAAC,aAAa,EAAI;AACjD,kBAAI,CAACJ,MAAM,CAACK,IAAP,CAAY,UAAAC,CAAC;AAAA,uBAAI,MAAI,CAAC5G,SAAL,CAAe8D,WAAf,CAA2B8C,CAA3B,EAA8BF,aAA9B,CAAJ;AAAA,eAAb,CAAD,IACG,CAACF,YAAY,CAACG,IAAb,CAAkB,UAAAC,CAAC;AAAA,uBAAI,MAAI,CAAC5G,SAAL,CAAe8D,WAAf,CAA2B8C,CAA3B,EAA8BF,aAA9B,CAAJ;AAAA,eAAnB,CADR,EAC8E;AAC1E;AACA;AACAJ,gBAAAA,MAAM,CAAC9D,IAAP,CAAYkE,aAAZ;AACAH,gBAAAA,qBAAqB,GAAG,IAAxB;AACH;AACJ,aARD;AASH;AACJ;;AACD,QAAA,MAAI,CAACF,sBAAL,GAA8BC,MAA9B;;AACA,YAAIC,qBAAJ,EAA2B;AACvB,UAAA,MAAI,CAACvG,SAAL,CAAe6G,SAAf,CAAyBP,MAAzB;AACH;AACJ,OA1BD;AA2BH;AACD;AACJ;AACA;;AAjXyD;AAAA;AAAA,WAkXrD,oDAA2C;AACvC,UAAI,KAAKtG,SAAL,CAAegG,KAAf,IAAwB,KAAKhG,SAAL,CAAewB,OAAf,CAAuBG,MAAvB,GAAgC,CAA5D,EAA+D;AAC3D,YAAMmF,eAAe,GAAG,KAAKC,kBAAL,EAAxB;AACA,YAAMC,iBAAiB,GAAG,KAAKhH,SAAL,CAAeoD,WAAf,CAA2B6D,eAA3B,IAA8C,CAAxE;;AACA,YAAMC,UAAU,GAAGjO,6BAA6B,CAAC+N,iBAAD,EAAoB,KAAKhH,SAAL,CAAewB,OAAnC,EAA4C,KAAKxB,SAAL,CAAemH,YAA3D,CAAhD,CAH2D,CAI3D;;;AACA,YAAMC,0BAA0B,GAAG,CAAC,KAAKjH,SAAL,GAAiB,CAAC,CAAlB,GAAsB,CAAvB,IAA4B+G,UAA5B,GAAyCF,iBAA5E;AACA,YAAMK,gBAAgB,GAAG,KAAKrH,SAAL,CAAegG,KAAf,CAAqBC,aAArB,CAAmCC,SAA5D;AACA,YAAMoB,iBAAiB,GAAG,KAAKC,iBAAL,CAAuBtB,aAAvB,CAAqCuB,YAA/D;AACA,YAAMC,sBAAsB,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACxO,uBAAuB,GAAGmO,iBAA3B,IAAgDR,eAA3D,CAA/B;AACA,YAAMc,yBAAyB,GAAGF,IAAI,CAACG,KAAL,CAAW,CAACR,gBAAgB,GAAGC,iBAApB,IAAyCR,eAApD,IAAuE,CAAzG;;AACA,YAAIc,yBAAyB,IAAIR,0BAAjC,EAA6D;AACzD,eAAKpH,SAAL,CAAegG,KAAf,CAAqBC,aAArB,CAAmCC,SAAnC,GAA+CkB,0BAA0B,GAAGN,eAA5E;AACH,SAFD,MAGK,IAAIc,yBAAyB,GAAGH,sBAA5B,IAAsDL,0BAA1D,EAAsF;AACvF,eAAKpH,SAAL,CAAegG,KAAf,CAAqBC,aAArB,CAAmCC,SAAnC,GAA+C,CAACkB,0BAA0B,GAAG,CAA9B,IAAmCN,eAAnC,IACxC3N,uBAAuB,GAAGmO,iBADc,CAA/C;AAEH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;AAzYyD;AAAA;AAAA,WA0YrD,4BAAmB;AACf,UAAI,CAAC,KAAKC,iBAAN,IAA2B,CAAC,KAAKA,iBAAL,CAAuBtB,aAAvD,EAAsE;AAClE;AACH;;AACD,UAAI6B,OAAO,GAAG,KAAKP,iBAAL,CAAuBtB,aAArC;AACA,UAAI8B,YAAJ;;AACA,aAAOD,OAAO,GAAGA,OAAO,CAACE,aAAzB,EAAwC;AACpC,YAAIF,OAAO,CAACnF,SAAR,CAAkBsF,QAAlB,CAA2B,kBAA3B,CAAJ,EAAoD;AAChDF,UAAAA,YAAY,GAAGD,OAAf;AACA;AACH;AACJ;;AACD,UAAIC,YAAJ,EAAkB;AACd,aAAKR,iBAAL,CAAuBtB,aAAvB,CAAqCiC,KAArC,CAA2CC,KAA3C,GAAmDJ,YAAY,CAACK,WAAb,GAA2B,IAA9E;AACH;AACJ;AAzZoD;AAAA;AAAA,WA0ZrD,8BAAqB;AACjB,UAAI,KAAKpI,SAAL,CAAewB,OAAf,CAAuBG,MAAvB,GAAgC,CAApC,EAAuC;AACnC,eAAO,KAAK3B,SAAL,CAAewB,OAAf,CAAuB6G,KAAvB,CAA6B3F,eAA7B,GAA+C4F,qBAA/C,GAAuEC,MAA9E;AACH;;AACD,aAAO,CAAP;AACH;AACD;AACJ;AACA;;AAlayD;AAAA;AAAA,WAmarD,kCAAyB;AACrB,UAAI,KAAKpI,SAAT,EAAoB;AAChB,eAAO,CAAP;AACH,OAFD,MAGK;AACD,eAAO,CAAP;AACH;AACJ;AA1aoD;;AAAA;AAAA,GAAzD;;AA4aAJ,wBAAwB,CAACR,IAAzB,GAAgC,SAASiJ,gCAAT,CAA0C/I,CAA1C,EAA6C;AAAE,SAAO,KAAKA,CAAC,IAAIM,wBAAV,EAAoC1E,MAAM,CAACoN,iBAAP,CAAyBrP,SAAzB,CAApC,EAAyEiC,MAAM,CAACoN,iBAAP,CAAyBpN,MAAM,CAACnD,iBAAhC,CAAzE,EAA6HmD,MAAM,CAACoN,iBAAP,CAAyBnN,MAAM,CAACrB,aAAhC,CAA7H,EAA6KoB,MAAM,CAACoN,iBAAP,CAAyBvP,SAAzB,EAAoC,CAApC,CAA7K,EAAqNmC,MAAM,CAACoN,iBAAP,CAAyBlN,MAAM,CAACrB,aAAhC,CAArN,EAAqQmB,MAAM,CAACoN,iBAAP,CAAyBpP,YAAzB,EAAuC,CAAvC,CAArQ,CAAP;AAAyT,CAAxY;;AACA0G,wBAAwB,CAAC2I,IAAzB,GAAgCrN,MAAM,CAACsN,iBAAP,CAAyB;AAAE/I,EAAAA,IAAI,EAAEG,wBAAR;AAAkCF,EAAAA,SAAS,EAAE,CAAC,CAAC,uBAAD,CAAD,CAA7C;AAA0E+I,EAAAA,cAAc,EAAE,SAASC,uCAAT,CAAiDxM,EAAjD,EAAqDC,GAArD,EAA0DwM,QAA1D,EAAoE;AAAE,QAAIzM,EAAE,GAAG,CAAT,EAAY;AAC7NhB,MAAAA,MAAM,CAAC0N,cAAP,CAAsBD,QAAtB,EAAgCxJ,6BAAhC,EAA+D,CAA/D;AACH;;AAAC,QAAIjD,EAAE,GAAG,CAAT,EAAY;AACV,UAAI2M,EAAJ;;AACA3N,MAAAA,MAAM,CAAC4N,cAAP,CAAsBD,EAAE,GAAG3N,MAAM,CAAC6N,WAAP,EAA3B,MAAqD5M,GAAG,CAACsC,SAAJ,GAAgBoK,EAAE,CAACX,KAAxE;AACH;AAAE,GALkD;AAKhDc,EAAAA,SAAS,EAAE,SAASC,8BAAT,CAAwC/M,EAAxC,EAA4CC,GAA5C,EAAiD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC3EhB,MAAAA,MAAM,CAACgO,WAAP,CAAmBnN,GAAnB,EAAwB,CAAxB,EAA2B3D,UAA3B;AACA8C,MAAAA,MAAM,CAACgO,WAAP,CAAmBlN,GAAnB,EAAwB,CAAxB,EAA2B5D,UAA3B;AACH;;AAAC,QAAI8D,EAAE,GAAG,CAAT,EAAY;AACV,UAAI2M,EAAJ;;AACA3N,MAAAA,MAAM,CAAC4N,cAAP,CAAsBD,EAAE,GAAG3N,MAAM,CAAC6N,WAAP,EAA3B,MAAqD5M,GAAG,CAACyJ,iBAAJ,GAAwBiD,EAAE,CAACX,KAAhF;AACAhN,MAAAA,MAAM,CAAC4N,cAAP,CAAsBD,EAAE,GAAG3N,MAAM,CAAC6N,WAAP,EAA3B,MAAqD5M,GAAG,CAACiL,iBAAJ,GAAwByB,EAAE,CAACX,KAAhF;AACH;AAAE,GAZkD;AAYhDiB,EAAAA,QAAQ,EAAE,CAZsC;AAYnCC,EAAAA,YAAY,EAAE,SAASC,qCAAT,CAA+CnN,EAA/C,EAAmDC,GAAnD,EAAwD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAClGhB,MAAAA,MAAM,CAACoO,WAAP,CAAmB,qCAAnB,EAA0DnN,GAAG,CAACoN,iBAA9D;AACH;AAAE,GAdkD;AAchDC,EAAAA,MAAM,EAAE;AAAEtJ,IAAAA,gBAAgB,EAAE,kBAApB;AAAwCT,IAAAA,IAAI,EAAE,MAA9C;AAAsDZ,IAAAA,mBAAmB,EAAE,qBAA3E;AAAkGsB,IAAAA,8BAA8B,EAAE,gCAAlI;AAAoKC,IAAAA,gBAAgB,EAAE,kBAAtL;AAA0MC,IAAAA,SAAS,EAAE,WAArN;AAAkOC,IAAAA,mBAAmB,EAAE,qBAAvP;AAA8QC,IAAAA,0BAA0B,EAAE,4BAA1S;AAAwUC,IAAAA,4BAA4B,EAAE,8BAAtW;AAAsYC,IAAAA,qCAAqC,EAAE,uCAA7a;AAAsdC,IAAAA,SAAS,EAAE,WAAje;AAA8eC,IAAAA,qBAAqB,EAAE,uBAArgB;AAA8hBvD,IAAAA,wBAAwB,EAAE,0BAAxjB;AAAolBC,IAAAA,8BAA8B,EAAE,gCAApnB;AAAspBC,IAAAA,+BAA+B,EAAE,iCAAvrB;AAA0tBC,IAAAA,gCAAgC,EAAE,kCAA5vB;AAAgyBqD,IAAAA,qBAAqB,EAAE;AAAvzB,GAdwC;AAc0yB6I,EAAAA,OAAO,EAAE;AAAE5I,IAAAA,SAAS,EAAE;AAAb,GAdnzB;AAc+0B6I,EAAAA,QAAQ,EAAE,CAACxO,MAAM,CAACyO,kBAAP,CAA0B,CACj6B;AACIC,IAAAA,OAAO,EAAEhR,iBADb;AAEIiR,IAAAA,WAAW,EAAErR,UAAU,CAAC;AAAA,aAAMmH,0BAAN;AAAA,KAAD,CAF3B;AAGImK,IAAAA,KAAK,EAAE;AAHX,GADi6B,CAA1B,CAAD,CAdz1B;AAoB5CC,EAAAA,kBAAkB,EAAE7K,GApBwB;AAoBnB8K,EAAAA,KAAK,EAAE,EApBY;AAoBRC,EAAAA,IAAI,EAAE,EApBE;AAoBEC,EAAAA,MAAM,EAAE,CAAC,CAAC,UAAD,EAAa,EAAb,EAAiB,CAAjB,EAAoB,yBAApB,EAA+C,0BAA/C,CAAD,EAA6E,CAAC,CAAD,EAAI,yBAAJ,EAA+B,gBAA/B,EAAiD,wBAAjD,EAA2E,gBAA3E,EAA6F,CAA7F,EAAgG,SAAhG,CAA7E,EAAyL,CAAC,mBAAD,EAAsB,EAAtB,CAAzL,EAAoN,CAAC,OAAD,EAAU,uCAAV,EAAmD,iBAAnD,EAAsE,0CAAtE,EAAkH,CAAlH,EAAqH,OAArH,EAA8H,SAA9H,EAAyI,eAAzI,EAA0J,YAA1J,EAAwK,oBAAxK,EAA8L,QAA9L,EAAwM,CAAxM,EAA2M,MAA3M,CAApN,EAAwa,CAAC,cAAD,EAAiB,KAAjB,EAAwB,CAAxB,EAA2B,yBAA3B,EAAsD,mBAAtD,EAA2E,CAA3E,EAA8E,MAA9E,EAAsF,aAAtF,EAAqG,aAArG,EAAoH,SAApH,EAA+H,OAA/H,EAAwI,MAAxI,CAAxa,EAAyjB,CAAC,mBAAD,EAAsB,EAAtB,CAAzjB,EAAolB,CAAC,OAAD,EAAU,2BAAV,EAAuC,UAAvC,EAAmD,IAAnD,EAAyD,CAAzD,EAA4D,MAA5D,CAAplB,EAAypB,CAAC,YAAD,EAAe,EAAf,EAAmB,iBAAnB,EAAsC,EAAtC,EAA0C,YAA1C,EAAwD,OAAxD,EAAiE,OAAjE,EAA0E,yBAA1E,EAAqG,CAArG,EAAwG,OAAxG,EAAiH,CAAjH,EAAoH,MAApH,CAAzpB,EAAsxB,CAAC,OAAD,EAAU,oCAAV,EAAgD,CAAhD,EAAmD,MAAnD,CAAtxB,EAAk1B,CAAC,iBAAD,EAAoB,0CAApB,EAAgE,CAAhE,EAAmE,uCAAnE,EAA4G,CAA5G,EAA+G,OAA/G,EAAwH,SAAxH,EAAmI,eAAnI,EAAoJ,YAApJ,EAAkK,oBAAlK,EAAwL,QAAxL,CAAl1B,EAAqhC,CAAC,UAAD,EAAa,IAAb,EAAmB,CAAnB,EAAsB,2BAAtB,CAArhC,EAAykC,CAAC,YAAD,EAAe,EAAf,EAAmB,iBAAnB,EAAsC,EAAtC,EAA0C,YAA1C,EAAwD,OAAxD,EAAiE,CAAjE,EAAoE,yBAApE,EAA+F,CAA/F,EAAkG,OAAlG,CAAzkC,EAAqrC,CAAC,CAAD,EAAI,MAAJ,EAAY,UAAZ,CAArrC,EAA8sC,CAAC,aAAD,EAAgB,EAAhB,CAA9sC,EAAmuC,CAAC,CAAD,EAAI,oCAAJ,CAAnuC,CApBV;AAoByxCC,EAAAA,QAAQ,EAAE,SAASC,iCAAT,CAA2ClO,EAA3C,EAA+CC,GAA/C,EAAoD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACt5ChB,MAAAA,MAAM,CAACmP,eAAP,CAAuBvL,GAAvB;AACA5D,MAAAA,MAAM,CAACuC,SAAP,CAAiB,CAAjB,EAAoB,OAApB,EAA6B,CAA7B;AACAvC,MAAAA,MAAM,CAACoB,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC;AACApB,MAAAA,MAAM,CAACiD,UAAP,CAAkB,CAAlB,EAAqBlC,gDAArB,EAAuE,CAAvE,EAA0E,CAA1E,EAA6E,cAA7E,EAA6F,CAA7F;AACAf,MAAAA,MAAM,CAACoB,cAAP,CAAsB,CAAtB,EAAyB,OAAzB,EAAkC,CAAlC,EAAqC,CAArC;AACApB,MAAAA,MAAM,CAACqB,UAAP,CAAkB,SAAlB,EAA6B,SAAS+N,0DAAT,CAAoE7N,MAApE,EAA4E;AAAE,eAAON,GAAG,CAACoO,cAAJ,CAAmB9N,MAAnB,CAAP;AAAoC,OAA/I,EAAiJ,OAAjJ,EAA0J,SAAS+N,wDAAT,CAAkE/N,MAAlE,EAA0E;AAAE,eAAON,GAAG,CAACsO,YAAJ,CAAiBhO,MAAjB,CAAP;AAAkC,OAAxQ,EAA0Q,MAA1Q,EAAkR,SAASiO,uDAAT,GAAmE;AAAE,eAAOvO,GAAG,CAACwO,MAAJ,EAAP;AAAsB,OAA7W;AACAzP,MAAAA,MAAM,CAAC6B,YAAP;AACA7B,MAAAA,MAAM,CAACiD,UAAP,CAAkB,CAAlB,EAAqBX,+CAArB,EAAsE,CAAtE,EAAyE,CAAzE,EAA4E,aAA5E,EAA2F,CAA3F;AACAtC,MAAAA,MAAM,CAACiD,UAAP,CAAkB,CAAlB,EAAqBL,0CAArB,EAAiE,CAAjE,EAAoE,CAApE,EAAuE,QAAvE,EAAiF,CAAjF;AACA5C,MAAAA,MAAM,CAACyC,YAAP,CAAoB,CAApB;AACAzC,MAAAA,MAAM,CAAC6B,YAAP;AACA7B,MAAAA,MAAM,CAACiD,UAAP,CAAkB,CAAlB,EAAqBO,uCAArB,EAA8D,CAA9D,EAAiE,CAAjE,EAAoE,KAApE,EAA2E,CAA3E;AACAxD,MAAAA,MAAM,CAAC0P,MAAP,CAAc,EAAd,EAAkB,OAAlB;AACH;;AAAC,QAAI1O,EAAE,GAAG,CAAT,EAAY;AACVhB,MAAAA,MAAM,CAACsD,SAAP,CAAiB,CAAjB;AACAtD,MAAAA,MAAM,CAAC+B,UAAP,CAAkB,SAAlB,EAA6B/B,MAAM,CAAC2P,eAAP,CAAuB,EAAvB,EAA2B9L,GAA3B,EAAgC5C,GAAG,CAAC0D,SAAJ,CAAc0E,QAA9C,EAAwDpI,GAAG,CAAC2O,2BAAJ,EAAxD,CAA7B;AACA5P,MAAAA,MAAM,CAACsD,SAAP,CAAiB,CAAjB;AACAtD,MAAAA,MAAM,CAAC+B,UAAP,CAAkB,MAAlB,EAA0Bd,GAAG,CAAC2O,2BAAJ,EAA1B;AACA5P,MAAAA,MAAM,CAACsD,SAAP,CAAiB,CAAjB;AACAtD,MAAAA,MAAM,CAAC+B,UAAP,CAAkB,MAAlB,EAA0Bd,GAAG,CAACsD,IAA9B,EAAoC,aAApC,EAAmDtD,GAAG,CAACsF,YAAvD,EAAqE,aAArE,EAAoFtF,GAAG,CAAC+D,gBAAxF;AACAhF,MAAAA,MAAM,CAAC6P,WAAP,CAAmB,YAAnB,EAAiC5O,GAAG,CAACuE,SAArC;AACAxF,MAAAA,MAAM,CAACsD,SAAP,CAAiB,CAAjB;AACAtD,MAAAA,MAAM,CAAC+B,UAAP,CAAkB,MAAlB,EAA0Bd,GAAG,CAACkE,SAA9B;AACAnF,MAAAA,MAAM,CAACsD,SAAP,CAAiB,CAAjB;AACAtD,MAAAA,MAAM,CAAC+B,UAAP,CAAkB,MAAlB,EAA0B,CAACd,GAAG,CAACyE,qBAAL,IAA8BzE,GAAG,CAACyF,KAAlC,IAA2C,CAACzF,GAAG,CAACkE,SAA1E;AACAnF,MAAAA,MAAM,CAACsD,SAAP,CAAiB,CAAjB;AACAtD,MAAAA,MAAM,CAAC+B,UAAP,CAAkB,MAAlB,EAA0B/B,MAAM,CAAC8P,WAAP,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B7O,GAAG,CAACuF,oBAA9B,CAA1B;AACH;AAAE,GAhDkD;AAgDhDuJ,EAAAA,UAAU,EAAE,CAAC5P,MAAM,CAAC6P,OAAR,EAAiB7P,MAAM,CAAC8P,IAAxB,EAA8B7P,MAAM,CAAC8P,oBAArC,EAA2D9P,MAAM,CAAC+P,eAAlE,EAAmF/P,MAAM,CAACgQ,oBAA1F,EAAgH/P,MAAM,CAACgQ,WAAvH,EAAoI/P,MAAM,CAACgQ,UAA3I,EAAuJ/P,MAAM,CAACgQ,UAA9J,EAA0K/P,MAAM,CAACgQ,SAAjL,EAA4L/P,MAAM,CAACgQ,OAAnM,CAhDoC;AAgDyKC,EAAAA,KAAK,EAAE,CAACvQ,MAAM,CAACwQ,SAAR,CAhDhL;AAgDoMC,EAAAA,MAAM,EAAE,CAAC,+mFAAD,CAhD5M;AAgD+zFC,EAAAA,eAAe,EAAE;AAhDh1F,CAAzB,CAAhC;;AAiDAnM,wBAAwB,CAACoM,cAAzB,GAA0C;AAAA,SAAM,CAC5C;AAAEvM,IAAAA,IAAI,EAAExG,SAAR;AAAmBgT,IAAAA,UAAU,EAAE,CAAC;AAAExM,MAAAA,IAAI,EAAE3H,MAAR;AAAgBoU,MAAAA,IAAI,EAAE,CAACjT,SAAD;AAAtB,KAAD;AAA/B,GAD4C,EAE5C;AAAEwG,IAAAA,IAAI,EAAE1H;AAAR,GAF4C,EAG5C;AAAE0H,IAAAA,IAAI,EAAE3F;AAAR,GAH4C,EAI5C;AAAE2F,IAAAA,IAAI,EAAE1G,SAAR;AAAmBkT,IAAAA,UAAU,EAAE,CAAC;AAAExM,MAAAA,IAAI,EAAEzH;AAAR,KAAD,EAAqB;AAAEyH,MAAAA,IAAI,EAAE3H,MAAR;AAAgBoU,MAAAA,IAAI,EAAE,CAACnT,SAAD;AAAtB,KAArB;AAA/B,GAJ4C,EAK5C;AAAE0G,IAAAA,IAAI,EAAE1F;AAAR,GAL4C,EAM5C;AAAE0F,IAAAA,IAAI,EAAEvG,YAAR;AAAsB+S,IAAAA,UAAU,EAAE,CAAC;AAAExM,MAAAA,IAAI,EAAEzH;AAAR,KAAD,EAAqB;AAAEyH,MAAAA,IAAI,EAAE3H,MAAR;AAAgBoU,MAAAA,IAAI,EAAE,CAAChT,YAAD;AAAtB,KAArB;AAAlC,GAN4C,CAAN;AAAA,CAA1C;;AAQAxB,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,kBAF7B,EAEiD,KAAK,CAFtD,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,MAF7B,EAEqC,KAAK,CAF1C,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,qBAF7B,EAEoD,KAAK,CAFzD,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,gCAF7B,EAE+D,KAAK,CAFpE,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,kBAF7B,EAEiD,KAAK,CAFtD,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,WAF7B,EAE0C,KAAK,CAF/C,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,qBAF7B,EAEoD,KAAK,CAFzD,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,4BAF7B,EAE2D,KAAK,CAFhE,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,8BAF7B,EAE6D,KAAK,CAFlE,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,uCAF7B,EAEsE,KAAK,CAF3E,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,WAF7B,EAE0C,KAAK,CAF/C,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,uBAF7B,EAEsD,KAAK,CAF3D,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,0BAF7B,EAEyD,KAAK,CAF9D,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,gCAF7B,EAE+D,KAAK,CAFpE,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,iCAF7B,EAEgE,KAAK,CAFrE,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,kCAF7B,EAEiE,KAAK,CAFtE,CAAV;;AAGAzU,UAAU,CAAC,CACPO,KAAK,EADE,CAAD,EAEP2H,wBAAwB,CAACuM,SAFlB,EAE6B,uBAF7B,EAEsD,KAAK,CAF3D,CAAV;;AAGAzU,UAAU,CAAC,CACPQ,MAAM,EADC,CAAD,EAEP0H,wBAAwB,CAACuM,SAFlB,EAE6B,WAF7B,EAE0C,KAAK,CAF/C,CAAV;;AAGAzU,UAAU,CAAC,CACPS,SAAS,CAAC,mBAAD,EAAsB;AAAEiU,EAAAA,IAAI,EAAEhU,UAAR;AAAoBiU,EAAAA,MAAM,EAAE;AAA5B,CAAtB,CADF,CAAD,EAEPzM,wBAAwB,CAACuM,SAFlB,EAE6B,mBAF7B,EAEkD,KAAK,CAFvD,CAAV;;AAGAzU,UAAU,CAAC,CACPS,SAAS,CAAC,mBAAD,EAAsB;AAAEiU,EAAAA,IAAI,EAAEhU,UAAR;AAAoBiU,EAAAA,MAAM,EAAE;AAA5B,CAAtB,CADF,CAAD,EAEPzM,wBAAwB,CAACuM,SAFlB,EAE6B,mBAF7B,EAEkD,KAAK,CAFvD,CAAV;;AAGAzU,UAAU,CAAC,CACPW,YAAY,CAAC8G,6BAAD,EAAgC;AAAEkN,EAAAA,MAAM,EAAE;AAAV,CAAhC,CADL,CAAD,EAEPzM,wBAAwB,CAACuM,SAFlB,EAE6B,WAF7B,EAE0C,KAAK,CAF/C,CAAV;;AAGAzU,UAAU,CAAC,CACPY,WAAW,CAAC,2CAAD,CADJ,CAAD,EAEPsH,wBAAwB,CAACuM,SAFlB,EAE6B,mBAF7B,EAEkD,IAFlD,CAAV;;AAGAvM,wBAAwB,GAAGD,0BAA0B,GAAGjI,UAAU,CAAC,CAAEC,OAAO,CAAC,CAAD,EAAIG,MAAM,CAACmB,SAAD,CAAV,CAAT,EAC/DtB,OAAO,CAAC,CAAD,EAAIK,QAAQ,EAAZ,CADwD,EACvCL,OAAO,CAAC,CAAD,EAAIG,MAAM,CAACiB,SAAD,CAAV,CADgC,EAE/DpB,OAAO,CAAC,CAAD,EAAIK,QAAQ,EAAZ,CAFwD,EAEvCL,OAAO,CAAC,CAAD,EAAIG,MAAM,CAACoB,YAAD,CAAV,CAFgC,CAAD,EAG/D0G,wBAH+D,CAAlE;AAKA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAM0M,sBAAsB,GAAG,OAA/B;;AACA,IAAIC,wBAAwB;AAAA;AAAA,CAA5B;;AAEAA,wBAAwB,CAACnN,IAAzB,GAAgC,SAASoN,gCAAT,CAA0ClN,CAA1C,EAA6C;AAAE,SAAO,KAAKA,CAAC,IAAIiN,wBAAV,GAAP;AAA+C,CAA9H;;AACAA,wBAAwB,CAACE,IAAzB,GAAgCvR,MAAM,CAACwR,gBAAP,CAAwB;AAAEjN,EAAAA,IAAI,EAAE8M;AAAR,CAAxB,CAAhC;AACAA,wBAAwB,CAACI,IAAzB,GAAgCzR,MAAM,CAAC0R,gBAAP,CAAwB;AAAEC,EAAAA,OAAO,EAAE,CAAC,CACxD5R,YADwD,EAExDpC,mBAFwD,EAGxD+B,eAHwD,EAIxDC,iBAJwD,EAKxDC,aALwD,EAMxDC,wBANwD,EAOxDC,gBAPwD,CAAD;AAAX,CAAxB,CAAhC;;AASA,CAAC,YAAY;AAAE,GAAC,OAAO8R,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD5R,MAAM,CAAC6R,iBAAP,CAAyB5N,6BAAzB,EAAwD,CAAC;AACnHM,IAAAA,IAAI,EAAE7H,SAD6G;AAEnHsU,IAAAA,IAAI,EAAE,CAAC;AACCc,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF6G,GAAD,CAAxD,EAK1D,IAL0D,EAKpD,IALoD,CAAnD;AAKO,CALtB;;AAMA,CAAC,YAAY;AAAE,GAAC,OAAOF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD5R,MAAM,CAAC6R,iBAAP,CAAyBnN,wBAAzB,EAAmD,CAAC;AAC9GH,IAAAA,IAAI,EAAElH,SADwG;AAE9G2T,IAAAA,IAAI,EAAE,CAAC;AACCc,MAAAA,QAAQ,EAAE,uBADX;AAEC7C,MAAAA,QAAQ,EAAE,y/EAFX;AAGC8C,MAAAA,SAAS,EAAE,CACP;AACIrD,QAAAA,OAAO,EAAEhR,iBADb;AAEIiR,QAAAA,WAAW,EAAErR,UAAU,CAAC;AAAA,iBAAMmH,0BAAN;AAAA,SAAD,CAF3B;AAGImK,QAAAA,KAAK,EAAE;AAHX,OADO,CAHZ;AAUCiC,MAAAA,eAAe,EAAEtT,uBAAuB,CAACyU,MAV1C;AAWCpB,MAAAA,MAAM,EAAE,CAAC,o8DAAD;AAXT,KAAD;AAFwG,GAAD,CAAnD,EAe1D,YAAY;AAAE,WAAO,CAAC;AAAErM,MAAAA,IAAI,EAAE7D,OAAO,CAAC3C,SAAhB;AAA2BgT,MAAAA,UAAU,EAAE,CAAC;AACtDxM,QAAAA,IAAI,EAAE3H,MADgD;AAEtDoU,QAAAA,IAAI,EAAE,CAACjT,SAAD;AAFgD,OAAD;AAAvC,KAAD,EAGX;AAAEwG,MAAAA,IAAI,EAAEvE,MAAM,CAACnD;AAAf,KAHW,EAGyB;AAAE0H,MAAAA,IAAI,EAAEtE,MAAM,CAACrB;AAAf,KAHzB,EAGyD;AAAE2F,MAAAA,IAAI,EAAE5D,OAAO,CAAC9C,SAAhB;AAA2BkT,MAAAA,UAAU,EAAE,CAAC;AAC9GxM,QAAAA,IAAI,EAAEzH;AADwG,OAAD,EAE9G;AACCyH,QAAAA,IAAI,EAAE3H,MADP;AAECoU,QAAAA,IAAI,EAAE,CAACnT,SAAD;AAFP,OAF8G;AAAvC,KAHzD,EAQX;AAAE0G,MAAAA,IAAI,EAAErE,MAAM,CAACrB;AAAf,KARW,EAQqB;AAAE0F,MAAAA,IAAI,EAAE3D,OAAO,CAAC5C,YAAhB;AAA8B+S,MAAAA,UAAU,EAAE,CAAC;AAC7ExM,QAAAA,IAAI,EAAEzH;AADuE,OAAD,EAE7E;AACCyH,QAAAA,IAAI,EAAE3H,MADP;AAECoU,QAAAA,IAAI,EAAE,CAAChT,YAAD;AAFP,OAF6E;AAA1C,KARrB,CAAP;AAaF,GA5B8C,EA4B5C;AAAEgH,IAAAA,gBAAgB,EAAE,CAAC;AAC/BT,MAAAA,IAAI,EAAExH;AADyB,KAAD,CAApB;AAEVwH,IAAAA,IAAI,EAAE,CAAC;AACPA,MAAAA,IAAI,EAAExH;AADC,KAAD,CAFI;AAIV4G,IAAAA,mBAAmB,EAAE,CAAC;AACtBY,MAAAA,IAAI,EAAExH;AADgB,KAAD,CAJX;AAMVkI,IAAAA,8BAA8B,EAAE,CAAC;AACjCV,MAAAA,IAAI,EAAExH;AAD2B,KAAD,CANtB;AAQVmI,IAAAA,gBAAgB,EAAE,CAAC;AACnBX,MAAAA,IAAI,EAAExH;AADa,KAAD,CARR;AAUVoI,IAAAA,SAAS,EAAE,CAAC;AACZZ,MAAAA,IAAI,EAAExH;AADM,KAAD,CAVD;AAYVqI,IAAAA,mBAAmB,EAAE,CAAC;AACtBb,MAAAA,IAAI,EAAExH;AADgB,KAAD,CAZX;AAcVsI,IAAAA,0BAA0B,EAAE,CAAC;AAC7Bd,MAAAA,IAAI,EAAExH;AADuB,KAAD,CAdlB;AAgBVuI,IAAAA,4BAA4B,EAAE,CAAC;AAC/Bf,MAAAA,IAAI,EAAExH;AADyB,KAAD,CAhBpB;AAkBVwI,IAAAA,qCAAqC,EAAE,CAAC;AACxChB,MAAAA,IAAI,EAAExH;AADkC,KAAD,CAlB7B;AAoBVyI,IAAAA,SAAS,EAAE,CAAC;AACZjB,MAAAA,IAAI,EAAExH;AADM,KAAD,CApBD;AAsBV0I,IAAAA,qBAAqB,EAAE,CAAC;AACxBlB,MAAAA,IAAI,EAAExH;AADkB,KAAD,CAtBb;AAwBVmF,IAAAA,wBAAwB,EAAE,CAAC;AAC3BqC,MAAAA,IAAI,EAAExH;AADqB,KAAD,CAxBhB;AA0BVoF,IAAAA,8BAA8B,EAAE,CAAC;AACjCoC,MAAAA,IAAI,EAAExH;AAD2B,KAAD,CA1BtB;AA4BVqF,IAAAA,+BAA+B,EAAE,CAAC;AAClCmC,MAAAA,IAAI,EAAExH;AAD4B,KAAD,CA5BvB;AA8BVsF,IAAAA,gCAAgC,EAAE,CAAC;AACnCkC,MAAAA,IAAI,EAAExH;AAD6B,KAAD,CA9BxB;AAgCV2I,IAAAA,qBAAqB,EAAE,CAAC;AACxBnB,MAAAA,IAAI,EAAExH;AADkB,KAAD,CAhCb;AAkCV4I,IAAAA,SAAS,EAAE,CAAC;AACZpB,MAAAA,IAAI,EAAEvH;AADM,KAAD,CAlCD;AAoCVqR,IAAAA,iBAAiB,EAAE,CAAC;AACpB9J,MAAAA,IAAI,EAAEnH,WADc;AAEpB4T,MAAAA,IAAI,EAAE,CAAC,2CAAD;AAFc,KAAD,CApCT;AAuCVtG,IAAAA,iBAAiB,EAAE,CAAC;AACpBnG,MAAAA,IAAI,EAAEtH,SADc;AAEpB+T,MAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB;AAAEE,QAAAA,IAAI,EAAEhU,UAAR;AAAoBiU,QAAAA,MAAM,EAAE;AAA5B,OAAtB;AAFc,KAAD,CAvCT;AA0CVjF,IAAAA,iBAAiB,EAAE,CAAC;AACpB3H,MAAAA,IAAI,EAAEtH,SADc;AAEpB+T,MAAAA,IAAI,EAAE,CAAC,mBAAD,EAAsB;AAAEE,QAAAA,IAAI,EAAEhU,UAAR;AAAoBiU,QAAAA,MAAM,EAAE;AAA5B,OAAtB;AAFc,KAAD,CA1CT;AA6CV5N,IAAAA,SAAS,EAAE,CAAC;AACZgB,MAAAA,IAAI,EAAEpH,YADM;AAEZ6T,MAAAA,IAAI,EAAE,CAAC/M,6BAAD,EAAgC;AAAEkN,QAAAA,MAAM,EAAE;AAAV,OAAhC;AAFM,KAAD;AA7CD,GA5B4C,CAAnD;AA4EC,CA5EhB;;AA6EA,CAAC,YAAY;AAAE,GAAC,OAAOc,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjS,MAAM,CAACkS,kBAAP,CAA0Bb,wBAA1B,EAAoD;AAAEc,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAACzN,wBAAD,EAA2BT,6BAA3B,CAAP;AAAmE,KAAjG;AAAmG0N,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAC5R,YAAD,EAC/OpC,mBAD+O,EAE/O+B,eAF+O,EAG/OC,iBAH+O,EAI/OC,aAJ+O,EAK/OC,wBAL+O,EAM/OC,gBAN+O,CAAP;AAMpN,KAN0F;AAMxFsS,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAC1N,wBAAD,EAA2BT,6BAA3B,CAAP;AAAmE;AANF,GAApD,CAAnD;AAM+G,CAN9H;;AAOA,CAAC,YAAY;AAAE,GAAC,OAAO2N,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD5R,MAAM,CAAC6R,iBAAP,CAAyBR,wBAAzB,EAAmD,CAAC;AAC9G9M,IAAAA,IAAI,EAAE/G,QADwG;AAE9GwT,IAAAA,IAAI,EAAE,CAAC;AACCW,MAAAA,OAAO,EAAE,CACL5R,YADK,EAELpC,mBAFK,EAGL+B,eAHK,EAILC,iBAJK,EAKLC,aALK,EAMLC,wBANK,EAOLC,gBAPK,CADV;AAUCqS,MAAAA,YAAY,EAAE,CACVzN,wBADU,EAEVT,6BAFU,CAVf;AAcCmO,MAAAA,OAAO,EAAE,CACL1N,wBADK,EAELT,6BAFK;AAdV,KAAD;AAFwG,GAAD,CAAnD,EAqB1D,IArB0D,EAqBpD,IArBoD,CAAnD;AAqBO,CArBtB;AAuBA;AACA;AACA;;;AAEA,SAASS,wBAAT,EAAmC0M,sBAAnC,EAA2DC,wBAA3D,EAAqFpN,6BAA6B,IAAIoO,EAAtH,G,CAEA","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { Directive, EventEmitter, Inject, ChangeDetectorRef, Optional, Input, Output, ViewChild, ElementRef, ContentChild, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { SELECT_PANEL_MAX_HEIGHT, MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/checkbox';\nimport * as ɵngcc6 from '@angular/material/tooltip';\nimport * as ɵngcc7 from '@angular/material/progress-spinner';\nimport * as ɵngcc8 from '@angular/material/button';\nimport * as ɵngcc9 from '@angular/material/icon';\nimport * as ɵngcc10 from '@angular/material/select';\nimport * as ɵngcc11 from '@angular/material/core';\nimport * as ɵngcc12 from '@angular/material/form-field';\n\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    ɵngcc0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6._emitSelectAllBooleanToParent($event.checked); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n} }\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-spinner\", 10);\n} }\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n} }\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-icon\");\n    ɵngcc0.ɵɵtext(1, \"close\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._reset(true); });\n    ɵngcc0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 0, \"ng-template\", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r9 = ɵngcc0.ɵɵreference(3);\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n} }\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.noEntriesFoundLabel, \"\\n\");\n} }\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]]];\nconst _c3 = function (a0, a1) { return { \"mat-select-search-inner-multiple\": a0, \"mat-select-search-inner-toggle-all\": a1 }; };\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\"];\nlet MatSelectSearchClearDirective = class MatSelectSearchClearDirective {\n};\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) { return new (t || MatSelectSearchClearDirective)(); };\nMatSelectSearchClearDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectSearchClearDirective, selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]] });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatSelectSearchComponent_1;\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nlet MatSelectSearchComponent = MatSelectSearchComponent_1 = class MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.liveAnnouncer = liveAnnouncer;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         *  Text that is appended to the currently active item label announced by screen readers,\n         *  informing the user of the current index, value and total options.\n         *  eg: Bank R (Germany) 1 of 6\n        */\n        this.indexAndLengthScreenReaderText = ' of ';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toogleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n    }\n    get isInsideMatOption() {\n        return !!this.matOption;\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    ngOnInit() {\n        // set custom panel class\n        const panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect._keyManager) {\n                this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            this._options.changes\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                        if (!this.disableScrollToActiveOnOptionsChanged) {\n                            this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                const activeDescendant = this._options.toArray()[index];\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\n                    + this.getAriaIndex(index)\n                    + this.indexAndLengthScreenReaderText\n                    + this.getAriaLength());\n            }\n        }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n    getAriaIndex(optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n            return optionIndex + 1;\n        }\n        return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n    getAriaLength() {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if (this._formControl.value && this._formControl.value.length\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    adjustScrollTopToFitActiveOptionIntoView() {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            const matOptionHeight = this.getMatOptionHeight();\n            const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    getMatOptionHeight() {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n};\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) { return new (t || MatSelectSearchComponent)(ɵngcc0.ɵɵdirectiveInject(MatSelect), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MatOption, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MatFormField, 8)); };\nMatSelectSearchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelectSearchComponent, selectors: [[\"ngx-mat-select-search\"]], contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n    } }, viewQuery: function MatSelectSearchComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 3, ElementRef);\n        ɵngcc0.ɵɵviewQuery(_c1, 3, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    } }, hostVars: 2, hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n    } }, inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", noEntriesFoundLabel: \"noEntriesFoundLabel\", indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\" }, outputs: { toggleAll: \"toggleAll\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatSelectSearchComponent_1),\n                multi: true\n            }\n        ])], ngContentSelectors: _c4, decls: 11, vars: 14, consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [1, \"mat-select-search-no-entries-found\"]], template: function MatSelectSearchComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelement(0, \"input\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) { return ctx._handleKeydown($event); })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) { return ctx._handleKeyup($event); })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() { return ctx.onBlur(); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n        ɵngcc0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 2, 1, \"div\", 8);\n        ɵngcc0.ɵɵpipe(10, \"async\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.searching);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n    } }, directives: [ɵngcc3.NgClass, ɵngcc3.NgIf, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlDirective, ɵngcc5.MatCheckbox, ɵngcc6.MatTooltip, ɵngcc7.MatSpinner, ɵngcc8.MatButton, ɵngcc9.MatIcon], pipes: [ɵngcc3.AsyncPipe], styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"], changeDetection: 0 });\nMatSelectSearchComponent.ctorParameters = () => [\n    { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: MatOption, decorators: [{ type: Optional }, { type: Inject, args: [MatOption,] }] },\n    { type: LiveAnnouncer },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MatFormField,] }] }\n];\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"placeholderLabel\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"type\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"noEntriesFoundLabel\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"indexAndLengthScreenReaderText\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"clearSearchInput\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"searching\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"disableInitialFocus\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"enableClearOnEscapePressed\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"preventHomeEndKeyPropagation\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"disableScrollToActiveOnOptionsChanged\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"ariaLabel\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"showToggleAllCheckbox\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toggleAllCheckboxChecked\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toggleAllCheckboxIndeterminate\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toggleAllCheckboxTooltipMessage\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"toogleAllCheckboxTooltipPosition\", void 0);\n__decorate([\n    Input()\n], MatSelectSearchComponent.prototype, \"hideClearSearchButton\", void 0);\n__decorate([\n    Output()\n], MatSelectSearchComponent.prototype, \"toggleAll\", void 0);\n__decorate([\n    ViewChild('searchSelectInput', { read: ElementRef, static: true })\n], MatSelectSearchComponent.prototype, \"searchSelectInput\", void 0);\n__decorate([\n    ViewChild('innerSelectSearch', { read: ElementRef, static: true })\n], MatSelectSearchComponent.prototype, \"innerSelectSearch\", void 0);\n__decorate([\n    ContentChild(MatSelectSearchClearDirective, { static: false })\n], MatSelectSearchComponent.prototype, \"clearIcon\", void 0);\n__decorate([\n    HostBinding('class.mat-select-search-inside-mat-option')\n], MatSelectSearchComponent.prototype, \"isInsideMatOption\", null);\nMatSelectSearchComponent = MatSelectSearchComponent_1 = __decorate([ __param(0, Inject(MatSelect)),\n    __param(3, Optional()), __param(3, Inject(MatOption)),\n    __param(5, Optional()), __param(5, Inject(MatFormField))\n], MatSelectSearchComponent);\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '3.2.0';\nlet NgxMatSelectSearchModule = class NgxMatSelectSearchModule {\n};\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) { return new (t || NgxMatSelectSearchModule)(); };\nNgxMatSelectSearchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxMatSelectSearchModule });\nNgxMatSelectSearchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatButtonModule,\n            MatCheckboxModule,\n            MatIconModule,\n            MatProgressSpinnerModule,\n            MatTooltipModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxMatSelectSearchClear]'\n            }]\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-select-search',\n                template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input mat-input-element\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon>close</mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  {{noEntriesFoundLabel}}\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MatSelectSearchComponent_1),\n                        multi: true\n                    }\n                ],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\"]\n            }]\n    }], function () { return [{ type: ɵngcc10.MatSelect, decorators: [{\n                type: Inject,\n                args: [MatSelect]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc11.MatOption, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MatOption]\n            }] }, { type: ɵngcc2.LiveAnnouncer }, { type: ɵngcc12.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MatFormField]\n            }] }]; }, { placeholderLabel: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], noEntriesFoundLabel: [{\n            type: Input\n        }], indexAndLengthScreenReaderText: [{\n            type: Input\n        }], clearSearchInput: [{\n            type: Input\n        }], searching: [{\n            type: Input\n        }], disableInitialFocus: [{\n            type: Input\n        }], enableClearOnEscapePressed: [{\n            type: Input\n        }], preventHomeEndKeyPropagation: [{\n            type: Input\n        }], disableScrollToActiveOnOptionsChanged: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input\n        }], showToggleAllCheckbox: [{\n            type: Input\n        }], toggleAllCheckboxChecked: [{\n            type: Input\n        }], toggleAllCheckboxIndeterminate: [{\n            type: Input\n        }], toggleAllCheckboxTooltipMessage: [{\n            type: Input\n        }], toogleAllCheckboxTooltipPosition: [{\n            type: Input\n        }], hideClearSearchButton: [{\n            type: Input\n        }], toggleAll: [{\n            type: Output\n        }], isInsideMatOption: [{\n            type: HostBinding,\n            args: ['class.mat-select-search-inside-mat-option']\n        }], searchSelectInput: [{\n            type: ViewChild,\n            args: ['searchSelectInput', { read: ElementRef, static: true }]\n        }], innerSelectSearch: [{\n            type: ViewChild,\n            args: ['innerSelectSearch', { read: ElementRef, static: true }]\n        }], clearIcon: [{\n            type: ContentChild,\n            args: [MatSelectSearchClearDirective, { static: false }]\n        }] }); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMatSelectSearchModule, { declarations: function () { return [MatSelectSearchComponent, MatSelectSearchClearDirective]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule]; }, exports: function () { return [MatSelectSearchComponent, MatSelectSearchClearDirective]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatButtonModule,\n                    MatCheckboxModule,\n                    MatIconModule,\n                    MatProgressSpinnerModule,\n                    MatTooltipModule\n                ],\n                declarations: [\n                    MatSelectSearchComponent,\n                    MatSelectSearchClearDirective\n                ],\n                exports: [\n                    MatSelectSearchComponent,\n                    MatSelectSearchClearDirective\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa };\n\n//# sourceMappingURL=ngx-mat-select-search.js.map"]},"metadata":{},"sourceType":"module"}
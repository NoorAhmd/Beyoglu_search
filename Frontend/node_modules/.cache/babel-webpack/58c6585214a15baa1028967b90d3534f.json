{"ast":null,"code":"/**\n * @module ol/geom/MultiPolygon\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport Polygon from '../geom/Polygon.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { linearRingss as linearRingssArea } from '../geom/flat/area.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta } from '../geom/flat/closest.js';\nimport { linearRingssContainsXY } from '../geom/flat/contains.js';\nimport { deflateMultiCoordinatesArray } from '../geom/flat/deflate.js';\nimport { inflateMultiCoordinatesArray } from '../geom/flat/inflate.js';\nimport { getInteriorPointsOfMultiArray } from '../geom/flat/interiorpoint.js';\nimport { intersectsLinearRingMultiArray } from '../geom/flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRingsArray } from '../geom/flat/orient.js';\nimport { quantizeMultiArray } from '../geom/flat/simplify.js';\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\n\nvar MultiPolygon = function (SimpleGeometry) {\n  function MultiPolygon(coordinates, opt_layout, opt_endss) {\n    SimpleGeometry.call(this);\n    /**\n     * @type {Array.<Array.<number>>}\n     * @private\n     */\n\n    this.endss_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.flatInteriorPointsRevision_ = -1;\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n\n    this.flatInteriorPoints_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n\n    this.orientedFlatCoordinates_ = null;\n\n    if (!opt_endss && !Array.isArray(coordinates[0])) {\n      var layout = this.getLayout();\n      var flatCoordinates = [];\n      var endss = [];\n\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        var polygon = coordinates[i];\n\n        if (i === 0) {\n          layout = polygon.getLayout();\n        }\n\n        var offset = flatCoordinates.length;\n        var ends = polygon.getEnds();\n\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        endss.push(ends);\n      }\n\n      opt_layout = layout;\n      coordinates = flatCoordinates;\n      opt_endss = endss;\n    }\n\n    if (opt_layout !== undefined && opt_endss) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n      this.endss_ = opt_endss;\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) MultiPolygon.__proto__ = SimpleGeometry;\n  MultiPolygon.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  MultiPolygon.prototype.constructor = MultiPolygon;\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {module:ol/geom/Polygon} polygon Polygon.\n   * @api\n   */\n\n  MultiPolygon.prototype.appendPolygon = function appendPolygon(polygon) {\n    /** @type {Array.<number>} */\n    var ends;\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      var offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n\n    this.endss_.push(ends);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/MultiPolygon} Clone.\n   * @override\n   * @api\n   */\n\n\n  MultiPolygon.prototype.clone = function clone() {\n    var this$1 = this;\n    var len = this.endss_.length;\n    var newEndss = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      newEndss[i] = this$1.endss_[i].slice();\n    }\n\n    return new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiPolygon.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiPolygon.prototype.containsXY = function containsXY(x, y) {\n    return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n  };\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getArea = function getArea() {\n    return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n  };\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getCoordinates = function getCoordinates(opt_right) {\n    var flatCoordinates;\n\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);\n  };\n  /**\n   * @return {Array.<Array.<number>>} Endss.\n   */\n\n\n  MultiPolygon.prototype.getEndss = function getEndss() {\n    return this.endss_;\n  };\n  /**\n   * @return {Array.<number>} Flat interior points.\n   */\n\n\n  MultiPolygon.prototype.getFlatInteriorPoints = function getFlatInteriorPoints() {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      var flatCenters = linearRingssCenter(this.flatCoordinates, 0, this.endss_, this.stride);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.\n   * @return {module:ol/geom/MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getInteriorPoints = function getInteriorPoints() {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n  };\n  /**\n   * @return {Array.<number>} Oriented flat coordinates.\n   */\n\n\n  MultiPolygon.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n\n      if (linearRingsAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n      }\n\n      this.orientedRevision_ = this.getRevision();\n    }\n\n    return this.orientedFlatCoordinates_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiPolygon.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n    return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n  };\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {module:ol/geom/Polygon} Polygon.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getPolygon = function getPolygon(index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n\n    var offset;\n\n    if (index === 0) {\n      offset = 0;\n    } else {\n      var prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n\n    var ends = this.endss_[index].slice();\n    var end = ends[ends.length - 1];\n\n    if (offset !== 0) {\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n\n    return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n  };\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array.<module:ol/geom/Polygon>} Polygons.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getPolygons = function getPolygons() {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var endss = this.endss_;\n    var polygons = [];\n    var offset = 0;\n\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n      var ends = endss[i].slice();\n      var end = ends[ends.length - 1];\n\n      if (offset !== 0) {\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n\n      var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n      polygons.push(polygon);\n      offset = end;\n    }\n\n    return polygons;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getType = function getType() {\n    return GeometryType.MULTI_POLYGON;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiPolygon.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  MultiPolygon.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 3);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      var lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n\n    this.changed();\n  };\n\n  return MultiPolygon;\n}(SimpleGeometry);\n\nexport default MultiPolygon; //# sourceMappingURL=MultiPolygon.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/geom/MultiPolygon.js"],"names":["extend","closestSquaredDistanceXY","GeometryLayout","GeometryType","MultiPoint","Polygon","SimpleGeometry","linearRingss","linearRingssArea","linearRingssCenter","assignClosestMultiArrayPoint","multiArrayMaxSquaredDelta","linearRingssContainsXY","deflateMultiCoordinatesArray","inflateMultiCoordinatesArray","getInteriorPointsOfMultiArray","intersectsLinearRingMultiArray","linearRingsAreOriented","orientLinearRingsArray","quantizeMultiArray","MultiPolygon","coordinates","opt_layout","opt_endss","call","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","Array","isArray","layout","getLayout","flatCoordinates","endss","i","ii","length","polygon","offset","ends","getEnds","j","jj","getFlatCoordinates","push","undefined","setFlatCoordinates","setCoordinates","__proto__","prototype","Object","create","constructor","appendPolygon","slice","changed","clone","this$1","len","newEndss","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getOrientedFlatCoordinates","containsXY","getArea","getCoordinates","opt_right","getEndss","getFlatInteriorPoints","flatCenters","getInteriorPoints","XYM","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEndss","XY","getPolygon","index","prevEnds","end","getPolygons","polygons","getType","MULTI_POLYGON","intersectsExtent","extent","setLayout","lastEnds"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/MultiPolygon\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport Polygon from '../geom/Polygon.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport {linearRingss as linearRingssArea} from '../geom/flat/area.js';\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\nimport {assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta} from '../geom/flat/closest.js';\nimport {linearRingssContainsXY} from '../geom/flat/contains.js';\nimport {deflateMultiCoordinatesArray} from '../geom/flat/deflate.js';\nimport {inflateMultiCoordinatesArray} from '../geom/flat/inflate.js';\nimport {getInteriorPointsOfMultiArray} from '../geom/flat/interiorpoint.js';\nimport {intersectsLinearRingMultiArray} from '../geom/flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRingsArray} from '../geom/flat/orient.js';\nimport {quantizeMultiArray} from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nvar MultiPolygon = (function (SimpleGeometry) {\n  function MultiPolygon(coordinates, opt_layout, opt_endss) {\n\n    SimpleGeometry.call(this);\n\n    /**\n     * @type {Array.<Array.<number>>}\n     * @private\n     */\n    this.endss_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointsRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (!opt_endss && !Array.isArray(coordinates[0])) {\n      var layout = this.getLayout();\n      var flatCoordinates = [];\n      var endss = [];\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        var polygon = coordinates[i];\n        if (i === 0) {\n          layout = polygon.getLayout();\n        }\n        var offset = flatCoordinates.length;\n        var ends = polygon.getEnds();\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        endss.push(ends);\n      }\n      opt_layout = layout;\n      coordinates = flatCoordinates;\n      opt_endss = endss;\n    }\n    if (opt_layout !== undefined && opt_endss) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n      this.endss_ = opt_endss;\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n\n  }\n\n  if ( SimpleGeometry ) MultiPolygon.__proto__ = SimpleGeometry;\n  MultiPolygon.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  MultiPolygon.prototype.constructor = MultiPolygon;\n\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {module:ol/geom/Polygon} polygon Polygon.\n   * @api\n   */\n  MultiPolygon.prototype.appendPolygon = function appendPolygon (polygon) {\n    /** @type {Array.<number>} */\n    var ends;\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      var offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n    this.endss_.push(ends);\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/MultiPolygon} Clone.\n   * @override\n   * @api\n   */\n  MultiPolygon.prototype.clone = function clone () {\n    var this$1 = this;\n\n    var len = this.endss_.length;\n    var newEndss = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      newEndss[i] = this$1.endss_[i].slice();\n    }\n\n    return new MultiPolygon(\n      this.flatCoordinates.slice(), this.layout, newEndss);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiPolygon.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(\n        this.flatCoordinates, 0, this.endss_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestMultiArrayPoint(\n      this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiPolygon.prototype.containsXY = function containsXY (x, y) {\n    return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n  };\n\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  MultiPolygon.prototype.getArea = function getArea () {\n    return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n  };\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} Coordinates.\n   * @override\n   * @api\n   */\n  MultiPolygon.prototype.getCoordinates = function getCoordinates (opt_right) {\n    var flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(\n        flatCoordinates, 0, this.endss_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(\n      flatCoordinates, 0, this.endss_, this.stride);\n  };\n\n  /**\n   * @return {Array.<Array.<number>>} Endss.\n   */\n  MultiPolygon.prototype.getEndss = function getEndss () {\n    return this.endss_;\n  };\n\n  /**\n   * @return {Array.<number>} Flat interior points.\n   */\n  MultiPolygon.prototype.getFlatInteriorPoints = function getFlatInteriorPoints () {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      var flatCenters = linearRingssCenter(\n        this.flatCoordinates, 0, this.endss_, this.stride);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n        flatCenters);\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoints_;\n  };\n\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.\n   * @return {module:ol/geom/MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  MultiPolygon.prototype.getInteriorPoints = function getInteriorPoints () {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n  };\n\n  /**\n   * @return {Array.<number>} Oriented flat coordinates.\n   */\n  MultiPolygon.prototype.getOrientedFlatCoordinates = function getOrientedFlatCoordinates () {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(\n        flatCoordinates, 0, this.endss_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length =\n            orientLinearRingsArray(\n              this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiPolygon.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\n      this.flatCoordinates, 0, this.endss_, this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates, 0, simplifiedEndss);\n    return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n  };\n\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {module:ol/geom/Polygon} Polygon.\n   * @api\n   */\n  MultiPolygon.prototype.getPolygon = function getPolygon (index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n    var offset;\n    if (index === 0) {\n      offset = 0;\n    } else {\n      var prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n    var ends = this.endss_[index].slice();\n    var end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n    return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n  };\n\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array.<module:ol/geom/Polygon>} Polygons.\n   * @api\n   */\n  MultiPolygon.prototype.getPolygons = function getPolygons () {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var endss = this.endss_;\n    var polygons = [];\n    var offset = 0;\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n      var ends = endss[i].slice();\n      var end = ends[ends.length - 1];\n      if (offset !== 0) {\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n      var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n      polygons.push(polygon);\n      offset = end;\n    }\n    return polygons;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPolygon.prototype.getType = function getType () {\n    return GeometryType.MULTI_POLYGON;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPolygon.prototype.intersectsExtent = function intersectsExtent (extent) {\n    return intersectsLinearRingMultiArray(\n      this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n  };\n\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array.<Array.<Array.<module:ol/coordinate~Coordinate>>>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  MultiPolygon.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var endss = deflateMultiCoordinatesArray(\n      this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      var lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ?\n        0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  };\n\n  return MultiPolygon;\n}(SimpleGeometry));\n\n\nexport default MultiPolygon;\n\n//# sourceMappingURL=MultiPolygon.js.map"]},"metadata":{},"sourceType":"module"}
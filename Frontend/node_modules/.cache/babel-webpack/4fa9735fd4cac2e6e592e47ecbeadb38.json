{"ast":null,"code":"/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport { squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport { boundingExtent, getArea } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport PointerInteraction, { handleEvent as handlePointerEvent } from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { createEditingStyle } from '../style/Style.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/extent~Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\n\nvar ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event module:ol/interaction/Extent~ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\n\nvar ExtentInteractionEvent = function (Event) {\n  function ExtentInteractionEvent(extent) {\n    Event.call(this, ExtentEventType.EXTENTCHANGED);\n    /**\n     * The current extent.\n     * @type {module:ol/extent~Extent}\n     * @api\n     */\n\n    this.extent = extent;\n  }\n\n  if (Event) ExtentInteractionEvent.__proto__ = Event;\n  ExtentInteractionEvent.prototype = Object.create(Event && Event.prototype);\n  ExtentInteractionEvent.prototype.constructor = ExtentInteractionEvent;\n  return ExtentInteractionEvent;\n}(Event);\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires module:ol/interaction/Extent~Event\n * @api\n */\n\n\nvar ExtentInteraction = function (PointerInteraction) {\n  function ExtentInteraction(opt_options) {\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent\n    });\n    var options = opt_options || {};\n    /**\n     * Extent of the drawn box\n     * @type {module:ol/extent~Extent}\n     * @private\n     */\n\n    this.extent_ = null;\n    /**\n     * Handler for pointer move events\n     * @type {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null}\n     * @private\n     */\n\n    this.pointerHandler_ = null;\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n\n    this.snappedToVertex_ = false;\n    /**\n     * Feature for displaying the visible extent\n     * @type {module:ol/Feature}\n     * @private\n     */\n\n    this.extentFeature_ = null;\n    /**\n     * Feature for displaying the visible pointer\n     * @type {module:ol/Feature}\n     * @private\n     */\n\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n    /**\n     * Layer for the extentFeature\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n\n\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * Layer for the vertexFeature\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  if (PointerInteraction) ExtentInteraction.__proto__ = PointerInteraction;\n  ExtentInteraction.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  ExtentInteraction.prototype.constructor = ExtentInteraction;\n  /**\n   * @param {module:ol/pixel~Pixel} pixel cursor location\n   * @param {module:ol/PluggableMap} map map\n   * @returns {module:ol/coordinate~Coordinate|null} snapped vertex on extent\n   * @private\n   */\n\n  ExtentInteraction.prototype.snapToVertex_ = function snapToVertex_(pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n\n    var sortByDistance = function sortByDistance(a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) - squaredDistanceToSegment(pixelCoordinate, b);\n    };\n\n    var extent = this.getExtent();\n\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      var segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      var closestSegment = segments[0];\n      var vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      var vertexPixel = map.getPixelFromCoordinate(vertex); //if the distance is within tolerance, snap to the segment\n\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n\n        return vertex;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @param {module:ol/MapBrowserEvent} mapBrowserEvent pointer move event\n   * @private\n   */\n\n\n  ExtentInteraction.prototype.handlePointerMove_ = function handlePointerMove_(mapBrowserEvent) {\n    var pixel = mapBrowserEvent.pixel;\n    var map = mapBrowserEvent.map;\n    var vertex = this.snapToVertex_(pixel, map);\n\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixel(pixel);\n    }\n\n    this.createOrUpdatePointerFeature_(vertex);\n  };\n  /**\n   * @param {module:ol/extent~Extent} extent extent\n   * @returns {module:ol/Feature} extent as featrue\n   * @private\n   */\n\n\n  ExtentInteraction.prototype.createOrUpdateExtentFeature_ = function createOrUpdateExtentFeature_(extent) {\n    var extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n\n    return extentFeature;\n  };\n  /**\n   * @param {module:ol/coordinate~Coordinate} vertex location of feature\n   * @returns {module:ol/Feature} vertex as feature\n   * @private\n   */\n\n\n  ExtentInteraction.prototype.createOrUpdatePointerFeature_ = function createOrUpdatePointerFeature_(vertex) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry =\n      /** @type {module:ol/geom/Point} */\n      vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n\n    return vertexFeature;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ExtentInteraction.prototype.setMap = function setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {module:ol/extent~Extent} Drawn extent in the view projection.\n   * @api\n   */\n\n\n  ExtentInteraction.prototype.getExtent = function getExtent() {\n    return this.extent_;\n  };\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {module:ol/extent~Extent} extent Extent\n   * @api\n   */\n\n\n  ExtentInteraction.prototype.setExtent = function setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n  };\n\n  return ExtentInteraction;\n}(PointerInteraction);\n/**\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Event.\n * @return {boolean} Propagate event?\n * @this {module:ol/interaction/Extent~Extent}\n */\n\n\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  } //display pointer (if not dragging)\n\n\n  if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  } //call pointer to determine up/down/drag\n\n\n  handlePointerEvent.call(this, mapBrowserEvent); //return false to stop propagation\n\n  return false;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~Extent}\n */\n\n\nfunction handleDownEvent(mapBrowserEvent) {\n  var pixel = mapBrowserEvent.pixel;\n  var map = mapBrowserEvent.map;\n  var extent = this.getExtent();\n  var vertex = this.snapToVertex_(pixel, map); //find the extent corner opposite the passed corner\n\n  var getOpposingPoint = function getOpposingPoint(point) {\n    var x_ = null;\n    var y_ = null;\n\n    if (point[0] == extent[0]) {\n      x_ = extent[2];\n    } else if (point[0] == extent[2]) {\n      x_ = extent[0];\n    }\n\n    if (point[1] == extent[1]) {\n      y_ = extent[3];\n    } else if (point[1] == extent[3]) {\n      y_ = extent[1];\n    }\n\n    if (x_ !== null && y_ !== null) {\n      return [x_, y_];\n    }\n\n    return null;\n  };\n\n  if (vertex && extent) {\n    var x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n    var y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null; //snap to point\n\n    if (x !== null && y !== null) {\n      this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex)); //snap to edge\n    } else if (x !== null) {\n      this.pointerHandler_ = getEdgeHandler(getOpposingPoint([x, extent[1]]), getOpposingPoint([x, extent[3]]));\n    } else if (y !== null) {\n      this.pointerHandler_ = getEdgeHandler(getOpposingPoint([extent[0], y]), getOpposingPoint([extent[2], y]));\n    } //no snap - new bbox\n\n  } else {\n    vertex = map.getCoordinateFromPixel(pixel);\n    this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n    this.pointerHandler_ = getPointHandler(vertex);\n  }\n\n  return true; //event handled; start downup sequence\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~Extent}\n */\n\n\nfunction handleDragEvent(mapBrowserEvent) {\n  if (this.pointerHandler_) {\n    var pixelCoordinate = mapBrowserEvent.coordinate;\n    this.setExtent(this.pointerHandler_(pixelCoordinate));\n    this.createOrUpdatePointerFeature_(pixelCoordinate);\n  }\n\n  return true;\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Extent~Extent}\n */\n\n\nfunction handleUpEvent(mapBrowserEvent) {\n  this.pointerHandler_ = null; //If bbox is zero area, set to null;\n\n  var extent = this.getExtent();\n\n  if (!extent || getArea(extent) === 0) {\n    this.setExtent(null);\n  }\n\n  return false; //Stop handling downup sequence\n}\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {module:ol/style/Style~StyleFunction} Default Extent style\n */\n\n\nfunction getDefaultExtentStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n/**\n * Returns the default style for the pointer\n *\n * @return {module:ol/style/Style~StyleFunction} Default pointer style\n */\n\n\nfunction getDefaultPointerStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n/**\n * @param {module:ol/coordinate~Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent} event handler\n */\n\n\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n/**\n * @param {module:ol/coordinate~Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {module:ol/coordinate~Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null} event handler\n */\n\n\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n/**\n * @param {module:ol/extent~Extent} extent extent\n * @returns {Array<Array<module:ol/coordinate~Coordinate>>} extent line segments\n */\n\n\nfunction getSegments(extent) {\n  return [[[extent[0], extent[1]], [extent[0], extent[3]]], [[extent[0], extent[3]], [extent[2], extent[3]]], [[extent[2], extent[3]], [extent[2], extent[1]]], [[extent[2], extent[1]], [extent[0], extent[1]]]];\n}\n\nexport default ExtentInteraction; //# sourceMappingURL=Extent.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/interaction/Extent.js"],"names":["Feature","MapBrowserEventType","MapBrowserPointerEvent","squaredDistanceToSegment","closestOnSegment","distance","coordinateDistance","squaredDistance","squaredCoordinateDistance","Event","boundingExtent","getArea","GeometryType","Point","fromExtent","polygonFromExtent","PointerInteraction","handleEvent","handlePointerEvent","VectorLayer","VectorSource","createEditingStyle","ExtentEventType","EXTENTCHANGED","ExtentInteractionEvent","extent","call","__proto__","prototype","Object","create","constructor","ExtentInteraction","opt_options","handleDownEvent","handleDragEvent","handleUpEvent","options","extent_","pointerHandler_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","style","boxStyle","getDefaultExtentStyleFunction","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixel","sortByDistance","a","b","getExtent","segments","getSegments","sort","closestSegment","vertex","vertexPixel","getPixelFromCoordinate","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","extentFeature","getSource","addFeature","setGeometry","vertexFeature","geometry","getGeometry","setCoordinates","setMap","dispatchEvent","type","POINTERMOVE","handlingDownUpSequence","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","coordinate","feature","resolution","POLYGON","POINT","fixedPoint","fixedP1","fixedP2"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport PointerInteraction, {handleEvent as handlePointerEvent} from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/extent~Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n\n/**\n * @enum {string}\n */\nvar ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event module:ol/interaction/Extent~ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\nvar ExtentInteractionEvent = (function (Event) {\n  function ExtentInteractionEvent(extent) {\n    Event.call(this, ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {module:ol/extent~Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n\n  if ( Event ) ExtentInteractionEvent.__proto__ = Event;\n  ExtentInteractionEvent.prototype = Object.create( Event && Event.prototype );\n  ExtentInteractionEvent.prototype.constructor = ExtentInteractionEvent;\n\n  return ExtentInteractionEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires module:ol/interaction/Extent~Event\n * @api\n */\nvar ExtentInteraction = (function (PointerInteraction) {\n  function ExtentInteraction(opt_options) {\n\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent\n    });\n\n    var options = opt_options || {};\n\n    /**\n     * Extent of the drawn box\n     * @type {module:ol/extent~Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  if ( PointerInteraction ) ExtentInteraction.__proto__ = PointerInteraction;\n  ExtentInteraction.prototype = Object.create( PointerInteraction && PointerInteraction.prototype );\n  ExtentInteraction.prototype.constructor = ExtentInteraction;\n\n  /**\n   * @param {module:ol/pixel~Pixel} pixel cursor location\n   * @param {module:ol/PluggableMap} map map\n   * @returns {module:ol/coordinate~Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  ExtentInteraction.prototype.snapToVertex_ = function snapToVertex_ (pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    var sortByDistance = function(a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) -\n          squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    var extent = this.getExtent();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      var segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      var closestSegment = segments[0];\n\n      var vertex = (closestOnSegment(pixelCoordinate,\n        closestSegment));\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        var dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ?\n            closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * @param {module:ol/MapBrowserEvent} mapBrowserEvent pointer move event\n   * @private\n   */\n  ExtentInteraction.prototype.handlePointerMove_ = function handlePointerMove_ (mapBrowserEvent) {\n    var pixel = mapBrowserEvent.pixel;\n    var map = mapBrowserEvent.map;\n\n    var vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixel(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  };\n\n  /**\n   * @param {module:ol/extent~Extent} extent extent\n   * @returns {module:ol/Feature} extent as featrue\n   * @private\n   */\n  ExtentInteraction.prototype.createOrUpdateExtentFeature_ = function createOrUpdateExtentFeature_ (extent) {\n    var extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  };\n\n  /**\n   * @param {module:ol/coordinate~Coordinate} vertex location of feature\n   * @returns {module:ol/Feature} vertex as feature\n   * @private\n   */\n  ExtentInteraction.prototype.createOrUpdatePointerFeature_ = function createOrUpdatePointerFeature_ (vertex) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ExtentInteraction.prototype.setMap = function setMap (map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {module:ol/extent~Extent} Drawn extent in the view projection.\n   * @api\n   */\n  ExtentInteraction.prototype.getExtent = function getExtent () {\n    return this.extent_;\n  };\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {module:ol/extent~Extent} extent Extent\n   * @api\n   */\n  ExtentInteraction.prototype.setExtent = function setExtent (extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n  };\n\n  return ExtentInteraction;\n}(PointerInteraction));\n\n/**\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Event.\n * @return {boolean} Propagate event?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n  //display pointer (if not dragging)\n  if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n  //call pointer to determine up/down/drag\n  handlePointerEvent.call(this, mapBrowserEvent);\n  //return false to stop propagation\n  return false;\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleDownEvent(mapBrowserEvent) {\n  var pixel = mapBrowserEvent.pixel;\n  var map = mapBrowserEvent.map;\n\n  var extent = this.getExtent();\n  var vertex = this.snapToVertex_(pixel, map);\n\n  //find the extent corner opposite the passed corner\n  var getOpposingPoint = function(point) {\n    var x_ = null;\n    var y_ = null;\n    if (point[0] == extent[0]) {\n      x_ = extent[2];\n    } else if (point[0] == extent[2]) {\n      x_ = extent[0];\n    }\n    if (point[1] == extent[1]) {\n      y_ = extent[3];\n    } else if (point[1] == extent[3]) {\n      y_ = extent[1];\n    }\n    if (x_ !== null && y_ !== null) {\n      return [x_, y_];\n    }\n    return null;\n  };\n  if (vertex && extent) {\n    var x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;\n    var y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;\n\n    //snap to point\n    if (x !== null && y !== null) {\n      this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n    //snap to edge\n    } else if (x !== null) {\n      this.pointerHandler_ = getEdgeHandler(\n        getOpposingPoint([x, extent[1]]),\n        getOpposingPoint([x, extent[3]])\n      );\n    } else if (y !== null) {\n      this.pointerHandler_ = getEdgeHandler(\n        getOpposingPoint([extent[0], y]),\n        getOpposingPoint([extent[2], y])\n      );\n    }\n  //no snap - new bbox\n  } else {\n    vertex = map.getCoordinateFromPixel(pixel);\n    this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n    this.pointerHandler_ = getPointHandler(vertex);\n  }\n  return true; //event handled; start downup sequence\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleDragEvent(mapBrowserEvent) {\n  if (this.pointerHandler_) {\n    var pixelCoordinate = mapBrowserEvent.coordinate;\n    this.setExtent(this.pointerHandler_(pixelCoordinate));\n    this.createOrUpdatePointerFeature_(pixelCoordinate);\n  }\n  return true;\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Extent~Extent}\n */\nfunction handleUpEvent(mapBrowserEvent) {\n  this.pointerHandler_ = null;\n  //If bbox is zero area, set to null;\n  var extent = this.getExtent();\n  if (!extent || getArea(extent) === 0) {\n    this.setExtent(null);\n  }\n  return false; //Stop handling downup sequence\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {module:ol/style/Style~StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  var style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {module:ol/style/Style~StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  var style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {module:ol/coordinate~Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function(point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {module:ol/coordinate~Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {module:ol/coordinate~Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {module:ol/extent~Extent} extent extent\n * @returns {Array<Array<module:ol/coordinate~Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [[extent[0], extent[1]], [extent[0], extent[3]]],\n    [[extent[0], extent[3]], [extent[2], extent[3]]],\n    [[extent[2], extent[3]], [extent[2], extent[1]]],\n    [[extent[2], extent[1]], [extent[0], extent[1]]]\n  ];\n}\n\n\nexport default ExtentInteraction;\n\n//# sourceMappingURL=Extent.js.map"]},"metadata":{},"sourceType":"module"}
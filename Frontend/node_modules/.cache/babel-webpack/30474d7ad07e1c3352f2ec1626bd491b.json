{"ast":null,"code":"/**\n * @module ol/reproj/Image\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { getCenter, getIntersection, getHeight, getWidth } from '../extent.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport Triangulation from '../reproj/Triangulation.js';\n/**\n * @typedef {function(module:ol/extent~Extent, number, number) : module:ol/ImageBase} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\n\nvar ReprojImage = function (ImageBase) {\n  function ReprojImage(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction) {\n    var maxSourceExtent = sourceProj.getExtent();\n    var maxTargetExtent = targetProj.getExtent();\n    var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    var targetCenter = getCenter(limitedTargetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    var errorThresholdInPixels = ERROR_THRESHOLD;\n    var triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels);\n    var sourceExtent = triangulation.calculateSourceExtent();\n    var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    var state = ImageState.LOADED;\n\n    if (sourceImage) {\n      state = ImageState.IDLE;\n    }\n\n    var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n    ImageBase.call(this, targetExtent, targetResolution, sourcePixelRatio, state);\n    /**\n     * @private\n     * @type {module:ol/proj/Projection}\n     */\n\n    this.targetProj_ = targetProj;\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n\n    this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @private\n     * @type {!module:ol/reproj/Triangulation}\n     */\n\n    this.triangulation_ = triangulation;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.targetResolution_ = targetResolution;\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n\n    this.targetExtent_ = targetExtent;\n    /**\n     * @private\n     * @type {module:ol/ImageBase}\n     */\n\n    this.sourceImage_ = sourceImage;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.sourcePixelRatio_ = sourcePixelRatio;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n\n    this.sourceListenerKey_ = null;\n  }\n\n  if (ImageBase) ReprojImage.__proto__ = ImageBase;\n  ReprojImage.prototype = Object.create(ImageBase && ImageBase.prototype);\n  ReprojImage.prototype.constructor = ReprojImage;\n  /**\n   * @inheritDoc\n   */\n\n  ReprojImage.prototype.disposeInternal = function disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n\n    ImageBase.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReprojImage.prototype.getImage = function getImage() {\n    return this.canvas_;\n  };\n  /**\n   * @return {module:ol/proj/Projection} Projection.\n   */\n\n\n  ReprojImage.prototype.getProjection = function getProjection() {\n    return this.targetProj_;\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojImage.prototype.reproject_ = function reproject_() {\n    var sourceState = this.sourceImage_.getState();\n\n    if (sourceState == ImageState.LOADED) {\n      var width = getWidth(this.targetExtent_) / this.targetResolution_;\n      var height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n        extent: this.sourceImage_.getExtent(),\n        image: this.sourceImage_.getImage()\n      }], 0);\n    }\n\n    this.state = sourceState;\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ReprojImage.prototype.load = function load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      var sourceState = this.sourceImage_.getState();\n\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {\n          var sourceState = this.sourceImage_.getState();\n\n          if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n            this.unlistenSource_();\n            this.reproject_();\n          }\n        }, this);\n        this.sourceImage_.load();\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  ReprojImage.prototype.unlistenSource_ = function unlistenSource_() {\n    unlistenByKey(\n    /** @type {!module:ol/events~EventsKey} */\n    this.sourceListenerKey_);\n    this.sourceListenerKey_ = null;\n  };\n\n  return ReprojImage;\n}(ImageBase);\n\nexport default ReprojImage; //# sourceMappingURL=Image.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/reproj/Image.js"],"names":["ERROR_THRESHOLD","ImageBase","ImageState","listen","unlistenByKey","EventType","getCenter","getIntersection","getHeight","getWidth","calculateSourceResolution","render","renderReprojected","Triangulation","ReprojImage","sourceProj","targetProj","targetExtent","targetResolution","pixelRatio","getImageFunction","maxSourceExtent","getExtent","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","LOADED","IDLE","sourcePixelRatio","getPixelRatio","call","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","canvas_","sourceListenerKey_","__proto__","prototype","Object","create","constructor","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","width","height","getResolution","extent","image","changed","load","ERROR","CHANGE","e"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,eAAR,QAA8B,aAA9B;AAEA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,cAApC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,SAAR,EAAmBC,eAAnB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA8D,cAA9D;AACA,SAAQC,yBAAR,EAAmCC,MAAM,IAAIC,iBAA7C,QAAqE,cAArE;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAI,UAAUb,SAAV,EAAqB;AACtC,WAASa,WAAT,CAAqBC,UAArB,EAAiCC,UAAjC,EAA6CC,YAA7C,EAA2DC,gBAA3D,EAA6EC,UAA7E,EAAyFC,gBAAzF,EAA2G;AACzG,QAAIC,eAAe,GAAGN,UAAU,CAACO,SAAX,EAAtB;AACA,QAAIC,eAAe,GAAGP,UAAU,CAACM,SAAX,EAAtB;AAEA,QAAIE,mBAAmB,GAAGD,eAAe,GACvChB,eAAe,CAACU,YAAD,EAAeM,eAAf,CADwB,GACUN,YADnD;AAGA,QAAIQ,YAAY,GAAGnB,SAAS,CAACkB,mBAAD,CAA5B;AACA,QAAIE,gBAAgB,GAAGhB,yBAAyB,CAC9CK,UAD8C,EAClCC,UADkC,EACtBS,YADsB,EACRP,gBADQ,CAAhD;AAGA,QAAIS,sBAAsB,GAAG3B,eAA7B;AAEA,QAAI4B,aAAa,GAAG,IAAIf,aAAJ,CAClBE,UADkB,EACNC,UADM,EACMQ,mBADN,EAC2BH,eAD3B,EAElBK,gBAAgB,GAAGC,sBAFD,CAApB;AAIA,QAAIE,YAAY,GAAGD,aAAa,CAACE,qBAAd,EAAnB;AACA,QAAIC,WAAW,GAAGX,gBAAgB,CAACS,YAAD,EAAeH,gBAAf,EAAiCP,UAAjC,CAAlC;AACA,QAAIa,KAAK,GAAG9B,UAAU,CAAC+B,MAAvB;;AACA,QAAIF,WAAJ,EAAiB;AACfC,MAAAA,KAAK,GAAG9B,UAAU,CAACgC,IAAnB;AACD;;AACD,QAAIC,gBAAgB,GAAGJ,WAAW,GAAGA,WAAW,CAACK,aAAZ,EAAH,GAAiC,CAAnE;AAEAnC,IAAAA,SAAS,CAACoC,IAAV,CAAe,IAAf,EAAqBpB,YAArB,EAAmCC,gBAAnC,EAAqDiB,gBAArD,EAAuEH,KAAvE;AAEA;AACJ;AACA;AACA;;AACI,SAAKM,WAAL,GAAmBtB,UAAnB;AAEA;AACJ;AACA;AACA;;AACI,SAAKuB,gBAAL,GAAwBlB,eAAxB;AAEA;AACJ;AACA;AACA;;AACI,SAAKmB,cAAL,GAAsBZ,aAAtB;AAEA;AACJ;AACA;AACA;;AACI,SAAKa,iBAAL,GAAyBvB,gBAAzB;AAEA;AACJ;AACA;AACA;;AACI,SAAKwB,aAAL,GAAqBzB,YAArB;AAEA;AACJ;AACA;AACA;;AACI,SAAK0B,YAAL,GAAoBZ,WAApB;AAEA;AACJ;AACA;AACA;;AACI,SAAKa,iBAAL,GAAyBT,gBAAzB;AAEA;AACJ;AACA;AACA;;AACI,SAAKU,OAAL,GAAe,IAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,kBAAL,GAA0B,IAA1B;AACD;;AAED,MAAK7C,SAAL,EAAiBa,WAAW,CAACiC,SAAZ,GAAwB9C,SAAxB;AACjBa,EAAAA,WAAW,CAACkC,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAejD,SAAS,IAAIA,SAAS,CAAC+C,SAAtC,CAAxB;AACAlC,EAAAA,WAAW,CAACkC,SAAZ,CAAsBG,WAAtB,GAAoCrC,WAApC;AAEA;AACF;AACA;;AACEA,EAAAA,WAAW,CAACkC,SAAZ,CAAsBI,eAAtB,GAAwC,SAASA,eAAT,GAA4B;AAClE,QAAI,KAAKpB,KAAL,IAAc9B,UAAU,CAACmD,OAA7B,EAAsC;AACpC,WAAKC,eAAL;AACD;;AACDrD,IAAAA,SAAS,CAAC+C,SAAV,CAAoBI,eAApB,CAAoCf,IAApC,CAAyC,IAAzC;AACD,GALD;AAOA;AACF;AACA;;;AACEvB,EAAAA,WAAW,CAACkC,SAAZ,CAAsBO,QAAtB,GAAiC,SAASA,QAAT,GAAqB;AACpD,WAAO,KAAKV,OAAZ;AACD,GAFD;AAIA;AACF;AACA;;;AACE/B,EAAAA,WAAW,CAACkC,SAAZ,CAAsBQ,aAAtB,GAAsC,SAASA,aAAT,GAA0B;AAC9D,WAAO,KAAKlB,WAAZ;AACD,GAFD;AAIA;AACF;AACA;;;AACExB,EAAAA,WAAW,CAACkC,SAAZ,CAAsBS,UAAtB,GAAmC,SAASA,UAAT,GAAuB;AACxD,QAAIC,WAAW,GAAG,KAAKf,YAAL,CAAkBgB,QAAlB,EAAlB;;AACA,QAAID,WAAW,IAAIxD,UAAU,CAAC+B,MAA9B,EAAsC;AACpC,UAAI2B,KAAK,GAAGnD,QAAQ,CAAC,KAAKiC,aAAN,CAAR,GAA+B,KAAKD,iBAAhD;AACA,UAAIoB,MAAM,GAAGrD,SAAS,CAAC,KAAKkC,aAAN,CAAT,GAAgC,KAAKD,iBAAlD;AAEA,WAAKI,OAAL,GAAejC,iBAAiB,CAACgD,KAAD,EAAQC,MAAR,EAAgB,KAAKjB,iBAArB,EAC9B,KAAKD,YAAL,CAAkBmB,aAAlB,EAD8B,EACK,KAAKvB,gBADV,EAE9B,KAAKE,iBAFyB,EAEN,KAAKC,aAFC,EAEc,KAAKF,cAFnB,EAEmC,CAAC;AAChEuB,QAAAA,MAAM,EAAE,KAAKpB,YAAL,CAAkBrB,SAAlB,EADwD;AAEhE0C,QAAAA,KAAK,EAAE,KAAKrB,YAAL,CAAkBY,QAAlB;AAFyD,OAAD,CAFnC,EAK1B,CAL0B,CAAhC;AAMD;;AACD,SAAKvB,KAAL,GAAa0B,WAAb;AACA,SAAKO,OAAL;AACD,GAfD;AAiBA;AACF;AACA;;;AACEnD,EAAAA,WAAW,CAACkC,SAAZ,CAAsBkB,IAAtB,GAA6B,SAASA,IAAT,GAAiB;AAC5C,QAAI,KAAKlC,KAAL,IAAc9B,UAAU,CAACgC,IAA7B,EAAmC;AACjC,WAAKF,KAAL,GAAa9B,UAAU,CAACmD,OAAxB;AACA,WAAKY,OAAL;AAEA,UAAIP,WAAW,GAAG,KAAKf,YAAL,CAAkBgB,QAAlB,EAAlB;;AACA,UAAID,WAAW,IAAIxD,UAAU,CAAC+B,MAA1B,IAAoCyB,WAAW,IAAIxD,UAAU,CAACiE,KAAlE,EAAyE;AACvE,aAAKV,UAAL;AACD,OAFD,MAEO;AACL,aAAKX,kBAAL,GAA0B3C,MAAM,CAAC,KAAKwC,YAAN,EAC9BtC,SAAS,CAAC+D,MADoB,EACZ,UAASC,CAAT,EAAY;AAC5B,cAAIX,WAAW,GAAG,KAAKf,YAAL,CAAkBgB,QAAlB,EAAlB;;AACA,cAAID,WAAW,IAAIxD,UAAU,CAAC+B,MAA1B,IAAoCyB,WAAW,IAAIxD,UAAU,CAACiE,KAAlE,EAAyE;AACvE,iBAAKb,eAAL;AACA,iBAAKG,UAAL;AACD;AACF,SAP6B,EAO3B,IAP2B,CAAhC;AAQA,aAAKd,YAAL,CAAkBuB,IAAlB;AACD;AACF;AACF,GApBD;AAsBA;AACF;AACA;;;AACEpD,EAAAA,WAAW,CAACkC,SAAZ,CAAsBM,eAAtB,GAAwC,SAASA,eAAT,GAA4B;AAClElD,IAAAA,aAAa;AAAC;AAA4C,SAAK0C,kBAAlD,CAAb;AACA,SAAKA,kBAAL,GAA0B,IAA1B;AACD,GAHD;;AAKA,SAAOhC,WAAP;AACD,CArKkB,CAqKjBb,SArKiB,CAAnB;;AAwKA,eAAea,WAAf,C,CAEA","sourcesContent":["/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {getCenter, getIntersection, getHeight, getWidth} from '../extent.js';\nimport {calculateSourceResolution, render as renderReprojected} from '../reproj.js';\nimport Triangulation from '../reproj/Triangulation.js';\n\n\n/**\n * @typedef {function(module:ol/extent~Extent, number, number) : module:ol/ImageBase} FunctionType\n */\n\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nvar ReprojImage = (function (ImageBase) {\n  function ReprojImage(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction) {\n    var maxSourceExtent = sourceProj.getExtent();\n    var maxTargetExtent = targetProj.getExtent();\n\n    var limitedTargetExtent = maxTargetExtent ?\n      getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n\n    var targetCenter = getCenter(limitedTargetExtent);\n    var sourceResolution = calculateSourceResolution(\n      sourceProj, targetProj, targetCenter, targetResolution);\n\n    var errorThresholdInPixels = ERROR_THRESHOLD;\n\n    var triangulation = new Triangulation(\n      sourceProj, targetProj, limitedTargetExtent, maxSourceExtent,\n      sourceResolution * errorThresholdInPixels);\n\n    var sourceExtent = triangulation.calculateSourceExtent();\n    var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    var state = ImageState.LOADED;\n    if (sourceImage) {\n      state = ImageState.IDLE;\n    }\n    var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    ImageBase.call(this, targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {module:ol/proj/Projection}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!module:ol/reproj/Triangulation}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {module:ol/ImageBase}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/events~EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  if ( ImageBase ) ReprojImage.__proto__ = ImageBase;\n  ReprojImage.prototype = Object.create( ImageBase && ImageBase.prototype );\n  ReprojImage.prototype.constructor = ReprojImage;\n\n  /**\n   * @inheritDoc\n   */\n  ReprojImage.prototype.disposeInternal = function disposeInternal () {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    ImageBase.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ReprojImage.prototype.getImage = function getImage () {\n    return this.canvas_;\n  };\n\n  /**\n   * @return {module:ol/proj/Projection} Projection.\n   */\n  ReprojImage.prototype.getProjection = function getProjection () {\n    return this.targetProj_;\n  };\n\n  /**\n   * @private\n   */\n  ReprojImage.prototype.reproject_ = function reproject_ () {\n    var sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      var width = getWidth(this.targetExtent_) / this.targetResolution_;\n      var height = getHeight(this.targetExtent_) / this.targetResolution_;\n\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_,\n        this.sourceImage_.getResolution(), this.maxSourceExtent_,\n        this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n          extent: this.sourceImage_.getExtent(),\n          image: this.sourceImage_.getImage()\n        }], 0);\n    }\n    this.state = sourceState;\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ReprojImage.prototype.load = function load () {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      var sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_,\n          EventType.CHANGE, function(e) {\n            var sourceState = this.sourceImage_.getState();\n            if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          }, this);\n        this.sourceImage_.load();\n      }\n    }\n  };\n\n  /**\n   * @private\n   */\n  ReprojImage.prototype.unlistenSource_ = function unlistenSource_ () {\n    unlistenByKey(/** @type {!module:ol/events~EventsKey} */ (this.sourceListenerKey_));\n    this.sourceListenerKey_ = null;\n  };\n\n  return ReprojImage;\n}(ImageBase));\n\n\nexport default ReprojImage;\n\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar\n/** @type {?} */\nMAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n\nvar\n/** @type {?} */\nnextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\n\nvar\n/** @type {?} */\nMAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatCheckbox;\n  }),\n  multi: true\n};\n/** @enum {number} */\n\nvar TransitionCheckState = {\n  /** The initial state of the component before any user interaction. */\n  Init: 0,\n\n  /** The state representing the component when it's becoming checked. */\n  Checked: 1,\n\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked: 2,\n\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate: 3\n};\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n/**\n * Change event object emitted by MatCheckbox.\n */\n\nvar MatCheckboxChange = function MatCheckboxChange() {\n  _classCallCheck(this, MatCheckboxChange);\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatCheckboxBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatCheckboxBase(_elementRef) {\n  _classCallCheck(this, MatCheckboxBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar\n/** @type {?} */\n_MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n\n\nvar MatCheckbox = /*#__PURE__*/function (_MatCheckboxMixinBase2) {\n  _inherits(MatCheckbox, _MatCheckboxMixinBase2);\n\n  var _super = _createSuper(MatCheckbox);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _focusMonitor\n   * @param {?} _ngZone\n   * @param {?} tabIndex\n   * @param {?} _clickAction\n   * @param {?=} _animationMode\n   */\n  function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatCheckbox);\n\n    _this = _super.call(this, elementRef);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._focusMonitor = _focusMonitor;\n    _this._ngZone = _ngZone;\n    _this._clickAction = _clickAction;\n    _this._animationMode = _animationMode;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n\n    _this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this.ariaLabelledby = null;\n    _this._uniqueId = \"mat-checkbox-\".concat(++nextUniqueId);\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     */\n\n    _this.id = _this._uniqueId;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     */\n\n    _this.labelPosition = 'after';\n    /**\n     * Name value will be applied to the input element if present\n     */\n\n    _this.name = null;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     */\n\n    _this.change = new EventEmitter();\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     */\n\n    _this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     */\n\n    _this._onTouched = function () {};\n\n    _this._currentAnimationClass = '';\n    _this._currentCheckState = TransitionCheckState.Init;\n\n    _this._controlValueAccessorChangeFn = function () {};\n\n    _this._checked = false;\n    _this._disabled = false;\n    _this._indeterminate = false;\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n\n\n  _createClass(MatCheckbox, [{\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._inputElement.nativeElement).subscribe(function (focusOrigin) {\n        return _this2._onInputFocusChange(focusOrigin);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value != this.checked) {\n        this._checked = value;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value != this.disabled) {\n        this._disabled = value;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"indeterminate\",\n    get: function get() {\n      return this._indeterminate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var\n      /** @type {?} */\n      changed = value != this._indeterminate;\n      this._indeterminate = value;\n\n      if (changed) {\n        if (this._indeterminate) {\n          this._transitionCheckState(TransitionCheckState.Indeterminate);\n        } else {\n          this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n        }\n\n        this.indeterminateChange.emit(this._indeterminate);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // This method is getting called whenever the label of the checkbox changes.\n      // Since the checkbox uses the OnPush strategy we need to notify it about the change\n      // that has been recognized by the cdkObserveContent directive.\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaChecked\",\n    value: function _getAriaChecked() {\n      return this.checked ? 'true' : this.indeterminate ? 'mixed' : 'false';\n    }\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_transitionCheckState\",\n    value: function _transitionCheckState(newState) {\n      var\n      /** @type {?} */\n      oldState = this._currentCheckState;\n      var\n      /** @type {?} */\n      element = this._elementRef.nativeElement;\n\n      if (oldState === newState) {\n        return;\n      }\n\n      if (this._currentAnimationClass.length > 0) {\n        element.classList.remove(this._currentAnimationClass);\n      }\n\n      this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n      this._currentCheckState = newState;\n\n      if (this._currentAnimationClass.length > 0) {\n        element.classList.add(this._currentAnimationClass); // Remove the animation class to avoid animation when the checkbox is moved between containers\n\n        var\n        /** @type {?} */\n        animationClass = this._currentAnimationClass;\n\n        this._ngZone.runOutsideAngular(function () {\n          setTimeout(function () {\n            element.classList.remove(animationClass);\n          }, 1000);\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      var\n      /** @type {?} */\n      event = new MatCheckboxChange();\n      event.source = this;\n      event.checked = this.checked;\n\n      this._controlValueAccessorChangeFn(this.checked);\n\n      this.change.emit(event);\n    }\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputFocusChange\",\n    value: function _onInputFocusChange(focusOrigin) {\n      var _this3 = this;\n\n      // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n      if (!this._focusRipple && focusOrigin === 'keyboard') {\n        this._focusRipple = this.ripple.launch(0, 0, {\n          persistent: true\n        });\n      } else if (!focusOrigin) {\n        if (this._focusRipple) {\n          this._focusRipple.fadeOut();\n\n          this._focusRipple = null;\n        } // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n        // the form control it has been touched until the next tick.\n\n\n        Promise.resolve().then(function () {\n          return _this3._onTouched();\n        });\n      }\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      var _this4 = this;\n\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `checkbox` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n      if (!this.disabled && this._clickAction !== 'noop') {\n        // When user manually click on the checkbox, `indeterminate` is set to false.\n        if (this.indeterminate && this._clickAction !== 'check') {\n          Promise.resolve().then(function () {\n            _this4._indeterminate = false;\n\n            _this4.indeterminateChange.emit(_this4._indeterminate);\n          });\n        }\n\n        this.toggle();\n\n        this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked); // Emit our custom change event if the native input emitted one.\n        // It is important to only emit it, if the native input triggered one, because\n        // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n        this._emitChangeEvent();\n      } else if (!this.disabled && this._clickAction === 'noop') {\n        // Reset native input when clicked with noop. The native checkbox becomes checked after\n        // click, reset it to be align with `checked` value of `mat-checkbox`.\n        this._inputElement.nativeElement.checked = this.checked;\n        this._inputElement.nativeElement.indeterminate = this.indeterminate;\n      }\n    }\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInteractionEvent\",\n    value: function _onInteractionEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n    }\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAnimationClassForCheckStateTransition\",\n    value: function _getAnimationClassForCheckStateTransition(oldState, newState) {\n      // Don't transition if animations are disabled.\n      if (this._animationMode === 'NoopAnimations') {\n        return '';\n      }\n\n      var\n      /** @type {?} */\n      animSuffix = '';\n\n      switch (oldState) {\n        case TransitionCheckState.Init:\n          // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n          // [checked] bound to it.\n          if (newState === TransitionCheckState.Checked) {\n            animSuffix = 'unchecked-checked';\n          } else if (newState == TransitionCheckState.Indeterminate) {\n            animSuffix = 'unchecked-indeterminate';\n          } else {\n            return '';\n          }\n\n          break;\n\n        case TransitionCheckState.Unchecked:\n          animSuffix = newState === TransitionCheckState.Checked ? 'unchecked-checked' : 'unchecked-indeterminate';\n          break;\n\n        case TransitionCheckState.Checked:\n          animSuffix = newState === TransitionCheckState.Unchecked ? 'checked-unchecked' : 'checked-indeterminate';\n          break;\n\n        case TransitionCheckState.Indeterminate:\n          animSuffix = newState === TransitionCheckState.Checked ? 'indeterminate-checked' : 'indeterminate-unchecked';\n          break;\n      }\n\n      return \"mat-checkbox-anim-\".concat(animSuffix);\n    }\n  }]);\n\n  return MatCheckbox;\n}(_MatCheckboxMixinBase);\n\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  viewQuery: function MatCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 11,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    required: \"required\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\",\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 16,\n  vars: 20,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n      ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(8, \"svg\", 8);\n      ɵngcc0.ɵɵelement(9, \"path\", 9);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n      ɵngcc0.ɵɵtext(14, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(15);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      var _r2 = ɵngcc0.ɵɵreference(12);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n      ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 25)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    }\n  },\n  directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCheckbox.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_CHECKBOX_CLICK_ACTION]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatCheckbox.propDecorators = {\n  \"ariaLabel\": [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  \"ariaLabelledby\": [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  \"id\": [{\n    type: Input\n  }],\n  \"required\": [{\n    type: Input\n  }],\n  \"labelPosition\": [{\n    type: Input\n  }],\n  \"name\": [{\n    type: Input\n  }],\n  \"change\": [{\n    type: Output\n  }],\n  \"indeterminateChange\": [{\n    type: Output\n  }],\n  \"value\": [{\n    type: Input\n  }],\n  \"_inputElement\": [{\n    type: ViewChild,\n    args: ['input']\n  }],\n  \"ripple\": [{\n    type: ViewChild,\n    args: [MatRipple]\n  }],\n  \"checked\": [{\n    type: Input\n  }],\n  \"disabled\": [{\n    type: Input\n  }],\n  \"indeterminate\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"25\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"],\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\"\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_CLICK_ACTION]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar\n/** @type {?} */\nMAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatCheckboxRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n\nvar MatCheckboxRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatCheckboxRequiredValidator, _CheckboxRequiredVali);\n\n  var _super2 = _createSuper(MatCheckboxRequiredValidator);\n\n  function MatCheckboxRequiredValidator() {\n    _classCallCheck(this, MatCheckboxRequiredValidator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatCheckboxRequiredValidator;\n}(CheckboxRequiredValidator);\n\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) {\n  return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator);\n};\n\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  hostVars: 1,\n  hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n      host: {\n        '[attr.required]': 'required ? \"\" : null'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatCheckboxModule = function MatCheckboxModule() {\n  _classCallCheck(this, MatCheckboxModule);\n};\n\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) {\n  return new (t || MatCheckboxModule)();\n};\n\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatRippleModule, MatCommonModule, ObserversModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, {\n    declarations: function declarations() {\n      return [MatCheckbox, MatCheckboxRequiredValidator];\n    },\n    imports: function imports() {\n      return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n      declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator }; //# sourceMappingURL=checkbox.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/material/__ivy_ngcc__/esm2015/checkbox.js"],"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","ViewChild","ViewEncapsulation","Directive","NgModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","CheckboxRequiredValidator","NG_VALIDATORS","MatRipple","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","enterDuration","_c2","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","_required","value","monitor","_inputElement","nativeElement","subscribe","focusOrigin","_onInputFocusChange","stopMonitoring","checked","markForCheck","disabled","changed","_transitionCheckState","emit","disableRipple","fn","isDisabled","indeterminate","newState","oldState","element","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","event","source","_focusRipple","ripple","launch","persistent","fadeOut","Promise","resolve","then","stopPropagation","toggle","_emitChangeEvent","focusVia","animSuffix","ɵfac","MatCheckbox_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatCheckbox_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatCheckbox_HostBindings","ɵɵhostProperty","ɵɵclassProp","inputs","color","required","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatCheckbox_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatCheckbox_Template_input_change_3_listener","$event","_onInteractionEvent","MatCheckbox_Template_input_click_3_listener","_onInputClick","ɵɵelementEnd","ɵɵelement","ɵɵnamespaceSVG","ɵɵnamespaceHTML","MatCheckbox_Template_span_cdkObserveContent_11_listener","_onLabelTextChange","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r2","ɵɵattribute","inputId","ɵɵadvance","textContent","trim","ɵɵproperty","_getAriaChecked","_isRippleDisabled","ɵɵpureFunction0","directives","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","MatCheckboxRequiredValidator_Factory","ɵMatCheckboxRequiredValidator_BaseFactory","ɵdir","ɵɵdefineDirective","MatCheckboxRequiredValidator_HostBindings","ɵɵgetInheritedFactory","MatCheckboxModule","MatCheckboxModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst /** @type {?} */ MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nconst /** @type {?} */ MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst /** @type {?} */ _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = TransitionCheckState.Init;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        const /** @type {?} */ changed = value != this._indeterminate;\n        this._indeterminate = value;\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            }\n            else {\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        let /** @type {?} */ oldState = this._currentCheckState;\n        let /** @type {?} */ element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const /** @type {?} */ animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        let /** @type {?} */ event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    _onInputFocusChange(focusOrigin) {\n        // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            this._focusRipple = this.ripple.launch(0, 0, { persistent: true });\n        }\n        else if (!focusOrigin) {\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n            // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n            // Angular does not expect events to be raised during change detection, so any state change\n            // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n            // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n            // the form control it has been touched until the next tick.\n            Promise.resolve().then(() => this._onTouched());\n        }\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let /** @type {?} */ animSuffix = '';\n        switch (oldState) {\n            case TransitionCheckState.Init:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === TransitionCheckState.Checked) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == TransitionCheckState.Indeterminate) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case TransitionCheckState.Unchecked:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case TransitionCheckState.Checked:\n                animSuffix = newState === TransitionCheckState.Unchecked ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case TransitionCheckState.Indeterminate:\n                animSuffix = newState === TransitionCheckState.Checked ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 11, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 16, vars: 20, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(8, \"svg\", 8);\n        ɵngcc0.ɵɵelement(9, \"path\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 25)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: FocusMonitor, },\n    { type: NgZone, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] },] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n];\nMatCheckbox.propDecorators = {\n    \"ariaLabel\": [{ type: Input, args: ['aria-label',] },],\n    \"ariaLabelledby\": [{ type: Input, args: ['aria-labelledby',] },],\n    \"id\": [{ type: Input },],\n    \"required\": [{ type: Input },],\n    \"labelPosition\": [{ type: Input },],\n    \"name\": [{ type: Input },],\n    \"change\": [{ type: Output },],\n    \"indeterminateChange\": [{ type: Output },],\n    \"value\": [{ type: Input },],\n    \"_inputElement\": [{ type: ViewChild, args: ['input',] },],\n    \"ripple\": [{ type: ViewChild, args: [MatRipple,] },],\n    \"checked\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n    \"indeterminate\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{ selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"25\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}@media screen and (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}\"],\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) { return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator); };\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); };\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatRippleModule, MatCommonModule, ObserversModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox, MatCheckboxRequiredValidator]; }, imports: function () { return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule]; }, exports: function () { return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n                exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n                declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n\n//# sourceMappingURL=checkbox.js.map"]},"metadata":{},"sourceType":"module"}
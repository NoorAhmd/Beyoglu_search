{"ast":null,"code":"/**\n * @module ol/tilegrid/TileGrid\n */\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { clamp } from '../math.js';\nimport { toSize } from '../size.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\n/**\n * @private\n * @type {module:ol/tilecoord~TileCoord}\n */\n\nvar tmpTileCoord = [0, 0, 0];\n/**\n * @typedef {Object} Options\n * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {module:ol/coordinate~Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array.<module:ol/coordinate~Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array.<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array.<module:ol/size~Size>} [sizes] Sizes.\n * @property {number|module:ol/size~Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array.<module:ol/size~Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\n\nvar TileGrid = function TileGrid(options) {\n  var this$1 = this;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n  /**\n   * @private\n   * @type {!Array.<number>}\n   */\n\n  this.resolutions_ = options.resolutions;\n  assert(isSorted(this.resolutions_, function (a, b) {\n    return b - a;\n  }, true), 17); // `resolutions` must be sorted in descending order\n  // check if we've got a consistent zoom factor and origin\n\n  var zoomFactor;\n\n  if (!options.origins) {\n    for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n      if (!zoomFactor) {\n        zoomFactor = this$1.resolutions_[i] / this$1.resolutions_[i + 1];\n      } else {\n        if (this$1.resolutions_[i] / this$1.resolutions_[i + 1] !== zoomFactor) {\n          zoomFactor = undefined;\n          break;\n        }\n      }\n    }\n  }\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n\n  this.zoomFactor_ = zoomFactor;\n  /**\n   * @protected\n   * @type {number}\n   */\n\n  this.maxZoom = this.resolutions_.length - 1;\n  /**\n   * @private\n   * @type {module:ol/coordinate~Coordinate}\n   */\n\n  this.origin_ = options.origin !== undefined ? options.origin : null;\n  /**\n   * @private\n   * @type {Array.<module:ol/coordinate~Coordinate>}\n   */\n\n  this.origins_ = null;\n\n  if (options.origins !== undefined) {\n    this.origins_ = options.origins;\n    assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n  }\n\n  var extent = options.extent;\n\n  if (extent !== undefined && !this.origin_ && !this.origins_) {\n    this.origin_ = getTopLeft(extent);\n  }\n\n  assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n\n  /**\n   * @private\n   * @type {Array.<number|module:ol/size~Size>}\n   */\n\n  this.tileSizes_ = null;\n\n  if (options.tileSizes !== undefined) {\n    this.tileSizes_ = options.tileSizes;\n    assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n  }\n  /**\n   * @private\n   * @type {number|module:ol/size~Size}\n   */\n\n\n  this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n  assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n\n  this.extent_ = extent !== undefined ? extent : null;\n  /**\n   * @private\n   * @type {Array.<module:ol/TileRange>}\n   */\n\n  this.fullTileRanges_ = null;\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n\n  this.tmpSize_ = [0, 0];\n\n  if (options.sizes !== undefined) {\n    this.fullTileRanges_ = options.sizes.map(function (size, z) {\n      var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n      return tileRange;\n    }, this);\n  } else if (extent) {\n    this.calculateTileRanges_(extent);\n  }\n};\n/**\n * Call a function with each tile coordinate for a given extent and zoom level.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} zoom Integer zoom level.\n * @param {function(module:ol/tilecoord~TileCoord)} callback Function called with each tile coordinate.\n * @api\n */\n\n\nTileGrid.prototype.forEachTileCoord = function forEachTileCoord(extent, zoom, callback) {\n  var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n\n  for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n    for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n      callback([zoom, i, j]);\n    }\n  }\n};\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {function(this: T, number, module:ol/TileRange): boolean} callback Callback.\n * @param {T=} opt_this The object to use as `this` in `callback`.\n * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.\n * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\n * @return {boolean} Callback succeeded.\n * @template T\n */\n\n\nTileGrid.prototype.forEachTileCoordParentTileRange = function forEachTileCoordParentTileRange(tileCoord, callback, opt_this, opt_tileRange, opt_extent) {\n  var this$1 = this;\n  var tileRange, x, y;\n  var tileCoordExtent = null;\n  var z = tileCoord[0] - 1;\n\n  if (this.zoomFactor_ === 2) {\n    x = tileCoord[1];\n    y = tileCoord[2];\n  } else {\n    tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n  }\n\n  while (z >= this.minZoom) {\n    if (this$1.zoomFactor_ === 2) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n    } else {\n      tileRange = this$1.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n    }\n\n    if (callback.call(opt_this, z, tileRange)) {\n      return true;\n    }\n\n    --z;\n  }\n\n  return false;\n};\n/**\n * Get the extent for this tile grid, if it was configured.\n * @return {module:ol/extent~Extent} Extent.\n */\n\n\nTileGrid.prototype.getExtent = function getExtent() {\n  return this.extent_;\n};\n/**\n * Get the maximum zoom level for the grid.\n * @return {number} Max zoom.\n * @api\n */\n\n\nTileGrid.prototype.getMaxZoom = function getMaxZoom() {\n  return this.maxZoom;\n};\n/**\n * Get the minimum zoom level for the grid.\n * @return {number} Min zoom.\n * @api\n */\n\n\nTileGrid.prototype.getMinZoom = function getMinZoom() {\n  return this.minZoom;\n};\n/**\n * Get the origin for the grid at the given zoom level.\n * @param {number} z Integer zoom level.\n * @return {module:ol/coordinate~Coordinate} Origin.\n * @api\n */\n\n\nTileGrid.prototype.getOrigin = function getOrigin(z) {\n  if (this.origin_) {\n    return this.origin_;\n  } else {\n    return this.origins_[z];\n  }\n};\n/**\n * Get the resolution for the given zoom level.\n * @param {number} z Integer zoom level.\n * @return {number} Resolution.\n * @api\n */\n\n\nTileGrid.prototype.getResolution = function getResolution(z) {\n  return this.resolutions_[z];\n};\n/**\n * Get the list of resolutions for the tile grid.\n * @return {Array.<number>} Resolutions.\n * @api\n */\n\n\nTileGrid.prototype.getResolutions = function getResolutions() {\n  return this.resolutions_;\n};\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.\n * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\n * @return {module:ol/TileRange} Tile range.\n */\n\n\nTileGrid.prototype.getTileCoordChildTileRange = function getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {\n  if (tileCoord[0] < this.maxZoom) {\n    if (this.zoomFactor_ === 2) {\n      var minX = tileCoord[1] * 2;\n      var minY = tileCoord[2] * 2;\n      return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n    }\n\n    var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n  }\n\n  return null;\n};\n/**\n * Get the extent for a tile range.\n * @param {number} z Integer zoom level.\n * @param {module:ol/TileRange} tileRange Tile range.\n * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\n * @return {module:ol/extent~Extent} Extent.\n */\n\n\nTileGrid.prototype.getTileRangeExtent = function getTileRangeExtent(z, tileRange, opt_extent) {\n  var origin = this.getOrigin(z);\n  var resolution = this.getResolution(z);\n  var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n  var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n  var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n  var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n  var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n/**\n * Get a tile range for the given extent and integer zoom level.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} z Integer zoom level.\n * @param {module:ol/TileRange=} opt_tileRange Temporary tile range object.\n * @return {module:ol/TileRange} Tile range.\n */\n\n\nTileGrid.prototype.getTileRangeForExtentAndZ = function getTileRangeForExtentAndZ(extent, z, opt_tileRange) {\n  var tileCoord = tmpTileCoord;\n  this.getTileCoordForXYAndZ_(extent[0], extent[1], z, false, tileCoord);\n  var minX = tileCoord[1];\n  var minY = tileCoord[2];\n  this.getTileCoordForXYAndZ_(extent[2], extent[3], z, true, tileCoord);\n  return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n};\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @return {module:ol/coordinate~Coordinate} Tile center.\n */\n\n\nTileGrid.prototype.getTileCoordCenter = function getTileCoordCenter(tileCoord) {\n  var origin = this.getOrigin(tileCoord[0]);\n  var resolution = this.getResolution(tileCoord[0]);\n  var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n  return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] + (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n};\n/**\n * Get the extent of a tile coordinate.\n *\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/extent~Extent=} opt_extent Temporary extent object.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\n\n\nTileGrid.prototype.getTileCoordExtent = function getTileCoordExtent(tileCoord, opt_extent) {\n  var origin = this.getOrigin(tileCoord[0]);\n  var resolution = this.getResolution(tileCoord[0]);\n  var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n  var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n  var minY = origin[1] + tileCoord[2] * tileSize[1] * resolution;\n  var maxX = minX + tileSize[0] * resolution;\n  var maxY = minY + tileSize[1] * resolution;\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n/**\n * Get the tile coordinate for the given map coordinate and resolution.This\n * method considers that coordinates that intersect tile boundaries should be\n * assigned the higher tile coordinate.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @api\n */\n\n\nTileGrid.prototype.getTileCoordForCoordAndResolution = function getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n  return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n};\n/**\n * Note that this method should not be called for resolutions that correspond\n * to an integer zoom level.Instead call the `getTileCoordForXYAndZ_` method.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} resolution Resolution (for a non-integer zoom level).\n * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n *   intersections go to the higher tile coordinate, let edge intersections\n *   go to the lower tile coordinate.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @private\n */\n\n\nTileGrid.prototype.getTileCoordForXYAndResolution_ = function getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n  var z = this.getZForResolution(resolution);\n  var scale = resolution / this.getResolution(z);\n  var origin = this.getOrigin(z);\n  var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n  var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n  var adjustY = reverseIntersectionPolicy ? 0 : 0.5;\n  var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n  var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);\n  var tileCoordX = scale * xFromOrigin / tileSize[0];\n  var tileCoordY = scale * yFromOrigin / tileSize[1];\n\n  if (reverseIntersectionPolicy) {\n    tileCoordX = Math.ceil(tileCoordX) - 1;\n    tileCoordY = Math.ceil(tileCoordY) - 1;\n  } else {\n    tileCoordX = Math.floor(tileCoordX);\n    tileCoordY = Math.floor(tileCoordY);\n  }\n\n  return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n};\n/**\n * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n * they should have separate implementations.This method is for integer zoom\n * levels.The other method should only be called for resolutions corresponding\n * to non-integer zoom levels.\n * @param {number} x Map x coordinate.\n * @param {number} y Map y coordinate.\n * @param {number} z Integer zoom level.\n * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n *   intersections go to the higher tile coordinate, let edge intersections\n *   go to the lower tile coordinate.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @private\n */\n\n\nTileGrid.prototype.getTileCoordForXYAndZ_ = function getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n  var origin = this.getOrigin(z);\n  var resolution = this.getResolution(z);\n  var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n  var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n  var adjustY = reverseIntersectionPolicy ? 0 : 0.5;\n  var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n  var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);\n  var tileCoordX = xFromOrigin / tileSize[0];\n  var tileCoordY = yFromOrigin / tileSize[1];\n\n  if (reverseIntersectionPolicy) {\n    tileCoordX = Math.ceil(tileCoordX) - 1;\n    tileCoordY = Math.ceil(tileCoordY) - 1;\n  } else {\n    tileCoordX = Math.floor(tileCoordX);\n    tileCoordY = Math.floor(tileCoordY);\n  }\n\n  return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n};\n/**\n * Get a tile coordinate given a map coordinate and zoom level.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} z Zoom level.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @api\n */\n\n\nTileGrid.prototype.getTileCoordForCoordAndZ = function getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n  return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n};\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @return {number} Tile resolution.\n */\n\n\nTileGrid.prototype.getTileCoordResolution = function getTileCoordResolution(tileCoord) {\n  return this.resolutions_[tileCoord[0]];\n};\n/**\n * Get the tile size for a zoom level. The type of the return value matches the\n * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n * get an `module:ol/size~Size`, run the result through `module:ol/size~Size.toSize()`.\n * @param {number} z Z.\n * @return {number|module:ol/size~Size} Tile size.\n * @api\n */\n\n\nTileGrid.prototype.getTileSize = function getTileSize(z) {\n  if (this.tileSize_) {\n    return this.tileSize_;\n  } else {\n    return this.tileSizes_[z];\n  }\n};\n/**\n * @param {number} z Zoom level.\n * @return {module:ol/TileRange} Extent tile range for the specified zoom level.\n */\n\n\nTileGrid.prototype.getFullTileRange = function getFullTileRange(z) {\n  if (!this.fullTileRanges_) {\n    return null;\n  } else {\n    return this.fullTileRanges_[z];\n  }\n};\n/**\n * @param {number} resolution Resolution.\n * @param {number=} opt_direction If 0, the nearest resolution will be used.\n *   If 1, the nearest lower resolution will be used. If -1, the nearest\n *   higher resolution will be used. Default is 0.\n * @return {number} Z.\n * @api\n */\n\n\nTileGrid.prototype.getZForResolution = function getZForResolution(resolution, opt_direction) {\n  var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n  return clamp(z, this.minZoom, this.maxZoom);\n};\n/**\n * @param {!module:ol/extent~Extent} extent Extent for this tile grid.\n * @private\n */\n\n\nTileGrid.prototype.calculateTileRanges_ = function calculateTileRanges_(extent) {\n  var this$1 = this;\n  var length = this.resolutions_.length;\n  var fullTileRanges = new Array(length);\n\n  for (var z = this.minZoom; z < length; ++z) {\n    fullTileRanges[z] = this$1.getTileRangeForExtentAndZ(extent, z);\n  }\n\n  this.fullTileRanges_ = fullTileRanges;\n};\n\nexport default TileGrid; //# sourceMappingURL=TileGrid.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/tilegrid/TileGrid.js"],"names":["DEFAULT_TILE_SIZE","assert","TileRange","createOrUpdate","createOrUpdateTileRange","isSorted","linearFindNearest","getTopLeft","clamp","toSize","createOrUpdateTileCoord","tmpTileCoord","TileGrid","options","this$1","minZoom","undefined","resolutions_","resolutions","a","b","zoomFactor","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","sizes","map","size","z","tileRange","Math","min","max","calculateTileRanges_","prototype","forEachTileCoord","zoom","callback","getTileRangeForExtentAndZ","minX","maxX","j","minY","jj","maxY","forEachTileCoordParentTileRange","tileCoord","opt_this","opt_tileRange","opt_extent","x","y","tileCoordExtent","getTileCoordExtent","floor","call","getExtent","getMaxZoom","getMinZoom","getOrigin","getResolution","getResolutions","getTileCoordChildTileRange","getTileRangeExtent","resolution","getTileSize","getTileCoordForXYAndZ_","getTileCoordCenter","getTileCoordForCoordAndResolution","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","adjustX","adjustY","xFromOrigin","yFromOrigin","tileCoordX","tileCoordY","ceil","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","fullTileRanges","Array"],"mappings":"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","sourcesContent":["/**\n * @module ol/tilegrid/TileGrid\n */\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport TileRange, {createOrUpdate as createOrUpdateTileRange} from '../TileRange.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {clamp} from '../math.js';\nimport {toSize} from '../size.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\n\n\n/**\n * @private\n * @type {module:ol/tilecoord~TileCoord}\n */\nvar tmpTileCoord = [0, 0, 0];\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {module:ol/coordinate~Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array.<module:ol/coordinate~Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array.<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array.<module:ol/size~Size>} [sizes] Sizes.\n * @property {number|module:ol/size~Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array.<module:ol/size~Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nvar TileGrid = function TileGrid(options) {\n  var this$1 = this;\n\n\n  /**\n   * @protected\n   * @type {number}\n   */\n  this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n  /**\n   * @private\n   * @type {!Array.<number>}\n   */\n  this.resolutions_ = options.resolutions;\n  assert(isSorted(this.resolutions_, function(a, b) {\n    return b - a;\n  }, true), 17); // `resolutions` must be sorted in descending order\n\n\n  // check if we've got a consistent zoom factor and origin\n  var zoomFactor;\n  if (!options.origins) {\n    for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n      if (!zoomFactor) {\n        zoomFactor = this$1.resolutions_[i] / this$1.resolutions_[i + 1];\n      } else {\n        if (this$1.resolutions_[i] / this$1.resolutions_[i + 1] !== zoomFactor) {\n          zoomFactor = undefined;\n          break;\n        }\n      }\n    }\n  }\n\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.zoomFactor_ = zoomFactor;\n\n\n  /**\n   * @protected\n   * @type {number}\n   */\n  this.maxZoom = this.resolutions_.length - 1;\n\n  /**\n   * @private\n   * @type {module:ol/coordinate~Coordinate}\n   */\n  this.origin_ = options.origin !== undefined ? options.origin : null;\n\n  /**\n   * @private\n   * @type {Array.<module:ol/coordinate~Coordinate>}\n   */\n  this.origins_ = null;\n  if (options.origins !== undefined) {\n    this.origins_ = options.origins;\n    assert(this.origins_.length == this.resolutions_.length,\n      20); // Number of `origins` and `resolutions` must be equal\n  }\n\n  var extent = options.extent;\n\n  if (extent !== undefined &&\n      !this.origin_ && !this.origins_) {\n    this.origin_ = getTopLeft(extent);\n  }\n\n  assert(\n    (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n    18); // Either `origin` or `origins` must be configured, never both\n\n  /**\n   * @private\n   * @type {Array.<number|module:ol/size~Size>}\n   */\n  this.tileSizes_ = null;\n  if (options.tileSizes !== undefined) {\n    this.tileSizes_ = options.tileSizes;\n    assert(this.tileSizes_.length == this.resolutions_.length,\n      19); // Number of `tileSizes` and `resolutions` must be equal\n  }\n\n  /**\n   * @private\n   * @type {number|module:ol/size~Size}\n   */\n  this.tileSize_ = options.tileSize !== undefined ?\n    options.tileSize :\n    !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n  assert(\n    (!this.tileSize_ && this.tileSizes_) ||\n      (this.tileSize_ && !this.tileSizes_),\n    22); // Either `tileSize` or `tileSizes` must be configured, never both\n\n  /**\n   * @private\n   * @type {module:ol/extent~Extent}\n   */\n  this.extent_ = extent !== undefined ? extent : null;\n\n\n  /**\n   * @private\n   * @type {Array.<module:ol/TileRange>}\n   */\n  this.fullTileRanges_ = null;\n\n  /**\n   * @private\n   * @type {module:ol/size~Size}\n   */\n  this.tmpSize_ = [0, 0];\n\n  if (options.sizes !== undefined) {\n    this.fullTileRanges_ = options.sizes.map(function(size, z) {\n      var tileRange = new TileRange(\n        Math.min(0, size[0]), Math.max(size[0] - 1, -1),\n        Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n      return tileRange;\n    }, this);\n  } else if (extent) {\n    this.calculateTileRanges_(extent);\n  }\n\n};\n\n/**\n * Call a function with each tile coordinate for a given extent and zoom level.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} zoom Integer zoom level.\n * @param {function(module:ol/tilecoord~TileCoord)} callback Function called with each tile coordinate.\n * @api\n */\nTileGrid.prototype.forEachTileCoord = function forEachTileCoord (extent, zoom, callback) {\n  var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n  for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n    for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n      callback([zoom, i, j]);\n    }\n  }\n};\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {function(this: T, number, module:ol/TileRange): boolean} callback Callback.\n * @param {T=} opt_this The object to use as `this` in `callback`.\n * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.\n * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\n * @return {boolean} Callback succeeded.\n * @template T\n */\nTileGrid.prototype.forEachTileCoordParentTileRange = function forEachTileCoordParentTileRange (tileCoord, callback, opt_this, opt_tileRange, opt_extent) {\n    var this$1 = this;\n\n  var tileRange, x, y;\n  var tileCoordExtent = null;\n  var z = tileCoord[0] - 1;\n  if (this.zoomFactor_ === 2) {\n    x = tileCoord[1];\n    y = tileCoord[2];\n  } else {\n    tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n  }\n  while (z >= this.minZoom) {\n    if (this$1.zoomFactor_ === 2) {\n      x = Math.floor(x / 2);\n      y = Math.floor(y / 2);\n      tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n    } else {\n      tileRange = this$1.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n    }\n    if (callback.call(opt_this, z, tileRange)) {\n      return true;\n    }\n    --z;\n  }\n  return false;\n};\n\n/**\n * Get the extent for this tile grid, if it was configured.\n * @return {module:ol/extent~Extent} Extent.\n */\nTileGrid.prototype.getExtent = function getExtent () {\n  return this.extent_;\n};\n\n/**\n * Get the maximum zoom level for the grid.\n * @return {number} Max zoom.\n * @api\n */\nTileGrid.prototype.getMaxZoom = function getMaxZoom () {\n  return this.maxZoom;\n};\n\n/**\n * Get the minimum zoom level for the grid.\n * @return {number} Min zoom.\n * @api\n */\nTileGrid.prototype.getMinZoom = function getMinZoom () {\n  return this.minZoom;\n};\n\n/**\n * Get the origin for the grid at the given zoom level.\n * @param {number} z Integer zoom level.\n * @return {module:ol/coordinate~Coordinate} Origin.\n * @api\n */\nTileGrid.prototype.getOrigin = function getOrigin (z) {\n  if (this.origin_) {\n    return this.origin_;\n  } else {\n    return this.origins_[z];\n  }\n};\n\n/**\n * Get the resolution for the given zoom level.\n * @param {number} z Integer zoom level.\n * @return {number} Resolution.\n * @api\n */\nTileGrid.prototype.getResolution = function getResolution (z) {\n  return this.resolutions_[z];\n};\n\n/**\n * Get the list of resolutions for the tile grid.\n * @return {Array.<number>} Resolutions.\n * @api\n */\nTileGrid.prototype.getResolutions = function getResolutions () {\n  return this.resolutions_;\n};\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.\n * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\n * @return {module:ol/TileRange} Tile range.\n */\nTileGrid.prototype.getTileCoordChildTileRange = function getTileCoordChildTileRange (tileCoord, opt_tileRange, opt_extent) {\n  if (tileCoord[0] < this.maxZoom) {\n    if (this.zoomFactor_ === 2) {\n      var minX = tileCoord[1] * 2;\n      var minY = tileCoord[2] * 2;\n      return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n    }\n    var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    return this.getTileRangeForExtentAndZ(\n      tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n  }\n  return null;\n};\n\n/**\n * Get the extent for a tile range.\n * @param {number} z Integer zoom level.\n * @param {module:ol/TileRange} tileRange Tile range.\n * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\n * @return {module:ol/extent~Extent} Extent.\n */\nTileGrid.prototype.getTileRangeExtent = function getTileRangeExtent (z, tileRange, opt_extent) {\n  var origin = this.getOrigin(z);\n  var resolution = this.getResolution(z);\n  var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n  var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n  var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n  var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n  var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n\n/**\n * Get a tile range for the given extent and integer zoom level.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} z Integer zoom level.\n * @param {module:ol/TileRange=} opt_tileRange Temporary tile range object.\n * @return {module:ol/TileRange} Tile range.\n */\nTileGrid.prototype.getTileRangeForExtentAndZ = function getTileRangeForExtentAndZ (extent, z, opt_tileRange) {\n  var tileCoord = tmpTileCoord;\n  this.getTileCoordForXYAndZ_(extent[0], extent[1], z, false, tileCoord);\n  var minX = tileCoord[1];\n  var minY = tileCoord[2];\n  this.getTileCoordForXYAndZ_(extent[2], extent[3], z, true, tileCoord);\n  return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n};\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @return {module:ol/coordinate~Coordinate} Tile center.\n */\nTileGrid.prototype.getTileCoordCenter = function getTileCoordCenter (tileCoord) {\n  var origin = this.getOrigin(tileCoord[0]);\n  var resolution = this.getResolution(tileCoord[0]);\n  var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n  return [\n    origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n    origin[1] + (tileCoord[2] + 0.5) * tileSize[1] * resolution\n  ];\n};\n\n/**\n * Get the extent of a tile coordinate.\n *\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/extent~Extent=} opt_extent Temporary extent object.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\nTileGrid.prototype.getTileCoordExtent = function getTileCoordExtent (tileCoord, opt_extent) {\n  var origin = this.getOrigin(tileCoord[0]);\n  var resolution = this.getResolution(tileCoord[0]);\n  var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n  var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n  var minY = origin[1] + tileCoord[2] * tileSize[1] * resolution;\n  var maxX = minX + tileSize[0] * resolution;\n  var maxY = minY + tileSize[1] * resolution;\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n};\n\n/**\n * Get the tile coordinate for the given map coordinate and resolution.This\n * method considers that coordinates that intersect tile boundaries should be\n * assigned the higher tile coordinate.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @api\n */\nTileGrid.prototype.getTileCoordForCoordAndResolution = function getTileCoordForCoordAndResolution (coordinate, resolution, opt_tileCoord) {\n  return this.getTileCoordForXYAndResolution_(\n    coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n};\n\n/**\n * Note that this method should not be called for resolutions that correspond\n * to an integer zoom level.Instead call the `getTileCoordForXYAndZ_` method.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} resolution Resolution (for a non-integer zoom level).\n * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n *   intersections go to the higher tile coordinate, let edge intersections\n *   go to the lower tile coordinate.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @private\n */\nTileGrid.prototype.getTileCoordForXYAndResolution_ = function getTileCoordForXYAndResolution_ (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n  var z = this.getZForResolution(resolution);\n  var scale = resolution / this.getResolution(z);\n  var origin = this.getOrigin(z);\n  var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n  var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n  var adjustY = reverseIntersectionPolicy ? 0 : 0.5;\n  var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n  var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);\n  var tileCoordX = scale * xFromOrigin / tileSize[0];\n  var tileCoordY = scale * yFromOrigin / tileSize[1];\n\n  if (reverseIntersectionPolicy) {\n    tileCoordX = Math.ceil(tileCoordX) - 1;\n    tileCoordY = Math.ceil(tileCoordY) - 1;\n  } else {\n    tileCoordX = Math.floor(tileCoordX);\n    tileCoordY = Math.floor(tileCoordY);\n  }\n\n  return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n};\n\n/**\n * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n * they should have separate implementations.This method is for integer zoom\n * levels.The other method should only be called for resolutions corresponding\n * to non-integer zoom levels.\n * @param {number} x Map x coordinate.\n * @param {number} y Map y coordinate.\n * @param {number} z Integer zoom level.\n * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n *   intersections go to the higher tile coordinate, let edge intersections\n *   go to the lower tile coordinate.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @private\n */\nTileGrid.prototype.getTileCoordForXYAndZ_ = function getTileCoordForXYAndZ_ (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n  var origin = this.getOrigin(z);\n  var resolution = this.getResolution(z);\n  var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n  var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n  var adjustY = reverseIntersectionPolicy ? 0 : 0.5;\n  var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n  var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);\n  var tileCoordX = xFromOrigin / tileSize[0];\n  var tileCoordY = yFromOrigin / tileSize[1];\n\n  if (reverseIntersectionPolicy) {\n    tileCoordX = Math.ceil(tileCoordX) - 1;\n    tileCoordY = Math.ceil(tileCoordY) - 1;\n  } else {\n    tileCoordX = Math.floor(tileCoordX);\n    tileCoordY = Math.floor(tileCoordY);\n  }\n\n  return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n};\n\n/**\n * Get a tile coordinate given a map coordinate and zoom level.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} z Zoom level.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n * @api\n */\nTileGrid.prototype.getTileCoordForCoordAndZ = function getTileCoordForCoordAndZ (coordinate, z, opt_tileCoord) {\n  return this.getTileCoordForXYAndZ_(\n    coordinate[0], coordinate[1], z, false, opt_tileCoord);\n};\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @return {number} Tile resolution.\n */\nTileGrid.prototype.getTileCoordResolution = function getTileCoordResolution (tileCoord) {\n  return this.resolutions_[tileCoord[0]];\n};\n\n/**\n * Get the tile size for a zoom level. The type of the return value matches the\n * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n * get an `module:ol/size~Size`, run the result through `module:ol/size~Size.toSize()`.\n * @param {number} z Z.\n * @return {number|module:ol/size~Size} Tile size.\n * @api\n */\nTileGrid.prototype.getTileSize = function getTileSize (z) {\n  if (this.tileSize_) {\n    return this.tileSize_;\n  } else {\n    return this.tileSizes_[z];\n  }\n};\n\n/**\n * @param {number} z Zoom level.\n * @return {module:ol/TileRange} Extent tile range for the specified zoom level.\n */\nTileGrid.prototype.getFullTileRange = function getFullTileRange (z) {\n  if (!this.fullTileRanges_) {\n    return null;\n  } else {\n    return this.fullTileRanges_[z];\n  }\n};\n\n/**\n * @param {number} resolution Resolution.\n * @param {number=} opt_direction If 0, the nearest resolution will be used.\n *   If 1, the nearest lower resolution will be used. If -1, the nearest\n *   higher resolution will be used. Default is 0.\n * @return {number} Z.\n * @api\n */\nTileGrid.prototype.getZForResolution = function getZForResolution (resolution, opt_direction) {\n  var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n  return clamp(z, this.minZoom, this.maxZoom);\n};\n\n/**\n * @param {!module:ol/extent~Extent} extent Extent for this tile grid.\n * @private\n */\nTileGrid.prototype.calculateTileRanges_ = function calculateTileRanges_ (extent) {\n    var this$1 = this;\n\n  var length = this.resolutions_.length;\n  var fullTileRanges = new Array(length);\n  for (var z = this.minZoom; z < length; ++z) {\n    fullTileRanges[z] = this$1.getTileRangeForExtentAndZ(extent, z);\n  }\n  this.fullTileRanges_ = fullTileRanges;\n};\n\n\nexport default TileGrid;\n\n//# sourceMappingURL=TileGrid.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/Object\n */\nimport { getUid } from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport { assign } from './obj.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n  */\n\nvar ObjectEvent = function (Event) {\n  function ObjectEvent(type, key, oldValue) {\n    Event.call(this, type);\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n\n    this.key = key;\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n\n    this.oldValue = oldValue;\n  }\n\n  if (Event) ObjectEvent.__proto__ = Event;\n  ObjectEvent.prototype = Object.create(Event && Event.prototype);\n  ObjectEvent.prototype.constructor = ObjectEvent;\n  return ObjectEvent;\n}(Event);\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires module:ol/Object~ObjectEvent\n * @api\n */\n\n\nvar BaseObject = function (Observable) {\n  function BaseObject(opt_values) {\n    Observable.call(this); // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n\n    getUid(this);\n    /**\n     * @private\n     * @type {!Object.<string, *>}\n     */\n\n    this.values_ = {};\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  if (Observable) BaseObject.__proto__ = Observable;\n  BaseObject.prototype = Object.create(Observable && Observable.prototype);\n  BaseObject.prototype.constructor = BaseObject;\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n\n  BaseObject.prototype.get = function get(key) {\n    var value;\n\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n\n    return value;\n  };\n  /**\n   * Get a list of object property names.\n   * @return {Array.<string>} List of property names.\n   * @api\n   */\n\n\n  BaseObject.prototype.getKeys = function getKeys() {\n    return Object.keys(this.values_);\n  };\n  /**\n   * Get an object of all property names and values.\n   * @return {Object.<string, *>} Object.\n   * @api\n   */\n\n\n  BaseObject.prototype.getProperties = function getProperties() {\n    return assign({}, this.values_);\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n\n\n  BaseObject.prototype.notify = function notify(key, oldValue) {\n    var eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  };\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.set = function set(key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      var oldValue = this.values_[key];\n      this.values_[key] = value;\n\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object.<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.setProperties = function setProperties(values, opt_silent) {\n    var this$1 = this;\n\n    for (var key in values) {\n      this$1.set(key, values[key], opt_silent);\n    }\n  };\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.unset = function unset(key, opt_silent) {\n    if (key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable);\n/**\n * @type {Object.<string, string>}\n */\n\n\nvar changeEventTypeCache = {};\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\n\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ? changeEventTypeCache[key] : changeEventTypeCache[key] = 'change:' + key;\n}\nexport default BaseObject; //# sourceMappingURL=Object.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/Object.js"],"names":["getUid","ObjectEventType","Observable","Event","assign","ObjectEvent","type","key","oldValue","call","__proto__","prototype","Object","create","constructor","BaseObject","opt_values","values_","undefined","setProperties","get","value","hasOwnProperty","getKeys","keys","getProperties","notify","eventType","getChangeEventType","dispatchEvent","PROPERTYCHANGE","set","opt_silent","values","this$1","unset","changeEventTypeCache"],"mappings":"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","sourcesContent":["/**\n * @module ol/Object\n */\nimport {getUid} from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport {assign} from './obj.js';\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n  */\nvar ObjectEvent = (function (Event) {\n  function ObjectEvent(type, key, oldValue) {\n    Event.call(this, type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n\n  }\n\n  if ( Event ) ObjectEvent.__proto__ = Event;\n  ObjectEvent.prototype = Object.create( Event && Event.prototype );\n  ObjectEvent.prototype.constructor = ObjectEvent;\n\n  return ObjectEvent;\n}(Event));\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires module:ol/Object~ObjectEvent\n * @api\n */\nvar BaseObject = (function (Observable) {\n  function BaseObject(opt_values) {\n    Observable.call(this);\n\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {!Object.<string, *>}\n     */\n    this.values_ = {};\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  if ( Observable ) BaseObject.__proto__ = Observable;\n  BaseObject.prototype = Object.create( Observable && Observable.prototype );\n  BaseObject.prototype.constructor = BaseObject;\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  BaseObject.prototype.get = function get (key) {\n    var value;\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  };\n\n  /**\n   * Get a list of object property names.\n   * @return {Array.<string>} List of property names.\n   * @api\n   */\n  BaseObject.prototype.getKeys = function getKeys () {\n    return Object.keys(this.values_);\n  };\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object.<string, *>} Object.\n   * @api\n   */\n  BaseObject.prototype.getProperties = function getProperties () {\n    return assign({}, this.values_);\n  };\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  BaseObject.prototype.notify = function notify (key, oldValue) {\n    var eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  };\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.set = function set (key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      var oldValue = this.values_[key];\n      this.values_[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object.<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.setProperties = function setProperties (values, opt_silent) {\n    var this$1 = this;\n\n    for (var key in values) {\n      this$1.set(key, values[key], opt_silent);\n    }\n  };\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.unset = function unset (key, opt_silent) {\n    if (key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable));\n\n\n/**\n * @type {Object.<string, string>}\n */\nvar changeEventTypeCache = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ?\n    changeEventTypeCache[key] :\n    (changeEventTypeCache[key] = 'change:' + key);\n}\n\n\nexport default BaseObject;\n\n//# sourceMappingURL=Object.js.map"]},"metadata":{},"sourceType":"module"}
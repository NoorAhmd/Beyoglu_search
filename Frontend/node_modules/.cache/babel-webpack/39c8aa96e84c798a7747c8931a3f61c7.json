{"ast":null,"code":"/**\n * @module ol/geom/MultiLineString\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { assignClosestArrayPoint, arrayMaxSquaredDelta } from '../geom/flat/closest.js';\nimport { deflateCoordinatesArray } from '../geom/flat/deflate.js';\nimport { inflateCoordinatesArray } from '../geom/flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM } from '../geom/flat/interpolate.js';\nimport { intersectsLineStringArray } from '../geom/flat/intersectsextent.js';\nimport { douglasPeuckerArray } from '../geom/flat/simplify.js';\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\n\nvar MultiLineString = function (SimpleGeometry) {\n  function MultiLineString(coordinates, opt_layout, opt_ends) {\n    SimpleGeometry.call(this);\n    /**\n     * @type {Array.<number>}\n     * @private\n     */\n\n    this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(coordinates, opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n      this.ends_ = opt_ends;\n    } else {\n      var layout = this.getLayout();\n      var flatCoordinates = [];\n      var ends = [];\n\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        var lineString = coordinates[i];\n\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  if (SimpleGeometry) MultiLineString.__proto__ = SimpleGeometry;\n  MultiLineString.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  MultiLineString.prototype.constructor = MultiLineString;\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {module:ol/geom/LineString} lineString LineString.\n   * @api\n   */\n\n  MultiLineString.prototype.appendLineString = function appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/MultiLineString} Clone.\n   * @override\n   * @api\n   */\n\n\n  MultiLineString.prototype.clone = function clone() {\n    return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiLineString.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n   * @return {module:ol/coordinate~Coordinate} Coordinate.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getCoordinateAtM = function getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM || this.flatCoordinates.length === 0) {\n      return null;\n    }\n\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n  };\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  MultiLineString.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n  };\n  /**\n   * @return {Array.<number>} Ends.\n   */\n\n\n  MultiLineString.prototype.getEnds = function getEnds() {\n    return this.ends_;\n  };\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {module:ol/geom/LineString} LineString.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getLineString = function getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n\n    return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array.<module:ol/geom/LineString>} LineStrings.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getLineStrings = function getLineStrings() {\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var layout = this.layout;\n    /** @type {Array.<module:ol/geom/LineString>} */\n\n    var lineStrings = [];\n    var offset = 0;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n\n    return lineStrings;\n  };\n  /**\n   * @return {Array.<number>} Flat midpoints.\n   */\n\n\n  MultiLineString.prototype.getFlatMidpoints = function getFlatMidpoints() {\n    var midpoints = [];\n    var flatCoordinates = this.flatCoordinates;\n    var offset = 0;\n    var ends = this.ends_;\n    var stride = this.stride;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n\n    return midpoints;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiLineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiLineString.prototype.getType = function getType() {\n    return GeometryType.MULTI_LINE_STRING;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiLineString.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  MultiLineString.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n\n  return MultiLineString;\n}(SimpleGeometry);\n\nexport default MultiLineString; //# sourceMappingURL=MultiLineString.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/geom/MultiLineString.js"],"names":["extend","closestSquaredDistanceXY","GeometryLayout","GeometryType","LineString","SimpleGeometry","assignClosestArrayPoint","arrayMaxSquaredDelta","deflateCoordinatesArray","inflateCoordinatesArray","interpolatePoint","lineStringsCoordinateAtM","intersectsLineStringArray","douglasPeuckerArray","MultiLineString","coordinates","opt_layout","opt_ends","call","ends_","maxDelta_","maxDeltaRevision_","Array","isArray","setCoordinates","undefined","setFlatCoordinates","layout","getLayout","flatCoordinates","ends","i","ii","length","lineString","getFlatCoordinates","push","__proto__","prototype","Object","create","constructor","appendLineString","slice","changed","clone","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getCoordinateAtM","m","opt_extrapolate","opt_interpolate","XYM","XYZM","extrapolate","interpolate","getCoordinates","getEnds","getLineString","index","getLineStrings","lineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","getType","MULTI_LINE_STRING","intersectsExtent","extent","setLayout"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,MAAR,QAAqB,aAArB;AACA,SAAQC,wBAAR,QAAuC,cAAvC;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,SAAQC,uBAAR,EAAiCC,oBAAjC,QAA4D,yBAA5D;AACA,SAAQC,uBAAR,QAAsC,yBAAtC;AACA,SAAQC,uBAAR,QAAsC,yBAAtC;AACA,SAAQC,gBAAR,EAA0BC,wBAA1B,QAAyD,6BAAzD;AACA,SAAQC,yBAAR,QAAwC,kCAAxC;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAI,UAAUT,cAAV,EAA0B;AAC/C,WAASS,eAAT,CAAyBC,WAAzB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4D;AAE1DZ,IAAAA,cAAc,CAACa,IAAf,CAAoB,IAApB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,KAAL,GAAa,EAAb;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,SAAL,GAAiB,CAAC,CAAlB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,iBAAL,GAAyB,CAAC,CAA1B;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcR,WAAW,CAAC,CAAD,CAAzB,CAAJ,EAAmC;AACjC,WAAKS,cAAL,CAAoBT,WAApB,EAAiCC,UAAjC;AACD,KAFD,MAEO,IAAIA,UAAU,KAAKS,SAAf,IAA4BR,QAAhC,EAA0C;AAC/C,WAAKS,kBAAL,CAAwBV,UAAxB,EAAoCD,WAApC;AACA,WAAKI,KAAL,GAAaF,QAAb;AACD,KAHM,MAGA;AACL,UAAIU,MAAM,GAAG,KAAKC,SAAL,EAAb;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGjB,WAAW,CAACkB,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiD,EAAED,CAAnD,EAAsD;AACpD,YAAIG,UAAU,GAAGnB,WAAW,CAACgB,CAAD,CAA5B;;AACA,YAAIA,CAAC,KAAK,CAAV,EAAa;AACXJ,UAAAA,MAAM,GAAGO,UAAU,CAACN,SAAX,EAAT;AACD;;AACD5B,QAAAA,MAAM,CAAC6B,eAAD,EAAkBK,UAAU,CAACC,kBAAX,EAAlB,CAAN;AACAL,QAAAA,IAAI,CAACM,IAAL,CAAUP,eAAe,CAACI,MAA1B;AACD;;AACD,WAAKP,kBAAL,CAAwBC,MAAxB,EAAgCE,eAAhC;AACA,WAAKV,KAAL,GAAaW,IAAb;AACD;AAEF;;AAED,MAAKzB,cAAL,EAAsBS,eAAe,CAACuB,SAAhB,GAA4BhC,cAA5B;AACtBS,EAAAA,eAAe,CAACwB,SAAhB,GAA4BC,MAAM,CAACC,MAAP,CAAenC,cAAc,IAAIA,cAAc,CAACiC,SAAhD,CAA5B;AACAxB,EAAAA,eAAe,CAACwB,SAAhB,CAA0BG,WAA1B,GAAwC3B,eAAxC;AAEA;AACF;AACA;AACA;AACA;;AACEA,EAAAA,eAAe,CAACwB,SAAhB,CAA0BI,gBAA1B,GAA6C,SAASA,gBAAT,CAA2BR,UAA3B,EAAuC;AAClF,QAAI,CAAC,KAAKL,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuBK,UAAU,CAACC,kBAAX,GAAgCQ,KAAhC,EAAvB;AACD,KAFD,MAEO;AACL3C,MAAAA,MAAM,CAAC,KAAK6B,eAAN,EAAuBK,UAAU,CAACC,kBAAX,GAAgCQ,KAAhC,EAAvB,CAAN;AACD;;AACD,SAAKxB,KAAL,CAAWiB,IAAX,CAAgB,KAAKP,eAAL,CAAqBI,MAArC;AACA,SAAKW,OAAL;AACD,GARD;AAUA;AACF;AACA;AACA;AACA;AACA;;;AACE9B,EAAAA,eAAe,CAACwB,SAAhB,CAA0BO,KAA1B,GAAkC,SAASA,KAAT,GAAkB;AAClD,WAAO,IAAI/B,eAAJ,CAAoB,KAAKe,eAAL,CAAqBc,KAArB,EAApB,EAAkD,KAAKhB,MAAvD,EAA+D,KAAKR,KAAL,CAAWwB,KAAX,EAA/D,CAAP;AACD,GAFD;AAIA;AACF;AACA;;;AACE7B,EAAAA,eAAe,CAACwB,SAAhB,CAA0BQ,cAA1B,GAA2C,SAASA,cAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+BC,YAA/B,EAA6CC,kBAA7C,EAAiE;AAC1G,QAAIA,kBAAkB,GAAGjD,wBAAwB,CAAC,KAAKkD,SAAL,EAAD,EAAmBJ,CAAnB,EAAsBC,CAAtB,CAAjD,EAA2E;AACzE,aAAOE,kBAAP;AACD;;AACD,QAAI,KAAK7B,iBAAL,IAA0B,KAAK+B,WAAL,EAA9B,EAAkD;AAChD,WAAKhC,SAAL,GAAiBiC,IAAI,CAACC,IAAL,CAAU/C,oBAAoB,CAC7C,KAAKsB,eADwC,EACvB,CADuB,EACpB,KAAKV,KADe,EACR,KAAKoC,MADG,EACK,CADL,CAA9B,CAAjB;AAEA,WAAKlC,iBAAL,GAAyB,KAAK+B,WAAL,EAAzB;AACD;;AACD,WAAO9C,uBAAuB,CAC5B,KAAKuB,eADuB,EACN,CADM,EACH,KAAKV,KADF,EACS,KAAKoC,MADd,EAE5B,KAAKnC,SAFuB,EAEZ,KAFY,EAEL2B,CAFK,EAEFC,CAFE,EAECC,YAFD,EAEeC,kBAFf,CAA9B;AAGD,GAZD;AAcA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEpC,EAAAA,eAAe,CAACwB,SAAhB,CAA0BkB,gBAA1B,GAA6C,SAASA,gBAAT,CAA2BC,CAA3B,EAA8BC,eAA9B,EAA+CC,eAA/C,EAAgE;AAC3G,QAAK,KAAKhC,MAAL,IAAezB,cAAc,CAAC0D,GAA9B,IACA,KAAKjC,MAAL,IAAezB,cAAc,CAAC2D,IAD/B,IAEA,KAAKhC,eAAL,CAAqBI,MAArB,KAAgC,CAFpC,EAEuC;AACrC,aAAO,IAAP;AACD;;AACD,QAAI6B,WAAW,GAAGJ,eAAe,KAAKjC,SAApB,GAAgCiC,eAAhC,GAAkD,KAApE;AACA,QAAIK,WAAW,GAAGJ,eAAe,KAAKlC,SAApB,GAAgCkC,eAAhC,GAAkD,KAApE;AACA,WAAOhD,wBAAwB,CAAC,KAAKkB,eAAN,EAAuB,CAAvB,EAC7B,KAAKV,KADwB,EACjB,KAAKoC,MADY,EACJE,CADI,EACDK,WADC,EACYC,WADZ,CAA/B;AAED,GAVD;AAYA;AACF;AACA;AACA;AACA;AACA;;;AACEjD,EAAAA,eAAe,CAACwB,SAAhB,CAA0B0B,cAA1B,GAA2C,SAASA,cAAT,GAA2B;AACpE,WAAOvD,uBAAuB,CAC5B,KAAKoB,eADuB,EACN,CADM,EACH,KAAKV,KADF,EACS,KAAKoC,MADd,CAA9B;AAED,GAHD;AAKA;AACF;AACA;;;AACEzC,EAAAA,eAAe,CAACwB,SAAhB,CAA0B2B,OAA1B,GAAoC,SAASA,OAAT,GAAoB;AACtD,WAAO,KAAK9C,KAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;;;AACEL,EAAAA,eAAe,CAACwB,SAAhB,CAA0B4B,aAA1B,GAA0C,SAASA,aAAT,CAAwBC,KAAxB,EAA+B;AACvE,QAAIA,KAAK,GAAG,CAAR,IAAa,KAAKhD,KAAL,CAAWc,MAAX,IAAqBkC,KAAtC,EAA6C;AAC3C,aAAO,IAAP;AACD;;AACD,WAAO,IAAI/D,UAAJ,CAAe,KAAKyB,eAAL,CAAqBc,KAArB,CACpBwB,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,KAAKhD,KAAL,CAAWgD,KAAK,GAAG,CAAnB,CADE,EACqB,KAAKhD,KAAL,CAAWgD,KAAX,CADrB,CAAf,EACwD,KAAKxC,MAD7D,CAAP;AAED,GAND;AAQA;AACF;AACA;AACA;AACA;;;AACEb,EAAAA,eAAe,CAACwB,SAAhB,CAA0B8B,cAA1B,GAA2C,SAASA,cAAT,GAA2B;AACpE,QAAIvC,eAAe,GAAG,KAAKA,eAA3B;AACA,QAAIC,IAAI,GAAG,KAAKX,KAAhB;AACA,QAAIQ,MAAM,GAAG,KAAKA,MAAlB;AACA;;AACA,QAAI0C,WAAW,GAAG,EAAlB;AACA,QAAIC,MAAM,GAAG,CAAb;;AACA,SAAK,IAAIvC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,UAAIwC,GAAG,GAAGzC,IAAI,CAACC,CAAD,CAAd;AACA,UAAIG,UAAU,GAAG,IAAI9B,UAAJ,CAAeyB,eAAe,CAACc,KAAhB,CAAsB2B,MAAtB,EAA8BC,GAA9B,CAAf,EAAmD5C,MAAnD,CAAjB;AACA0C,MAAAA,WAAW,CAACjC,IAAZ,CAAiBF,UAAjB;AACAoC,MAAAA,MAAM,GAAGC,GAAT;AACD;;AACD,WAAOF,WAAP;AACD,GAdD;AAgBA;AACF;AACA;;;AACEvD,EAAAA,eAAe,CAACwB,SAAhB,CAA0BkC,gBAA1B,GAA6C,SAASA,gBAAT,GAA6B;AACxE,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAI5C,eAAe,GAAG,KAAKA,eAA3B;AACA,QAAIyC,MAAM,GAAG,CAAb;AACA,QAAIxC,IAAI,GAAG,KAAKX,KAAhB;AACA,QAAIoC,MAAM,GAAG,KAAKA,MAAlB;;AACA,SAAK,IAAIxB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,UAAIwC,GAAG,GAAGzC,IAAI,CAACC,CAAD,CAAd;AACA,UAAI2C,QAAQ,GAAGhE,gBAAgB,CAC7BmB,eAD6B,EACZyC,MADY,EACJC,GADI,EACChB,MADD,EACS,GADT,CAA/B;AAEAvD,MAAAA,MAAM,CAACyE,SAAD,EAAYC,QAAZ,CAAN;AACAJ,MAAAA,MAAM,GAAGC,GAAT;AACD;;AACD,WAAOE,SAAP;AACD,GAdD;AAgBA;AACF;AACA;;;AACE3D,EAAAA,eAAe,CAACwB,SAAhB,CAA0BqC,6BAA1B,GAA0D,SAASA,6BAAT,CAAwCC,gBAAxC,EAA0D;AAClH,QAAIC,yBAAyB,GAAG,EAAhC;AACA,QAAIC,cAAc,GAAG,EAArB;AACAD,IAAAA,yBAAyB,CAAC5C,MAA1B,GAAmCpB,mBAAmB,CACpD,KAAKgB,eAD+C,EAC9B,CAD8B,EAC3B,KAAKV,KADsB,EACf,KAAKoC,MADU,EACFqB,gBADE,EAEpDC,yBAFoD,EAEzB,CAFyB,EAEtBC,cAFsB,CAAtD;AAGA,WAAO,IAAIhE,eAAJ,CAAoB+D,yBAApB,EAA+C3E,cAAc,CAAC6E,EAA9D,EAAkED,cAAlE,CAAP;AACD,GAPD;AASA;AACF;AACA;AACA;;;AACEhE,EAAAA,eAAe,CAACwB,SAAhB,CAA0B0C,OAA1B,GAAoC,SAASA,OAAT,GAAoB;AACtD,WAAO7E,YAAY,CAAC8E,iBAApB;AACD,GAFD;AAIA;AACF;AACA;AACA;;;AACEnE,EAAAA,eAAe,CAACwB,SAAhB,CAA0B4C,gBAA1B,GAA6C,SAASA,gBAAT,CAA2BC,MAA3B,EAAmC;AAC9E,WAAOvE,yBAAyB,CAC9B,KAAKiB,eADyB,EACR,CADQ,EACL,KAAKV,KADA,EACO,KAAKoC,MADZ,EACoB4B,MADpB,CAAhC;AAED,GAHD;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACErE,EAAAA,eAAe,CAACwB,SAAhB,CAA0Bd,cAA1B,GAA2C,SAASA,cAAT,CAAyBT,WAAzB,EAAsCC,UAAtC,EAAkD;AAC3F,SAAKoE,SAAL,CAAepE,UAAf,EAA2BD,WAA3B,EAAwC,CAAxC;;AACA,QAAI,CAAC,KAAKc,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuB,EAAvB;AACD;;AACD,QAAIC,IAAI,GAAGtB,uBAAuB,CAChC,KAAKqB,eAD2B,EACV,CADU,EACPd,WADO,EACM,KAAKwC,MADX,EACmB,KAAKpC,KADxB,CAAlC;AAEA,SAAKU,eAAL,CAAqBI,MAArB,GAA8BH,IAAI,CAACG,MAAL,KAAgB,CAAhB,GAAoB,CAApB,GAAwBH,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAA1D;AACA,SAAKW,OAAL;AACD,GATD;;AAWA,SAAO9B,eAAP;AACD,CAtPsB,CAsPrBT,cAtPqB,CAAvB;;AAyPA,eAAeS,eAAf,C,CAEA","sourcesContent":["/**\n * @module ol/geom/MultiLineString\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from '../geom/flat/closest.js';\nimport {deflateCoordinatesArray} from '../geom/flat/deflate.js';\nimport {inflateCoordinatesArray} from '../geom/flat/inflate.js';\nimport {interpolatePoint, lineStringsCoordinateAtM} from '../geom/flat/interpolate.js';\nimport {intersectsLineStringArray} from '../geom/flat/intersectsextent.js';\nimport {douglasPeuckerArray} from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nvar MultiLineString = (function (SimpleGeometry) {\n  function MultiLineString(coordinates, opt_layout, opt_ends) {\n\n    SimpleGeometry.call(this);\n\n    /**\n     * @type {Array.<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(coordinates, opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n      this.ends_ = opt_ends;\n    } else {\n      var layout = this.getLayout();\n      var flatCoordinates = [];\n      var ends = [];\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        var lineString = coordinates[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n\n  }\n\n  if ( SimpleGeometry ) MultiLineString.__proto__ = SimpleGeometry;\n  MultiLineString.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  MultiLineString.prototype.constructor = MultiLineString;\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {module:ol/geom/LineString} lineString LineString.\n   * @api\n   */\n  MultiLineString.prototype.appendLineString = function appendLineString (lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/MultiLineString} Clone.\n   * @override\n   * @api\n   */\n  MultiLineString.prototype.clone = function clone () {\n    return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiLineString.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n   * @return {module:ol/coordinate~Coordinate} Coordinate.\n   * @api\n   */\n  MultiLineString.prototype.getCoordinateAtM = function getCoordinateAtM (m, opt_extrapolate, opt_interpolate) {\n    if ((this.layout != GeometryLayout.XYM &&\n         this.layout != GeometryLayout.XYZM) ||\n        this.flatCoordinates.length === 0) {\n      return null;\n    }\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0,\n      this.ends_, this.stride, m, extrapolate, interpolate);\n  };\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  MultiLineString.prototype.getCoordinates = function getCoordinates () {\n    return inflateCoordinatesArray(\n      this.flatCoordinates, 0, this.ends_, this.stride);\n  };\n\n  /**\n   * @return {Array.<number>} Ends.\n   */\n  MultiLineString.prototype.getEnds = function getEnds () {\n    return this.ends_;\n  };\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {module:ol/geom/LineString} LineString.\n   * @api\n   */\n  MultiLineString.prototype.getLineString = function getLineString (index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(this.flatCoordinates.slice(\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array.<module:ol/geom/LineString>} LineStrings.\n   * @api\n   */\n  MultiLineString.prototype.getLineStrings = function getLineStrings () {\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var layout = this.layout;\n    /** @type {Array.<module:ol/geom/LineString>} */\n    var lineStrings = [];\n    var offset = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  };\n\n  /**\n   * @return {Array.<number>} Flat midpoints.\n   */\n  MultiLineString.prototype.getFlatMidpoints = function getFlatMidpoints () {\n    var midpoints = [];\n    var flatCoordinates = this.flatCoordinates;\n    var offset = 0;\n    var ends = this.ends_;\n    var stride = this.stride;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var midpoint = interpolatePoint(\n        flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiLineString.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiLineString.prototype.getType = function getType () {\n    return GeometryType.MULTI_LINE_STRING;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiLineString.prototype.intersectsExtent = function intersectsExtent (extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  };\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  MultiLineString.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var ends = deflateCoordinatesArray(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n\n  return MultiLineString;\n}(SimpleGeometry));\n\n\nexport default MultiLineString;\n\n//# sourceMappingURL=MultiLineString.js.map"]},"metadata":{},"sourceType":"module"}
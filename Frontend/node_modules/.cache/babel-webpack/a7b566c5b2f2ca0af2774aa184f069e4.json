{"ast":null,"code":"import _get from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, Inject, Injectable, NgZone, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\n\nvar NoopScrollStrategy = /*#__PURE__*/function () {\n  function NoopScrollStrategy() {\n    _classCallCheck(this, NoopScrollStrategy);\n  }\n\n  _createClass(NoopScrollStrategy, [{\n    key: \"enable\",\n    value:\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function enable() {}\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {}\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }]);\n\n  return NoopScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Initial configuration used when creating an overlay.\n */\n\n\nvar OverlayConfig =\n/**\n * @param {?=} config\n */\nfunction OverlayConfig(config) {\n  var _this = this;\n\n  _classCallCheck(this, OverlayConfig);\n\n  /**\n   * Strategy to be used when handling scroll events while the overlay is open.\n   */\n  this.scrollStrategy = new NoopScrollStrategy();\n  /**\n   * Custom class to add to the overlay pane.\n   */\n\n  this.panelClass = '';\n  /**\n   * Whether the overlay has a backdrop.\n   */\n\n  this.hasBackdrop = false;\n  /**\n   * Custom class to add to the backdrop\n   */\n\n  this.backdropClass = 'cdk-overlay-dark-backdrop';\n\n  if (config) {\n    Object.keys(config).filter(function (key) {\n      return typeof config[key] !== 'undefined';\n    }).forEach(function (key) {\n      return _this[key] = config[key];\n    });\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * The points of the origin element and the overlay element to connect.\n */\n\n\nvar ConnectionPositionPair =\n/**\n * @param {?} origin\n * @param {?} overlay\n * @param {?=} offsetX\n * @param {?=} offsetY\n */\nfunction ConnectionPositionPair(origin, overlay, offsetX, offsetY) {\n  _classCallCheck(this, ConnectionPositionPair);\n\n  this.offsetX = offsetX;\n  this.offsetY = offsetY;\n  this.originX = origin.originX;\n  this.originY = origin.originY;\n  this.overlayX = overlay.overlayX;\n  this.overlayY = overlay.overlayY;\n};\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  \\@docs-private\n */\n\n\nvar ScrollingVisibility = function ScrollingVisibility() {\n  _classCallCheck(this, ScrollingVisibility);\n};\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\n\n\nvar ConnectedOverlayPositionChange =\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nfunction ConnectedOverlayPositionChange(connectionPair,\n/** @docs-private */\nscrollableViewProperties) {\n  _classCallCheck(this, ConnectedOverlayPositionChange);\n\n  this.connectionPair = connectionPair;\n  this.scrollableViewProperties = scrollableViewProperties;\n};\n/** @nocollapse */\n\n\nConnectedOverlayPositionChange.ctorParameters = function () {\n  return [{\n    type: ConnectionPositionPair\n  }, {\n    type: ScrollingVisibility,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\"ConnectedPosition: Invalid \".concat(property, \" \\\"\").concat(value, \"\\\". \") + \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\n\nvar BlockScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} document\n   */\n  function BlockScrollStrategy(_viewportRuler, document) {\n    _classCallCheck(this, BlockScrollStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @return {?}\n   */\n\n\n  _createClass(BlockScrollStrategy, [{\n    key: \"attach\",\n    value: function attach() {}\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this._canBeEnabled()) {\n        var\n        /** @type {?} */\n        root = this._document.documentElement;\n        this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n        this._previousHTMLStyles.left = root.style.left || '';\n        this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n        // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n        root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n        root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n        root.classList.add('cdk-global-scrollblock');\n        this._isEnabled = true;\n      }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._isEnabled) {\n        var\n        /** @type {?} */\n        html = this._document.documentElement;\n        var\n        /** @type {?} */\n        body = this._document.body;\n        var\n        /** @type {?} */\n        previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n        var\n        /** @type {?} */\n        previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n        this._isEnabled = false;\n        html.style.left = this._previousHTMLStyles.left;\n        html.style.top = this._previousHTMLStyles.top;\n        html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n\n        html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n        window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n        html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n        body.style['scrollBehavior'] = previousBodyScrollBehavior;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canBeEnabled\",\n    value: function _canBeEnabled() {\n      // Since the scroll strategies can't be singletons, we have to use a global CSS class\n      // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n      // scrolling multiple times.\n      var\n      /** @type {?} */\n      html = this._document.documentElement;\n\n      if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n        return false;\n      }\n\n      var\n      /** @type {?} */\n      body = this._document.body;\n\n      var\n      /** @type {?} */\n      viewport = this._viewportRuler.getViewportSize();\n\n      return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n  }]);\n\n  return BlockScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(\"Scroll strategy has already been attached.\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nvar CloseScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?=} _config\n   */\n  function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    var _this2 = this;\n\n    _classCallCheck(this, CloseScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     */\n\n    this._detach = function () {\n      _this2.disable();\n\n      if (_this2._overlayRef.hasAttached()) {\n        _this2._ngZone.run(function () {\n          return _this2._overlayRef.detach();\n        });\n      }\n    };\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(CloseScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this3 = this;\n\n      if (this._scrollSubscription) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      stream = this._scrollDispatcher.scrolled(0);\n\n      if (this._config && this._config.threshold && this._config.threshold > 1) {\n        this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n        this._scrollSubscription = stream.subscribe(function () {\n          var\n          /** @type {?} */\n          scrollPosition = _this3._viewportRuler.getViewportScrollPosition().top;\n\n          if (Math.abs(scrollPosition - _this3._initialScrollPosition) >\n          /** @type {?} */\n\n          /** @type {?} */\n          _this3._config.threshold) {\n            _this3._detach();\n          } else {\n            _this3._overlayRef.updatePosition();\n          }\n        });\n      } else {\n        this._scrollSubscription = stream.subscribe(this._detach);\n      }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }]);\n\n  return CloseScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(function (containerBounds) {\n    var\n    /** @type {?} */\n    outsideAbove = element.bottom < containerBounds.top;\n    var\n    /** @type {?} */\n    outsideBelow = element.top > containerBounds.bottom;\n    var\n    /** @type {?} */\n    outsideLeft = element.right < containerBounds.left;\n    var\n    /** @type {?} */\n    outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(function (scrollContainerRect) {\n    var\n    /** @type {?} */\n    clippedAbove = element.top < scrollContainerRect.top;\n    var\n    /** @type {?} */\n    clippedBelow = element.bottom > scrollContainerRect.bottom;\n    var\n    /** @type {?} */\n    clippedLeft = element.left < scrollContainerRect.left;\n    var\n    /** @type {?} */\n    clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nvar RepositionScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?=} _config\n   */\n  function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    _classCallCheck(this, RepositionScrollStrategy);\n\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(RepositionScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      if (this._overlayRef) {\n        throw getMatScrollStrategyAlreadyAttachedError();\n      }\n\n      this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this4 = this;\n\n      if (!this._scrollSubscription) {\n        var\n        /** @type {?} */\n        throttle = this._config ? this._config.scrollThrottle : 0;\n        this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n          _this4._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n          if (_this4._config && _this4._config.autoClose) {\n            var\n            /** @type {?} */\n            overlayRect = _this4._overlayRef.overlayElement.getBoundingClientRect();\n\n            var _this4$_viewportRuler = _this4._viewportRuler.getViewportSize(),\n                width = _this4$_viewportRuler.width,\n                height = _this4$_viewportRuler.height; // TODO(crisbeto): include all ancestor scroll containers here once\n            // we have a way of exposing the trigger element to the scroll strategy.\n\n\n            var\n            /** @type {?} */\n            parentRects = [{\n              width: width,\n              height: height,\n              bottom: height,\n              right: width,\n              top: 0,\n              left: 0\n            }];\n\n            if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n              _this4.disable();\n\n              _this4._ngZone.run(function () {\n                return _this4._overlayRef.detach();\n              });\n            }\n          }\n        });\n      }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (this._scrollSubscription) {\n        this._scrollSubscription.unsubscribe();\n\n        this._scrollSubscription = null;\n      }\n    }\n  }]);\n\n  return RepositionScrollStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nvar ScrollStrategyOptions =\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n * @param {?} _ngZone\n * @param {?} document\n */\nfunction ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n  var _this5 = this;\n\n  _classCallCheck(this, ScrollStrategyOptions);\n\n  this._scrollDispatcher = _scrollDispatcher;\n  this._viewportRuler = _viewportRuler;\n  this._ngZone = _ngZone;\n  /**\n   * Do nothing on scroll.\n   */\n\n  this.noop = function () {\n    return new NoopScrollStrategy();\n  };\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n\n\n  this.close = function (config) {\n    return new CloseScrollStrategy(_this5._scrollDispatcher, _this5._ngZone, _this5._viewportRuler, config);\n  };\n  /**\n   * Block scrolling.\n   */\n\n\n  this.block = function () {\n    return new BlockScrollStrategy(_this5._viewportRuler, _this5._document);\n  };\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n\n\n  this.reposition = function (config) {\n    return new RepositionScrollStrategy(_this5._scrollDispatcher, _this5._viewportRuler, _this5._ngZone, config);\n  };\n\n  this._document = document;\n};\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nScrollStrategyOptions.ctorParameters = function () {\n  return [{\n    type: ScrollDispatcher\n  }, {\n    type: ViewportRuler\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nScrollStrategyOptions.ngInjectableDef = defineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nvar OverlayKeyboardDispatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} document\n   */\n  function OverlayKeyboardDispatcher(document) {\n    var _this6 = this;\n\n    _classCallCheck(this, OverlayKeyboardDispatcher);\n\n    /**\n     * Currently attached overlays in the order they were attached.\n     */\n    this._attachedOverlays = [];\n    /**\n     * Keyboard event listener that will be attached to the body.\n     */\n\n    this._keydownListener = function (event) {\n      var\n      /** @type {?} */\n      overlays = _this6._attachedOverlays;\n\n      for (var\n      /** @type {?} */\n      i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEventSubscriptions > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(OverlayKeyboardDispatcher, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(overlayRef) {\n      // Ensure that we don't get the same overlay multiple times.\n      this.remove(overlayRef); // Lazily start dispatcher once first overlay is added\n\n      if (!this._isAttached) {\n        this._document.body.addEventListener('keydown', this._keydownListener, true);\n\n        this._isAttached = true;\n      }\n\n      this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(overlayRef) {\n      var\n      /** @type {?} */\n      index = this._attachedOverlays.indexOf(overlayRef);\n\n      if (index > -1) {\n        this._attachedOverlays.splice(index, 1);\n      } // Remove the global listener once there are no more overlays.\n\n\n      if (this._attachedOverlays.length === 0) {\n        this._detach();\n      }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._isAttached) {\n        this._document.body.removeEventListener('keydown', this._keydownListener, true);\n\n        this._isAttached = false;\n      }\n    }\n  }]);\n\n  return OverlayKeyboardDispatcher;\n}();\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayKeyboardDispatcher.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(inject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\n\n\nvar\n/** @type {?} */\nOVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [[new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n  /** @type {?} */\n  // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n  // of the type expected by Angular\n  DOCUMENT],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Container inside which all overlays will render.\n */\n\nvar OverlayContainer = /*#__PURE__*/function () {\n  /**\n   * @param {?} _document\n   */\n  function OverlayContainer(_document) {\n    _classCallCheck(this, OverlayContainer);\n\n    this._document = _document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(OverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._containerElement && this._containerElement.parentNode) {\n        this._containerElement.parentNode.removeChild(this._containerElement);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n\n  }, {\n    key: \"getContainerElement\",\n    value: function getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var\n      /** @type {?} */\n      container = this._document.createElement('div');\n\n      container.classList.add('cdk-overlay-container');\n\n      this._document.body.appendChild(container);\n\n      this._containerElement = container;\n    }\n  }]);\n\n  return OverlayContainer;\n}();\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayContainer.ngInjectableDef = defineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(inject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n  return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\n\n\nvar\n/** @type {?} */\nOVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer],\n  /** @type {?} */\n  DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n  // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\nvar OverlayRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _portalOutlet\n   * @param {?} _host\n   * @param {?} _pane\n   * @param {?} _config\n   * @param {?} _ngZone\n   * @param {?} _keyboardDispatcher\n   * @param {?} _document\n   */\n  function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document) {\n    var _this7 = this;\n\n    _classCallCheck(this, OverlayRef);\n\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._keydownEventsObservable = Observable.create(function (observer) {\n      var\n      /** @type {?} */\n      subscription = _this7._keydownEvents.subscribe(observer);\n\n      _this7._keydownEventSubscriptions++;\n      return function () {\n        subscription.unsubscribe();\n        _this7._keydownEventSubscriptions--;\n      };\n    });\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     */\n\n    this._keydownEvents = new Subject();\n    /**\n     * Amount of subscriptions to the keydown events.\n     */\n\n    this._keydownEventSubscriptions = 0;\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n  }\n  /**\n   * The overlay's HTML element\n   * @return {?}\n   */\n\n\n  _createClass(OverlayRef, [{\n    key: \"overlayElement\",\n    get: function get() {\n      return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropElement\",\n    get: function get() {\n      return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hostElement\",\n    get: function get() {\n      return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(portal) {\n      var _this8 = this;\n\n      var\n      /** @type {?} */\n      attachResult = this._portalOutlet.attach(portal);\n\n      if (this._config.positionStrategy) {\n        this._config.positionStrategy.attach(this);\n      } // Update the pane element with the given configuration.\n\n\n      if (!this._host.parentElement && this._previousHostParent) {\n        this._previousHostParent.appendChild(this._host);\n      }\n\n      this._updateStackingOrder();\n\n      this._updateElementSize();\n\n      this._updateElementDirection();\n\n      if (this._config.scrollStrategy) {\n        this._config.scrollStrategy.enable();\n      } // Update the position once the zone is stable so that the overlay will be fully rendered\n      // before attempting to position it, as the position may depend on the size of the rendered\n      // content.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n        // The overlay could've been detached before the zone has stabilized.\n        if (_this8.hasAttached()) {\n          _this8.updatePosition();\n        }\n      }); // Enable pointer events for the overlay pane element.\n\n\n      this._togglePointerEvents(true);\n\n      if (this._config.hasBackdrop) {\n        this._attachBackdrop();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, true);\n      } // Only emit the `attachments` event once all other setup is done.\n\n\n      this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n      this._keyboardDispatcher.add(this);\n\n      return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var _this9 = this;\n\n      if (!this.hasAttached()) {\n        return;\n      }\n\n      this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n      // This is necessary because otherwise the pane element will cover the page and disable\n      // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n      this._togglePointerEvents(false);\n\n      if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n        this._config.positionStrategy.detach();\n      }\n\n      if (this._config.scrollStrategy) {\n        this._config.scrollStrategy.disable();\n      }\n\n      if (this._config.panelClass) {\n        this._toggleClasses(this._pane, this._config.panelClass, false);\n      }\n\n      var\n      /** @type {?} */\n      detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n      this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n      this._keyboardDispatcher.remove(this); // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\n      // even though it's transparent and unclickable. We can't remove the host here immediately,\n      // because the overlay pane's content might still be animating. This stream helps us avoid\n      // interrupting the animation by waiting for the pane to become empty.\n\n\n      var\n      /** @type {?} */\n      subscription = this._ngZone.onStable.asObservable().pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(function () {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!_this9._pane || !_this9._host || _this9._pane.children.length === 0) {\n          if (_this9._host && _this9._host.parentElement) {\n            _this9._previousHostParent = _this9._host.parentElement;\n\n            _this9._previousHostParent.removeChild(_this9._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n\n      return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var\n      /** @type {?} */\n      isAttached = this.hasAttached();\n\n      if (this._config.positionStrategy) {\n        this._config.positionStrategy.dispose();\n      }\n\n      if (this._config.scrollStrategy) {\n        this._config.scrollStrategy.disable();\n      }\n\n      this.detachBackdrop();\n\n      this._keyboardDispatcher.remove(this);\n\n      this._portalOutlet.dispose();\n\n      this._attachments.complete();\n\n      this._backdropClick.complete();\n\n      this._keydownEvents.complete();\n\n      if (this._host && this._host.parentNode) {\n        this._host.parentNode.removeChild(this._host);\n\n        this._host =\n        /** @type {?} */\n        null;\n      }\n\n      this._previousHostParent = this._pane =\n      /** @type {?} */\n      null;\n\n      if (isAttached) {\n        this._detachments.next();\n      }\n\n      this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachments\",\n    value: function attachments() {\n      return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detachments\",\n    value: function detachments() {\n      return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._config.positionStrategy) {\n        this._config.positionStrategy.apply();\n      }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(sizeConfig) {\n      this._config = Object.assign({}, this._config, sizeConfig);\n\n      this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this._config = Object.assign({}, this._config, {\n        direction: dir\n      });\n\n      this._updateElementDirection();\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var\n      /** @type {?} */\n      direction = this._config.direction;\n\n      if (!direction) {\n        return 'ltr';\n      }\n\n      return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateElementDirection\",\n    value: function _updateElementDirection() {\n      this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateElementSize\",\n    value: function _updateElementSize() {\n      var\n      /** @type {?} */\n      style = this._pane.style;\n      style.width = coerceCssPixelValue(this._config.width);\n      style.height = coerceCssPixelValue(this._config.height);\n      style.minWidth = coerceCssPixelValue(this._config.minWidth);\n      style.minHeight = coerceCssPixelValue(this._config.minHeight);\n      style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n      style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_togglePointerEvents\",\n    value: function _togglePointerEvents(enablePointer) {\n      this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachBackdrop\",\n    value: function _attachBackdrop() {\n      var _this10 = this;\n\n      var\n      /** @type {?} */\n      showingClass = 'cdk-overlay-backdrop-showing';\n      this._backdropElement = this._document.createElement('div');\n\n      this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n      }\n      /** @type {?} */\n\n\n      // Insert the backdrop before the pane in the DOM order,\n      // in order to handle stacked overlays properly.\n      this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n      // action desired when such a click occurs (usually closing the overlay).\n\n\n      this._backdropElement.addEventListener('click', function (event) {\n        return _this10._backdropClick.next(event);\n      }); // Add class to fade-in the backdrop after one frame.\n\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            if (_this10._backdropElement) {\n              _this10._backdropElement.classList.add(showingClass);\n            }\n          });\n        });\n      } else {\n        this._backdropElement.classList.add(showingClass);\n      }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateStackingOrder\",\n    value: function _updateStackingOrder() {\n      if (this._host.nextSibling) {\n        /** @type {?} */\n        this._host.parentNode.appendChild(this._host);\n      }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detachBackdrop\",\n    value: function detachBackdrop() {\n      var _this11 = this;\n\n      var\n      /** @type {?} */\n      backdropToDetach = this._backdropElement;\n\n      if (backdropToDetach) {\n        var\n        /** @type {?} */\n        timeoutId;\n\n        var\n        /** @type {?} */\n        finishDetach = function finishDetach() {\n          // It may not be attached to anything in certain cases (e.g. unit tests).\n          if (backdropToDetach && backdropToDetach.parentNode) {\n            backdropToDetach.parentNode.removeChild(backdropToDetach);\n          } // It is possible that a new portal has been attached to this overlay since we started\n          // removing the backdrop. If that is the case, only clear the backdrop reference if it\n          // is still the same instance that we started to remove.\n\n\n          if (_this11._backdropElement == backdropToDetach) {\n            _this11._backdropElement = null;\n          }\n\n          clearTimeout(timeoutId);\n        };\n\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n        if (this._config.backdropClass) {\n          this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n        }\n\n        this._ngZone.runOutsideAngular(function () {\n          /** @type {?} */\n          backdropToDetach.addEventListener('transitionend', finishDetach);\n        }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n\n\n        backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n\n        timeoutId = this._ngZone.runOutsideAngular(function () {\n          return setTimeout(finishDetach, 500);\n        });\n      }\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleClasses\",\n    value: function _toggleClasses(element, cssClasses, isAdd) {\n      var\n      /** @type {?} */\n      classList = element.classList;\n      coerceArray(cssClasses).forEach(function (cssClass) {\n        // We can't do a spread here, because IE doesn't support setting multiple classes.\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      });\n    }\n  }]);\n\n  return OverlayRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\n\nvar FlexibleConnectedPositionStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} connectedTo\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    var _this12 = this;\n\n    _classCallCheck(this, FlexibleConnectedPositionStrategy);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /**\n     * Whether we're performing the very first positioning of the overlay.\n     */\n\n    this._isInitialRender = true;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     */\n\n    this._isPushed = false;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     */\n\n    this._canPush = true;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     */\n\n    this._growAfterOpen = false;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     */\n\n    this._hasFlexibleDimensions = true;\n    /**\n     * Whether the overlay position is locked.\n     */\n\n    this._positionLocked = false;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     */\n\n    this._viewportMargin = 0;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     */\n\n    this.scrollables = [];\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n\n    this._preferredPositions = [];\n    /**\n     * Subject that emits whenever the position changes.\n     */\n\n    this._positionChanges = new Subject();\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /**\n     * Default offset for the overlay along the x axis.\n     */\n\n    this._offsetX = 0;\n    /**\n     * Default offset for the overlay along the y axis.\n     */\n\n    this._offsetY = 0;\n    /**\n     * Amount of subscribers to the `positionChanges` stream.\n     */\n\n    this._positionChangeSubscriptions = 0;\n    /**\n     * Observable sequence of position changes.\n     */\n\n    this.positionChanges = Observable.create(function (observer) {\n      var\n      /** @type {?} */\n      subscription = _this12._positionChanges.subscribe(observer);\n\n      _this12._positionChangeSubscriptions++;\n      return function () {\n        subscription.unsubscribe();\n        _this12._positionChangeSubscriptions--;\n      };\n    });\n    this.setOrigin(connectedTo);\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n\n\n  _createClass(FlexibleConnectedPositionStrategy, [{\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var _this13 = this;\n\n      if (this._overlayRef && overlayRef !== this._overlayRef) {\n        throw Error('This position strategy is already attached to an overlay');\n      }\n\n      this._validatePositions();\n\n      overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n      this._overlayRef = overlayRef;\n      this._boundingBox = overlayRef.hostElement;\n      this._pane = overlayRef.overlayElement;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n        return _this13.apply();\n      });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // We shouldn't do anything if the strategy was disposed or we're on the server.\n      // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n      if (this._isDisposed || this._platform && !this._platform.isBrowser) {\n        return;\n      } // If the position has been applied already (e.g. when the overlay was opened) and the\n      // consumer opted into locking in the position, re-use the old position, in order to\n      // prevent the overlay from jumping around.\n\n\n      if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n        this.reapplyLastPosition();\n        return;\n      }\n\n      this._resetOverlayElementStyles();\n\n      this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n      // the overlay relative to the origin.\n      // We use the viewport rect to determine whether a position would go off-screen.\n\n\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._originRect = this._origin.getBoundingClientRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      var\n      /** @type {?} */\n      originRect = this._originRect;\n      var\n      /** @type {?} */\n      overlayRect = this._overlayRect;\n      var\n      /** @type {?} */\n      viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n      var\n      /** @type {?} */\n      flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n      var\n      /** @type {?} */\n      fallback; // Go through each of the preferred positions looking for a good fit.\n      // If a good fit is found, it will be applied immediately.\n\n      var _iterator = _createForOfIteratorHelper(this._preferredPositions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pos = _step.value;\n\n          // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n          var\n          /** @type {?} */\n          originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n          // overlay in this position. We use the top-left corner for calculations and later translate\n          // this into an appropriate (top, left, bottom, right) style.\n\n\n          var\n          /** @type {?} */\n          overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n          var\n          /** @type {?} */\n          overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n          if (overlayFit.isCompletelyWithinViewport) {\n            this._isPushed = false;\n\n            this._applyPosition(pos, originPoint);\n\n            return;\n          } // If the overlay has flexible dimensions, we can use this position\n          // so long as there's enough space for the minimum dimensions.\n\n\n          if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n            // Save positions where the overlay will fit with flexible dimensions. We will use these\n            // if none of the positions fit *without* flexible dimensions.\n            flexibleFits.push({\n              position: pos,\n              origin: originPoint,\n              overlayRect: overlayRect,\n              boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n            });\n            continue;\n          } // If the current preferred position does not fit on the screen, remember the position\n          // if it has more visible area on-screen than we've seen and move onto the next preferred\n          // position.\n\n\n          if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n            fallback = {\n              overlayFit: overlayFit,\n              overlayPoint: overlayPoint,\n              originPoint: originPoint,\n              position: pos,\n              overlayRect: overlayRect\n            };\n          }\n        } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (flexibleFits.length) {\n        var\n        /** @type {?} */\n        bestFit = null;\n        var\n        /** @type {?} */\n        bestScore = -1;\n\n        var _iterator2 = _createForOfIteratorHelper(flexibleFits),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fit = _step2.value;\n            var\n            /** @type {?} */\n            score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n            if (score > bestScore) {\n              bestScore = score;\n              bestFit = fit;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        this._isPushed = false;\n\n        this._applyPosition(\n        /** @type {?} */\n        bestFit.position,\n        /** @type {?} */\n        bestFit.origin);\n\n        return;\n      } // When none of the preferred positions fit within the viewport, take the position\n      // that went off-screen the least and attempt to push it on-screen.\n\n\n      if (this._canPush) {\n        // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n        this._isPushed = true;\n\n        this._applyPosition(\n        /** @type {?} */\n        fallback.position,\n        /** @type {?} */\n        fallback.originPoint);\n\n        return;\n      } // All options for getting the overlay within the viewport have been exhausted, so go with the\n      // position that went off-screen the least.\n\n\n      this._applyPosition(\n      /** @type {?} */\n      fallback.position,\n      /** @type {?} */\n      fallback.originPoint);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (!this._isDisposed) {\n        this.detach();\n        this._boundingBox = null;\n\n        this._positionChanges.complete();\n\n        this._isDisposed = true;\n      }\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"reapplyLastPosition\",\n    value: function reapplyLastPosition() {\n      if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._viewportRect = this._getNarrowedViewportRect();\n        var\n        /** @type {?} */\n        lastPosition = this._lastPosition || this._preferredPositions[0];\n\n        var\n        /** @type {?} */\n        originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n        this._applyPosition(lastPosition, originPoint);\n      }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this.scrollables = scrollables;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n      // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n      if (positions.indexOf(\n      /** @type {?} */\n      this._lastPosition) === -1) {\n        this._lastPosition = null;\n      }\n\n      this._validatePositions();\n\n      return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withViewportMargin\",\n    value: function withViewportMargin(margin) {\n      this._viewportMargin = margin;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n\n  }, {\n    key: \"withFlexibleDimensions\",\n    value: function withFlexibleDimensions() {\n      var flexibleDimensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._hasFlexibleDimensions = flexibleDimensions;\n      return this;\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n\n  }, {\n    key: \"withGrowAfterOpen\",\n    value: function withGrowAfterOpen() {\n      var growAfterOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._growAfterOpen = growAfterOpen;\n      return this;\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n\n  }, {\n    key: \"withPush\",\n    value: function withPush() {\n      var canPush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._canPush = canPush;\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition() {\n      var isLocked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._positionLocked = isLocked;\n      return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withDefaultOffsetX\",\n    value: function withDefaultOffsetX(offset) {\n      this._offsetX = offset;\n      return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withDefaultOffsetY\",\n    value: function withDefaultOffsetY(offset) {\n      this._offsetY = offset;\n      return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withTransformOriginOn\",\n    value: function withTransformOriginOn(selector) {\n      this._transformOriginSelector = selector;\n      return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginPoint\",\n    value: function _getOriginPoint(originRect, pos) {\n      var\n      /** @type {?} */\n      x;\n\n      if (pos.originX == 'center') {\n        // Note: when centering we should always use the `left`\n        // offset, otherwise the position will be wrong in RTL.\n        x = originRect.left + originRect.width / 2;\n      } else {\n        var\n        /** @type {?} */\n        startX = this._isRtl() ? originRect.right : originRect.left;\n        var\n        /** @type {?} */\n        endX = this._isRtl() ? originRect.left : originRect.right;\n        x = pos.originX == 'start' ? startX : endX;\n      }\n\n      var\n      /** @type {?} */\n      y;\n\n      if (pos.originY == 'center') {\n        y = originRect.top + originRect.height / 2;\n      } else {\n        y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPoint\",\n    value: function _getOverlayPoint(originPoint, overlayRect, pos) {\n      // Calculate the (overlayStartX, overlayStartY), the start of the\n      // potential overlay position relative to the origin point.\n      var\n      /** @type {?} */\n      overlayStartX;\n\n      if (pos.overlayX == 'center') {\n        overlayStartX = -overlayRect.width / 2;\n      } else if (pos.overlayX === 'start') {\n        overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n      } else {\n        overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n      }\n\n      var\n      /** @type {?} */\n      overlayStartY;\n\n      if (pos.overlayY == 'center') {\n        overlayStartY = -overlayRect.height / 2;\n      } else {\n        overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n      } // The (x, y) coordinates of the overlay.\n\n\n      return {\n        x: originPoint.x + overlayStartX,\n        y: originPoint.y + overlayStartY\n      };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayFit\",\n    value: function _getOverlayFit(point, overlay, viewport, position) {\n      var x = point.x,\n          y = point.y;\n\n      var\n      /** @type {?} */\n      offsetX = this._getOffset(position, 'x');\n\n      var\n      /** @type {?} */\n      offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n      if (offsetX) {\n        x += offsetX;\n      }\n\n      if (offsetY) {\n        y += offsetY;\n      } // How much the overlay would overflow at this position, on each side.\n\n\n      var\n      /** @type {?} */\n      leftOverflow = 0 - x;\n      var\n      /** @type {?} */\n      rightOverflow = x + overlay.width - viewport.width;\n      var\n      /** @type {?} */\n      topOverflow = 0 - y;\n      var\n      /** @type {?} */\n      bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n      var\n      /** @type {?} */\n      visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n      var\n      /** @type {?} */\n      visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n      var\n      /** @type {?} */\n      visibleArea = visibleWidth * visibleHeight;\n      return {\n        visibleArea: visibleArea,\n        isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n        fitsInViewportVertically: visibleHeight === overlay.height,\n        fitsInViewportHorizontally: visibleWidth == overlay.width\n      };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canFitWithFlexibleDimensions\",\n    value: function _canFitWithFlexibleDimensions(fit, point, viewport) {\n      if (this._hasFlexibleDimensions) {\n        var\n        /** @type {?} */\n        availableHeight = viewport.bottom - point.y;\n        var\n        /** @type {?} */\n        availableWidth = viewport.right - point.x;\n\n        var\n        /** @type {?} */\n        minHeight = this._overlayRef.getConfig().minHeight;\n\n        var\n        /** @type {?} */\n        minWidth = this._overlayRef.getConfig().minWidth;\n\n        var\n        /** @type {?} */\n        verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n        var\n        /** @type {?} */\n        horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n        return verticalFit && horizontalFit;\n      }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start The starting point from which the overlay is pushed.\n     * @param {?} overlay The overlay dimensions.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n\n  }, {\n    key: \"_pushOverlayOnScreen\",\n    value: function _pushOverlayOnScreen(start, overlay) {\n      var\n      /** @type {?} */\n      viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n      // decide which direction to push it.\n\n      var\n      /** @type {?} */\n      overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n      var\n      /** @type {?} */\n      overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n      var\n      /** @type {?} */\n      overflowTop = Math.max(viewport.top - start.y, 0);\n      var\n      /** @type {?} */\n      overflowLeft = Math.max(viewport.left - start.x, 0); // Amount by which to push the overlay in each direction such that it remains on-screen.\n\n      var\n      /** @type {?} */\n      pushX,\n\n      /** @type {?} */\n      pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n      // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n      // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n      if (overlay.width <= viewport.width) {\n        pushX = overflowLeft || -overflowRight;\n      } else {\n        pushX = viewport.left - start.x;\n      }\n\n      if (overlay.height <= viewport.height) {\n        pushY = overflowTop || -overflowBottom;\n      } else {\n        pushY = viewport.top - start.y;\n      }\n\n      return {\n        x: start.x + pushX,\n        y: start.y + pushY\n      };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyPosition\",\n    value: function _applyPosition(position, originPoint) {\n      this._setTransformOrigin(position);\n\n      this._setOverlayElementStyles(originPoint, position);\n\n      this._setBoundingBoxStyles(originPoint, position); // Save the last connected position in case the position needs to be re-calculated.\n\n\n      this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n      // We only emit if we've got any subscriptions, because the scroll visibility\n      // calculcations can be somewhat expensive.\n\n      if (this._positionChangeSubscriptions > 0) {\n        var\n        /** @type {?} */\n        scrollableViewProperties = this._getScrollVisibility();\n\n        var\n        /** @type {?} */\n        changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTransformOrigin\",\n    value: function _setTransformOrigin(position) {\n      if (!this._transformOriginSelector) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      elements =\n      /** @type {?} */\n      this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n      var\n      /** @type {?} */\n      xOrigin;\n      var\n      /** @type {?} */\n      yOrigin = position.overlayY;\n\n      if (position.overlayX === 'center') {\n        xOrigin = 'center';\n      } else if (this._isRtl()) {\n        xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n      } else {\n        xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n      }\n\n      for (var\n      /** @type {?} */\n      i = 0; i < elements.length; i++) {\n        elements[i].style.transformOrigin = \"\".concat(xOrigin, \" \").concat(yOrigin);\n      }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateBoundingBoxRect\",\n    value: function _calculateBoundingBoxRect(origin, position) {\n      var\n      /** @type {?} */\n      viewport = this._viewportRect;\n\n      var\n      /** @type {?} */\n      isRtl = this._isRtl();\n\n      var\n      /** @type {?} */\n      height,\n      /** @type {?} */\n      top,\n      /** @type {?} */\n      bottom;\n\n      if (position.overlayY === 'top') {\n        // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n        top = origin.y;\n        height = viewport.bottom - origin.y;\n      } else if (position.overlayY === 'bottom') {\n        // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n        // the viewport margin back in, because the viewport rect is narrowed down to remove the\n        // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n        bottom = viewport.height - origin.y + this._viewportMargin * 2;\n        height = viewport.height - bottom + this._viewportMargin;\n      } else {\n        // If neither top nor bottom, it means that the overlay\n        // is vertically centered on the origin point.\n        var\n        /** @type {?} */\n        smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n        var\n        /** @type {?} */\n        previousHeight = this._lastBoundingBoxSize.height;\n        height = smallestDistanceToViewportEdge * 2;\n        top = origin.y - smallestDistanceToViewportEdge;\n\n        if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n          top = origin.y - previousHeight / 2;\n        }\n      } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n      var\n      /** @type {?} */\n      isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n      var\n      /** @type {?} */\n      isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n      var\n      /** @type {?} */\n      width,\n      /** @type {?} */\n      left,\n      /** @type {?} */\n      right;\n\n      if (isBoundedByLeftViewportEdge) {\n        right = viewport.right - origin.x + this._viewportMargin;\n        width = origin.x - viewport.left;\n      } else if (isBoundedByRightViewportEdge) {\n        left = origin.x;\n        width = viewport.right - origin.x;\n      } else {\n        // If neither start nor end, it means that the overlay\n        // is horizontally centered on the origin point.\n        var\n        /** @type {?} */\n        _smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x, origin.x - viewport.top);\n\n        var\n        /** @type {?} */\n        previousWidth = this._lastBoundingBoxSize.width;\n        width = _smallestDistanceToViewportEdge * 2;\n        left = origin.x - _smallestDistanceToViewportEdge;\n\n        if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n          left = origin.x - previousWidth / 2;\n        }\n      }\n\n      return {\n        top: top,\n        left: left,\n        bottom: bottom,\n        right: right,\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setBoundingBoxStyles\",\n    value: function _setBoundingBoxStyles(origin, position) {\n      var\n      /** @type {?} */\n      boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n      // when applying a new size.\n\n\n      if (!this._isInitialRender && !this._growAfterOpen) {\n        boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n        boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n      }\n\n      var\n      /** @type {?} */\n      styles =\n      /** @type {?} */\n      {};\n\n      if (this._hasExactPosition()) {\n        styles.top = styles.left = '0';\n        styles.bottom = styles.right = '';\n        styles.width = styles.height = '100%';\n      } else {\n        var\n        /** @type {?} */\n        maxHeight = this._overlayRef.getConfig().maxHeight;\n\n        var\n        /** @type {?} */\n        maxWidth = this._overlayRef.getConfig().maxWidth;\n\n        styles.height = coerceCssPixelValue(boundingBoxRect.height);\n        styles.top = coerceCssPixelValue(boundingBoxRect.top);\n        styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n        styles.width = coerceCssPixelValue(boundingBoxRect.width);\n        styles.left = coerceCssPixelValue(boundingBoxRect.left);\n        styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n        if (position.overlayX === 'center') {\n          styles.alignItems = 'center';\n        } else {\n          styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n        }\n\n        if (position.overlayY === 'center') {\n          styles.justifyContent = 'center';\n        } else {\n          styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n        }\n\n        if (maxHeight) {\n          styles.maxHeight = coerceCssPixelValue(maxHeight);\n        }\n\n        if (maxWidth) {\n          styles.maxWidth = coerceCssPixelValue(maxWidth);\n        }\n      }\n\n      this._lastBoundingBoxSize = boundingBoxRect;\n      extendStyles(\n      /** @type {?} */\n      this._boundingBox.style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetBoundingBoxStyles\",\n    value: function _resetBoundingBoxStyles() {\n      extendStyles(\n      /** @type {?} */\n      this._boundingBox.style,\n      /** @type {?} */\n      {\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetOverlayElementStyles\",\n    value: function _resetOverlayElementStyles() {\n      extendStyles(this._pane.style,\n      /** @type {?} */\n      {\n        top: '',\n        left: '',\n        bottom: '',\n        right: '',\n        position: ''\n      });\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOverlayElementStyles\",\n    value: function _setOverlayElementStyles(originPoint, position) {\n      var\n      /** @type {?} */\n      styles =\n      /** @type {?} */\n      {};\n\n      if (this._hasExactPosition()) {\n        extendStyles(styles, this._getExactOverlayY(position, originPoint));\n        extendStyles(styles, this._getExactOverlayX(position, originPoint));\n      } else {\n        styles.position = 'static';\n      } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n      // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n      // off the position. We also can't use margins, because they won't have an effect in some\n      // cases where the element doesn't have anything to \"push off of\". Finally, this works\n      // better both with flexible and non-flexible positioning.\n\n\n      var\n      /** @type {?} */\n      transformString = '';\n\n      var\n      /** @type {?} */\n      offsetX = this._getOffset(position, 'x');\n\n      var\n      /** @type {?} */\n      offsetY = this._getOffset(position, 'y');\n\n      if (offsetX) {\n        transformString += \"translateX(\".concat(offsetX, \"px) \");\n      }\n\n      if (offsetY) {\n        transformString += \"translateY(\".concat(offsetY, \"px)\");\n      }\n\n      styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n      // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n      // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n\n      if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n        styles.maxHeight = '';\n      }\n\n      if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n        styles.maxWidth = '';\n      }\n\n      extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExactOverlayY\",\n    value: function _getExactOverlayY(position, originPoint) {\n      // Reset any existing styles. This is necessary in case the\n      // preferred position has changed since the last `apply`.\n      var\n      /** @type {?} */\n      styles =\n      /** @type {?} */\n      {\n        top: null,\n        bottom: null\n      };\n\n      var\n      /** @type {?} */\n      overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n      } // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n      // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n      // a required parameter.\n\n\n      var\n      /** @type {?} */\n      virtualKeyboardOffset = this._overlayContainer ? this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n      // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n      // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n      // otherwise our positioning will be thrown off.\n\n      overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n      // above or below the origin and the direction in which the element will expand.\n\n      if (position.overlayY === 'bottom') {\n        // When using `bottom`, we adjust the y position such that it is the distance\n        // from the bottom of the viewport rather than the top.\n        var\n        /** @type {?} */\n        documentHeight = this._document.documentElement.clientHeight;\n        styles.bottom = \"\".concat(documentHeight - (overlayPoint.y + this._overlayRect.height), \"px\");\n      } else {\n        styles.top = coerceCssPixelValue(overlayPoint.y);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExactOverlayX\",\n    value: function _getExactOverlayX(position, originPoint) {\n      // Reset any existing styles. This is necessary in case the preferred position has\n      // changed since the last `apply`.\n      var\n      /** @type {?} */\n      styles =\n      /** @type {?} */\n      {\n        left: null,\n        right: null\n      };\n\n      var\n      /** @type {?} */\n      overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n      if (this._isPushed) {\n        overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n      } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n      // or \"after\" the origin, which determines the direction in which the element will expand.\n      // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n      // page is in RTL or LTR.\n\n\n      var\n      /** @type {?} */\n      horizontalStyleProperty;\n\n      if (this._isRtl()) {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n      } else {\n        horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n      } // When we're setting `right`, we adjust the x position such that it is the distance\n      // from the right edge of the viewport rather than the left edge.\n\n\n      if (horizontalStyleProperty === 'right') {\n        var\n        /** @type {?} */\n        documentWidth = this._document.documentElement.clientWidth;\n        styles.right = \"\".concat(documentWidth - (overlayPoint.x + this._overlayRect.width), \"px\");\n      } else {\n        styles.left = coerceCssPixelValue(overlayPoint.x);\n      }\n\n      return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getScrollVisibility\",\n    value: function _getScrollVisibility() {\n      // Note: needs fresh rects since the position could've changed.\n      var\n      /** @type {?} */\n      originBounds = this._origin.getBoundingClientRect();\n\n      var\n      /** @type {?} */\n      overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n      // every time, we should be able to use the scrollTop of the containers if the size of those\n      // containers hasn't changed.\n\n\n      var\n      /** @type {?} */\n      scrollContainerBounds = this.scrollables.map(function (scrollable) {\n        return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n      });\n      return {\n        isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n        isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n        isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n        isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n      };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subtractOverflows\",\n    value: function _subtractOverflows(length) {\n      for (var _len = arguments.length, overflows = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        overflows[_key - 1] = arguments[_key];\n      }\n\n      return overflows.reduce(function (currentValue, currentOverflow) {\n        return currentValue - Math.max(currentOverflow, 0);\n      }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getNarrowedViewportRect\",\n    value: function _getNarrowedViewportRect() {\n      // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n      // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n      // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n      // and `innerHeight` that do. This is necessary, because the overlay container uses\n      // 100% `width` and `height` which don't include the scrollbar either.\n      var\n      /** @type {?} */\n      width = this._document.documentElement.clientWidth;\n      var\n      /** @type {?} */\n      height = this._document.documentElement.clientHeight;\n\n      var\n      /** @type {?} */\n      scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      return {\n        top: scrollPosition.top + this._viewportMargin,\n        left: scrollPosition.left + this._viewportMargin,\n        right: scrollPosition.left + width - this._viewportMargin,\n        bottom: scrollPosition.top + height - this._viewportMargin,\n        width: width - 2 * this._viewportMargin,\n        height: height - 2 * this._viewportMargin\n      };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasExactPosition\",\n    value: function _hasExactPosition() {\n      return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOffset\",\n    value: function _getOffset(position, axis) {\n      if (axis === 'x') {\n        // We don't do something like `position['offset' + axis]` in\n        // order to avoid breking minifiers that rename properties.\n        return position.offsetX == null ? this._offsetX : position.offsetX;\n      }\n\n      return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validatePositions\",\n    value: function _validatePositions() {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(function (pair) {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }]);\n\n  return FlexibleConnectedPositionStrategy;\n}();\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\n\nfunction extendStyles(dest, source) {\n  for (var\n  /** @type {?} */\n  key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 7.0.0\n */\n\n\nvar ConnectedPositionStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?} connectedTo\n   * @param {?} viewportRuler\n   * @param {?} document\n   * @param {?=} platform\n   */\n  function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, // @breaking-change 7.0.0 `platform` parameter to be made required.\n  // @breaking-change 7.0.0 `platform` parameter to be made required.\n  platform) {\n    _classCallCheck(this, ConnectedPositionStrategy);\n\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @return {?}\n   */\n\n\n  _createClass(ConnectedPositionStrategy, [{\n    key: \"_isRtl\",\n    get: function get() {\n      return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onPositionChange\",\n    get: function get() {\n      return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"positions\",\n    get: function get() {\n      return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      this._overlayRef = overlayRef;\n\n      this._positionStrategy.attach(overlayRef);\n\n      if (this._direction) {\n        overlayRef.setDirection(this._direction);\n        this._direction = null;\n      }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"recalculateLastPosition\",\n    value: function recalculateLastPosition() {\n      this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n\n  }, {\n    key: \"withScrollableContainers\",\n    value: function withScrollableContainers(scrollables) {\n      this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n\n  }, {\n    key: \"withFallbackPosition\",\n    value: function withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n      var\n      /** @type {?} */\n      position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n      this._preferredPositions.push(position);\n\n      this._positionStrategy.withPositions(this._preferredPositions);\n\n      return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(dir) {\n      // Since the direction might be declared before the strategy is attached,\n      // we save the value in a temporary property and we'll transfer it to the\n      // overlay ref on attachment.\n      if (this._overlayRef) {\n        this._overlayRef.setDirection(dir);\n      } else {\n        this._direction = dir;\n      }\n\n      return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withOffsetX\",\n    value: function withOffsetX(offset) {\n      this._positionStrategy.withDefaultOffsetX(offset);\n\n      return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withOffsetY\",\n    value: function withOffsetY(offset) {\n      this._positionStrategy.withDefaultOffsetY(offset);\n\n      return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withLockedPosition\",\n    value: function withLockedPosition(isLocked) {\n      this._positionStrategy.withLockedPosition(isLocked);\n\n      return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"withPositions\",\n    value: function withPositions(positions) {\n      this._preferredPositions = positions.slice();\n\n      this._positionStrategy.withPositions(this._preferredPositions);\n\n      return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(origin) {\n      this._positionStrategy.setOrigin(origin);\n\n      return this;\n    }\n  }]);\n\n  return ConnectedPositionStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\n\nvar GlobalPositionStrategy = /*#__PURE__*/function () {\n  function GlobalPositionStrategy() {\n    _classCallCheck(this, GlobalPositionStrategy);\n\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n  /**\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  _createClass(GlobalPositionStrategy, [{\n    key: \"attach\",\n    value: function attach(overlayRef) {\n      var\n      /** @type {?} */\n      config = overlayRef.getConfig();\n      this._overlayRef = overlayRef;\n\n      if (this._width && !config.width) {\n        overlayRef.updateSize({\n          width: this._width\n        });\n      }\n\n      if (this._height && !config.height) {\n        overlayRef.updateSize({\n          height: this._height\n        });\n      }\n\n      overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"top\",\n    value: function top() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._bottomOffset = '';\n      this._topOffset = value;\n      this._alignItems = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"left\",\n    value: function left() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._rightOffset = '';\n      this._leftOffset = value;\n      this._justifyContent = 'flex-start';\n      return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"bottom\",\n    value: function bottom() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._topOffset = '';\n      this._bottomOffset = value;\n      this._alignItems = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n\n  }, {\n    key: \"right\",\n    value: function right() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._leftOffset = '';\n      this._rightOffset = value;\n      this._justifyContent = 'flex-end';\n      return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n\n  }, {\n    key: \"width\",\n    value: function width() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          width: value\n        });\n      } else {\n        this._width = value;\n      }\n\n      return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n\n  }, {\n    key: \"height\",\n    value: function height() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (this._overlayRef) {\n        this._overlayRef.updateSize({\n          height: value\n        });\n      } else {\n        this._height = value;\n      }\n\n      return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n\n  }, {\n    key: \"centerHorizontally\",\n    value: function centerHorizontally() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.left(offset);\n      this._justifyContent = 'center';\n      return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n\n  }, {\n    key: \"centerVertically\",\n    value: function centerVertically() {\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.top(offset);\n      this._alignItems = 'center';\n      return this;\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      // Since the overlay ref applies the strategy asynchronously, it could\n      // have been disposed before it ends up being applied. If that is the\n      // case, we shouldn't do anything.\n      if (!this._overlayRef.hasAttached()) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      styles = this._overlayRef.overlayElement.style;\n      var\n      /** @type {?} */\n      parentStyles = this._overlayRef.hostElement.style;\n\n      var\n      /** @type {?} */\n      config = this._overlayRef.getConfig();\n\n      styles.position = this._cssPosition;\n      styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n      styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n      styles.marginBottom = this._bottomOffset;\n      styles.marginRight = this._rightOffset;\n\n      if (config.width === '100%') {\n        parentStyles.justifyContent = 'flex-start';\n      } else if (this._justifyContent === 'center') {\n        parentStyles.justifyContent = 'center';\n      } else if (this._overlayRef.getConfig().direction === 'rtl') {\n        // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n        // don't want that because our positioning is explicitly `left` and `right`, hence\n        // why we do another inversion to ensure that the overlay stays in the same position.\n        // TODO: reconsider this if we add `start` and `end` methods.\n        if (this._justifyContent === 'flex-start') {\n          parentStyles.justifyContent = 'flex-end';\n        } else if (this._justifyContent === 'flex-end') {\n          parentStyles.justifyContent = 'flex-start';\n        }\n      } else {\n        parentStyles.justifyContent = this._justifyContent;\n      }\n\n      parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Noop implemented as a part of the PositionStrategy interface.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {}\n  }]);\n\n  return GlobalPositionStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Builder for overlay position strategy.\n */\n\n\nvar OverlayPositionBuilder = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  function OverlayPositionBuilder(_viewportRuler, _document, // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n  _platform, _overlayContainer) {\n    _classCallCheck(this, OverlayPositionBuilder);\n\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   * @return {?}\n   */\n\n\n  _createClass(OverlayPositionBuilder, [{\n    key: \"global\",\n    value: function global() {\n      return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 7.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(elementRef, originPos, overlayPos) {\n      return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"flexibleConnectedTo\",\n    value: function flexibleConnectedTo(elementRef) {\n      return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n  }]);\n\n  return OverlayPositionBuilder;\n}();\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8));\n};\n\nOverlayPositionBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayPositionBuilder.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Platform,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: OverlayContainer,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nOverlayPositionBuilder.ngInjectableDef = defineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: OverlayContainer,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Next overlay unique ID.\n */\n\n\nvar\n/** @type {?} */\nnextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nvar Overlay = /*#__PURE__*/function () {\n  /**\n   * @param {?} scrollStrategies\n   * @param {?} _overlayContainer\n   * @param {?} _componentFactoryResolver\n   * @param {?} _positionBuilder\n   * @param {?} _keyboardDispatcher\n   * @param {?} _injector\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?} _directionality\n   */\n  function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality) {\n    _classCallCheck(this, Overlay);\n\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n  }\n  /**\n   * Creates an overlay.\n   * @param {?=} config Configuration applied to the overlay.\n   * @return {?} Reference to the created overlay.\n   */\n\n\n  _createClass(Overlay, [{\n    key: \"create\",\n    value: function create(config) {\n      var\n      /** @type {?} */\n      host = this._createHostElement();\n\n      var\n      /** @type {?} */\n      pane = this._createPaneElement(host);\n\n      var\n      /** @type {?} */\n      portalOutlet = this._createPortalOutlet(pane);\n\n      var\n      /** @type {?} */\n      overlayConfig = new OverlayConfig(config);\n      overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n      return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n\n  }, {\n    key: \"_createPaneElement\",\n    value: function _createPaneElement(host) {\n      var\n      /** @type {?} */\n      pane = this._document.createElement('div');\n\n      pane.id = \"cdk-overlay-\".concat(nextUniqueId++);\n      pane.classList.add('cdk-overlay-pane');\n      host.appendChild(pane);\n      return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n\n  }, {\n    key: \"_createHostElement\",\n    value: function _createHostElement() {\n      var\n      /** @type {?} */\n      host = this._document.createElement('div');\n\n      this._overlayContainer.getContainerElement().appendChild(host);\n\n      return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n\n  }, {\n    key: \"_createPortalOutlet\",\n    value: function _createPortalOutlet(pane) {\n      // We have to resolve the ApplicationRef later in order to allow people\n      // to use overlay-based providers during app initialization.\n      if (!this._appRef) {\n        this._appRef = this._injector.get(ApplicationRef);\n      }\n\n      return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n  }]);\n\n  return Overlay;\n}();\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality));\n};\n\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n/** @nocollapse */\n\nOverlay.ctorParameters = function () {\n  return [{\n    type: ScrollStrategyOptions\n  }, {\n    type: OverlayContainer\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: OverlayPositionBuilder\n  }, {\n    type: OverlayKeyboardDispatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Directionality\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\n\n\nvar\n/** @type {?} */\ndefaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n */\n\nvar\n/** @type {?} */\nCDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nvar CdkOverlayOrigin =\n/**\n * @param {?} elementRef\n */\nfunction CdkOverlayOrigin(elementRef) {\n  _classCallCheck(this, CdkOverlayOrigin);\n\n  this.elementRef = elementRef;\n};\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n/** @nocollapse */\n\nCdkOverlayOrigin.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nvar CdkConnectedOverlay = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   * @param {?} _scrollStrategy\n   * @param {?} _dir\n   */\n  function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, _scrollStrategy, _dir) {\n    _classCallCheck(this, CdkConnectedOverlay);\n\n    this._overlay = _overlay;\n    this._scrollStrategy = _scrollStrategy;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    /**\n     * Margin between the overlay and the viewport edges.\n     */\n\n    this.viewportMargin = 0;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     */\n\n    this.scrollStrategy = this._scrollStrategy();\n    /**\n     * Whether the overlay is open.\n     */\n\n    this.open = false;\n    /**\n     * Event emitted when the backdrop is clicked.\n     */\n\n    this.backdropClick = new EventEmitter();\n    /**\n     * Event emitted when the position has changed.\n     */\n\n    this.positionChange = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been attached.\n     */\n\n    this.attach = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been detached.\n     */\n\n    this.detach = new EventEmitter();\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     */\n\n    this.overlayKeydown = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the x-axis\n   * @return {?}\n   */\n\n\n  _createClass(CdkConnectedOverlay, [{\n    key: \"offsetX\",\n    get: function get() {\n      return this._offsetX;\n    }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    ,\n    set: function set(offsetX) {\n      this._offsetX = offsetX;\n\n      if (this._position) {\n        this._setPositions(this._position);\n      }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n\n  }, {\n    key: \"offsetY\",\n    get: function get() {\n      return this._offsetY;\n    }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    ,\n    set: function set(offsetY) {\n      this._offsetY = offsetY;\n\n      if (this._position) {\n        this._setPositions(this._position);\n      }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"lockPosition\",\n    get: function get() {\n      return this._lockPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._lockPosition = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"flexibleDiemsions\",\n    get: function get() {\n      return this._flexibleDimensions;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n\n  }, {\n    key: \"growAfterOpen\",\n    get: function get() {\n      return this._growAfterOpen;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._growAfterOpen = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n\n  }, {\n    key: \"push\",\n    get: function get() {\n      return this._push;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._push = coerceBooleanProperty(value);\n    }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlayRef\",\n    get: function get() {\n      return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyOverlay();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this._position) {\n        if (changes['positions']) {\n          this._position.withPositions(this.positions);\n        }\n\n        if (changes['lockPosition']) {\n          this._position.withLockedPosition(this.lockPosition);\n        }\n\n        if (changes['origin']) {\n          this._position.setOrigin(this.origin.elementRef);\n\n          if (this.open) {\n            this._position.apply();\n          }\n        }\n      }\n\n      if (changes['open']) {\n        this.open ? this._attachOverlay() : this._detachOverlay();\n      }\n    }\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      if (!this.positions || !this.positions.length) {\n        this.positions = defaultPositionList;\n      }\n\n      this._overlayRef = this._overlay.create(this._buildConfig());\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_buildConfig\",\n    value: function _buildConfig() {\n      var\n      /** @type {?} */\n      positionStrategy = this._position = this._createPositionStrategy();\n\n      var\n      /** @type {?} */\n      overlayConfig = new OverlayConfig({\n        direction: this._dir,\n        positionStrategy: positionStrategy,\n        scrollStrategy: this.scrollStrategy,\n        hasBackdrop: this.hasBackdrop\n      });\n\n      if (this.width || this.width === 0) {\n        overlayConfig.width = this.width;\n      }\n\n      if (this.height || this.height === 0) {\n        overlayConfig.height = this.height;\n      }\n\n      if (this.minWidth || this.minWidth === 0) {\n        overlayConfig.minWidth = this.minWidth;\n      }\n\n      if (this.minHeight || this.minHeight === 0) {\n        overlayConfig.minHeight = this.minHeight;\n      }\n\n      if (this.backdropClass) {\n        overlayConfig.backdropClass = this.backdropClass;\n      }\n\n      return overlayConfig;\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPositionStrategy\",\n    value: function _createPositionStrategy() {\n      var _this14 = this;\n\n      var\n      /** @type {?} */\n      strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef).withFlexibleDimensions(this.flexibleDiemsions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition);\n\n      this._setPositions(strategy);\n\n      strategy.positionChanges.subscribe(function (p) {\n        return _this14.positionChange.emit(p);\n      });\n      return strategy;\n    }\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setPositions\",\n    value: function _setPositions(positionStrategy) {\n      var _this15 = this;\n\n      var\n      /** @type {?} */\n      positions = this.positions.map(function (pos) {\n        return {\n          originX: pos.originX,\n          originY: pos.originY,\n          overlayX: pos.overlayX,\n          overlayY: pos.overlayY,\n          offsetX: pos.offsetX || _this15.offsetX,\n          offsetY: pos.offsetY || _this15.offsetY\n        };\n      });\n      positionStrategy.withPositions(positions);\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this16 = this;\n\n      if (!this._overlayRef) {\n        this._createOverlay();\n        /** @type {?} */\n\n\n        this._overlayRef.keydownEvents().subscribe(function (event) {\n          _this16.overlayKeydown.next(event);\n\n          if (event.keyCode === ESCAPE) {\n            _this16._detachOverlay();\n          }\n        });\n      } else {\n        // Update the overlay size, in case the directive's inputs have changed\n        this._overlayRef.updateSize({\n          width: this.width,\n          minWidth: this.minWidth,\n          height: this.height,\n          minHeight: this.minHeight\n        });\n      }\n\n      if (!this._overlayRef.hasAttached()) {\n        this._overlayRef.attach(this._templatePortal);\n\n        this.attach.emit();\n      }\n\n      if (this.hasBackdrop) {\n        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n          _this16.backdropClick.emit(event);\n        });\n      }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detachOverlay\",\n    value: function _detachOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.detach();\n\n        this.detach.emit();\n      }\n\n      this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyOverlay\",\n    value: function _destroyOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n      }\n\n      this._backdropSubscription.unsubscribe();\n    }\n  }]);\n\n  return CdkConnectedOverlay;\n}();\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDiemsions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDiemsions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkConnectedOverlay.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkConnectedOverlay.propDecorators = {\n  \"origin\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  \"positions\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  \"offsetX\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  \"offsetY\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  \"width\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  \"height\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  \"minWidth\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  \"minHeight\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  \"backdropClass\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  \"viewportMargin\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  \"scrollStrategy\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  \"open\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  \"hasBackdrop\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  \"lockPosition\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  \"flexibleDiemsions\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  \"growAfterOpen\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  \"push\": [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  \"backdropClick\": [{\n    type: Output\n  }],\n  \"positionChange\": [{\n    type: Output\n  }],\n  \"attach\": [{\n    type: Output\n  }],\n  \"detach\": [{\n    type: Output\n  }],\n  \"overlayKeydown\": [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDiemsions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }]\n  });\n})();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/**\n * \\@docs-private\n */\n\n\nvar\n/** @type {?} */\nCDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar OverlayModule = function OverlayModule() {\n  _classCallCheck(this, OverlayModule);\n};\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [[BidiModule, PortalModule, ScrollDispatchModule], ScrollDispatchModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function declarations() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function imports() {\n      return [BidiModule, PortalModule, ScrollDispatchModule];\n    },\n    exports: function exports() {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollDispatchModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 7.0.0\n */\n\n\nvar\n/** @type {?} */\nOVERLAY_PROVIDERS = [Overlay, OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\nvar FullscreenOverlayContainer = /*#__PURE__*/function (_OverlayContainer) {\n  _inherits(FullscreenOverlayContainer, _OverlayContainer);\n\n  var _super = _createSuper(FullscreenOverlayContainer);\n\n  /**\n   * @param {?} _document\n   */\n  function FullscreenOverlayContainer(_document) {\n    _classCallCheck(this, FullscreenOverlayContainer);\n\n    return _super.call(this, _document);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(FullscreenOverlayContainer, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"ngOnDestroy\", this).call(this);\n\n      if (this._fullScreenEventName && this._fullScreenListener) {\n        this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var _this17 = this;\n\n      _get(_getPrototypeOf(FullscreenOverlayContainer.prototype), \"_createContainer\", this).call(this);\n\n      this._adjustParentForFullscreenChange();\n\n      this._addFullscreenChangeListener(function () {\n        return _this17._adjustParentForFullscreenChange();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustParentForFullscreenChange\",\n    value: function _adjustParentForFullscreenChange() {\n      if (!this._containerElement) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      fullscreenElement = this.getFullscreenElement();\n      var\n      /** @type {?} */\n      parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addFullscreenChangeListener\",\n    value: function _addFullscreenChangeListener(fn) {\n      var\n      /** @type {?} */\n      eventName = this._getEventName();\n\n      if (eventName) {\n        if (this._fullScreenListener) {\n          this._document.removeEventListener(eventName, this._fullScreenListener);\n        }\n\n        this._document.addEventListener(eventName, fn);\n\n        this._fullScreenListener = fn;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getEventName\",\n    value: function _getEventName() {\n      if (!this._fullScreenEventName) {\n        if (this._document.fullscreenEnabled) {\n          this._fullScreenEventName = 'fullscreenchange';\n        } else if (this._document.webkitFullscreenEnabled) {\n          this._fullScreenEventName = 'webkitfullscreenchange';\n        } else if (\n        /** @type {?} */\n        this._document.mozFullScreenEnabled) {\n          this._fullScreenEventName = 'mozfullscreenchange';\n        } else if (\n        /** @type {?} */\n        this._document.msFullscreenEnabled) {\n          this._fullScreenEventName = 'MSFullscreenChange';\n        }\n      }\n\n      return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFullscreenElement\",\n    value: function getFullscreenElement() {\n      return this._document.fullscreenElement || this._document.webkitFullscreenElement ||\n      /** @type {?} */\n      this._document.mozFullScreenElement ||\n      /** @type {?} */\n      this._document.msFullscreenElement || null;\n    }\n  }]);\n\n  return FullscreenOverlayContainer;\n}(OverlayContainer);\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFullscreenOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac\n});\n/** @nocollapse */\n\nFullscreenOverlayContainer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, validateVerticalPosition, validateHorizontalPosition, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd }; //# sourceMappingURL=overlay.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/overlay.js"],"names":["Optional","Inject","Injectable","NgZone","NgModule","SkipSelf","ApplicationRef","ComponentFactoryResolver","Injector","ElementRef","Directive","EventEmitter","InjectionToken","Input","Output","TemplateRef","ViewContainerRef","defineInjectable","inject","coerceCssPixelValue","coerceArray","coerceBooleanProperty","ScrollDispatcher","ViewportRuler","ScrollDispatchModule","VIEWPORT_RULER_PROVIDER","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","CdkScrollable","DOCUMENT","Observable","Subject","merge","Subscription","take","takeUntil","Platform","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","ESCAPE","NoopScrollStrategy","OverlayConfig","config","scrollStrategy","panelClass","hasBackdrop","backdropClass","Object","keys","filter","key","forEach","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","ctorParameters","type","decorators","validateVerticalPosition","property","value","Error","validateHorizontalPosition","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","html","body","previousHtmlScrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","undefined","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","useFactory","OverlayContainer","_containerElement","parentNode","removeChild","_createContainer","container","createElement","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_keydownEventsObservable","create","observer","subscription","attach","portal","attachResult","positionStrategy","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","children","isAttached","dispose","complete","apply","sizeConfig","assign","dir","direction","setAttribute","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","EMPTY","_offsetX","_offsetY","_positionChangeSubscriptions","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","change","_isDisposed","isBrowser","_lastPosition","reapplyLastPosition","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","lastPosition","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","nativeElement","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getConfig","verticalFit","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","alignItems","justifyContent","extendStyles","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","_positionStrategy","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","marginLeft","marginTop","marginBottom","marginRight","OverlayPositionBuilder","elementRef","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","_scrollStrategy","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","backdropClick","positionChange","overlayKeydown","_templatePortal","_position","_setPositions","_destroyOverlay","changes","lockPosition","_attachOverlay","_detachOverlay","_buildConfig","_createPositionStrategy","strategy","flexibleConnectedTo","flexibleDiemsions","withGrowAfterOpen","p","emit","_createOverlay","keydownEvents","keyCode","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","parent","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵg","ɵf","ɵb","ɵa","ɵc","ɵe","ɵd"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, Inject, Injectable, NgZone, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollDispatchModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        if (config) {\n            Object.keys(config)\n                .filter(key => typeof config[key] !== 'undefined')\n                .forEach(key => this[key] = config[key]);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     */\n    constructor(origin, overlay, offsetX, offsetY) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  \\@docs-private\n */\nclass ScrollingVisibility {\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair, },\n    { type: ScrollingVisibility, decorators: [{ type: Optional },] },\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            const /** @type {?} */ root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            const /** @type {?} */ html = this._document.documentElement;\n            const /** @type {?} */ body = this._document.body;\n            const /** @type {?} */ previousHtmlScrollBehavior = html.style['scrollBehavior'] || '';\n            const /** @type {?} */ previousBodyScrollBehavior = body.style['scrollBehavior'] || '';\n            this._isEnabled = false;\n            html.style.left = this._previousHTMLStyles.left;\n            html.style.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            html.style['scrollBehavior'] = body.style['scrollBehavior'] = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            html.style['scrollBehavior'] = previousHtmlScrollBehavior;\n            body.style['scrollBehavior'] = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const /** @type {?} */ html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const /** @type {?} */ body = this._document.body;\n        const /** @type {?} */ viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const /** @type {?} */ stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const /** @type {?} */ scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const /** @type {?} */ outsideAbove = element.bottom < containerBounds.top;\n        const /** @type {?} */ outsideBelow = element.top > containerBounds.bottom;\n        const /** @type {?} */ outsideLeft = element.right < containerBounds.left;\n        const /** @type {?} */ outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const /** @type {?} */ clippedAbove = element.top < scrollContainerRect.top;\n        const /** @type {?} */ clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const /** @type {?} */ clippedLeft = element.left < scrollContainerRect.left;\n        const /** @type {?} */ clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            const /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const /** @type {?} */ overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const /** @type {?} */ parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /**\n         * Block scrolling.\n         */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollStrategyOptions, factory: ScrollStrategyOptions.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher, },\n    { type: ViewportRuler, },\n    { type: NgZone, },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (event) => {\n            const /** @type {?} */ overlays = this._attachedOverlays;\n            for (let /** @type {?} */ i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        const /** @type {?} */ index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayKeyboardDispatcher, factory: OverlayKeyboardDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT)\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    _createContainer() {\n        const /** @type {?} */ container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayContainer, factory: OverlayContainer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._keydownEventsObservable = Observable.create(observer => {\n            const /** @type {?} */ subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        let /** @type {?} */ attachResult = this._portalOutlet.attach(portal);\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._config.positionStrategy && this._config.positionStrategy.detach) {\n            this._config.positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n        }\n        const /** @type {?} */ detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets rendered,\n        // even though it's transparent and unclickable. We can't remove the host here immediately,\n        // because the overlay pane's content might still be animating. This stream helps us avoid\n        // interrupting the animation by waiting for the pane to become empty.\n        const /** @type {?} */ subscription = this._ngZone.onStable\n            .asObservable()\n            .pipe(takeUntil(merge(this._attachments, this._detachments)))\n            .subscribe(() => {\n            // Needs a couple of checks for the pane and host, because\n            // they may have been removed by the time the zone stabilizes.\n            if (!this._pane || !this._host || this._pane.children.length === 0) {\n                if (this._host && this._host.parentElement) {\n                    this._previousHostParent = this._host.parentElement;\n                    this._previousHostParent.removeChild(this._host);\n                }\n                subscription.unsubscribe();\n            }\n        });\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        const /** @type {?} */ isAttached = this.hasAttached();\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._config.positionStrategy) {\n            this._config.positionStrategy.apply();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        const /** @type {?} */ direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    _updateElementSize() {\n        const /** @type {?} */ style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    _attachBackdrop() {\n        const /** @type {?} */ showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', (event) => this._backdropClick.next(event));\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        let /** @type {?} */ backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            let /** @type {?} */ timeoutId;\n            let /** @type {?} */ finishDetach = () => {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (this._backdropElement == backdropToDetach) {\n                    this._backdropElement = null;\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n        }\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const /** @type {?} */ classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Whether we're performing the very first positioning of the overlay.\n         */\n        this._isInitialRender = true;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create(observer => {\n            const /** @type {?} */ subscription = this._positionChanges.subscribe(observer);\n            this._positionChangeSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add('cdk-overlay-connected-position-bounding-box');\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => this.apply());\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 7.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const /** @type {?} */ originRect = this._originRect;\n        const /** @type {?} */ overlayRect = this._overlayRect;\n        const /** @type {?} */ viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const /** @type {?} */ flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let /** @type {?} */ fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let /** @type {?} */ pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let /** @type {?} */ originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let /** @type {?} */ overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let /** @type {?} */ bestFit = null;\n            let /** @type {?} */ bestScore = -1;\n            for (const /** @type {?} */ fit of flexibleFits) {\n                const /** @type {?} */ score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (!this._isDisposed) {\n            this.detach();\n            this._boundingBox = null;\n            this._positionChanges.complete();\n            this._isDisposed = true;\n        }\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const /** @type {?} */ lastPosition = this._lastPosition || this._preferredPositions[0];\n            const /** @type {?} */ originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this.scrollables = scrollables;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        let /** @type {?} */ x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const /** @type {?} */ startX = this._isRtl() ? originRect.right : originRect.left;\n            const /** @type {?} */ endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let /** @type {?} */ y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let /** @type {?} */ overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let /** @type {?} */ overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        let /** @type {?} */ offsetX = this._getOffset(position, 'x');\n        let /** @type {?} */ offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let /** @type {?} */ leftOverflow = 0 - x;\n        let /** @type {?} */ rightOverflow = (x + overlay.width) - viewport.width;\n        let /** @type {?} */ topOverflow = 0 - y;\n        let /** @type {?} */ bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let /** @type {?} */ visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let /** @type {?} */ visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const /** @type {?} */ availableHeight = viewport.bottom - point.y;\n            const /** @type {?} */ availableWidth = viewport.right - point.x;\n            const /** @type {?} */ minHeight = this._overlayRef.getConfig().minHeight;\n            const /** @type {?} */ minWidth = this._overlayRef.getConfig().minWidth;\n            const /** @type {?} */ verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const /** @type {?} */ horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start The starting point from which the overlay is pushed.\n     * @param {?} overlay The overlay dimensions.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay) {\n        const /** @type {?} */ viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each side, which we'll use to\n        // decide which direction to push it.\n        const /** @type {?} */ overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const /** @type {?} */ overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const /** @type {?} */ overflowTop = Math.max(viewport.top - start.y, 0);\n        const /** @type {?} */ overflowLeft = Math.max(viewport.left - start.x, 0);\n        // Amount by which to push the overlay in each direction such that it remains on-screen.\n        let /** @type {?} */ pushX, /** @type {?} */ pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = viewport.left - start.x;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = viewport.top - start.y;\n        }\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            const /** @type {?} */ scrollableViewProperties = this._getScrollVisibility();\n            const /** @type {?} */ changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const /** @type {?} */ elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        let /** @type {?} */ xOrigin;\n        let /** @type {?} */ yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let /** @type {?} */ i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const /** @type {?} */ viewport = this._viewportRect;\n        const /** @type {?} */ isRtl = this._isRtl();\n        let /** @type {?} */ height, /** @type {?} */ top, /** @type {?} */ bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay\n            // is vertically centered on the origin point.\n            const /** @type {?} */ smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y, origin.y - viewport.left);\n            const /** @type {?} */ previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const /** @type {?} */ isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const /** @type {?} */ isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let /** @type {?} */ width, /** @type {?} */ left, /** @type {?} */ right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay\n            // is horizontally centered on the origin point.\n            const /** @type {?} */ smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x, origin.x - viewport.top);\n            const /** @type {?} */ previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top, left, bottom, right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const /** @type {?} */ boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const /** @type {?} */ styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const /** @type {?} */ maxHeight = this._overlayRef.getConfig().maxHeight;\n            const /** @type {?} */ maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        const /** @type {?} */ styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            extendStyles(styles, this._getExactOverlayY(position, originPoint));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let /** @type {?} */ transformString = '';\n        let /** @type {?} */ offsetX = this._getOffset(position, 'x');\n        let /** @type {?} */ offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let /** @type {?} */ styles = /** @type {?} */ ({ top: null, bottom: null });\n        let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n        // @breaking-change 7.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n        // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n        // a required parameter.\n        let /** @type {?} */ virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const /** @type {?} */ documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let /** @type {?} */ styles = /** @type {?} */ ({ left: null, right: null });\n        let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let /** @type {?} */ horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const /** @type {?} */ documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const /** @type {?} */ originBounds = this._origin.getBoundingClientRect();\n        const /** @type {?} */ overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const /** @type {?} */ scrollContainerBounds = this.scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const /** @type {?} */ width = this._document.documentElement.clientWidth;\n        const /** @type {?} */ height = this._document.documentElement.clientHeight;\n        const /** @type {?} */ scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 7.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?=} platform\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 7.0.0 `platform` parameter to be made required.\n    // @breaking-change 7.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const /** @type {?} */ position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        const /** @type {?} */ config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add('cdk-global-overlay-wrapper');\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 7.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef.hasAttached()) {\n            return;\n        }\n        const /** @type {?} */ styles = this._overlayRef.overlayElement.style;\n        const /** @type {?} */ parentStyles = this._overlayRef.hostElement.style;\n        const /** @type {?} */ config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Noop implemented as a part of the PositionStrategy interface.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, \n    // @breaking-change 7.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 7.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    flexibleConnectedTo(elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8)); };\nOverlayPositionBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayPositionBuilder, factory: OverlayPositionBuilder.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler, },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    { type: Platform, decorators: [{ type: Optional },] },\n    { type: OverlayContainer, decorators: [{ type: Optional },] },\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform, decorators: [{\n                type: Optional\n            }] }, { type: OverlayContainer, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Next overlay unique ID.\n */\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        const /** @type {?} */ host = this._createHostElement();\n        const /** @type {?} */ pane = this._createPaneElement(host);\n        const /** @type {?} */ portalOutlet = this._createPortalOutlet(pane);\n        const /** @type {?} */ overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const /** @type {?} */ pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        const /** @type {?} */ host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions, },\n    { type: OverlayContainer, },\n    { type: ComponentFactoryResolver, },\n    { type: OverlayPositionBuilder, },\n    { type: OverlayKeyboardDispatcher, },\n    { type: Injector, },\n    { type: NgZone, },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    { type: Directionality, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nconst /** @type {?} */ defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n */\nconst /** @type {?} */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} _scrollStrategy\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, _scrollStrategy, _dir) {\n        this._overlay = _overlay;\n        this._scrollStrategy = _scrollStrategy;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = this._scrollStrategy();\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._setPositions(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDiemsions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDiemsions(value) { this._flexibleDimensions = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyOverlay();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            if (changes['positions']) {\n                this._position.withPositions(this.positions);\n            }\n            if (changes['lockPosition']) {\n                this._position.withLockedPosition(this.lockPosition);\n            }\n            if (changes['origin']) {\n                this._position.setOrigin(this.origin.elementRef);\n                if (this.open) {\n                    this._position.apply();\n                }\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    _buildConfig() {\n        const /** @type {?} */ positionStrategy = this._position = this._createPositionStrategy();\n        const /** @type {?} */ overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        const /** @type {?} */ strategy = this._overlay.position()\n            .flexibleConnectedTo(this.origin.elementRef)\n            .withFlexibleDimensions(this.flexibleDiemsions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n        this._setPositions(strategy);\n        strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n        return strategy;\n    }\n    /**\n     * Sets the primary and fallback positions of a positions strategy,\n     * based on the current directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setPositions(positionStrategy) {\n        const /** @type {?} */ positions = this.positions.map(pos => ({\n            originX: pos.originX,\n            originY: pos.originY,\n            overlayX: pos.overlayX,\n            overlayY: pos.overlayY,\n            offsetX: pos.offsetX || this.offsetX,\n            offsetY: pos.offsetY || this.offsetY\n        }));\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay(); /** @type {?} */\n            ((this._overlayRef)).keydownEvents().subscribe((event) => {\n                this.overlayKeydown.next(event);\n                if (event.keyCode === ESCAPE) {\n                    this._detachOverlay();\n                }\n            });\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    _destroyOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDiemsions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDiemsions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay, },\n    { type: TemplateRef, },\n    { type: ViewContainerRef, },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] },] },\n    { type: Directionality, decorators: [{ type: Optional },] },\n];\nCdkConnectedOverlay.propDecorators = {\n    \"origin\": [{ type: Input, args: ['cdkConnectedOverlayOrigin',] },],\n    \"positions\": [{ type: Input, args: ['cdkConnectedOverlayPositions',] },],\n    \"offsetX\": [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] },],\n    \"offsetY\": [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] },],\n    \"width\": [{ type: Input, args: ['cdkConnectedOverlayWidth',] },],\n    \"height\": [{ type: Input, args: ['cdkConnectedOverlayHeight',] },],\n    \"minWidth\": [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] },],\n    \"minHeight\": [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] },],\n    \"backdropClass\": [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] },],\n    \"viewportMargin\": [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] },],\n    \"scrollStrategy\": [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] },],\n    \"open\": [{ type: Input, args: ['cdkConnectedOverlayOpen',] },],\n    \"hasBackdrop\": [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] },],\n    \"lockPosition\": [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] },],\n    \"flexibleDiemsions\": [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] },],\n    \"growAfterOpen\": [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] },],\n    \"push\": [{ type: Input, args: ['cdkConnectedOverlayPush',] },],\n    \"backdropClick\": [{ type: Output },],\n    \"positionChange\": [{ type: Output },],\n    \"attach\": [{ type: Output },],\n    \"detach\": [{ type: Output },],\n    \"overlayKeydown\": [{ type: Output },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDiemsions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }] }); })();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nconst /** @type {?} */ CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollDispatchModule], ScrollDispatchModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollDispatchModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollDispatchModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollDispatchModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    /**\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n        const /** @type {?} */ parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        const /** @type {?} */ eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nFullscreenOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FullscreenOverlayContainer, factory: FullscreenOverlayContainer.ɵfac });\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, validateVerticalPosition, validateHorizontalPosition, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n\n//# sourceMappingURL=overlay.js.map"]},"metadata":{},"sourceType":"module"}
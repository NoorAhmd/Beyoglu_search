{"ast":null,"code":"import _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, Inject, Input, ElementRef, ViewEncapsulation, Optional, InjectionToken, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n  }\n}\n\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n  }\n}\n\nvar _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\";\nvar\n/** @type {?} */\nBASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n */\n\nvar\n/** @type {?} */\nBASE_STROKE_WIDTH = 10;\n/**\n * \\@docs-private\n */\n\nvar MatProgressSpinnerBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatProgressSpinnerBase(_elementRef) {\n  _classCallCheck(this, MatProgressSpinnerBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar\n/** @type {?} */\n_MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n */\n\n\nvar\n/** @type {?} */\nMAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    diameter: BASE_SIZE\n  };\n} // .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\n\n\nvar\n/** @type {?} */\nINDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n/**\n * `<mat-progress-spinner>` component.\n */\n\nvar MatProgressSpinner = /*#__PURE__*/function (_MatProgressSpinnerMi) {\n  _inherits(MatProgressSpinner, _MatProgressSpinnerMi);\n\n  var _super = _createSuper(MatProgressSpinner);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} platform\n   * @param {?} _document\n   * @param {?=} animationMode\n   * @param {?=} defaults\n   */\n  function MatProgressSpinner(_elementRef, platform, _document, // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n  animationMode, defaults) {\n    var _this;\n\n    _classCallCheck(this, MatProgressSpinner);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._document = _document;\n    _this.animationMode = animationMode;\n    _this.defaults = defaults;\n    _this._value = 0;\n    _this._fallbackAnimation = false;\n    /**\n     * Whether the _mat-animation-noopable class should be applied, disabling animations.\n     */\n\n    _this._noopAnimations = _this.animationMode === 'NoopAnimations' && !!_this.defaults && !_this.defaults._forceAnimations;\n    _this._diameter = BASE_SIZE;\n    /**\n     * Mode of the progress circle\n     */\n\n    _this.mode = 'determinate';\n    _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        _this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        _this.strokeWidth = defaults.strokeWidth;\n      }\n    } // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n\n\n    var\n    /** @type {?} */\n    animationClass = \"mat-progress-spinner-indeterminate\".concat(_this._fallbackAnimation ? '-fallback' : '', \"-animation\");\n\n    _elementRef.nativeElement.classList.add(animationClass);\n\n    return _this;\n  }\n  /**\n   * The diameter of the progress spinner (will set width and height of svg).\n   * @return {?}\n   */\n\n\n  _createClass(MatProgressSpinner, [{\n    key: \"diameter\",\n    get: function get() {\n      return this._diameter;\n    }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    ,\n    set: function set(size) {\n      this._diameter = coerceNumberProperty(size);\n\n      if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n\n  }, {\n    key: \"strokeWidth\",\n    get: function get() {\n      return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_circleRadius\",\n    get: function get() {\n      return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_viewBox\",\n    get: function get() {\n      var\n      /** @type {?} */\n      viewBox = this._circleRadius * 2 + this.strokeWidth;\n      return \"0 0 \".concat(viewBox, \" \").concat(viewBox);\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_strokeCircumference\",\n    get: function get() {\n      return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_strokeDashOffset\",\n    get: function get() {\n      if (this.mode === 'determinate') {\n        return this._strokeCircumference * (100 - this._value) / 100;\n      } // In fallback mode set the circle to 80% and rotate it with CSS.\n\n\n      if (this._fallbackAnimation && this.mode === 'indeterminate') {\n        return this._strokeCircumference * 0.2;\n      }\n\n      return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_circleStrokeWidth\",\n    get: function get() {\n      return this.strokeWidth / this.diameter * 100;\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachStyleNode\",\n    value: function _attachStyleNode() {\n      var\n      /** @type {?} */\n      styleTag = MatProgressSpinner.styleTag;\n\n      if (!styleTag) {\n        styleTag = this._document.createElement('style');\n\n        this._document.head.appendChild(styleTag);\n\n        MatProgressSpinner.styleTag = styleTag;\n      }\n\n      if (styleTag && styleTag.sheet) {\n        /** @type {?} */\n        styleTag.sheet.insertRule(this._getAnimationText(), 0);\n      }\n\n      MatProgressSpinner.diameters.add(this.diameter);\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAnimationText\",\n    value: function _getAnimationText() {\n      return INDETERMINATE_ANIMATION_TEMPLATE.replace(/START_VALUE/g, \"\".concat(0.95 * this._strokeCircumference)).replace(/END_VALUE/g, \"\".concat(0.2 * this._strokeCircumference)).replace(/DIAMETER/g, \"\".concat(this.diameter));\n    }\n  }]);\n\n  return MatProgressSpinner;\n}(_MatProgressSpinnerMixinBase);\n\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) {\n  return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatProgressSpinner,\n  selectors: [[\"mat-progress-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"],\n  hostVars: 10,\n  hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.value)(\"mode\", ctx.mode);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    mode: \"mode\",\n    diameter: \"diameter\",\n    strokeWidth: \"strokeWidth\",\n    value: \"value\"\n  },\n  exportAs: [\"matProgressSpinner\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatProgressSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n */\n\nMatProgressSpinner.diameters = new Set([BASE_SIZE]);\n/**\n * Used for storing all of the generated keyframe animations.\n * \\@dynamic\n */\n\nMatProgressSpinner.styleTag = null;\n/** @nocollapse */\n\nMatProgressSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatProgressSpinner.propDecorators = {\n  \"diameter\": [{\n    type: Input\n  }],\n  \"strokeWidth\": [{\n    type: Input\n  }],\n  \"mode\": [{\n    type: Input\n  }],\n  \"value\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-spinner',\n      exportAs: 'matProgressSpinner',\n      host: {\n        'role': 'progressbar',\n        'class': 'mat-progress-spinner',\n        '[class._mat-animation-noopable]': \"_noopAnimations\",\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter',\n        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n        '[attr.aria-valuenow]': 'value',\n        '[attr.mode]': 'mode'\n      },\n      inputs: ['color'],\n      template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n      styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    mode: [{\n      type: Input\n    }],\n    diameter: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n\n\nvar MatSpinner = /*#__PURE__*/function (_MatProgressSpinner) {\n  _inherits(MatSpinner, _MatProgressSpinner);\n\n  var _super2 = _createSuper(MatSpinner);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} platform\n   * @param {?} document\n   * @param {?=} animationMode\n   * @param {?=} defaults\n   */\n  function MatSpinner(elementRef, platform, document, // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n  animationMode, defaults) {\n    var _this2;\n\n    _classCallCheck(this, MatSpinner);\n\n    _this2 = _super2.call(this, elementRef, platform, document, animationMode, defaults);\n    _this2.mode = 'indeterminate';\n    return _this2;\n  }\n\n  return MatSpinner;\n}(MatProgressSpinner);\n\nMatSpinner.ɵfac = function MatSpinner_Factory(t) {\n  return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS));\n};\n\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSpinner,\n  selectors: [[\"mat-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"],\n  hostVars: 6,\n  hostBindings: function MatSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase],\n  styles: [_c0],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSpinner.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-spinner',\n      host: {\n        'role': 'progressbar',\n        'mode': 'indeterminate',\n        'class': 'mat-spinner mat-progress-spinner',\n        '[class._mat-animation-noopable]': \"_noopAnimations\",\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter'\n      },\n      inputs: ['color'],\n      template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n      styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatProgressSpinnerModule = function MatProgressSpinnerModule() {\n  _classCallCheck(this, MatProgressSpinnerModule);\n};\n\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) {\n  return new (t || MatProgressSpinnerModule)();\n};\n\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatProgressSpinnerModule\n});\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, CommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, {\n    declarations: function declarations() {\n      return [MatProgressSpinner, MatSpinner];\n    },\n    imports: function imports() {\n      return [MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressSpinner, MatSpinner, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule],\n      exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n      declarations: [MatProgressSpinner, MatSpinner]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatSpinner }; //# sourceMappingURL=progress-spinner.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/material/__ivy_ngcc__/esm2015/progress-spinner.js"],"names":["Component","ChangeDetectionStrategy","Inject","Input","ElementRef","ViewEncapsulation","Optional","InjectionToken","NgModule","ANIMATION_MODULE_TYPE","mixinColor","MatCommonModule","Platform","DOCUMENT","CommonModule","coerceNumberProperty","ɵngcc0","ɵngcc1","ɵngcc2","MatProgressSpinner__svg_circle_1_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵstyleProp","diameter","_strokeDashOffset","_strokeCircumference","_circleStrokeWidth","ɵɵattribute","_circleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","_c0","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","animationMode","defaults","_value","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","mode","EDGE","TRIDENT","strokeWidth","animationClass","nativeElement","classList","add","size","diameters","has","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","viewBox","PI","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","ɵfac","MatProgressSpinner_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","ɵɵclassProp","inputs","color","exportAs","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatProgressSpinner_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","ɵɵproperty","_viewBox","ɵɵadvance","directives","NgSwitch","NgSwitchCase","styles","encapsulation","changeDetection","Set","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","OnPush","None","MatSpinner","elementRef","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, Inject, Input, ElementRef, ViewEncapsulation, Optional, InjectionToken, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Base reference size of the spinner.\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\";\nconst /** @type {?} */ BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * \\@docs-private\n */\nconst /** @type {?} */ BASE_STROKE_WIDTH = 10;\n/**\n * \\@docs-private\n */\nclass MatProgressSpinnerBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst /** @type {?} */ _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * Injection token to be used to override the default options for `mat-progress-spinner`.\n */\nconst /** @type {?} */ MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst /** @type {?} */ INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} platform\n     * @param {?} _document\n     * @param {?=} animationMode\n     * @param {?=} defaults\n     */\n    constructor(_elementRef, platform, _document, \n    // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n    animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this.animationMode = animationMode;\n        this.defaults = defaults;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /**\n         * Whether the _mat-animation-noopable class should be applied, disabling animations.\n         */\n        this._noopAnimations = this.animationMode === 'NoopAnimations' && (!!this.defaults && !this.defaults._forceAnimations);\n        this._diameter = BASE_SIZE;\n        /**\n         * Mode of the progress circle\n         */\n        this.mode = 'determinate';\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const /** @type {?} */ animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        _elementRef.nativeElement.classList.add(animationClass);\n    }\n    /**\n     * The diameter of the progress spinner (will set width and height of svg).\n     * @return {?}\n     */\n    get diameter() { return this._diameter; }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n            this._attachStyleNode();\n        }\n    }\n    /**\n     * Stroke width of the progress spinner.\n     * @return {?}\n     */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /**\n     * Value of the progress circle.\n     * @return {?}\n     */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    /**\n     * The radius of the spinner, adjusted for stroke width.\n     * @return {?}\n     */\n    get _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /**\n     * The view box of the spinner's svg element.\n     * @return {?}\n     */\n    get _viewBox() {\n        const /** @type {?} */ viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /**\n     * The stroke circumference of the svg circle.\n     * @return {?}\n     */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /**\n     * The dash offset of the svg circle.\n     * @return {?}\n     */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._strokeCircumference * 0.2;\n        }\n        return null;\n    }\n    /**\n     * Stroke width of the circle in percent.\n     * @return {?}\n     */\n    get _circleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /**\n     * Dynamically generates a style tag containing the correct animation for this diameter.\n     * @return {?}\n     */\n    _attachStyleNode() {\n        let /** @type {?} */ styleTag = MatProgressSpinner.styleTag;\n        if (!styleTag) {\n            styleTag = this._document.createElement('style');\n            this._document.head.appendChild(styleTag);\n            MatProgressSpinner.styleTag = styleTag;\n        }\n        if (styleTag && styleTag.sheet) {\n            (/** @type {?} */ (styleTag.sheet)).insertRule(this._getAnimationText(), 0);\n        }\n        MatProgressSpinner.diameters.add(this.diameter);\n    }\n    /**\n     * Generates animation styles adjusted for the spinner's diameter.\n     * @return {?}\n     */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)\n */\nMatProgressSpinner.diameters = new Set([BASE_SIZE]);\n/**\n * Used for storing all of the generated keyframe animations.\n * \\@dynamic\n */\nMatProgressSpinner.styleTag = null;\n/** @nocollapse */\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Platform, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] },] },\n];\nMatProgressSpinner.propDecorators = {\n    \"diameter\": [{ type: Input },],\n    \"strokeWidth\": [{ type: Input },],\n    \"mode\": [{ type: Input },],\n    \"value\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{ selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    /**\n     * @param {?} elementRef\n     * @param {?} platform\n     * @param {?} document\n     * @param {?=} animationMode\n     * @param {?=} defaults\n     */\n    constructor(elementRef, platform, document, \n    // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n    animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Platform, },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] },] },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{ selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map"]},"metadata":{},"sourceType":"module"}
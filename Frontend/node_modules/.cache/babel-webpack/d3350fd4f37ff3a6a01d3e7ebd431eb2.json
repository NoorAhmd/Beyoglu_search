{"ast":null,"code":"/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\nimport { equals } from '../../array.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { intersects } from '../../extent.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport { transformGeom2D } from '../../geom/SimpleGeometry.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { CANVAS_LINE_DASH } from '../../has.js';\nimport VectorContext from '../VectorContext.js';\nimport { defaultTextAlign, defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline, defaultFont } from '../canvas.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\n\nvar CanvasImmediateRenderer = function (VectorContext) {\n  function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation) {\n    VectorContext.call(this);\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    this.context_ = context;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n\n    this.extent_ = extent;\n    /**\n     * @private\n     * @type {module:ol/transform~Transform}\n     */\n\n    this.transform_ = transform;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.viewRotation_ = viewRotation;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n\n    this.contextFillState_ = null;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n\n    this.contextStrokeState_ = null;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~TextState}\n     */\n\n    this.contextTextState_ = null;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n\n    this.fillState_ = null;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n\n    this.strokeState_ = null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageAnchorX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageAnchorY_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageHeight_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageOpacity_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageOriginX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageOriginY_ = 0;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.imageRotateWithView_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageRotation_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageScale_ = 0;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.imageSnapToPixel_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.imageWidth_ = 0;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.text_ = '';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textOffsetX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textOffsetY_ = 0;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.textRotateWithView_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textRotation_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.textScale_ = 0;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n\n    this.textFillState_ = null;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n\n    this.textStrokeState_ = null;\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~TextState}\n     */\n\n    this.textState_ = null;\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n\n    this.pixelCoordinates_ = [];\n    /**\n     * @private\n     * @type {module:ol/transform~Transform}\n     */\n\n    this.tmpLocalTransform_ = createTransform();\n  }\n\n  if (VectorContext) CanvasImmediateRenderer.__proto__ = VectorContext;\n  CanvasImmediateRenderer.prototype = Object.create(VectorContext && VectorContext.prototype);\n  CanvasImmediateRenderer.prototype.constructor = CanvasImmediateRenderer;\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n\n  CanvasImmediateRenderer.prototype.drawImages_ = function drawImages_(flatCoordinates, offset, end, stride) {\n    var this$1 = this;\n\n    if (!this.image_) {\n      return;\n    }\n\n    var pixelCoordinates = transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);\n    var context = this.context_;\n    var localTransform = this.tmpLocalTransform_;\n    var alpha = context.globalAlpha;\n\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n\n    var rotation = this.imageRotation_;\n\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n\n    for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      var x = pixelCoordinates[i] - this$1.imageAnchorX_;\n      var y = pixelCoordinates[i + 1] - this$1.imageAnchorY_;\n\n      if (this$1.imageSnapToPixel_) {\n        x = Math.round(x);\n        y = Math.round(y);\n      }\n\n      if (rotation !== 0 || this$1.imageScale_ != 1) {\n        var centerX = x + this$1.imageAnchorX_;\n        var centerY = y + this$1.imageAnchorY_;\n        composeTransform(localTransform, centerX, centerY, this$1.imageScale_, this$1.imageScale_, rotation, -centerX, -centerY);\n        context.setTransform.apply(context, localTransform);\n      }\n\n      context.drawImage(this$1.image_, this$1.imageOriginX_, this$1.imageOriginY_, this$1.imageWidth_, this$1.imageHeight_, x, y, this$1.imageWidth_, this$1.imageHeight_);\n    }\n\n    if (rotation !== 0 || this.imageScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  };\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawText_ = function drawText_(flatCoordinates, offset, end, stride) {\n    var this$1 = this;\n\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n\n    this.setContextTextState_(this.textState_);\n    var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    var context = this.context_;\n    var rotation = this.textRotation_;\n\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n\n    for (; offset < end; offset += stride) {\n      var x = pixelCoordinates[offset] + this$1.textOffsetX_;\n      var y = pixelCoordinates[offset + 1] + this$1.textOffsetY_;\n\n      if (rotation !== 0 || this$1.textScale_ != 1) {\n        var localTransform = composeTransform(this$1.tmpLocalTransform_, x, y, this$1.textScale_, this$1.textScale_, rotation, -x, -y);\n        context.setTransform.apply(context, localTransform);\n      }\n\n      if (this$1.textStrokeState_) {\n        context.strokeText(this$1.text_, x, y);\n      }\n\n      if (this$1.textFillState_) {\n        context.fillText(this$1.text_, x, y);\n      }\n    }\n\n    if (rotation !== 0 || this.textScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n  };\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n\n\n  CanvasImmediateRenderer.prototype.moveToLineTo_ = function moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    var context = this.context_;\n    var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    var length = pixelCoordinates.length;\n\n    if (close) {\n      length -= 2;\n    }\n\n    for (var i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n\n    if (close) {\n      context.closePath();\n    }\n\n    return end;\n  };\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array.<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawRings_ = function drawRings_(flatCoordinates, offset, ends, stride) {\n    var this$1 = this;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this$1.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n    }\n\n    return offset;\n  };\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {module:ol/geom/Circle} geometry Circle geometry.\n   * @override\n   * @api\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawCircle = function drawCircle(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n\n      var pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);\n      var dx = pixelCoordinates[2] - pixelCoordinates[0];\n      var dy = pixelCoordinates[3] - pixelCoordinates[1];\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      var context = this.context_;\n      context.beginPath();\n      context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n\n      if (this.fillState_) {\n        context.fill();\n      }\n\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  };\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {module:ol/style/Style} style The rendering style.\n   * @override\n   * @api\n   */\n\n\n  CanvasImmediateRenderer.prototype.setStyle = function setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  };\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.\n   *\n   * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry The geometry to render.\n   * @override\n   * @api\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawGeometry = function drawGeometry(geometry) {\n    var type = geometry.getType();\n\n    switch (type) {\n      case GeometryType.POINT:\n        this.drawPoint(\n        /** @type {module:ol/geom/Point} */\n        geometry);\n        break;\n\n      case GeometryType.LINE_STRING:\n        this.drawLineString(\n        /** @type {module:ol/geom/LineString} */\n        geometry);\n        break;\n\n      case GeometryType.POLYGON:\n        this.drawPolygon(\n        /** @type {module:ol/geom/Polygon} */\n        geometry);\n        break;\n\n      case GeometryType.MULTI_POINT:\n        this.drawMultiPoint(\n        /** @type {module:ol/geom/MultiPoint} */\n        geometry);\n        break;\n\n      case GeometryType.MULTI_LINE_STRING:\n        this.drawMultiLineString(\n        /** @type {module:ol/geom/MultiLineString} */\n        geometry);\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        this.drawMultiPolygon(\n        /** @type {module:ol/geom/MultiPolygon} */\n        geometry);\n        break;\n\n      case GeometryType.GEOMETRY_COLLECTION:\n        this.drawGeometryCollection(\n        /** @type {module:ol/geom/GeometryCollection} */\n        geometry);\n        break;\n\n      case GeometryType.CIRCLE:\n        this.drawCircle(\n        /** @type {module:ol/geom/Circle} */\n        geometry);\n        break;\n\n      default:\n    }\n  };\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/style/Style} style Style.\n   * @override\n   * @api\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawFeature = function drawFeature(feature, style) {\n    var geometry = style.getGeometryFunction()(feature);\n\n    if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  };\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {module:ol/geom/GeometryCollection} geometry Geometry collection.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection(geometry) {\n    var this$1 = this;\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      this$1.drawGeometry(geometries[i]);\n    }\n  };\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {module:ol/geom/Point|module:ol/render/Feature} geometry Point geometry.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawPoint = function drawPoint(geometry) {\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  };\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {module:ol/geom/MultiPoint|module:ol/render/Feature} geometry MultiPoint geometry.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint(geometry) {\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  };\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {module:ol/geom/LineString|module:ol/render/Feature} geometry LineString geometry.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawLineString = function drawLineString(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      var context = this.context_;\n      var flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);\n      context.stroke();\n    }\n\n    if (this.text_ !== '') {\n      var flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  };\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {module:ol/geom/MultiLineString|module:ol/render/Feature} geometry MultiLineString geometry.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString(geometry) {\n    var this$1 = this;\n    var geometryExtent = geometry.getExtent();\n\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      var context = this.context_;\n      var flatCoordinates = geometry.getFlatCoordinates();\n      var offset = 0;\n      var ends = geometry.getEnds();\n      var stride = geometry.getStride();\n      context.beginPath();\n\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this$1.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n      }\n\n      context.stroke();\n    }\n\n    if (this.text_ !== '') {\n      var flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  };\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {module:ol/geom/Polygon|module:ol/render/Feature} geometry Polygon geometry.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawPolygon = function drawPolygon(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n\n      var context = this.context_;\n      context.beginPath();\n      this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, geometry.getEnds(), geometry.getStride());\n\n      if (this.fillState_) {\n        context.fill();\n      }\n\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n\n    if (this.text_ !== '') {\n      var flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  };\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon(geometry) {\n    var this$1 = this;\n\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n\n      var context = this.context_;\n      var flatCoordinates = geometry.getOrientedFlatCoordinates();\n      var offset = 0;\n      var endss = geometry.getEndss();\n      var stride = geometry.getStride();\n      context.beginPath();\n\n      for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        offset = this$1.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n\n      if (this.fillState_) {\n        context.fill();\n      }\n\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n\n    if (this.text_ !== '') {\n      var flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  };\n  /**\n   * @param {module:ol/render/canvas~FillState} fillState Fill state.\n   * @private\n   */\n\n\n  CanvasImmediateRenderer.prototype.setContextFillState_ = function setContextFillState_(fillState) {\n    var context = this.context_;\n    var contextFillState = this.contextFillState_;\n\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;\n      }\n    }\n  };\n  /**\n   * @param {module:ol/render/canvas~StrokeState} strokeState Stroke state.\n   * @private\n   */\n\n\n  CanvasImmediateRenderer.prototype.setContextStrokeState_ = function setContextStrokeState_(strokeState) {\n    var context = this.context_;\n    var contextStrokeState = this.contextStrokeState_;\n\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n\n      if (CANVAS_LINE_DASH) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = context.lineCap = strokeState.lineCap;\n      }\n\n      if (CANVAS_LINE_DASH) {\n        if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n          context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n        }\n\n        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n          contextStrokeState.lineDashOffset = context.lineDashOffset = strokeState.lineDashOffset;\n        }\n      }\n\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = context.lineJoin = strokeState.lineJoin;\n      }\n\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;\n      }\n\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = context.miterLimit = strokeState.miterLimit;\n      }\n\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  };\n  /**\n   * @param {module:ol/render/canvas~TextState} textState Text state.\n   * @private\n   */\n\n\n  CanvasImmediateRenderer.prototype.setContextTextState_ = function setContextTextState_(textState) {\n    var context = this.context_;\n    var contextTextState = this.contextTextState_;\n    var textAlign = textState.textAlign ? textState.textAlign : defaultTextAlign;\n\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = context.font = textState.font;\n      }\n\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = context.textAlign = textAlign;\n      }\n\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = context.textBaseline = textState.textBaseline;\n      }\n    }\n  };\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {module:ol/style/Fill} fillStyle Fill style.\n   * @param {module:ol/style/Stroke} strokeStyle Stroke style.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      var fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle)\n      };\n    }\n\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      var strokeStyleColor = strokeStyle.getColor();\n      var strokeStyleLineCap = strokeStyle.getLineCap();\n      var strokeStyleLineDash = strokeStyle.getLineDash();\n      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      var strokeStyleLineJoin = strokeStyle.getLineJoin();\n      var strokeStyleWidth = strokeStyle.getWidth();\n      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      this.strokeState_ = {\n        lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap,\n        lineDash: strokeStyleLineDash ? strokeStyleLineDash : defaultLineDash,\n        lineDashOffset: strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset,\n        lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin,\n        lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth),\n        miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit,\n        strokeStyle: asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle)\n      };\n    }\n  };\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {module:ol/style/Image} imageStyle Image style.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.setImageStyle = function setImageStyle(imageStyle) {\n    if (!imageStyle) {\n      this.image_ = null;\n    } else {\n      var imageAnchor = imageStyle.getAnchor(); // FIXME pixel ratio\n\n      var imageImage = imageStyle.getImage(1);\n      var imageOrigin = imageStyle.getOrigin();\n      var imageSize = imageStyle.getSize();\n      this.imageAnchorX_ = imageAnchor[0];\n      this.imageAnchorY_ = imageAnchor[1];\n      this.imageHeight_ = imageSize[1];\n      this.image_ = imageImage;\n      this.imageOpacity_ = imageStyle.getOpacity();\n      this.imageOriginX_ = imageOrigin[0];\n      this.imageOriginY_ = imageOrigin[1];\n      this.imageRotateWithView_ = imageStyle.getRotateWithView();\n      this.imageRotation_ = imageStyle.getRotation();\n      this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;\n      this.imageSnapToPixel_ = imageStyle.getSnapToPixel();\n      this.imageWidth_ = imageSize[0];\n    }\n  };\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {module:ol/style/Text} textStyle Text style.\n   * @override\n   */\n\n\n  CanvasImmediateRenderer.prototype.setTextStyle = function setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      var textFillStyle = textStyle.getFill();\n\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        var textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(textFillStyleColor ? textFillStyleColor : defaultFillStyle)\n        };\n      }\n\n      var textStrokeStyle = textStyle.getStroke();\n\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        var textStrokeStyleColor = textStrokeStyle.getColor();\n        var textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        var textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n        var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        var textStrokeStyleWidth = textStrokeStyle.getWidth();\n        var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : defaultLineCap,\n          lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : defaultLineDashOffset,\n          lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : defaultLineJoin,\n          lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : defaultLineWidth,\n          miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : defaultMiterLimit,\n          strokeStyle: asColorLike(textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle)\n        };\n      }\n\n      var textFont = textStyle.getFont();\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      var textScale = textStyle.getScale();\n      var textText = textStyle.getText();\n      var textTextAlign = textStyle.getTextAlign();\n      var textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign: textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline: textTextBaseline !== undefined ? textTextBaseline : defaultTextBaseline\n      };\n      this.text_ = textText !== undefined ? textText : '';\n      this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = this.pixelRatio_ * (textScale !== undefined ? textScale : 1);\n    }\n  };\n\n  return CanvasImmediateRenderer;\n}(VectorContext);\n\nexport default CanvasImmediateRenderer; //# sourceMappingURL=Immediate.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/render/canvas/Immediate.js"],"names":["equals","asColorLike","intersects","GeometryType","transformGeom2D","transform2D","CANVAS_LINE_DASH","VectorContext","defaultTextAlign","defaultFillStyle","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","defaultTextBaseline","defaultFont","create","createTransform","compose","composeTransform","CanvasImmediateRenderer","context","pixelRatio","extent","transform","viewRotation","call","context_","pixelRatio_","extent_","transform_","viewRotation_","contextFillState_","contextStrokeState_","contextTextState_","fillState_","strokeState_","image_","imageAnchorX_","imageAnchorY_","imageHeight_","imageOpacity_","imageOriginX_","imageOriginY_","imageRotateWithView_","imageRotation_","imageScale_","imageSnapToPixel_","imageWidth_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","textRotation_","textScale_","textFillState_","textStrokeState_","textState_","pixelCoordinates_","tmpLocalTransform_","__proto__","prototype","Object","constructor","drawImages_","flatCoordinates","offset","end","stride","this$1","pixelCoordinates","localTransform","alpha","globalAlpha","rotation","i","ii","length","x","y","Math","round","centerX","centerY","setTransform","apply","drawImage","drawText_","setContextFillState_","setContextStrokeState_","setContextTextState_","strokeText","fillText","moveToLineTo_","close","moveTo","lineTo","closePath","drawRings_","ends","drawCircle","geometry","getExtent","dx","dy","radius","sqrt","beginPath","arc","PI","fill","stroke","getCenter","setStyle","style","setFillStrokeStyle","getFill","getStroke","setImageStyle","getImage","setTextStyle","getText","drawGeometry","type","getType","POINT","drawPoint","LINE_STRING","drawLineString","POLYGON","drawPolygon","MULTI_POINT","drawMultiPoint","MULTI_LINE_STRING","drawMultiLineString","MULTI_POLYGON","drawMultiPolygon","GEOMETRY_COLLECTION","drawGeometryCollection","CIRCLE","drawFeature","feature","getGeometryFunction","geometries","getGeometriesArray","getFlatCoordinates","getStride","flatMidpoint","getFlatMidpoint","geometryExtent","getEnds","flatMidpoints","getFlatMidpoints","getOrientedFlatCoordinates","flatInteriorPoint","getFlatInteriorPoint","endss","getEndss","flatInteriorPoints","getFlatInteriorPoints","fillState","contextFillState","fillStyle","strokeState","contextStrokeState","lineCap","setLineDash","lineDash","lineDashOffset","lineJoin","lineWidth","miterLimit","strokeStyle","textState","contextTextState","textAlign","font","textBaseline","fillStyleColor","getColor","strokeStyleColor","strokeStyleLineCap","getLineCap","strokeStyleLineDash","getLineDash","strokeStyleLineDashOffset","getLineDashOffset","strokeStyleLineJoin","getLineJoin","strokeStyleWidth","getWidth","strokeStyleMiterLimit","getMiterLimit","undefined","imageStyle","imageAnchor","getAnchor","imageImage","imageOrigin","getOrigin","imageSize","getSize","getOpacity","getRotateWithView","getRotation","getScale","getSnapToPixel","textStyle","textFillStyle","textFillStyleColor","textStrokeStyle","textStrokeStyleColor","textStrokeStyleLineCap","textStrokeStyleLineDash","textStrokeStyleLineDashOffset","textStrokeStyleLineJoin","textStrokeStyleWidth","textStrokeStyleMiterLimit","textFont","getFont","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","textRotation","textScale","textText","textTextAlign","getTextAlign","textTextBaseline","getTextBaseline"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport {equals} from '../../array.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {intersects} from '../../extent.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {CANVAS_LINE_DASH} from '../../has.js';\nimport VectorContext from '../VectorContext.js';\nimport {defaultTextAlign, defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline, defaultFont} from '../canvas.js';\nimport {create as createTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nvar CanvasImmediateRenderer = (function (VectorContext) {\n  function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation) {\n    VectorContext.call(this);\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {module:ol/extent~Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {module:ol/transform~Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageScale_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageSnapToPixel_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textScale_ = 0;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/render/canvas~TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {module:ol/transform~Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n\n  }\n\n  if ( VectorContext ) CanvasImmediateRenderer.__proto__ = VectorContext;\n  CanvasImmediateRenderer.prototype = Object.create( VectorContext && VectorContext.prototype );\n  CanvasImmediateRenderer.prototype.constructor = CanvasImmediateRenderer;\n\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.drawImages_ = function drawImages_ (flatCoordinates, offset, end, stride) {\n    var this$1 = this;\n\n    if (!this.image_) {\n      return;\n    }\n    var pixelCoordinates = transform2D(\n      flatCoordinates, offset, end, 2, this.transform_,\n      this.pixelCoordinates_);\n    var context = this.context_;\n    var localTransform = this.tmpLocalTransform_;\n    var alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    var rotation = this.imageRotation_;\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      var x = pixelCoordinates[i] - this$1.imageAnchorX_;\n      var y = pixelCoordinates[i + 1] - this$1.imageAnchorY_;\n      if (this$1.imageSnapToPixel_) {\n        x = Math.round(x);\n        y = Math.round(y);\n      }\n      if (rotation !== 0 || this$1.imageScale_ != 1) {\n        var centerX = x + this$1.imageAnchorX_;\n        var centerY = y + this$1.imageAnchorY_;\n        composeTransform(localTransform,\n          centerX, centerY,\n          this$1.imageScale_, this$1.imageScale_,\n          rotation,\n          -centerX, -centerY);\n        context.setTransform.apply(context, localTransform);\n      }\n      context.drawImage(this$1.image_, this$1.imageOriginX_, this$1.imageOriginY_,\n        this$1.imageWidth_, this$1.imageHeight_, x, y,\n        this$1.imageWidth_, this$1.imageHeight_);\n    }\n    if (rotation !== 0 || this.imageScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  };\n\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.drawText_ = function drawText_ (flatCoordinates, offset, end, stride) {\n    var this$1 = this;\n\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    var pixelCoordinates = transform2D(\n      flatCoordinates, offset, end, stride, this.transform_,\n      this.pixelCoordinates_);\n    var context = this.context_;\n    var rotation = this.textRotation_;\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      var x = pixelCoordinates[offset] + this$1.textOffsetX_;\n      var y = pixelCoordinates[offset + 1] + this$1.textOffsetY_;\n      if (rotation !== 0 || this$1.textScale_ != 1) {\n        var localTransform = composeTransform(this$1.tmpLocalTransform_,\n          x, y,\n          this$1.textScale_, this$1.textScale_,\n          rotation,\n          -x, -y);\n        context.setTransform.apply(context, localTransform);\n      }\n      if (this$1.textStrokeState_) {\n        context.strokeText(this$1.text_, x, y);\n      }\n      if (this$1.textFillState_) {\n        context.fillText(this$1.text_, x, y);\n      }\n    }\n    if (rotation !== 0 || this.textScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n  };\n\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  CanvasImmediateRenderer.prototype.moveToLineTo_ = function moveToLineTo_ (flatCoordinates, offset, end, stride, close) {\n    var context = this.context_;\n    var pixelCoordinates = transform2D(\n      flatCoordinates, offset, end, stride, this.transform_,\n      this.pixelCoordinates_);\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    var length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (var i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  };\n\n  /**\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array.<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  CanvasImmediateRenderer.prototype.drawRings_ = function drawRings_ (flatCoordinates, offset, ends, stride) {\n    var this$1 = this;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this$1.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n    }\n    return offset;\n  };\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {module:ol/geom/Circle} geometry Circle geometry.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.drawCircle = function drawCircle (geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      var pixelCoordinates = transformGeom2D(\n        geometry, this.transform_, this.pixelCoordinates_);\n      var dx = pixelCoordinates[2] - pixelCoordinates[0];\n      var dy = pixelCoordinates[3] - pixelCoordinates[1];\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      var context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  };\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {module:ol/style/Style} style The rendering style.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.setStyle = function setStyle (style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  };\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.\n   *\n   * @param {module:ol/geom/Geometry|module:ol/render/Feature} geometry The geometry to render.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.drawGeometry = function drawGeometry (geometry) {\n    var type = geometry.getType();\n    switch (type) {\n      case GeometryType.POINT:\n        this.drawPoint(/** @type {module:ol/geom/Point} */ (geometry));\n        break;\n      case GeometryType.LINE_STRING:\n        this.drawLineString(/** @type {module:ol/geom/LineString} */ (geometry));\n        break;\n      case GeometryType.POLYGON:\n        this.drawPolygon(/** @type {module:ol/geom/Polygon} */ (geometry));\n        break;\n      case GeometryType.MULTI_POINT:\n        this.drawMultiPoint(/** @type {module:ol/geom/MultiPoint} */ (geometry));\n        break;\n      case GeometryType.MULTI_LINE_STRING:\n        this.drawMultiLineString(/** @type {module:ol/geom/MultiLineString} */ (geometry));\n        break;\n      case GeometryType.MULTI_POLYGON:\n        this.drawMultiPolygon(/** @type {module:ol/geom/MultiPolygon} */ (geometry));\n        break;\n      case GeometryType.GEOMETRY_COLLECTION:\n        this.drawGeometryCollection(/** @type {module:ol/geom/GeometryCollection} */ (geometry));\n        break;\n      case GeometryType.CIRCLE:\n        this.drawCircle(/** @type {module:ol/geom/Circle} */ (geometry));\n        break;\n      default:\n    }\n  };\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {module:ol/Feature} feature Feature.\n   * @param {module:ol/style/Style} style Style.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.drawFeature = function drawFeature (feature, style) {\n    var geometry = style.getGeometryFunction()(feature);\n    if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  };\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {module:ol/geom/GeometryCollection} geometry Geometry collection.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection (geometry) {\n    var this$1 = this;\n\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      this$1.drawGeometry(geometries[i]);\n    }\n  };\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {module:ol/geom/Point|module:ol/render/Feature} geometry Point geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawPoint = function drawPoint (geometry) {\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  };\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {module:ol/geom/MultiPoint|module:ol/render/Feature} geometry MultiPoint geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint (geometry) {\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  };\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {module:ol/geom/LineString|module:ol/render/Feature} geometry LineString geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawLineString = function drawLineString (geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      var context = this.context_;\n      var flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length,\n        geometry.getStride(), false);\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      var flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  };\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {module:ol/geom/MultiLineString|module:ol/render/Feature} geometry MultiLineString geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString (geometry) {\n    var this$1 = this;\n\n    var geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      var context = this.context_;\n      var flatCoordinates = geometry.getFlatCoordinates();\n      var offset = 0;\n      var ends = geometry.getEnds();\n      var stride = geometry.getStride();\n      context.beginPath();\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this$1.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      var flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  };\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {module:ol/geom/Polygon|module:ol/render/Feature} geometry Polygon geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawPolygon = function drawPolygon (geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      var context = this.context_;\n      context.beginPath();\n      this.drawRings_(geometry.getOrientedFlatCoordinates(),\n        0, geometry.getEnds(), geometry.getStride());\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      var flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  };\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {module:ol/geom/MultiPolygon} geometry MultiPolygon geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon (geometry) {\n    var this$1 = this;\n\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      var context = this.context_;\n      var flatCoordinates = geometry.getOrientedFlatCoordinates();\n      var offset = 0;\n      var endss = geometry.getEndss();\n      var stride = geometry.getStride();\n      context.beginPath();\n      for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        offset = this$1.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      var flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  };\n\n  /**\n   * @param {module:ol/render/canvas~FillState} fillState Fill state.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.setContextFillState_ = function setContextFillState_ (fillState) {\n    var context = this.context_;\n    var contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;\n      }\n    }\n  };\n\n  /**\n   * @param {module:ol/render/canvas~StrokeState} strokeState Stroke state.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.setContextStrokeState_ = function setContextStrokeState_ (strokeState) {\n    var context = this.context_;\n    var contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      if (CANVAS_LINE_DASH) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = context.lineCap = strokeState.lineCap;\n      }\n      if (CANVAS_LINE_DASH) {\n        if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n          context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n        }\n        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n          contextStrokeState.lineDashOffset = context.lineDashOffset =\n              strokeState.lineDashOffset;\n        }\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = context.lineJoin = strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = context.miterLimit =\n            strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = context.strokeStyle =\n            strokeState.strokeStyle;\n      }\n    }\n  };\n\n  /**\n   * @param {module:ol/render/canvas~TextState} textState Text state.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.setContextTextState_ = function setContextTextState_ (textState) {\n    var context = this.context_;\n    var contextTextState = this.contextTextState_;\n    var textAlign = textState.textAlign ?\n      textState.textAlign : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = context.textAlign = textAlign;\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = context.textBaseline =\n            textState.textBaseline;\n      }\n    }\n  };\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {module:ol/style/Fill} fillStyle Fill style.\n   * @param {module:ol/style/Stroke} strokeStyle Stroke style.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle (fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      var fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(fillStyleColor ?\n          fillStyleColor : defaultFillStyle)\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      var strokeStyleColor = strokeStyle.getColor();\n      var strokeStyleLineCap = strokeStyle.getLineCap();\n      var strokeStyleLineDash = strokeStyle.getLineDash();\n      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      var strokeStyleLineJoin = strokeStyle.getLineJoin();\n      var strokeStyleWidth = strokeStyle.getWidth();\n      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      this.strokeState_ = {\n        lineCap: strokeStyleLineCap !== undefined ?\n          strokeStyleLineCap : defaultLineCap,\n        lineDash: strokeStyleLineDash ?\n          strokeStyleLineDash : defaultLineDash,\n        lineDashOffset: strokeStyleLineDashOffset ?\n          strokeStyleLineDashOffset : defaultLineDashOffset,\n        lineJoin: strokeStyleLineJoin !== undefined ?\n          strokeStyleLineJoin : defaultLineJoin,\n        lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?\n          strokeStyleWidth : defaultLineWidth),\n        miterLimit: strokeStyleMiterLimit !== undefined ?\n          strokeStyleMiterLimit : defaultMiterLimit,\n        strokeStyle: asColorLike(strokeStyleColor ?\n          strokeStyleColor : defaultStrokeStyle)\n      };\n    }\n  };\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {module:ol/style/Image} imageStyle Image style.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.setImageStyle = function setImageStyle (imageStyle) {\n    if (!imageStyle) {\n      this.image_ = null;\n    } else {\n      var imageAnchor = imageStyle.getAnchor();\n      // FIXME pixel ratio\n      var imageImage = imageStyle.getImage(1);\n      var imageOrigin = imageStyle.getOrigin();\n      var imageSize = imageStyle.getSize();\n      this.imageAnchorX_ = imageAnchor[0];\n      this.imageAnchorY_ = imageAnchor[1];\n      this.imageHeight_ = imageSize[1];\n      this.image_ = imageImage;\n      this.imageOpacity_ = imageStyle.getOpacity();\n      this.imageOriginX_ = imageOrigin[0];\n      this.imageOriginY_ = imageOrigin[1];\n      this.imageRotateWithView_ = imageStyle.getRotateWithView();\n      this.imageRotation_ = imageStyle.getRotation();\n      this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;\n      this.imageSnapToPixel_ = imageStyle.getSnapToPixel();\n      this.imageWidth_ = imageSize[0];\n    }\n  };\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {module:ol/style/Text} textStyle Text style.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.setTextStyle = function setTextStyle (textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      var textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        var textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(textFillStyleColor ?\n            textFillStyleColor : defaultFillStyle)\n        };\n      }\n      var textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        var textStrokeStyleColor = textStrokeStyle.getColor();\n        var textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        var textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n        var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        var textStrokeStyleWidth = textStrokeStyle.getWidth();\n        var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap: textStrokeStyleLineCap !== undefined ?\n            textStrokeStyleLineCap : defaultLineCap,\n          lineDash: textStrokeStyleLineDash ?\n            textStrokeStyleLineDash : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset ?\n            textStrokeStyleLineDashOffset : defaultLineDashOffset,\n          lineJoin: textStrokeStyleLineJoin !== undefined ?\n            textStrokeStyleLineJoin : defaultLineJoin,\n          lineWidth: textStrokeStyleWidth !== undefined ?\n            textStrokeStyleWidth : defaultLineWidth,\n          miterLimit: textStrokeStyleMiterLimit !== undefined ?\n            textStrokeStyleMiterLimit : defaultMiterLimit,\n          strokeStyle: asColorLike(textStrokeStyleColor ?\n            textStrokeStyleColor : defaultStrokeStyle)\n        };\n      }\n      var textFont = textStyle.getFont();\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      var textScale = textStyle.getScale();\n      var textText = textStyle.getText();\n      var textTextAlign = textStyle.getTextAlign();\n      var textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ?\n          textFont : defaultFont,\n        textAlign: textTextAlign !== undefined ?\n          textTextAlign : defaultTextAlign,\n        textBaseline: textTextBaseline !== undefined ?\n          textTextBaseline : defaultTextBaseline\n      };\n      this.text_ = textText !== undefined ? textText : '';\n      this.textOffsetX_ =\n          textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;\n      this.textOffsetY_ =\n          textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;\n      this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?\n        textScale : 1);\n    }\n  };\n\n  return CanvasImmediateRenderer;\n}(VectorContext));\n\n\nexport default CanvasImmediateRenderer;\n\n//# sourceMappingURL=Immediate.js.map"]},"metadata":{},"sourceType":"module"}
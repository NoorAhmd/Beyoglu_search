{"ast":null,"code":"import _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, Optional, SkipSelf, Directive, ElementRef, NgModule, defineInjectable, inject } from '@angular/core';\nimport { fromEvent, of, Subject, Observable, merge } from 'rxjs';\nimport { auditTime, filter } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Time in ms to throttle the scrolling events by default.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar\n/** @type {?} */\nDEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  function ScrollDispatcher(_ngZone, _platform) {\n    _classCallCheck(this, ScrollDispatcher);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     */\n\n    this._scrolled = new Subject();\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     */\n\n    this._globalSubscription = null;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param {?} scrollable Scrollable instance to be registered.\n   * @return {?}\n   */\n\n\n  _createClass(ScrollDispatcher, [{\n    key: \"register\",\n    value: function register(scrollable) {\n      var _this = this;\n\n      var\n      /** @type {?} */\n      scrollSubscription = scrollable.elementScrolled().subscribe(function () {\n        return _this._scrolled.next(scrollable);\n      });\n      this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(scrollable) {\n      var\n      /** @type {?} */\n      scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrolled\",\n    value: function scrolled() {\n      var _this2 = this;\n\n      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n      return this._platform.isBrowser ? Observable.create(function (observer) {\n        if (!_this2._globalSubscription) {\n          _this2._addGlobalListener();\n        } // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n\n\n        var\n        /** @type {?} */\n        subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n        _this2._scrolledCount++;\n        return function () {\n          subscription.unsubscribe();\n          _this2._scrolledCount--;\n\n          if (!_this2._scrolledCount) {\n            _this2._removeGlobalListener();\n          }\n        };\n      }) : of();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this3 = this;\n\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach(function (_, container) {\n        return _this3.deregister(container);\n      });\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ancestorScrolled\",\n    value: function ancestorScrolled(elementRef, auditTimeInMs) {\n      var\n      /** @type {?} */\n      ancestors = this.getAncestorScrollContainers(elementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(function (target) {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAncestorScrollContainers\",\n    value: function getAncestorScrollContainers(elementRef) {\n      var _this4 = this;\n\n      var\n      /** @type {?} */\n      scrollingContainers = [];\n      this.scrollContainers.forEach(function (_subscription, scrollable) {\n        if (_this4._scrollableContainsElement(scrollable, elementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollableContainsElement\",\n    value: function _scrollableContainsElement(scrollable, elementRef) {\n      var\n      /** @type {?} */\n      element = elementRef.nativeElement;\n      var\n      /** @type {?} */\n      scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n\n      return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addGlobalListener\",\n    value: function _addGlobalListener() {\n      var _this5 = this;\n\n      this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n        return fromEvent(window.document, 'scroll').subscribe(function () {\n          return _this5._scrolled.next();\n        });\n      });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n  }]);\n\n  return ScrollDispatcher;\n}();\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nScrollDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollDispatcher,\n  factory: ScrollDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nScrollDispatcher.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }];\n};\n/** @nocollapse */\n\n\nScrollDispatcher.ngInjectableDef = defineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(inject(NgZone), inject(Platform));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\n\n\nvar\n/** @type {?} */\nSCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\nvar CdkScrollable = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _scroll\n   * @param {?} _ngZone\n   */\n  function CdkScrollable(_elementRef, _scroll, _ngZone) {\n    var _this6 = this;\n\n    _classCallCheck(this, CdkScrollable);\n\n    this._elementRef = _elementRef;\n    this._scroll = _scroll;\n    this._ngZone = _ngZone;\n    this._elementScrolled = new Subject();\n\n    this._scrollListener = function (event) {\n      return _this6._elementScrolled.next(event);\n    };\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkScrollable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      this._ngZone.runOutsideAngular(function () {\n        _this7.getElementRef().nativeElement.addEventListener('scroll', _this7._scrollListener);\n      });\n\n      this._scroll.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._scroll.deregister(this);\n\n      if (this._scrollListener) {\n        this.getElementRef().nativeElement.removeEventListener('scroll', this._scrollListener);\n      }\n\n      this._elementScrolled.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"elementScrolled\",\n    value: function elementScrolled() {\n      return this._elementScrolled.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getElementRef\",\n    value: function getElementRef() {\n      return this._elementRef;\n    }\n  }]);\n\n  return CdkScrollable;\n}();\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n/** @nocollapse */\n\nCdkScrollable.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Time in ms to throttle the resize events by default.\n */\n\n\nvar\n/** @type {?} */\nDEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\n\nvar ViewportRuler = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   * @param {?} ngZone\n   */\n  function ViewportRuler(_platform, ngZone) {\n    var _this8 = this;\n\n    _classCallCheck(this, ViewportRuler);\n\n    this._platform = _platform;\n    this._change = _platform.isBrowser ? ngZone.runOutsideAngular(function () {\n      return merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\n    }) : of();\n    this._invalidateCache = this.change().subscribe(function () {\n      return _this8._updateViewportSize();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ViewportRuler, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n\n      var\n      /** @type {?} */\n      output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize =\n        /** @type {?} */\n        null;\n      }\n\n      return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportRect\",\n    value: function getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      var\n      /** @type {?} */\n      scrollPosition = this.getViewportScrollPosition();\n\n      var _this$getViewportSize = this.getViewportSize(),\n          width = _this$getViewportSize.width,\n          height = _this$getViewportSize.height;\n\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height: height,\n        width: width\n      };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportScrollPosition\",\n    value: function getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n\n\n      var\n      /** @type {?} */\n      documentRect = document.documentElement.getBoundingClientRect();\n      var\n      /** @type {?} */\n      top = -documentRect.top || document.body.scrollTop || window.scrollY || document.documentElement.scrollTop || 0;\n      var\n      /** @type {?} */\n      left = -documentRect.left || document.body.scrollLeft || window.scrollX || document.documentElement.scrollLeft || 0;\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n\n  }, {\n    key: \"change\",\n    value: function change() {\n      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateViewportSize\",\n    value: function _updateViewportSize() {\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n  }]);\n\n  return ViewportRuler;\n}();\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nViewportRuler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ViewportRuler,\n  factory: ViewportRuler.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nViewportRuler.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n/** @nocollapse */\n\n\nViewportRuler.ngInjectableDef = defineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(inject(Platform), inject(NgZone));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n  return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\n\n\nvar\n/** @type {?} */\nVIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nvar ScrollDispatchModule = function ScrollDispatchModule() {\n  _classCallCheck(this, ScrollDispatchModule);\n};\n\nScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) {\n  return new (t || ScrollDispatchModule)();\n};\n\nScrollDispatchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollDispatchModule\n});\nScrollDispatchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, {\n    declarations: function declarations() {\n      return [CdkScrollable];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkScrollable];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule],\n      exports: [CdkScrollable],\n      declarations: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER_FACTORY, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER_FACTORY, VIEWPORT_RULER_PROVIDER, ScrollDispatchModule }; //# sourceMappingURL=scrolling.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/scrolling.js"],"names":["Platform","PlatformModule","Injectable","NgZone","Optional","SkipSelf","Directive","ElementRef","NgModule","defineInjectable","inject","fromEvent","of","Subject","Observable","merge","auditTime","filter","ɵngcc0","ɵngcc1","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","scrollable","scrollSubscription","elementScrolled","subscribe","next","set","scrollableReference","get","unsubscribe","delete","auditTimeInMs","isBrowser","create","observer","_addGlobalListener","subscription","pipe","_removeGlobalListener","forEach","_","container","deregister","complete","elementRef","ancestors","getAncestorScrollContainers","scrolled","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","window","document","ɵfac","ScrollDispatcher_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","ngInjectableDef","ngDevMode","ɵsetClassMetadata","args","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","platform","SCROLL_DISPATCHER_PROVIDER","provide","deps","useFactory","CdkScrollable","_elementRef","_scroll","_elementScrolled","_scrollListener","event","addEventListener","register","removeEventListener","asObservable","CdkScrollable_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","selector","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_invalidateCache","change","_updateViewportSize","_viewportSize","output","width","height","scrollPosition","getViewportScrollPosition","getViewportSize","top","left","bottom","right","documentRect","documentElement","getBoundingClientRect","body","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","VIEWPORT_RULER_PROVIDER","ScrollDispatchModule","ScrollDispatchModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, Optional, SkipSelf, Directive, ElementRef, NgModule, defineInjectable, inject } from '@angular/core';\nimport { fromEvent, of, Subject, Observable, merge } from 'rxjs';\nimport { auditTime, filter } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst /** @type {?} */ DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        const /** @type {?} */ scrollSubscription = scrollable.elementScrolled()\n            .subscribe(() => this._scrolled.next(scrollable));\n        this.scrollContainers.set(scrollable, scrollSubscription);\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        const /** @type {?} */ scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        return this._platform.isBrowser ? Observable.create(observer => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const /** @type {?} */ subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        }) : of();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        const /** @type {?} */ ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        const /** @type {?} */ scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        let /** @type {?} */ element = elementRef.nativeElement;\n        let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nScrollDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollDispatcher, factory: ScrollDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone, },\n    { type: Platform, },\n];\n/** @nocollapse */ ScrollDispatcher.ngInjectableDef = defineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(inject(NgZone), inject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n    // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n    provide: ScrollDispatcher,\n    deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n    useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _scroll\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _scroll, _ngZone) {\n        this._elementRef = _elementRef;\n        this._scroll = _scroll;\n        this._ngZone = _ngZone;\n        this._elementScrolled = new Subject();\n        this._scrollListener = (event) => this._elementScrolled.next(event);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._ngZone.runOutsideAngular(() => {\n            this.getElementRef().nativeElement.addEventListener('scroll', this._scrollListener);\n        });\n        this._scroll.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._scroll.deregister(this);\n        if (this._scrollListener) {\n            this.getElementRef().nativeElement.removeEventListener('scroll', this._scrollListener);\n        }\n        this._elementScrolled.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n    getElementRef() {\n        return this._elementRef;\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: ScrollDispatcher, },\n    { type: NgZone, },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n */\nconst /** @type {?} */ DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     */\n    constructor(_platform, ngZone) {\n        this._platform = _platform;\n        this._change = _platform.isBrowser ? ngZone.runOutsideAngular(() => {\n            return merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange'));\n        }) : of();\n        this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const /** @type {?} */ output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = /** @type {?} */ ((null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const /** @type {?} */ scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const /** @type {?} */ documentRect = document.documentElement.getBoundingClientRect();\n        const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            document.documentElement.scrollTop || 0;\n        const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            document.documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @return {?}\n     */\n    _updateViewportSize() {\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nViewportRuler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ViewportRuler, factory: ViewportRuler.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform, },\n    { type: NgZone, },\n];\n/** @nocollapse */ ViewportRuler.ngInjectableDef = defineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(inject(Platform), inject(NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n * @param {?} parentRuler\n * @param {?} platform\n * @param {?} ngZone\n * @return {?}\n */\nfunction VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n    return parentRuler || new ViewportRuler(platform, ngZone);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 7.0.0\n */\nconst /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n    // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n    provide: ViewportRuler,\n    deps: [[new Optional(), new SkipSelf(), ViewportRuler], Platform, NgZone],\n    useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass ScrollDispatchModule {\n}\nScrollDispatchModule.ɵfac = function ScrollDispatchModule_Factory(t) { return new (t || ScrollDispatchModule)(); };\nScrollDispatchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollDispatchModule });\nScrollDispatchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollDispatchModule, { declarations: function () { return [CdkScrollable]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkScrollable]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatchModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule],\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { DEFAULT_SCROLL_TIME, ScrollDispatcher, SCROLL_DISPATCHER_PROVIDER_FACTORY, SCROLL_DISPATCHER_PROVIDER, CdkScrollable, DEFAULT_RESIZE_TIME, ViewportRuler, VIEWPORT_RULER_PROVIDER_FACTORY, VIEWPORT_RULER_PROVIDER, ScrollDispatchModule };\n\n//# sourceMappingURL=scrolling.js.map"]},"metadata":{},"sourceType":"module"}
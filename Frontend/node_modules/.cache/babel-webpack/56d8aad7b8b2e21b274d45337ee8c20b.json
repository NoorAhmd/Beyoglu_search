{"ast":null,"code":"/**\n * @module ol/coordinate\n */\nimport { modulo } from './math.js';\nimport { padNumber } from './string.js';\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array.<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((module:ol/coordinate~Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {module:ol/coordinate~Coordinate} delta Delta.\n * @return {module:ol/coordinate~Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\n\nexport function add(coordinate, delta) {\n  coordinate[0] += delta[0];\n  coordinate[1] += delta[1];\n  return coordinate;\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\n * @param {module:ol/geom/Circle} circle The circle.\n * @return {module:ol/coordinate~Coordinate} Closest point on the circumference.\n */\n\nexport function closestOnCircle(coordinate, circle) {\n  var r = circle.getRadius();\n  var center = circle.getCenter();\n  var x0 = center[0];\n  var y0 = center[1];\n  var x1 = coordinate[0];\n  var y1 = coordinate[1];\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n\n  var d = Math.sqrt(dx * dx + dy * dy);\n  var x = x0 + r * dx / d;\n  var y = y0 + r * dy / d;\n  return [x, y];\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\n * @param {Array.<module:ol/coordinate~Coordinate>} segment The two coordinates\n * of the segment.\n * @return {module:ol/coordinate~Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\n\nexport function closestOnSegment(coordinate, segment) {\n  var x0 = coordinate[0];\n  var y0 = coordinate[1];\n  var start = segment[0];\n  var end = segment[1];\n  var x1 = start[0];\n  var y1 = start[1];\n  var x2 = end[0];\n  var y2 = end[1];\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  var x, y;\n\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n\n  return [x, y];\n}\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {module:ol/coordinate~Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {module:ol/coordinate~CoordinateFormat} Coordinate format.\n * @api\n */\n\nexport function createStringXY(opt_fractionDigits) {\n  return (\n    /**\n     * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n}\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\n\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n  var normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  var x = Math.abs(3600 * normalizedDegrees);\n  var dflPrecision = opt_fractionDigits || 0;\n  var precision = Math.pow(10, dflPrecision);\n  var deg = Math.floor(x / 3600);\n  var min = Math.floor((x - deg * 3600) / 60);\n  var sec = x - deg * 3600 - min * 60;\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return deg + \"\\xB0 \" + padNumber(min, 2) + \"\\u2032 \" + padNumber(sec, 2, dflPrecision) + \"\\u2033\" + (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n}\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\n\nexport function format(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template.replace('{x}', coordinate[0].toFixed(opt_fractionDigits)).replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n}\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate1 First coordinate.\n * @param {module:ol/coordinate~Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\n\nexport function equals(coordinate1, coordinate2) {\n  var equals = true;\n\n  for (var i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n\n  return equals;\n}\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {module:ol/coordinate~Coordinate} Coordinate.\n * @api\n */\n\nexport function rotate(coordinate, angle) {\n  var cosAngle = Math.cos(angle);\n  var sinAngle = Math.sin(angle);\n  var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {module:ol/coordinate~Coordinate} Coordinate.\n */\n\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n/**\n * @param {module:ol/coordinate~Coordinate} coord1 First coordinate.\n * @param {module:ol/coordinate~Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\n\nexport function squaredDistance(coord1, coord2) {\n  var dx = coord1[0] - coord2[0];\n  var dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n/**\n * @param {module:ol/coordinate~Coordinate} coord1 First coordinate.\n * @param {module:ol/coordinate~Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\n\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate of the point.\n * @param {Array.<module:ol/coordinate~Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\n\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\n\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' + degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n}\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\n\nexport function toStringXY(coordinate, opt_fractionDigits) {\n  return format(coordinate, '{x}, {y}', opt_fractionDigits);\n} //# sourceMappingURL=coordinate.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/coordinate.js"],"names":["modulo","padNumber","add","coordinate","delta","closestOnCircle","circle","r","getRadius","center","getCenter","x0","y0","x1","y1","dx","dy","d","Math","sqrt","x","y","closestOnSegment","segment","start","end","x2","y2","along","createStringXY","opt_fractionDigits","toStringXY","degreesToStringHDMS","hemispheres","degrees","normalizedDegrees","abs","dflPrecision","precision","pow","deg","floor","min","sec","ceil","charAt","format","template","replace","toFixed","equals","coordinate1","coordinate2","i","length","rotate","angle","cosAngle","cos","sinAngle","sin","scale","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","toStringHDMS"],"mappings":"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D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4C,YAAT,CAAsBhE,UAAtB,EAAkC2B,kBAAlC,EAAsD;AAC3D,MAAI3B,UAAJ,EAAgB;AACd,WAAO6B,mBAAmB,CAAC,IAAD,EAAO7B,UAAU,CAAC,CAAD,CAAjB,EAAsB2B,kBAAtB,CAAnB,GAA+D,GAA/D,GACHE,mBAAmB,CAAC,IAAD,EAAO7B,UAAU,CAAC,CAAD,CAAjB,EAAsB2B,kBAAtB,CADvB;AAED,GAHD,MAGO;AACL,WAAO,EAAP;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoB5B,UAApB,EAAgC2B,kBAAhC,EAAoD;AACzD,SAAOgB,MAAM,CAAC3C,UAAD,EAAa,UAAb,EAAyB2B,kBAAzB,CAAb;AACD,C,CAED","sourcesContent":["/**\n * @module ol/coordinate\n */\nimport {modulo} from './math.js';\nimport {padNumber} from './string.js';\n\n\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array.<number>} Coordinate\n * @api\n */\n\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((module:ol/coordinate~Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {module:ol/coordinate~Coordinate} delta Delta.\n * @return {module:ol/coordinate~Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += delta[0];\n  coordinate[1] += delta[1];\n  return coordinate;\n}\n\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\n * @param {module:ol/geom/Circle} circle The circle.\n * @return {module:ol/coordinate~Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  var r = circle.getRadius();\n  var center = circle.getCenter();\n  var x0 = center[0];\n  var y0 = center[1];\n  var x1 = coordinate[0];\n  var y1 = coordinate[1];\n\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  var d = Math.sqrt(dx * dx + dy * dy);\n\n  var x = x0 + r * dx / d;\n  var y = y0 + r * dy / d;\n\n  return [x, y];\n}\n\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\n * @param {Array.<module:ol/coordinate~Coordinate>} segment The two coordinates\n * of the segment.\n * @return {module:ol/coordinate~Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  var x0 = coordinate[0];\n  var y0 = coordinate[1];\n  var start = segment[0];\n  var end = segment[1];\n  var x1 = start[0];\n  var y1 = start[1];\n  var x2 = end[0];\n  var y2 = end[1];\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var along = (dx === 0 && dy === 0) ? 0 :\n    ((dx * (x0 - x1)) + (dy * (y0 - y1))) / ((dx * dx + dy * dy) || 0);\n  var x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {module:ol/coordinate~Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {module:ol/coordinate~CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(opt_fractionDigits) {\n  return (\n    /**\n     * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function(coordinate) {\n      return toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n}\n\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n  var normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  var x = Math.abs(3600 * normalizedDegrees);\n  var dflPrecision = opt_fractionDigits || 0;\n  var precision = Math.pow(10, dflPrecision);\n\n  var deg = Math.floor(x / 3600);\n  var min = Math.floor((x - deg * 3600) / 60);\n  var sec = x - (deg * 3600) - (min * 60);\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return deg + '\\u00b0 ' + padNumber(min, 2) + '\\u2032 ' +\n    padNumber(sec, 2, dflPrecision) + '\\u2033' +\n    (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n}\n\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n}\n\n\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate1 First coordinate.\n * @param {module:ol/coordinate~Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  var equals = true;\n  for (var i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {module:ol/coordinate~Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  var cosAngle = Math.cos(angle);\n  var sinAngle = Math.sin(angle);\n  var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {module:ol/coordinate~Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n\n/**\n * @param {module:ol/coordinate~Coordinate} coord1 First coordinate.\n * @param {module:ol/coordinate~Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  var dx = coord1[0] - coord2[0];\n  var dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * @param {module:ol/coordinate~Coordinate} coord1 First coordinate.\n * @param {module:ol/coordinate~Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate of the point.\n * @param {Array.<module:ol/coordinate~Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate,\n    closestOnSegment(coordinate, segment));\n}\n\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' +\n        degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n}\n\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, opt_fractionDigits) {\n  return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}\n\n//# sourceMappingURL=coordinate.js.map"]},"metadata":{},"sourceType":"module"}
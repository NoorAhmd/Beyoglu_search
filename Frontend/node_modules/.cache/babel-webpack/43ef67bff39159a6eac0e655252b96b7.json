{"ast":null,"code":"/**\n * @module ol/interaction/PinchRotate\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { rotate, rotateWithoutConstraints } from '../interaction/Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from '../interaction/Pointer.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\n\nvar PinchRotate = function (PointerInteraction) {\n  function PinchRotate(opt_options) {\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleUpEvent: handleUpEvent,\n      stopDown: FALSE\n    });\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {module:ol/coordinate~Coordinate}\n     */\n\n    this.anchor_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.rotating_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.rotationDelta_ = 0.0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  if (PointerInteraction) PinchRotate.__proto__ = PointerInteraction;\n  PinchRotate.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchRotate.prototype.constructor = PinchRotate;\n  return PinchRotate;\n}(PointerInteraction);\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/PinchRotate}\n */\n\n\nfunction handleDragEvent(mapBrowserEvent) {\n  var rotationDelta = 0.0;\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1]; // angle between touches\n\n  var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n\n  if (this.lastAngle_ !== undefined) {\n    var delta = angle - this.lastAngle_;\n    this.rotationDelta_ += delta;\n\n    if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n      this.rotating_ = true;\n    }\n\n    rotationDelta = delta;\n  }\n\n  this.lastAngle_ = angle;\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n\n  if (view.getConstraints().rotation === disable) {\n    return;\n  } // rotate anchor point.\n  // FIXME: should be the intersection point between the lines:\n  //     touch0,touch1 and previousTouch0,previousTouch1\n\n\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n  var centroid = centroidFromPointers(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid); // rotate\n\n  if (this.rotating_) {\n    var rotation = view.getRotation();\n    map.render();\n    rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n  }\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/PinchRotate}\n */\n\n\nfunction handleUpEvent(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n\n    if (this.rotating_) {\n      var rotation = view.getRotation();\n      rotate(view, rotation, this.anchor_, this.duration_);\n    }\n\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/PinchRotate}\n */\n\n\nfunction handleDownEvent(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastAngle_ = undefined;\n    this.rotating_ = false;\n    this.rotationDelta_ = 0.0;\n\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport default PinchRotate; //# sourceMappingURL=PinchRotate.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/interaction/PinchRotate.js"],"names":["ViewHint","FALSE","rotate","rotateWithoutConstraints","PointerInteraction","centroid","centroidFromPointers","disable","PinchRotate","opt_options","call","handleDownEvent","handleDragEvent","handleUpEvent","stopDown","options","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","__proto__","prototype","Object","create","constructor","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixel","getRotation","render","length","setHint","INTERACTING","handlingDownUpSequence"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/PinchRotate\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {rotate, rotateWithoutConstraints} from '../interaction/Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from '../interaction/Pointer.js';\nimport {disable} from '../rotationconstraint.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = (function (PointerInteraction) {\n  function PinchRotate(opt_options) {\n\n    PointerInteraction.call(this, {\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleUpEvent: handleUpEvent,\n      stopDown: FALSE\n    });\n\n    var options = opt_options || {};\n\n    /**\n     * @private\n     * @type {module:ol/coordinate~Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n  }\n\n  if ( PointerInteraction ) PinchRotate.__proto__ = PointerInteraction;\n  PinchRotate.prototype = Object.create( PointerInteraction && PointerInteraction.prototype );\n  PinchRotate.prototype.constructor = PinchRotate;\n\n  return PinchRotate;\n}(PointerInteraction));\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/PinchRotate}\n */\nfunction handleDragEvent(mapBrowserEvent) {\n  var rotationDelta = 0.0;\n\n  var touch0 = this.targetPointers[0];\n  var touch1 = this.targetPointers[1];\n\n  // angle between touches\n  var angle = Math.atan2(\n    touch1.clientY - touch0.clientY,\n    touch1.clientX - touch0.clientX);\n\n  if (this.lastAngle_ !== undefined) {\n    var delta = angle - this.lastAngle_;\n    this.rotationDelta_ += delta;\n    if (!this.rotating_ &&\n        Math.abs(this.rotationDelta_) > this.threshold_) {\n      this.rotating_ = true;\n    }\n    rotationDelta = delta;\n  }\n  this.lastAngle_ = angle;\n\n  var map = mapBrowserEvent.map;\n  var view = map.getView();\n  if (view.getConstraints().rotation === disable) {\n    return;\n  }\n\n  // rotate anchor point.\n  // FIXME: should be the intersection point between the lines:\n  //     touch0,touch1 and previousTouch0,previousTouch1\n  var viewportPosition = map.getViewport().getBoundingClientRect();\n  var centroid = centroidFromPointers(this.targetPointers);\n  centroid[0] -= viewportPosition.left;\n  centroid[1] -= viewportPosition.top;\n  this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n  // rotate\n  if (this.rotating_) {\n    var rotation = view.getRotation();\n    map.render();\n    rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n  }\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/PinchRotate}\n */\nfunction handleUpEvent(mapBrowserEvent) {\n  if (this.targetPointers.length < 2) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    if (this.rotating_) {\n      var rotation = view.getRotation();\n      rotate(view, rotation, this.anchor_, this.duration_);\n    }\n    return false;\n  } else {\n    return true;\n  }\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Start drag sequence?\n * @this {module:ol/interaction/PinchRotate}\n */\nfunction handleDownEvent(mapBrowserEvent) {\n  if (this.targetPointers.length >= 2) {\n    var map = mapBrowserEvent.map;\n    this.anchor_ = null;\n    this.lastAngle_ = undefined;\n    this.rotating_ = false;\n    this.rotationDelta_ = 0.0;\n    if (!this.handlingDownUpSequence) {\n      map.getView().setHint(ViewHint.INTERACTING, 1);\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport default PinchRotate;\n\n//# sourceMappingURL=PinchRotate.js.map"]},"metadata":{},"sourceType":"module"}
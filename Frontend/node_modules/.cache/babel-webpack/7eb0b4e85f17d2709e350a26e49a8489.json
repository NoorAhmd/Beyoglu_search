{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { CANVAS_LINE_DASH } from '../has.js';\nimport ImageState from '../ImageState.js';\nimport { defaultStrokeStyle, defaultFillStyle, defaultLineCap, defaultLineWidth, defaultLineJoin, defaultMiterLimit } from '../render/canvas.js';\nimport ImageStyle from '../style/Image.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {module:ol/style/Fill} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate\n * when drawing the shape in the output canvas. If `false` fractional numbers may be used. Using `true` allows for\n * \"sharp\" rendering (no blur), while using `false` allows for \"accurate\" rendering. Note that accuracy is important if\n * the shape's position is animated. Without it, the shape may jitter noticeably.\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this symbol. When\n * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the\n * symbol is added to an atlas. By default no atlas manager is used.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {module:ol/colorlike~ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {string} lineCap\n * @property {Array.<number>} lineDash\n * @property {number} lineDashOffset\n * @property {string} lineJoin\n * @property {number} miterLimit\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nvar RegularShape = function (ImageStyle) {\n  function RegularShape(options) {\n    /**\n     * @type {boolean}\n     */\n    var snapToPixel = options.snapToPixel !== undefined ? options.snapToPixel : true;\n    /**\n     * @type {boolean}\n     */\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    ImageStyle.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1,\n      snapToPixel: snapToPixel\n    });\n    /**\n     * @private\n     * @type {Array.<string>}\n     */\n\n    this.checksums_ = null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {module:ol/style/Fill}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n\n    this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.radius_ =\n    /** @type {number} */\n    options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {module:ol/style/Stroke}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n\n    this.anchor_ = null;\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n\n    this.size_ = null;\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n\n    this.imageSize_ = null;\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n\n    this.hitDetectionImageSize_ = null;\n    /**\n     * @protected\n     * @type {module:ol/style/AtlasManager|undefined}\n     */\n\n    this.atlasManager_ = options.atlasManager;\n    this.render_(this.atlasManager_);\n  }\n\n  if (ImageStyle) RegularShape.__proto__ = ImageStyle;\n  RegularShape.prototype = Object.create(ImageStyle && ImageStyle.prototype);\n  RegularShape.prototype.constructor = RegularShape;\n  /**\n   * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n   * @return {module:ol/style/RegularShape} The cloned style.\n   * @api\n   */\n\n  RegularShape.prototype.clone = function clone() {\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      snapToPixel: this.getSnapToPixel(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getAnchor = function getAnchor() {\n    return this.anchor_;\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAngle = function getAngle() {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {module:ol/style/Fill} Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getFill = function getFill() {\n    return this.fill_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getHitDetectionImage = function getHitDetectionImage(pixelRatio) {\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getImage = function getImage(pixelRatio) {\n    return this.canvas_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getImageSize = function getImageSize() {\n    return this.imageSize_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getHitDetectionImageSize = function getHitDetectionImageSize() {\n    return this.hitDetectionImageSize_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.getImageState = function getImageState() {\n    return ImageState.LOADED;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getOrigin = function getOrigin() {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  RegularShape.prototype.getPoints = function getPoints() {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius = function getRadius() {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius2 = function getRadius2() {\n    return this.radius2_;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  RegularShape.prototype.getSize = function getSize() {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {module:ol/style/Stroke} Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getStroke = function getStroke() {\n    return this.stroke_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.listenImageChange = function listenImageChange(listener, thisArg) {};\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.load = function load() {};\n  /**\n   * @inheritDoc\n   */\n\n\n  RegularShape.prototype.unlistenImageChange = function unlistenImageChange(listener, thisArg) {};\n  /**\n   * @protected\n   * @param {module:ol/style/AtlasManager|undefined} atlasManager An atlas manager.\n   */\n\n\n  RegularShape.prototype.render_ = function render_(atlasManager) {\n    var imageSize;\n    var lineCap = '';\n    var lineJoin = '';\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n\n      if (!CANVAS_LINE_DASH) {\n        lineDash = null;\n        lineDashOffset = 0;\n      }\n\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      lineCap = this.stroke_.getLineCap();\n\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var size = 2 * (this.radius_ + strokeWidth) + 1;\n    /** @type {module:ol/style/RegularShape~RenderOptions} */\n\n    var renderOptions = {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n\n    if (atlasManager === undefined) {\n      // no atlas manager is used, create a new canvas\n      var context = createCanvasContext2D(size, size);\n      this.canvas_ = context.canvas; // canvas.width and height are rounded to the closest integer\n\n      size = this.canvas_.width;\n      imageSize = size;\n      this.draw_(renderOptions, context, 0, 0);\n      this.createHitDetectionCanvas_(renderOptions);\n    } else {\n      // an atlas manager is used, add the symbol to an atlas\n      size = Math.round(size);\n      var hasCustomHitDetectionImage = !this.fill_;\n      var renderHitDetectionCallback;\n\n      if (hasCustomHitDetectionImage) {\n        // render the hit-detection image into a separate atlas image\n        renderHitDetectionCallback = this.drawHitDetectionCanvas_.bind(this, renderOptions);\n      }\n\n      var id = this.getChecksum();\n      var info = atlasManager.add(id, size, size, this.draw_.bind(this, renderOptions), renderHitDetectionCallback);\n      this.canvas_ = info.image;\n      this.origin_ = [info.offsetX, info.offsetY];\n      imageSize = info.image.width;\n\n      if (hasCustomHitDetectionImage) {\n        this.hitDetectionCanvas_ = info.hitImage;\n        this.hitDetectionImageSize_ = [info.hitImage.width, info.hitImage.height];\n      } else {\n        this.hitDetectionCanvas_ = this.canvas_;\n        this.hitDetectionImageSize_ = [imageSize, imageSize];\n      }\n    }\n\n    this.anchor_ = [size / 2, size / 2];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  };\n  /**\n   * @private\n   * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n\n\n  RegularShape.prototype.draw_ = function draw_(renderOptions, context, x, y) {\n    var this$1 = this;\n    var i, angle0, radiusC; // reset transform\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // then move to (x, y)\n\n    context.translate(x, y);\n    context.beginPath();\n    var points = this.points_;\n\n    if (points === Infinity) {\n      context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this$1.angle_;\n        radiusC = i % 2 === 0 ? this$1.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n\n    context.closePath();\n  };\n  /**\n   * @private\n   * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.\n   */\n\n\n  RegularShape.prototype.createHitDetectionCanvas_ = function createHitDetectionCanvas_(renderOptions) {\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n\n    if (this.fill_) {\n      this.hitDetectionCanvas_ = this.canvas_;\n      return;\n    } // if no fill style is set, create an extra hit-detection image with a\n    // default fill style\n\n\n    var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n    this.hitDetectionCanvas_ = context.canvas;\n    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n  };\n  /**\n   * @private\n   * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n\n\n  RegularShape.prototype.drawHitDetectionCanvas_ = function drawHitDetectionCanvas_(renderOptions, context, x, y) {\n    var this$1 = this; // reset transform\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // then move to (x, y)\n\n    context.translate(x, y);\n    context.beginPath();\n    var points = this.points_;\n\n    if (points === Infinity) {\n      context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n\n      var i, radiusC, angle0;\n\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this$1.angle_;\n        radiusC = i % 2 === 0 ? this$1.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.stroke();\n    }\n\n    context.closePath();\n  };\n  /**\n   * @return {string} The checksum.\n   */\n\n\n  RegularShape.prototype.getChecksum = function getChecksum() {\n    var strokeChecksum = this.stroke_ ? this.stroke_.getChecksum() : '-';\n    var fillChecksum = this.fill_ ? this.fill_.getChecksum() : '-';\n    var recalculate = !this.checksums_ || strokeChecksum != this.checksums_[1] || fillChecksum != this.checksums_[2] || this.radius_ != this.checksums_[3] || this.radius2_ != this.checksums_[4] || this.angle_ != this.checksums_[5] || this.points_ != this.checksums_[6];\n\n    if (recalculate) {\n      var checksum = 'r' + strokeChecksum + fillChecksum + (this.radius_ !== undefined ? this.radius_.toString() : '-') + (this.radius2_ !== undefined ? this.radius2_.toString() : '-') + (this.angle_ !== undefined ? this.angle_.toString() : '-') + (this.points_ !== undefined ? this.points_.toString() : '-');\n      this.checksums_ = [checksum, strokeChecksum, fillChecksum, this.radius_, this.radius2_, this.angle_, this.points_];\n    }\n\n    return this.checksums_[0];\n  };\n\n  return RegularShape;\n}(ImageStyle);\n\nexport default RegularShape; //# sourceMappingURL=RegularShape.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/style/RegularShape.js"],"names":["asColorLike","createCanvasContext2D","CANVAS_LINE_DASH","ImageState","defaultStrokeStyle","defaultFillStyle","defaultLineCap","defaultLineWidth","defaultLineJoin","defaultMiterLimit","ImageStyle","RegularShape","options","snapToPixel","undefined","rotateWithView","call","opacity","rotation","scale","checksums_","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","anchor_","size_","imageSize_","hitDetectionImageSize_","atlasManager_","atlasManager","render_","__proto__","prototype","Object","create","constructor","clone","style","getFill","getPoints","getRadius","getRadius2","getAngle","getSnapToPixel","getStroke","getRotation","getRotateWithView","setOpacity","getOpacity","setScale","getScale","getAnchor","getHitDetectionImage","pixelRatio","getImage","getImageSize","getHitDetectionImageSize","getImageState","LOADED","getOrigin","getSize","listenImageChange","listener","thisArg","load","unlistenImageChange","imageSize","lineCap","lineJoin","miterLimit","lineDash","lineDashOffset","strokeStyle","strokeWidth","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getLineCap","getMiterLimit","size","renderOptions","context","canvas","width","draw_","createHitDetectionCanvas_","Math","round","hasCustomHitDetectionImage","renderHitDetectionCallback","drawHitDetectionCanvas_","bind","id","getChecksum","info","add","image","offsetX","offsetY","hitImage","height","x","y","this$1","i","angle0","radiusC","setTransform","translate","beginPath","Infinity","arc","PI","lineTo","cos","sin","color","fillStyle","lineWidth","setLineDash","closePath","strokeChecksum","fillChecksum","recalculate","checksum","toString"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {CANVAS_LINE_DASH} from '../has.js';\nimport ImageState from '../ImageState.js';\nimport {defaultStrokeStyle, defaultFillStyle, defaultLineCap, defaultLineWidth, defaultLineJoin, defaultMiterLimit} from '../render/canvas.js';\nimport ImageStyle from '../style/Image.js';\n\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {module:ol/style/Fill} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate\n * when drawing the shape in the output canvas. If `false` fractional numbers may be used. Using `true` allows for\n * \"sharp\" rendering (no blur), while using `false` allows for \"accurate\" rendering. Note that accuracy is important if\n * the shape's position is animated. Without it, the shape may jitter noticeably.\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this symbol. When\n * using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given, the\n * symbol is added to an atlas. By default no atlas manager is used.\n */\n\n\n/**\n * @typedef {Object} RenderOptions\n * @property {module:ol/colorlike~ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {string} lineCap\n * @property {Array.<number>} lineDash\n * @property {number} lineDashOffset\n * @property {string} lineJoin\n * @property {number} miterLimit\n */\n\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = (function (ImageStyle) {\n  function RegularShape(options) {\n    /**\n     * @type {boolean}\n     */\n    var snapToPixel = options.snapToPixel !== undefined ?\n      options.snapToPixel : true;\n\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ?\n      options.rotateWithView : false;\n\n    ImageStyle.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1,\n      snapToPixel: snapToPixel\n    });\n\n    /**\n     * @private\n     * @type {Array.<string>}\n     */\n    this.checksums_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/style/Fill}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ = /** @type {number} */ (options.radius !== undefined ?\n      options.radius : options.radius1);\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {module:ol/style/Stroke}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n    this.imageSize_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n    this.hitDetectionImageSize_ = null;\n\n    /**\n     * @protected\n     * @type {module:ol/style/AtlasManager|undefined}\n     */\n    this.atlasManager_ = options.atlasManager;\n\n    this.render_(this.atlasManager_);\n\n  }\n\n  if ( ImageStyle ) RegularShape.__proto__ = ImageStyle;\n  RegularShape.prototype = Object.create( ImageStyle && ImageStyle.prototype );\n  RegularShape.prototype.constructor = RegularShape;\n\n  /**\n   * Clones the style. If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n   * @return {module:ol/style/RegularShape} The cloned style.\n   * @api\n   */\n  RegularShape.prototype.clone = function clone () {\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      snapToPixel: this.getSnapToPixel(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getAnchor = function getAnchor () {\n    return this.anchor_;\n  };\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  RegularShape.prototype.getAngle = function getAngle () {\n    return this.angle_;\n  };\n\n  /**\n   * Get the fill style for the shape.\n   * @return {module:ol/style/Fill} Fill style.\n   * @api\n   */\n  RegularShape.prototype.getFill = function getFill () {\n    return this.fill_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getHitDetectionImage = function getHitDetectionImage (pixelRatio) {\n    return this.hitDetectionCanvas_;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getImage = function getImage (pixelRatio) {\n    return this.canvas_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getImageSize = function getImageSize () {\n    return this.imageSize_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getHitDetectionImageSize = function getHitDetectionImageSize () {\n    return this.hitDetectionImageSize_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.getImageState = function getImageState () {\n    return ImageState.LOADED;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getOrigin = function getOrigin () {\n    return this.origin_;\n  };\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  RegularShape.prototype.getPoints = function getPoints () {\n    return this.points_;\n  };\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  RegularShape.prototype.getRadius = function getRadius () {\n    return this.radius_;\n  };\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  RegularShape.prototype.getRadius2 = function getRadius2 () {\n    return this.radius2_;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  RegularShape.prototype.getSize = function getSize () {\n    return this.size_;\n  };\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {module:ol/style/Stroke} Stroke style.\n   * @api\n   */\n  RegularShape.prototype.getStroke = function getStroke () {\n    return this.stroke_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.listenImageChange = function listenImageChange (listener, thisArg) {};\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.load = function load () {};\n\n  /**\n   * @inheritDoc\n   */\n  RegularShape.prototype.unlistenImageChange = function unlistenImageChange (listener, thisArg) {};\n\n  /**\n   * @protected\n   * @param {module:ol/style/AtlasManager|undefined} atlasManager An atlas manager.\n   */\n  RegularShape.prototype.render_ = function render_ (atlasManager) {\n    var imageSize;\n    var lineCap = '';\n    var lineJoin = '';\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      if (!CANVAS_LINE_DASH) {\n        lineDash = null;\n        lineDashOffset = 0;\n      }\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      lineCap = this.stroke_.getLineCap();\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var size = 2 * (this.radius_ + strokeWidth) + 1;\n\n    /** @type {module:ol/style/RegularShape~RenderOptions} */\n    var renderOptions = {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n\n    if (atlasManager === undefined) {\n      // no atlas manager is used, create a new canvas\n      var context = createCanvasContext2D(size, size);\n      this.canvas_ = context.canvas;\n\n      // canvas.width and height are rounded to the closest integer\n      size = this.canvas_.width;\n      imageSize = size;\n\n      this.draw_(renderOptions, context, 0, 0);\n\n      this.createHitDetectionCanvas_(renderOptions);\n    } else {\n      // an atlas manager is used, add the symbol to an atlas\n      size = Math.round(size);\n\n      var hasCustomHitDetectionImage = !this.fill_;\n      var renderHitDetectionCallback;\n      if (hasCustomHitDetectionImage) {\n        // render the hit-detection image into a separate atlas image\n        renderHitDetectionCallback =\n            this.drawHitDetectionCanvas_.bind(this, renderOptions);\n      }\n\n      var id = this.getChecksum();\n      var info = atlasManager.add(\n        id, size, size, this.draw_.bind(this, renderOptions),\n        renderHitDetectionCallback);\n\n      this.canvas_ = info.image;\n      this.origin_ = [info.offsetX, info.offsetY];\n      imageSize = info.image.width;\n\n      if (hasCustomHitDetectionImage) {\n        this.hitDetectionCanvas_ = info.hitImage;\n        this.hitDetectionImageSize_ =\n            [info.hitImage.width, info.hitImage.height];\n      } else {\n        this.hitDetectionCanvas_ = this.canvas_;\n        this.hitDetectionImageSize_ = [imageSize, imageSize];\n      }\n    }\n\n    this.anchor_ = [size / 2, size / 2];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  };\n\n  /**\n   * @private\n   * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  RegularShape.prototype.draw_ = function draw_ (renderOptions, context, x, y) {\n    var this$1 = this;\n\n    var i, angle0, radiusC;\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    var points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = (this.radius2_ !== undefined) ? this.radius2_\n        : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this$1.angle_;\n        radiusC = i % 2 === 0 ? this$1.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n    context.closePath();\n  };\n\n  /**\n   * @private\n   * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.\n   */\n  RegularShape.prototype.createHitDetectionCanvas_ = function createHitDetectionCanvas_ (renderOptions) {\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n    if (this.fill_) {\n      this.hitDetectionCanvas_ = this.canvas_;\n      return;\n    }\n\n    // if no fill style is set, create an extra hit-detection image with a\n    // default fill style\n    var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n    this.hitDetectionCanvas_ = context.canvas;\n\n    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n  };\n\n  /**\n   * @private\n   * @param {module:ol/style/RegularShape~RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  RegularShape.prototype.drawHitDetectionCanvas_ = function drawHitDetectionCanvas_ (renderOptions, context, x, y) {\n    var this$1 = this;\n\n    // reset transform\n    context.setTransform(1, 0, 0, 1, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    var points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2, renderOptions.size / 2,\n        this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = (this.radius2_ !== undefined) ? this.radius2_\n        : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      var i, radiusC, angle0;\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this$1.angle_;\n        radiusC = i % 2 === 0 ? this$1.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.stroke();\n    }\n    context.closePath();\n  };\n\n  /**\n   * @return {string} The checksum.\n   */\n  RegularShape.prototype.getChecksum = function getChecksum () {\n    var strokeChecksum = this.stroke_ ?\n      this.stroke_.getChecksum() : '-';\n    var fillChecksum = this.fill_ ?\n      this.fill_.getChecksum() : '-';\n\n    var recalculate = !this.checksums_ ||\n        (strokeChecksum != this.checksums_[1] ||\n        fillChecksum != this.checksums_[2] ||\n        this.radius_ != this.checksums_[3] ||\n        this.radius2_ != this.checksums_[4] ||\n        this.angle_ != this.checksums_[5] ||\n        this.points_ != this.checksums_[6]);\n\n    if (recalculate) {\n      var checksum = 'r' + strokeChecksum + fillChecksum +\n          (this.radius_ !== undefined ? this.radius_.toString() : '-') +\n          (this.radius2_ !== undefined ? this.radius2_.toString() : '-') +\n          (this.angle_ !== undefined ? this.angle_.toString() : '-') +\n          (this.points_ !== undefined ? this.points_.toString() : '-');\n      this.checksums_ = [checksum, strokeChecksum, fillChecksum,\n        this.radius_, this.radius2_, this.angle_, this.points_];\n    }\n\n    return this.checksums_[0];\n  };\n\n  return RegularShape;\n}(ImageStyle));\n\n\nexport default RegularShape;\n\n//# sourceMappingURL=RegularShape.js.map"]},"metadata":{},"sourceType":"module"}
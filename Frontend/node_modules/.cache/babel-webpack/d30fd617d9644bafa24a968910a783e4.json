{"ast":null,"code":"import _inherits from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_1_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatSnackBarRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   */\n  function MatSnackBarRef(containerInstance, _overlayRef) {\n    var _this = this;\n\n    _classCallCheck(this, MatSnackBarRef);\n\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     */\n\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     */\n\n    this._onAction = new Subject();\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(function () {\n      return _this.dismiss();\n    });\n\n    containerInstance._onExit.subscribe(function () {\n      return _this._finishDismiss();\n    });\n  }\n  /**\n   * Dismisses the snack bar.\n   * @return {?}\n   */\n\n\n  _createClass(MatSnackBarRef, [{\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (!this._afterDismissed.closed) {\n        this.containerInstance.exit();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dismissWithAction\",\n    value: function dismissWithAction() {\n      if (!this._onAction.closed) {\n        this._dismissedByAction = true;\n\n        this._onAction.next();\n\n        this._onAction.complete();\n      }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 7.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeWithAction\",\n    value: function closeWithAction() {\n      this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dismissAfter\",\n    value: function _dismissAfter(duration) {\n      var _this2 = this;\n\n      this._durationTimeoutId = setTimeout(function () {\n        return _this2.dismiss();\n      }, duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      if (!this._afterOpened.closed) {\n        this._afterOpened.next();\n\n        this._afterOpened.complete();\n      }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_finishDismiss\",\n    value: function _finishDismiss() {\n      this._overlayRef.dispose();\n\n      if (!this._onAction.closed) {\n        this._onAction.complete();\n      }\n\n      this._afterDismissed.next({\n        dismissedByAction: this._dismissedByAction\n      });\n\n      this._afterDismissed.complete();\n\n      this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onAction\",\n    value: function onAction() {\n      return this._onAction.asObservable();\n    }\n  }]);\n\n  return MatSnackBarRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n */\n\n\nvar\n/** @type {?} */\nMAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\n\nvar MatSnackBarConfig = function MatSnackBarConfig() {\n  _classCallCheck(this, MatSnackBarConfig);\n\n  /**\n   * The politeness level for the MatAriaLiveAnnouncer announcement.\n   */\n  this.politeness = 'assertive';\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n\n  this.announcementMessage = '';\n  /**\n   * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n   */\n\n  this.duration = 0;\n  /**\n   * Data being injected into the child component.\n   */\n\n  this.data = null;\n  /**\n   * The horizontal position to place the snack bar.\n   */\n\n  this.horizontalPosition = 'center';\n  /**\n   * The vertical position to place the snack bar.\n   */\n\n  this.verticalPosition = 'bottom';\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Animations used by the Material snack bar.\n */\n\n\nvar\n/** @type {?} */\nmatSnackBarAnimations = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [transition(':enter', [style({\n    opacity: '0'\n  }), animate(\"\".concat(AnimationDurations.COMPLEX, \" \").concat(AnimationCurves.STANDARD_CURVE))])]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('visible-top, visible-bottom', style({\n    transform: 'translateY(0%)'\n  })), transition('visible-top => hidden-top, visible-bottom => hidden-bottom', animate(\"\".concat(AnimationDurations.EXITING, \" \").concat(AnimationCurves.ACCELERATION_CURVE))), transition('void => visible-top, void => visible-bottom', animate(\"\".concat(AnimationDurations.ENTERING, \" \").concat(AnimationCurves.DECELERATION_CURVE)))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\nvar SimpleSnackBar = /*#__PURE__*/function () {\n  /**\n   * @param {?} snackBarRef\n   * @param {?} data\n   */\n  function SimpleSnackBar(snackBarRef, data) {\n    _classCallCheck(this, SimpleSnackBar);\n\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /**\n   * Performs the action on the snack bar.\n   * @return {?}\n   */\n\n\n  _createClass(SimpleSnackBar, [{\n    key: \"action\",\n    value: function action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAction\",\n    get: function get() {\n      return !!this.data.action;\n    }\n  }]);\n\n  return SimpleSnackBar;\n}();\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  hostVars: 1,\n  hostBindings: function SimpleSnackBar_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@contentFade\", undefined);\n    }\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0);\n      ɵngcc0.ɵɵtemplate(1, SimpleSnackBar_div_1_Template, 3, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.contentFade]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nSimpleSnackBar.ctorParameters = function () {\n  return [{\n    type: MatSnackBarRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DATA]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"{{data.message}}<div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matSnackBarAnimations.contentFade],\n      host: {\n        '[@contentFade]': '',\n        'class': 'mat-simple-snackbar'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\n\n\nvar MatSnackBarContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(MatSnackBarContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(MatSnackBarContainer);\n\n  /**\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} snackBarConfig\n   */\n  function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n    var _this3;\n\n    _classCallCheck(this, MatSnackBarContainer);\n\n    _this3 = _super.call(this);\n    _this3._ngZone = _ngZone;\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3.snackBarConfig = snackBarConfig;\n    /**\n     * Whether the component has been destroyed.\n     */\n\n    _this3._destroyed = false;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     */\n\n    _this3._onExit = new Subject();\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     */\n\n    _this3._onEnter = new Subject();\n    /**\n     * The state of the snack bar animations.\n     */\n\n    _this3._animationState = 'void';\n    return _this3;\n  }\n  /**\n   * Attach a component portal as content to this snack bar container.\n   * @template T\n   * @param {?} portal\n   * @return {?}\n   */\n\n\n  _createClass(MatSnackBarContainer, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onAnimationEnd\",\n    value: function onAnimationEnd(event) {\n      var fromState = event.fromState,\n          toState = event.toState;\n\n      if (toState === 'void' && fromState !== 'void' || toState.startsWith('hidden')) {\n        this._completeExit();\n      }\n\n      if (toState.startsWith('visible')) {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        var\n        /** @type {?} */\n        onEnter = this._onEnter;\n\n        this._ngZone.run(function () {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      if (!this._destroyed) {\n        this._animationState = \"visible-\".concat(this.snackBarConfig.verticalPosition);\n\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this._animationState = \"hidden-\".concat(this.snackBarConfig.verticalPosition);\n      return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_completeExit\",\n    value: function _completeExit() {\n      var _this4 = this;\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n        _this4._onExit.next();\n\n        _this4._onExit.complete();\n      });\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applySnackBarClasses\",\n    value: function _applySnackBarClasses() {\n      var\n      /** @type {?} */\n      element = this._elementRef.nativeElement;\n      var\n      /** @type {?} */\n      panelClasses = this.snackBarConfig.panelClass;\n\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(function (cssClass) {\n            return element.classList.add(cssClass);\n          });\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        element.classList.add('mat-snack-bar-center');\n      }\n\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        element.classList.add('mat-snack-bar-top');\n      }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_assertNotAttached\",\n    value: function _assertNotAttached() {\n      if (this._portalOutlet.hasAttached()) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n  }]);\n\n  return MatSnackBarContainer;\n}(BasePortalOutlet);\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"alert\", 1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [ɵngcc3.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSnackBarContainer.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatSnackBarConfig\n  }];\n};\n\nMatSnackBarContainer.propDecorators = {\n  \"_portalOutlet\": [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      styles: [\".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}\"],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'role': 'alert',\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatSnackBarModule = function MatSnackBarModule() {\n  _classCallCheck(this, MatSnackBarModule);\n};\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function declarations() {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token that can be used to specify default snack bar.\n */\n\n\nvar\n/** @type {?} */\nMAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nvar MatSnackBar = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _live\n   * @param {?} _injector\n   * @param {?} _breakpointObserver\n   * @param {?} _parentSnackBar\n   * @param {?} _defaultConfig\n   */\n  function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    _classCallCheck(this, MatSnackBar);\n\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened snackbar at *any* level.\n   * @return {?}\n   */\n\n\n  _createClass(MatSnackBar, [{\n    key: \"_openedSnackBarRef\",\n    get: function get() {\n      var\n      /** @type {?} */\n      parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openFromComponent\",\n    value: function openFromComponent(component, config) {\n      return (\n        /** @type {?} */\n        this._attach(component, config)\n      );\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openFromTemplate\",\n    value: function openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(message) {\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var config = arguments.length > 2 ? arguments[2] : undefined;\n\n      var\n      /** @type {?} */\n      _config = Object.assign({}, this._defaultConfig, config); // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n\n\n      _config.data = {\n        message: message,\n        action: action\n      };\n\n      if (!_config.announcementMessage) {\n        _config.announcementMessage = message;\n      }\n\n      return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachSnackBarContainer\",\n    value: function _attachSnackBarContainer(overlayRef, config) {\n      var\n      /** @type {?} */\n      userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      var\n      /** @type {?} */\n      injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarConfig, config]]));\n      var\n      /** @type {?} */\n      containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n      var\n      /** @type {?} */\n      containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attach\",\n    value: function _attach(content, userConfig) {\n      var\n      /** @type {?} */\n      config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n\n      var\n      /** @type {?} */\n      overlayRef = this._createOverlay(config);\n\n      var\n      /** @type {?} */\n      container = this._attachSnackBarContainer(overlayRef, config);\n\n      var\n      /** @type {?} */\n      snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n      if (content instanceof TemplateRef) {\n        var\n        /** @type {?} */\n        portal = new TemplatePortal(content,\n        /** @type {?} */\n        null,\n        /** @type {?} */\n        {\n          $implicit: config.data,\n          snackBarRef: snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        var\n        /** @type {?} */\n        injector = this._createInjector(config, snackBarRef);\n\n        var\n        /** @type {?} */\n        _portal = new ComponentPortal(content, undefined, injector);\n\n        var\n        /** @type {?} */\n        contentRef = container.attachComponentPortal(_portal); // We can't pass this via the injector, because the injector is created earlier.\n\n        snackBarRef.instance = contentRef.instance;\n      } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n\n\n      this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(function (state$$1) {\n        if (state$$1.matches) {\n          overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n        } else {\n          overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n        }\n      });\n\n      this._animateSnackBar(snackBarRef, config);\n\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animateSnackBar\",\n    value: function _animateSnackBar(snackBarRef, config) {\n      var _this5 = this;\n\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(function () {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (_this5._openedSnackBarRef == snackBarRef) {\n          _this5._openedSnackBarRef = null;\n        }\n      });\n\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(function () {\n          snackBarRef.containerInstance.enter();\n        });\n\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(function () {\n          return snackBarRef._dismissAfter(\n          /** @type {?} */\n          config.duration);\n        });\n      }\n\n      if (config.announcementMessage) {\n        this._live.announce(config.announcementMessage, config.politeness);\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      var\n      /** @type {?} */\n      overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n\n      var\n      /** @type {?} */\n      positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n      var\n      /** @type {?} */\n      isRtl = config.direction === 'rtl';\n      var\n      /** @type {?} */\n      isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      var\n      /** @type {?} */\n      isRight = !isLeft && config.horizontalPosition !== 'center';\n\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      } // Set horizontal position.\n\n\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, snackBarRef) {\n      var\n      /** @type {?} */\n      userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarRef, snackBarRef], [MAT_SNACK_BAR_DATA, config.data]]));\n    }\n  }]);\n\n  return MatSnackBar;\n}();\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatSnackBar,\n  factory: MatSnackBar.ɵfac,\n  providedIn: MatSnackBarModule\n});\n/** @nocollapse */\n\nMatSnackBar.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: Injector\n  }, {\n    type: BreakpointObserver\n  }, {\n    type: MatSnackBar,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: MatSnackBarConfig,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nMatSnackBar.ngInjectableDef = defineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Overlay\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations }; //# sourceMappingURL=snack-bar.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/snack-bar.js"],"names":["Subject","InjectionToken","Component","ViewEncapsulation","Inject","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgZone","ViewChild","NgModule","Injectable","Injector","Optional","SkipSelf","TemplateRef","defineInjectable","inject","INJECTOR","animate","state","style","transition","trigger","AnimationCurves","AnimationDurations","MatCommonModule","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","PortalInjector","TemplatePortal","take","takeUntil","OverlayModule","Overlay","OverlayConfig","CommonModule","MatButtonModule","LiveAnnouncer","BreakpointObserver","Breakpoints","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","SimpleSnackBar_div_1_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_1_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_0_Template","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","duration","setTimeout","dispose","dismissedByAction","asObservable","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","transform","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","SimpleSnackBar_HostBindings","ɵɵsyntheticHostProperty","undefined","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","hasAction","directives","NgIf","MatButton","styles","encapsulation","animation","changeDetection","ctorParameters","decorators","args","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","animations","host","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachComponentPortal","attachTemplatePortal","event","fromState","toState","startsWith","_completeExit","onEnter","run","detectChanges","onMicrotaskEmpty","pipe","element","nativeElement","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","onAnimationEnd","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","propDecorators","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","value","component","config","_attach","_config","Object","assign","openFromComponent","overlayRef","userInjector","viewContainerRef","injector","WeakMap","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","Handset","detachments","state$$1","matches","overlayElement","remove","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","MatSnackBar_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","ngInjectableDef"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_1_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 7.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n */\nconst /** @type {?} */ MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n */\nconst /** @type {?} */ matSnackBarAnimations = {\n    /** Animation that slides the dialog in and out of view and fades the opacity. */\n    contentFade: trigger('contentFade', [\n        transition(':enter', [\n            style({ opacity: '0' }),\n            animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n        ])\n    ]),\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('visible-top, visible-bottom', style({ transform: 'translateY(0%)' })),\n        transition('visible-top => hidden-top, visible-bottom => hidden-bottom', animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n        transition('void => visible-top, void => visible-bottom', animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], hostVars: 1, hostBindings: function SimpleSnackBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@contentFade\", undefined);\n    } }, decls: 2, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtext(0);\n        ɵngcc0.ɵɵtemplate(1, SimpleSnackBar_div_1_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.contentFade] }, changeDetection: 0 });\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef, },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] },] },\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{ selector: 'simple-snack-bar',\n                template: \"{{data.message}}<div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matSnackBarAnimations.contentFade],\n                host: {\n                    '[@contentFade]': '',\n                    'class': 'mat-simple-snackbar'\n                } }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n            this._completeExit();\n        }\n        if (toState.startsWith('visible')) {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const /** @type {?} */ onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        const /** @type {?} */ element = this._elementRef.nativeElement;\n        const /** @type {?} */ panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"alert\", 1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] }, changeDetection: 0 });\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n    { type: MatSnackBarConfig, },\n];\nMatSnackBarContainer.propDecorators = {\n    \"_portalOutlet\": [{ type: ViewChild, args: [CdkPortalOutlet,] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{ selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                styles: [\".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'role': 'alert',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                } }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n */\nconst /** @type {?} */ MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        const /** @type {?} */ parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return /** @type {?} */ (this._attach(component, config));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        const /** @type {?} */ _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const /** @type {?} */ injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        const /** @type {?} */ containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        const /** @type {?} */ containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        const /** @type {?} */ config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        const /** @type {?} */ overlayRef = this._createOverlay(config);\n        const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n        const /** @type {?} */ snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const /** @type {?} */ portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            }));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n            const /** @type {?} */ portal = new ComponentPortal(content, undefined, injector);\n            const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(state$$1 => {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        const /** @type {?} */ overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let /** @type {?} */ positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const /** @type {?} */ isRtl = config.direction === 'rtl';\n        const /** @type {?} */ isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatSnackBar, factory: MatSnackBar.ɵfac, providedIn: MatSnackBarModule });\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay, },\n    { type: LiveAnnouncer, },\n    { type: Injector, },\n    { type: BreakpointObserver, },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf },] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] },] },\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map"]},"metadata":{},"sourceType":"module"}
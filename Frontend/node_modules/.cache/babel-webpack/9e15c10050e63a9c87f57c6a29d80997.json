{"ast":null,"code":"/**\n * @module ol/control/Attribution\n */\nimport { equals } from '../array.js';\nimport Control from '../control/Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { removeChildren, replaceNode } from '../dom.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { visibleAtResolution } from '../layer/Layer.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible=true] Specify if attributions can\n * be collapsed. If you use an OSM source, should be set to `false` — see\n * {@link https://www.openstreetmap.org/copyright OSM Copyright} —\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(module:ol/MapEvent)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\n\nvar Attribution = function (Control) {\n  function Attribution(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    this.ulElement_ = document.createElement('UL');\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : \"\\xBB\";\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    var activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    listen(button, EventType.CLICK, this.handleClick_, this);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array.<string>}\n     * @private\n     */\n\n    this.renderedAttributions_ = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderedVisible_ = true;\n  }\n\n  if (Control) Attribution.__proto__ = Control;\n  Attribution.prototype = Object.create(Control && Control.prototype);\n  Attribution.prototype.constructor = Attribution;\n  /**\n   * Get a list of visible attributions.\n   * @param {module:ol/PluggableMap~FrameState} frameState Frame state.\n   * @return {Array.<string>} Attributions.\n   * @private\n   */\n\n  Attribution.prototype.getSourceAttributions_ = function getSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object.<string, boolean>}\n     */\n    var lookup = {};\n    /**\n     * A list of visible attributions.\n     * @type {Array.<string>}\n     */\n\n    var visibleAttributions = [];\n    var layerStatesArray = frameState.layerStatesArray;\n    var resolution = frameState.viewState.resolution;\n\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n\n      if (!visibleAtResolution(layerState, resolution)) {\n        continue;\n      }\n\n      var source = layerState.layer.getSource();\n\n      if (!source) {\n        continue;\n      }\n\n      var attributionGetter = source.getAttributions();\n\n      if (!attributionGetter) {\n        continue;\n      }\n\n      var attributions = attributionGetter(frameState);\n\n      if (!attributions) {\n        continue;\n      }\n\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n\n    return visibleAttributions;\n  };\n  /**\n   * @private\n   * @param {?module:ol/PluggableMap~FrameState} frameState Frame state.\n   */\n\n\n  Attribution.prototype.updateElement_ = function updateElement_(frameState) {\n    var this$1 = this;\n\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n\n      return;\n    }\n\n    var attributions = this.getSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_); // append the attributions\n\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('LI');\n      element.innerHTML = attributions[i];\n      this$1.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  Attribution.prototype.handleClick_ = function handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n\n\n  Attribution.prototype.handleToggle_ = function handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_;\n  };\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  Attribution.prototype.getCollapsible = function getCollapsible() {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  Attribution.prototype.setCollapsible = function setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  Attribution.prototype.setCollapsed = function setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n\n\n  Attribution.prototype.getCollapsed = function getCollapsed() {\n    return this.collapsed_;\n  };\n\n  return Attribution;\n}(Control);\n/**\n * Update the attribution element.\n * @param {module:ol/MapEvent} mapEvent Map event.\n * @this {module:ol/control/Attribution}\n * @api\n */\n\n\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\nexport default Attribution; //# sourceMappingURL=Attribution.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/control/Attribution.js"],"names":["equals","Control","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_COLLAPSED","removeChildren","replaceNode","listen","EventType","visibleAtResolution","Attribution","opt_options","options","call","element","document","createElement","render","target","ulElement_","collapsed_","collapsed","undefined","collapsible_","collapsible","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","CLICK","handleClick_","cssClasses","renderedAttributions_","renderedVisible_","__proto__","prototype","Object","create","constructor","getSourceAttributions_","frameState","lookup","visibleAttributions","layerStatesArray","resolution","viewState","i","ii","length","layerState","source","layer","getSource","attributionGetter","getAttributions","attributions","Array","isArray","j","jj","push","updateElement_","this$1","style","display","visible","innerHTML","event","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","mapEvent"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/Attribution\n */\nimport {equals} from '../array.js';\nimport Control from '../control/Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED} from '../css.js';\nimport {removeChildren, replaceNode} from '../dom.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {visibleAtResolution} from '../layer/Layer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible=true] Specify if attributions can\n * be collapsed. If you use an OSM source, should be set to `false` — see\n * {@link https://www.openstreetmap.org/copyright OSM Copyright} —\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(module:ol/MapEvent)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = (function (Control) {\n  function Attribution(opt_options) {\n\n    var options = opt_options ? opt_options : {};\n\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('UL');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ?\n      options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n\n    var activeLabel = (this.collapsible_ && !this.collapsed_) ?\n      this.collapseLabel_ : this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    listen(button, EventType.CLICK, this.handleClick_, this);\n\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +\n        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n        (this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array.<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n\n  }\n\n  if ( Control ) Attribution.__proto__ = Control;\n  Attribution.prototype = Object.create( Control && Control.prototype );\n  Attribution.prototype.constructor = Attribution;\n\n  /**\n   * Get a list of visible attributions.\n   * @param {module:ol/PluggableMap~FrameState} frameState Frame state.\n   * @return {Array.<string>} Attributions.\n   * @private\n   */\n  Attribution.prototype.getSourceAttributions_ = function getSourceAttributions_ (frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object.<string, boolean>}\n     */\n    var lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array.<string>}\n     */\n    var visibleAttributions = [];\n\n    var layerStatesArray = frameState.layerStatesArray;\n    var resolution = frameState.viewState.resolution;\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n      if (!visibleAtResolution(layerState, resolution)) {\n        continue;\n      }\n\n      var source = layerState.layer.getSource();\n      if (!source) {\n        continue;\n      }\n\n      var attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      var attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    return visibleAttributions;\n  };\n\n  /**\n   * @private\n   * @param {?module:ol/PluggableMap~FrameState} frameState Frame state.\n   */\n  Attribution.prototype.updateElement_ = function updateElement_ (frameState) {\n    var this$1 = this;\n\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    var attributions = this.getSourceAttributions_(frameState);\n\n    var visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('LI');\n      element.innerHTML = attributions[i];\n      this$1.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  };\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  Attribution.prototype.handleClick_ = function handleClick_ (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n\n  /**\n   * @private\n   */\n  Attribution.prototype.handleToggle_ = function handleToggle_ () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n  };\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.getCollapsible = function getCollapsible () {\n    return this.collapsible_;\n  };\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.setCollapsible = function setCollapsible (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.setCollapsed = function setCollapsed (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.getCollapsed = function getCollapsed () {\n    return this.collapsed_;\n  };\n\n  return Attribution;\n}(Control));\n\n\n/**\n * Update the attribution element.\n * @param {module:ol/MapEvent} mapEvent Map event.\n * @this {module:ol/control/Attribution}\n * @api\n */\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\n\n\nexport default Attribution;\n\n//# sourceMappingURL=Attribution.js.map"]},"metadata":{},"sourceType":"module"}
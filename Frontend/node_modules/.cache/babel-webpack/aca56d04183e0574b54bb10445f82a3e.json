{"ast":null,"code":"/**\n * @module ol/featureloader\n */\nimport { UNDEFINED } from './functions.js';\nimport FormatType from './format/FormatType.js';\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:module:ol/source/Vector, module:ol/extent~Extent, number,\n *                    module:ol/proj/Projection)} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(module:ol/extent~Extent, number, module:ol/proj/Projection): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|module:ol/featureloader~FeatureUrlFunction} url Feature URL service.\n * @param {module:ol/format/Feature} format Feature format.\n * @param {function(this:module:ol/VectorTile, Array.<module:ol/Feature>, module:ol/proj/Projection, module:ol/extent~Extent)|function(this:module:ol/source/Vector, Array.<module:ol/Feature>)} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:module:ol/VectorTile)|function(this:module:ol/source/Vector)} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {module:ol/featureloader~FeatureLoader} The feature loader.\n */\n\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {module:ol/extent~Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {module:ol/proj/Projection} projection Projection.\n     * @this {module:ol/source/Vector|module:ol/VectorTile}\n     */\n    function (extent, resolution, projection) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n\n\n      xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n          var type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n\n          var source;\n\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n\n            if (!source) {\n              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source =\n            /** @type {ArrayBuffer} */\n            xhr.response;\n          }\n\n          if (source) {\n            success.call(this, format.readFeatures(source, {\n              featureProjection: projection\n            }), format.readProjection(source), format.getLastExtent());\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n\n\n      xhr.onerror = function () {\n        failure.call(this);\n      }.bind(this);\n\n      xhr.send();\n    }\n  );\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|module:ol/featureloader~FeatureUrlFunction} url Feature URL service.\n * @param {module:ol/format/Feature} format Feature format.\n * @return {module:ol/featureloader~FeatureLoader} The feature loader.\n * @api\n */\n\nexport function xhr(url, format) {\n  return loadFeaturesXhr(url, format,\n  /**\n   * @param {Array.<module:ol/Feature>} features The loaded features.\n   * @param {module:ol/proj/Projection} dataProjection Data\n   * projection.\n   * @this {module:ol/source/Vector}\n   */\n  function (features, dataProjection) {\n    this.addFeatures(features);\n  },\n  /* FIXME handle error */\n  UNDEFINED);\n} //# sourceMappingURL=featureloader.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/featureloader.js"],"names":["UNDEFINED","FormatType","loadFeaturesXhr","url","format","success","failure","extent","resolution","projection","xhr","XMLHttpRequest","open","getType","ARRAY_BUFFER","responseType","onload","event","status","type","source","JSON","TEXT","responseText","XML","responseXML","DOMParser","parseFromString","response","call","readFeatures","featureProjection","readProjection","getLastExtent","bind","onerror","send","features","dataProjection","addFeatures"],"mappings":"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","sourcesContent":["/**\n * @module ol/featureloader\n */\nimport {UNDEFINED} from './functions.js';\nimport FormatType from './format/FormatType.js';\n\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:module:ol/source/Vector, module:ol/extent~Extent, number,\n *                    module:ol/proj/Projection)} FeatureLoader\n * @api\n */\n\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(module:ol/extent~Extent, number, module:ol/proj/Projection): string} FeatureUrlFunction\n * @api\n */\n\n\n/**\n * @param {string|module:ol/featureloader~FeatureUrlFunction} url Feature URL service.\n * @param {module:ol/format/Feature} format Feature format.\n * @param {function(this:module:ol/VectorTile, Array.<module:ol/Feature>, module:ol/proj/Projection, module:ol/extent~Extent)|function(this:module:ol/source/Vector, Array.<module:ol/Feature>)} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:module:ol/VectorTile)|function(this:module:ol/source/Vector)} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {module:ol/featureloader~FeatureLoader} The feature loader.\n */\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {module:ol/extent~Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {module:ol/proj/Projection} projection Projection.\n     * @this {module:ol/source/Vector|module:ol/VectorTile}\n     */\n    function(extent, resolution, projection) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET',\n        typeof url === 'function' ? url(extent, resolution, projection) : url,\n        true);\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n      xhr.onload = function(event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n          var type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n          var source;\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n            if (!source) {\n              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source = /** @type {ArrayBuffer} */ (xhr.response);\n          }\n          if (source) {\n            success.call(this, format.readFeatures(source,\n              {featureProjection: projection}),\n            format.readProjection(source), format.getLastExtent());\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n      xhr.onerror = function() {\n        failure.call(this);\n      }.bind(this);\n      xhr.send();\n    }\n  );\n}\n\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|module:ol/featureloader~FeatureUrlFunction} url Feature URL service.\n * @param {module:ol/format/Feature} format Feature format.\n * @return {module:ol/featureloader~FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  return loadFeaturesXhr(url, format,\n    /**\n     * @param {Array.<module:ol/Feature>} features The loaded features.\n     * @param {module:ol/proj/Projection} dataProjection Data\n     * projection.\n     * @this {module:ol/source/Vector}\n     */\n    function(features, dataProjection) {\n      this.addFeatures(features);\n    }, /* FIXME handle error */ UNDEFINED);\n}\n\n//# sourceMappingURL=featureloader.js.map"]},"metadata":{},"sourceType":"module"}
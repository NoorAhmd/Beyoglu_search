{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\n\nexport var DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\n\nvar PriorityQueue = function PriorityQueue(priorityFunction, keyFunction) {\n  /**\n   * @type {function(T): number}\n   * @private\n   */\n  this.priorityFunction_ = priorityFunction;\n  /**\n   * @type {function(T): string}\n   * @private\n   */\n\n  this.keyFunction_ = keyFunction;\n  /**\n   * @type {Array.<T>}\n   * @private\n   */\n\n  this.elements_ = [];\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n\n  this.priorities_ = [];\n  /**\n   * @type {!Object.<string, boolean>}\n   * @private\n   */\n\n  this.queuedElements_ = {};\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\nPriorityQueue.prototype.clear = function clear$1() {\n  this.elements_.length = 0;\n  this.priorities_.length = 0;\n  clear(this.queuedElements_);\n};\n/**\n * Remove and return the highest-priority element. O(log N).\n * @return {T} Element.\n */\n\n\nPriorityQueue.prototype.dequeue = function dequeue() {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[0];\n\n  if (elements.length == 1) {\n    elements.length = 0;\n    priorities.length = 0;\n  } else {\n    elements[0] = elements.pop();\n    priorities[0] = priorities.pop();\n    this.siftUp_(0);\n  }\n\n  var elementKey = this.keyFunction_(element);\n  delete this.queuedElements_[elementKey];\n  return element;\n};\n/**\n * Enqueue an element. O(log N).\n * @param {T} element Element.\n * @return {boolean} The element was added to the queue.\n */\n\n\nPriorityQueue.prototype.enqueue = function enqueue(element) {\n  assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n\n  var priority = this.priorityFunction_(element);\n\n  if (priority != DROP) {\n    this.elements_.push(element);\n    this.priorities_.push(priority);\n    this.queuedElements_[this.keyFunction_(element)] = true;\n    this.siftDown_(0, this.elements_.length - 1);\n    return true;\n  }\n\n  return false;\n};\n/**\n * @return {number} Count.\n */\n\n\nPriorityQueue.prototype.getCount = function getCount() {\n  return this.elements_.length;\n};\n/**\n * Gets the index of the left child of the node at the given index.\n * @param {number} index The index of the node to get the left child for.\n * @return {number} The index of the left child.\n * @private\n */\n\n\nPriorityQueue.prototype.getLeftChildIndex_ = function getLeftChildIndex_(index) {\n  return index * 2 + 1;\n};\n/**\n * Gets the index of the right child of the node at the given index.\n * @param {number} index The index of the node to get the right child for.\n * @return {number} The index of the right child.\n * @private\n */\n\n\nPriorityQueue.prototype.getRightChildIndex_ = function getRightChildIndex_(index) {\n  return index * 2 + 2;\n};\n/**\n * Gets the index of the parent of the node at the given index.\n * @param {number} index The index of the node to get the parent for.\n * @return {number} The index of the parent.\n * @private\n */\n\n\nPriorityQueue.prototype.getParentIndex_ = function getParentIndex_(index) {\n  return index - 1 >> 1;\n};\n/**\n * Make this a heap. O(N).\n * @private\n */\n\n\nPriorityQueue.prototype.heapify_ = function heapify_() {\n  var this$1 = this;\n  var i;\n\n  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n    this$1.siftUp_(i);\n  }\n};\n/**\n * @return {boolean} Is empty.\n */\n\n\nPriorityQueue.prototype.isEmpty = function isEmpty() {\n  return this.elements_.length === 0;\n};\n/**\n * @param {string} key Key.\n * @return {boolean} Is key queued.\n */\n\n\nPriorityQueue.prototype.isKeyQueued = function isKeyQueued(key) {\n  return key in this.queuedElements_;\n};\n/**\n * @param {T} element Element.\n * @return {boolean} Is queued.\n */\n\n\nPriorityQueue.prototype.isQueued = function isQueued(element) {\n  return this.isKeyQueued(this.keyFunction_(element));\n};\n/**\n * @param {number} index The index of the node to move down.\n * @private\n */\n\n\nPriorityQueue.prototype.siftUp_ = function siftUp_(index) {\n  var this$1 = this;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var count = elements.length;\n  var element = elements[index];\n  var priority = priorities[index];\n  var startIndex = index;\n\n  while (index < count >> 1) {\n    var lIndex = this$1.getLeftChildIndex_(index);\n    var rIndex = this$1.getRightChildIndex_(index);\n    var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n    elements[index] = elements[smallerChildIndex];\n    priorities[index] = priorities[smallerChildIndex];\n    index = smallerChildIndex;\n  }\n\n  elements[index] = element;\n  priorities[index] = priority;\n  this.siftDown_(startIndex, index);\n};\n/**\n * @param {number} startIndex The index of the root.\n * @param {number} index The index of the node to move up.\n * @private\n */\n\n\nPriorityQueue.prototype.siftDown_ = function siftDown_(startIndex, index) {\n  var this$1 = this;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[index];\n  var priority = priorities[index];\n\n  while (index > startIndex) {\n    var parentIndex = this$1.getParentIndex_(index);\n\n    if (priorities[parentIndex] > priority) {\n      elements[index] = elements[parentIndex];\n      priorities[index] = priorities[parentIndex];\n      index = parentIndex;\n    } else {\n      break;\n    }\n  }\n\n  elements[index] = element;\n  priorities[index] = priority;\n};\n/**\n * FIXME empty description for jsdoc\n */\n\n\nPriorityQueue.prototype.reprioritize = function reprioritize() {\n  var this$1 = this;\n  var priorityFunction = this.priorityFunction_;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var index = 0;\n  var n = elements.length;\n  var element, i, priority;\n\n  for (i = 0; i < n; ++i) {\n    element = elements[i];\n    priority = priorityFunction(element);\n\n    if (priority == DROP) {\n      delete this$1.queuedElements_[this$1.keyFunction_(element)];\n    } else {\n      priorities[index] = priority;\n      elements[index++] = element;\n    }\n  }\n\n  elements.length = index;\n  priorities.length = index;\n  this.heapify_();\n};\n\nexport default PriorityQueue; //# sourceMappingURL=PriorityQueue.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/structs/PriorityQueue.js"],"names":["assert","clear","DROP","Infinity","PriorityQueue","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","prototype","clear$1","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","this$1","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = function PriorityQueue(priorityFunction, keyFunction) {\n\n  /**\n   * @type {function(T): number}\n   * @private\n   */\n  this.priorityFunction_ = priorityFunction;\n\n  /**\n   * @type {function(T): string}\n   * @private\n   */\n  this.keyFunction_ = keyFunction;\n\n  /**\n   * @type {Array.<T>}\n   * @private\n   */\n  this.elements_ = [];\n\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n  this.priorities_ = [];\n\n  /**\n   * @type {!Object.<string, boolean>}\n   * @private\n   */\n  this.queuedElements_ = {};\n\n};\n\n/**\n * FIXME empty description for jsdoc\n */\nPriorityQueue.prototype.clear = function clear$1 () {\n  this.elements_.length = 0;\n  this.priorities_.length = 0;\n  clear(this.queuedElements_);\n};\n\n\n/**\n * Remove and return the highest-priority element. O(log N).\n * @return {T} Element.\n */\nPriorityQueue.prototype.dequeue = function dequeue () {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[0];\n  if (elements.length == 1) {\n    elements.length = 0;\n    priorities.length = 0;\n  } else {\n    elements[0] = elements.pop();\n    priorities[0] = priorities.pop();\n    this.siftUp_(0);\n  }\n  var elementKey = this.keyFunction_(element);\n  delete this.queuedElements_[elementKey];\n  return element;\n};\n\n\n/**\n * Enqueue an element. O(log N).\n * @param {T} element Element.\n * @return {boolean} The element was added to the queue.\n */\nPriorityQueue.prototype.enqueue = function enqueue (element) {\n  assert(!(this.keyFunction_(element) in this.queuedElements_),\n    31); // Tried to enqueue an `element` that was already added to the queue\n  var priority = this.priorityFunction_(element);\n  if (priority != DROP) {\n    this.elements_.push(element);\n    this.priorities_.push(priority);\n    this.queuedElements_[this.keyFunction_(element)] = true;\n    this.siftDown_(0, this.elements_.length - 1);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * @return {number} Count.\n */\nPriorityQueue.prototype.getCount = function getCount () {\n  return this.elements_.length;\n};\n\n\n/**\n * Gets the index of the left child of the node at the given index.\n * @param {number} index The index of the node to get the left child for.\n * @return {number} The index of the left child.\n * @private\n */\nPriorityQueue.prototype.getLeftChildIndex_ = function getLeftChildIndex_ (index) {\n  return index * 2 + 1;\n};\n\n\n/**\n * Gets the index of the right child of the node at the given index.\n * @param {number} index The index of the node to get the right child for.\n * @return {number} The index of the right child.\n * @private\n */\nPriorityQueue.prototype.getRightChildIndex_ = function getRightChildIndex_ (index) {\n  return index * 2 + 2;\n};\n\n\n/**\n * Gets the index of the parent of the node at the given index.\n * @param {number} index The index of the node to get the parent for.\n * @return {number} The index of the parent.\n * @private\n */\nPriorityQueue.prototype.getParentIndex_ = function getParentIndex_ (index) {\n  return (index - 1) >> 1;\n};\n\n\n/**\n * Make this a heap. O(N).\n * @private\n */\nPriorityQueue.prototype.heapify_ = function heapify_ () {\n    var this$1 = this;\n\n  var i;\n  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n    this$1.siftUp_(i);\n  }\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\nPriorityQueue.prototype.isEmpty = function isEmpty () {\n  return this.elements_.length === 0;\n};\n\n\n/**\n * @param {string} key Key.\n * @return {boolean} Is key queued.\n */\nPriorityQueue.prototype.isKeyQueued = function isKeyQueued (key) {\n  return key in this.queuedElements_;\n};\n\n\n/**\n * @param {T} element Element.\n * @return {boolean} Is queued.\n */\nPriorityQueue.prototype.isQueued = function isQueued (element) {\n  return this.isKeyQueued(this.keyFunction_(element));\n};\n\n\n/**\n * @param {number} index The index of the node to move down.\n * @private\n */\nPriorityQueue.prototype.siftUp_ = function siftUp_ (index) {\n    var this$1 = this;\n\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var count = elements.length;\n  var element = elements[index];\n  var priority = priorities[index];\n  var startIndex = index;\n\n  while (index < (count >> 1)) {\n    var lIndex = this$1.getLeftChildIndex_(index);\n    var rIndex = this$1.getRightChildIndex_(index);\n\n    var smallerChildIndex = rIndex < count &&\n        priorities[rIndex] < priorities[lIndex] ?\n      rIndex : lIndex;\n\n    elements[index] = elements[smallerChildIndex];\n    priorities[index] = priorities[smallerChildIndex];\n    index = smallerChildIndex;\n  }\n\n  elements[index] = element;\n  priorities[index] = priority;\n  this.siftDown_(startIndex, index);\n};\n\n\n/**\n * @param {number} startIndex The index of the root.\n * @param {number} index The index of the node to move up.\n * @private\n */\nPriorityQueue.prototype.siftDown_ = function siftDown_ (startIndex, index) {\n    var this$1 = this;\n\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[index];\n  var priority = priorities[index];\n\n  while (index > startIndex) {\n    var parentIndex = this$1.getParentIndex_(index);\n    if (priorities[parentIndex] > priority) {\n      elements[index] = elements[parentIndex];\n      priorities[index] = priorities[parentIndex];\n      index = parentIndex;\n    } else {\n      break;\n    }\n  }\n  elements[index] = element;\n  priorities[index] = priority;\n};\n\n\n/**\n * FIXME empty description for jsdoc\n */\nPriorityQueue.prototype.reprioritize = function reprioritize () {\n    var this$1 = this;\n\n  var priorityFunction = this.priorityFunction_;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var index = 0;\n  var n = elements.length;\n  var element, i, priority;\n  for (i = 0; i < n; ++i) {\n    element = elements[i];\n    priority = priorityFunction(element);\n    if (priority == DROP) {\n      delete this$1.queuedElements_[this$1.keyFunction_(element)];\n    } else {\n      priorities[index] = priority;\n      elements[index++] = element;\n    }\n  }\n  elements.length = index;\n  priorities.length = index;\n  this.heapify_();\n};\n\n\nexport default PriorityQueue;\n\n//# sourceMappingURL=PriorityQueue.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/interaction/Pointer\n */\nimport { FALSE, UNDEFINED } from '../functions.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport Interaction from '../interaction/Interaction.js';\nimport { getValues } from '../obj.js';\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/Pointer}\n */\n\nvar handleDragEvent = UNDEFINED;\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {module:ol/interaction/Pointer}\n */\n\nvar handleUpEvent = FALSE;\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {module:ol/interaction/Pointer}\n */\n\nvar handleDownEvent = FALSE;\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/Pointer}\n */\n\nvar handleMoveEvent = UNDEFINED;\n/**\n * @typedef {Object} Options\n * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {(function(module:ol/MapBrowserPointerEvent))} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {(function(module:ol/MapBrowserEvent):boolean)} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {(function(module:ol/MapBrowserPointerEvent))} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events,\n * also during a drag sequence (so during a drag sequence both the\n * `handleDragEvent` function and this function are called).\n * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} stopDown\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\n\nvar PointerInteraction = function (Interaction) {\n  function PointerInteraction(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Interaction.call(this, {\n      handleEvent: options.handleEvent || handleEvent\n    });\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent):boolean}\n     * @private\n     */\n\n    this.handleDownEvent_ = options.handleDownEvent ? options.handleDownEvent : handleDownEvent;\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent)}\n     * @private\n     */\n\n    this.handleDragEvent_ = options.handleDragEvent ? options.handleDragEvent : handleDragEvent;\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent)}\n     * @private\n     */\n\n    this.handleMoveEvent_ = options.handleMoveEvent ? options.handleMoveEvent : handleMoveEvent;\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent):boolean}\n     * @private\n     */\n\n    this.handleUpEvent_ = options.handleUpEvent ? options.handleUpEvent : handleUpEvent;\n    /**\n     * @type {boolean}\n     * @protected\n     */\n\n    this.handlingDownUpSequence = false;\n    /**\n     * This function is used to determine if \"down\" events should be propagated\n     * to other interactions or should be stopped.\n     * @type {function(boolean):boolean}\n     * @protected\n     */\n\n    this.stopDown = options.stopDown ? options.stopDown : stopDown;\n    /**\n     * @type {!Object.<string, module:ol/pointer/PointerEvent>}\n     * @private\n     */\n\n    this.trackedPointers_ = {};\n    /**\n     * @type {Array.<module:ol/pointer/PointerEvent>}\n     * @protected\n     */\n\n    this.targetPointers = [];\n  }\n\n  if (Interaction) PointerInteraction.__proto__ = Interaction;\n  PointerInteraction.prototype = Object.create(Interaction && Interaction.prototype);\n  PointerInteraction.prototype.constructor = PointerInteraction;\n  /**\n   * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n   * @private\n   */\n\n  PointerInteraction.prototype.updateTrackedPointers_ = function updateTrackedPointers_(mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      var event = mapBrowserEvent.pointerEvent;\n      var id = event.pointerId.toString();\n\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  };\n\n  return PointerInteraction;\n}(Interaction);\n/**\n * @param {Array.<module:ol/pointer/PointerEvent>} pointerEvents List of events.\n * @return {module:ol/pixel~Pixel} Centroid pixel.\n */\n\n\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n\n  return [clientX / length, clientY / length];\n}\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\n\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN || type === MapBrowserEventType.POINTERDRAG || type === MapBrowserEventType.POINTERUP;\n}\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n * detected.\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Pointer}\n * @api\n */\n\n\nexport function handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n\n  var stopEvent = false;\n  this.updateTrackedPointers_(mapBrowserEvent);\n\n  if (this.handlingDownUpSequence) {\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n      this.handleDragEvent_(mapBrowserEvent);\n    } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n      var handledUp = this.handleUpEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n    }\n  } else {\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n      var handled = this.handleDownEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handled;\n      stopEvent = this.stopDown(handled);\n    } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n      this.handleMoveEvent_(mapBrowserEvent);\n    }\n  }\n\n  return !stopEvent;\n}\nexport default PointerInteraction;\n/**\n * @param {boolean} handled Was the event handled by the interaction?\n * @return {boolean} Should the `down` event be stopped?\n */\n\nfunction stopDown(handled) {\n  return handled;\n} //# sourceMappingURL=Pointer.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/interaction/Pointer.js"],"names":["FALSE","UNDEFINED","MapBrowserEventType","MapBrowserPointerEvent","Interaction","getValues","handleDragEvent","handleUpEvent","handleDownEvent","handleMoveEvent","PointerInteraction","opt_options","options","call","handleEvent","handleDownEvent_","handleDragEvent_","handleMoveEvent_","handleUpEvent_","handlingDownUpSequence","stopDown","trackedPointers_","targetPointers","__proto__","prototype","Object","create","constructor","updateTrackedPointers_","mapBrowserEvent","isPointerDraggingEvent","event","pointerEvent","id","pointerId","toString","type","POINTERUP","POINTERDOWN","centroid","pointerEvents","length","clientX","clientY","i","POINTERDRAG","stopEvent","handledUp","handled","POINTERMOVE"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Pointer\n */\nimport {FALSE, UNDEFINED} from '../functions.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport Interaction from '../interaction/Interaction.js';\nimport {getValues} from '../obj.js';\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/Pointer}\n */\nvar handleDragEvent = UNDEFINED;\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {module:ol/interaction/Pointer}\n */\nvar handleUpEvent = FALSE;\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Capture dragging.\n * @this {module:ol/interaction/Pointer}\n */\nvar handleDownEvent = FALSE;\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @this {module:ol/interaction/Pointer}\n */\nvar handleMoveEvent = UNDEFINED;\n\n\n/**\n * @typedef {Object} Options\n * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {(function(module:ol/MapBrowserPointerEvent))} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {(function(module:ol/MapBrowserEvent):boolean)} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {(function(module:ol/MapBrowserPointerEvent))} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events,\n * also during a drag sequence (so during a drag sequence both the\n * `handleDragEvent` function and this function are called).\n * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} stopDown\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nvar PointerInteraction = (function (Interaction) {\n  function PointerInteraction(opt_options) {\n\n    var options = opt_options ? opt_options : {};\n\n    Interaction.call(this, {\n      handleEvent: options.handleEvent || handleEvent\n    });\n\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent):boolean}\n     * @private\n     */\n    this.handleDownEvent_ = options.handleDownEvent ?\n      options.handleDownEvent : handleDownEvent;\n\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent)}\n     * @private\n     */\n    this.handleDragEvent_ = options.handleDragEvent ?\n      options.handleDragEvent : handleDragEvent;\n\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent)}\n     * @private\n     */\n    this.handleMoveEvent_ = options.handleMoveEvent ?\n      options.handleMoveEvent : handleMoveEvent;\n\n    /**\n     * @type {function(module:ol/MapBrowserPointerEvent):boolean}\n     * @private\n     */\n    this.handleUpEvent_ = options.handleUpEvent ?\n      options.handleUpEvent : handleUpEvent;\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * This function is used to determine if \"down\" events should be propagated\n     * to other interactions or should be stopped.\n     * @type {function(boolean):boolean}\n     * @protected\n     */\n    this.stopDown = options.stopDown ? options.stopDown : stopDown;\n\n    /**\n     * @type {!Object.<string, module:ol/pointer/PointerEvent>}\n     * @private\n     */\n    this.trackedPointers_ = {};\n\n    /**\n     * @type {Array.<module:ol/pointer/PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n\n  }\n\n  if ( Interaction ) PointerInteraction.__proto__ = Interaction;\n  PointerInteraction.prototype = Object.create( Interaction && Interaction.prototype );\n  PointerInteraction.prototype.constructor = PointerInteraction;\n\n  /**\n   * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n   * @private\n   */\n  PointerInteraction.prototype.updateTrackedPointers_ = function updateTrackedPointers_ (mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      var event = mapBrowserEvent.pointerEvent;\n\n      var id = event.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type ==\n          MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  };\n\n  return PointerInteraction;\n}(Interaction));\n\n\n/**\n * @param {Array.<module:ol/pointer/PointerEvent>} pointerEvents List of events.\n * @return {module:ol/pixel~Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN ||\n    type === MapBrowserEventType.POINTERDRAG ||\n    type === MapBrowserEventType.POINTERUP;\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n * detected.\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {module:ol/interaction/Pointer}\n * @api\n */\nexport function handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n\n  var stopEvent = false;\n  this.updateTrackedPointers_(mapBrowserEvent);\n  if (this.handlingDownUpSequence) {\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n      this.handleDragEvent_(mapBrowserEvent);\n    } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n      var handledUp = this.handleUpEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n    }\n  } else {\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n      var handled = this.handleDownEvent_(mapBrowserEvent);\n      this.handlingDownUpSequence = handled;\n      stopEvent = this.stopDown(handled);\n    } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n      this.handleMoveEvent_(mapBrowserEvent);\n    }\n  }\n  return !stopEvent;\n}\n\n\nexport default PointerInteraction;\n\n/**\n * @param {boolean} handled Was the event handled by the interaction?\n * @return {boolean} Should the `down` event be stopped?\n */\nfunction stopDown(handled) {\n  return handled;\n}\n\n//# sourceMappingURL=Pointer.js.map"]},"metadata":{},"sourceType":"module"}
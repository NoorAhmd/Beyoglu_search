{"ast":null,"code":"/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport { easeOut, linear } from '../easing.js';\nimport InteractionProperty from '../interaction/Property.js';\nimport { clamp } from '../math.js';\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(module:ol/MapBrowserEvent):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return).\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\n\nvar Interaction = function (BaseObject) {\n  function Interaction(options) {\n    BaseObject.call(this);\n    /**\n     * @private\n     * @type {module:ol/PluggableMap}\n     */\n\n    this.map_ = null;\n    this.setActive(true);\n    /**\n     * @type {function(module:ol/MapBrowserEvent):boolean}\n     */\n\n    this.handleEvent = options.handleEvent;\n  }\n\n  if (BaseObject) Interaction.__proto__ = BaseObject;\n  Interaction.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Interaction.prototype.constructor = Interaction;\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n\n  Interaction.prototype.getActive = function getActive() {\n    return (\n      /** @type {boolean} */\n      this.get(InteractionProperty.ACTIVE)\n    );\n  };\n  /**\n   * Get the map associated with this interaction.\n   * @return {module:ol/PluggableMap} Map.\n   * @api\n   */\n\n\n  Interaction.prototype.getMap = function getMap() {\n    return this.map_;\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  Interaction.prototype.setActive = function setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {module:ol/PluggableMap} map Map.\n   */\n\n\n  Interaction.prototype.setMap = function setMap(map) {\n    this.map_ = map;\n  };\n\n  return Interaction;\n}(BaseObject);\n/**\n * @param {module:ol/View} view View.\n * @param {module:ol/coordinate~Coordinate} delta Delta.\n * @param {number=} opt_duration Duration.\n */\n\n\nexport function pan(view, delta, opt_duration) {\n  var currentCenter = view.getCenter();\n\n  if (currentCenter) {\n    var center = view.constrainCenter([currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);\n\n    if (opt_duration) {\n      view.animate({\n        duration: opt_duration,\n        easing: linear,\n        center: center\n      });\n    } else {\n      view.setCenter(center);\n    }\n  }\n}\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function rotate(view, rotation, opt_anchor, opt_duration) {\n  rotation = view.constrainRotation(rotation, 0);\n  rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);\n}\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {\n  if (rotation !== undefined) {\n    var currentRotation = view.getRotation();\n    var currentCenter = view.getCenter();\n\n    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {\n      view.animate({\n        rotation: rotation,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      view.rotate(rotation, opt_anchor);\n    }\n  }\n}\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n * @param {number=} opt_direction Zooming direction; > 0 indicates\n *     zooming out, in which case the constraints system will select\n *     the largest nearest resolution; < 0 indicates zooming in, in\n *     which case the constraints system will select the smallest\n *     nearest resolution; == 0 indicates that the zooming direction\n *     is unknown/not relevant, in which case the constraints system\n *     will select the nearest resolution. If not defined 0 is\n *     assumed.\n */\n\nexport function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {\n  resolution = view.constrainResolution(resolution, 0, opt_direction);\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n/**\n * @param {module:ol/View} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  var currentResolution = view.getResolution();\n  var resolution = view.constrainResolution(currentResolution, delta, 0);\n\n  if (resolution !== undefined) {\n    var resolutions = view.getResolutions();\n    resolution = clamp(resolution, view.getMinResolution() || resolutions[resolutions.length - 1], view.getMaxResolution() || resolutions[0]);\n  } // If we have a constraint on center, we need to change the anchor so that the\n  // new center is within the extent. We first calculate the new center, apply\n  // the constraint to it, and then calculate back the anchor\n\n\n  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {\n    var currentCenter = view.getCenter();\n    var center = view.calculateCenterZoom(resolution, opt_anchor);\n    center = view.constrainCenter(center);\n    opt_anchor = [(resolution * currentCenter[0] - currentResolution * center[0]) / (resolution - currentResolution), (resolution * currentCenter[1] - currentResolution * center[1]) / (resolution - currentResolution)];\n  }\n\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\n\nexport function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {\n  if (resolution) {\n    var currentResolution = view.getResolution();\n    var currentCenter = view.getCenter();\n\n    if (currentResolution !== undefined && currentCenter && resolution !== currentResolution && opt_duration) {\n      view.animate({\n        resolution: resolution,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      if (opt_anchor) {\n        var center = view.calculateCenterZoom(resolution, opt_anchor);\n        view.setCenter(center);\n      }\n\n      view.setResolution(resolution);\n    }\n  }\n}\nexport default Interaction; //# sourceMappingURL=Interaction.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/interaction/Interaction.js"],"names":["BaseObject","easeOut","linear","InteractionProperty","clamp","Interaction","options","call","map_","setActive","handleEvent","__proto__","prototype","Object","create","constructor","getActive","get","ACTIVE","getMap","active","set","setMap","map","pan","view","delta","opt_duration","currentCenter","getCenter","center","constrainCenter","animate","duration","easing","setCenter","rotate","rotation","opt_anchor","constrainRotation","rotateWithoutConstraints","undefined","currentRotation","getRotation","anchor","zoom","resolution","opt_direction","constrainResolution","zoomWithoutConstraints","zoomByDelta","currentResolution","getResolution","resolutions","getResolutions","getMinResolution","length","getMaxResolution","calculateCenterZoom","setResolution"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport {easeOut, linear} from '../easing.js';\nimport InteractionProperty from '../interaction/Property.js';\nimport {clamp} from '../math.js';\n\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(module:ol/MapBrowserEvent):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return).\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nvar Interaction = (function (BaseObject) {\n  function Interaction(options) {\n    BaseObject.call(this);\n\n    /**\n     * @private\n     * @type {module:ol/PluggableMap}\n     */\n    this.map_ = null;\n\n    this.setActive(true);\n\n    /**\n     * @type {function(module:ol/MapBrowserEvent):boolean}\n     */\n    this.handleEvent = options.handleEvent;\n\n  }\n\n  if ( BaseObject ) Interaction.__proto__ = BaseObject;\n  Interaction.prototype = Object.create( BaseObject && BaseObject.prototype );\n  Interaction.prototype.constructor = Interaction;\n\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n  Interaction.prototype.getActive = function getActive () {\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n  };\n\n  /**\n   * Get the map associated with this interaction.\n   * @return {module:ol/PluggableMap} Map.\n   * @api\n   */\n  Interaction.prototype.getMap = function getMap () {\n    return this.map_;\n  };\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  Interaction.prototype.setActive = function setActive (active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  };\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {module:ol/PluggableMap} map Map.\n   */\n  Interaction.prototype.setMap = function setMap (map) {\n    this.map_ = map;\n  };\n\n  return Interaction;\n}(BaseObject));\n\n\n/**\n * @param {module:ol/View} view View.\n * @param {module:ol/coordinate~Coordinate} delta Delta.\n * @param {number=} opt_duration Duration.\n */\nexport function pan(view, delta, opt_duration) {\n  var currentCenter = view.getCenter();\n  if (currentCenter) {\n    var center = view.constrainCenter(\n      [currentCenter[0] + delta[0], currentCenter[1] + delta[1]]);\n    if (opt_duration) {\n      view.animate({\n        duration: opt_duration,\n        easing: linear,\n        center: center\n      });\n    } else {\n      view.setCenter(center);\n    }\n  }\n}\n\n\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function rotate(view, rotation, opt_anchor, opt_duration) {\n  rotation = view.constrainRotation(rotation, 0);\n  rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration);\n}\n\n\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} rotation Rotation.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function rotateWithoutConstraints(view, rotation, opt_anchor, opt_duration) {\n  if (rotation !== undefined) {\n    var currentRotation = view.getRotation();\n    var currentCenter = view.getCenter();\n    if (currentRotation !== undefined && currentCenter && opt_duration > 0) {\n      view.animate({\n        rotation: rotation,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      view.rotate(rotation, opt_anchor);\n    }\n  }\n}\n\n\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n * @param {number=} opt_direction Zooming direction; > 0 indicates\n *     zooming out, in which case the constraints system will select\n *     the largest nearest resolution; < 0 indicates zooming in, in\n *     which case the constraints system will select the smallest\n *     nearest resolution; == 0 indicates that the zooming direction\n *     is unknown/not relevant, in which case the constraints system\n *     will select the nearest resolution. If not defined 0 is\n *     assumed.\n */\nexport function zoom(view, resolution, opt_anchor, opt_duration, opt_direction) {\n  resolution = view.constrainResolution(resolution, 0, opt_direction);\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n\n\n/**\n * @param {module:ol/View} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function zoomByDelta(view, delta, opt_anchor, opt_duration) {\n  var currentResolution = view.getResolution();\n  var resolution = view.constrainResolution(currentResolution, delta, 0);\n\n  if (resolution !== undefined) {\n    var resolutions = view.getResolutions();\n    resolution = clamp(\n      resolution,\n      view.getMinResolution() || resolutions[resolutions.length - 1],\n      view.getMaxResolution() || resolutions[0]);\n  }\n\n  // If we have a constraint on center, we need to change the anchor so that the\n  // new center is within the extent. We first calculate the new center, apply\n  // the constraint to it, and then calculate back the anchor\n  if (opt_anchor && resolution !== undefined && resolution !== currentResolution) {\n    var currentCenter = view.getCenter();\n    var center = view.calculateCenterZoom(resolution, opt_anchor);\n    center = view.constrainCenter(center);\n\n    opt_anchor = [\n      (resolution * currentCenter[0] - currentResolution * center[0]) /\n          (resolution - currentResolution),\n      (resolution * currentCenter[1] - currentResolution * center[1]) /\n          (resolution - currentResolution)\n    ];\n  }\n\n  zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration);\n}\n\n\n/**\n * @param {module:ol/View} view View.\n * @param {number|undefined} resolution Resolution to go to.\n * @param {module:ol/coordinate~Coordinate=} opt_anchor Anchor coordinate.\n * @param {number=} opt_duration Duration.\n */\nexport function zoomWithoutConstraints(view, resolution, opt_anchor, opt_duration) {\n  if (resolution) {\n    var currentResolution = view.getResolution();\n    var currentCenter = view.getCenter();\n    if (currentResolution !== undefined && currentCenter &&\n        resolution !== currentResolution && opt_duration) {\n      view.animate({\n        resolution: resolution,\n        anchor: opt_anchor,\n        duration: opt_duration,\n        easing: easeOut\n      });\n    } else {\n      if (opt_anchor) {\n        var center = view.calculateCenterZoom(resolution, opt_anchor);\n        view.setCenter(center);\n      }\n      view.setResolution(resolution);\n    }\n  }\n}\n\nexport default Interaction;\n\n//# sourceMappingURL=Interaction.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport ImageWrapper from '../Image.js';\nimport { assert } from '../asserts.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { get as getProjection, transform } from '../proj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport ImageSource, { defaultImageLoadFunction } from '../source/Image.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport { compareVersions } from '../string.js';\nimport { appendParams } from '../uri.js';\n/**\n * @const\n * @type {module:ol/size~Size}\n */\n\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {module:ol/source/WMSServerType|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object.<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array.<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\n\nvar ImageWMS = function (ImageSource) {\n  function ImageWMS(opt_options) {\n    var options = opt_options || {};\n    ImageSource.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.url_ = options.url;\n    /**\n     * @private\n     * @type {module:ol/Image~LoadFunction}\n     */\n\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.v13_ = true;\n    this.updateV13_();\n    /**\n     * @private\n     * @type {module:ol/source/WMSServerType|undefined}\n     */\n\n    this.serverType_ =\n    /** @type {module:ol/source/WMSServerType|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {module:ol/Image}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n\n    this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  if (ImageSource) ImageWMS.__proto__ = ImageSource;\n  ImageWMS.prototype = Object.create(ImageSource && ImageSource.prototype);\n  ImageWMS.prototype.constructor = ImageWMS;\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n  ImageWMS.prototype.getGetFeatureInfoUrl = function getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getParams = function getParams() {\n    return this.params_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageWMS.prototype.getImageInternal = function getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var imageResolution = resolution / pixelRatio;\n    var center = getCenter(extent);\n    var viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    var viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    var viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    var requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n    var requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n    var requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    listen(this.image_, EventType.CHANGE, this.handleImageChange, this);\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {module:ol/Image~LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getImageLoadFunction = function getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {module:ol/size~Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageWMS.prototype.getRequestUrl_ = function getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    return appendParams(\n    /** @type {string} */\n    this.url_, params);\n  };\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getUrl = function getUrl() {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setImageLoadFunction = function setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setUrl = function setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.updateParams = function updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  ImageWMS.prototype.updateV13_ = function updateV13_() {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return ImageWMS;\n}(ImageSource);\n\nexport default ImageWMS; //# sourceMappingURL=ImageWMS.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/source/ImageWMS.js"],"names":["DEFAULT_WMS_VERSION","ImageWrapper","assert","listen","EventType","containsExtent","getCenter","getForViewAndSize","getHeight","getWidth","assign","get","getProjection","transform","calculateSourceResolution","ImageSource","defaultImageLoadFunction","WMSServerType","compareVersions","appendParams","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","opt_options","options","call","attributions","projection","resolutions","crossOrigin_","crossOrigin","undefined","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","v13_","updateV13_","serverType_","serverType","hidpi_","hidpi","image_","imageSize_","renderedRevision_","ratio_","ratio","__proto__","prototype","Object","create","constructor","getGetFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","extent","baseParams","x","Math","floor","y","getRequestUrl_","getParams","getImageInternal","pixelRatio","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","image","getRevision","getResolution","getPixelRatio","getExtent","round","CHANGE","handleImageChange","getImageLoadFunction","size","getCode","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","axisOrientation","getAxisOrientation","bbox","substr","join","getUrl","setImageLoadFunction","changed","setUrl","updateParams","version"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport ImageWrapper from '../Image.js';\nimport {assert} from '../asserts.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport ImageSource, {defaultImageLoadFunction} from '../source/Image.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport {compareVersions} from '../string.js';\nimport {appendParams} from '../uri.js';\n\n\n/**\n * @const\n * @type {module:ol/size~Size}\n */\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {module:ol/source/WMSServerType|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object.<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array.<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\nvar ImageWMS = (function (ImageSource) {\n  function ImageWMS(opt_options) {\n\n    var options = opt_options || {};\n\n    ImageSource.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {module:ol/Image~LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n      options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {module:ol/source/WMSServerType|undefined}\n     */\n    this.serverType_ = /** @type {module:ol/source/WMSServerType|undefined} */ (options.serverType);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {module:ol/Image}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/size~Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n  }\n\n  if ( ImageSource ) ImageWMS.__proto__ = ImageSource;\n  ImageWMS.prototype = Object.create( ImageSource && ImageSource.prototype );\n  ImageWMS.prototype.constructor = ImageWMS;\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  ImageWMS.prototype.getGetFeatureInfoUrl = function getGetFeatureInfoUrl (coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var extent = getForViewAndSize(coordinate, resolution, 0,\n      GETFEATUREINFO_IMAGE_SIZE);\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n\n    var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent, GETFEATUREINFO_IMAGE_SIZE,\n      1, sourceProjectionObj || projectionObj, baseParams);\n  };\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  ImageWMS.prototype.getParams = function getParams () {\n    return this.params_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ImageWMS.prototype.getImageInternal = function getImageInternal (extent, resolution, pixelRatio, projection) {\n\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var imageResolution = resolution / pixelRatio;\n\n    var center = getCenter(extent);\n    var viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    var viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    var viewExtent = getForViewAndSize(center, imageResolution, 0,\n      [viewWidth, viewHeight]);\n    var requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n    var requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n    var requestExtent = getForViewAndSize(center, imageResolution, 0,\n      [requestWidth, requestHeight]);\n\n    var image = this.image_;\n    if (image &&\n        this.renderedRevision_ == this.getRevision() &&\n        image.getResolution() == resolution &&\n        image.getPixelRatio() == pixelRatio &&\n        containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,\n      projection, params);\n\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio,\n      url, this.crossOrigin_, this.imageLoadFunction_);\n\n    this.renderedRevision_ = this.getRevision();\n\n    listen(this.image_, EventType.CHANGE,\n      this.handleImageChange, this);\n\n    return this.image_;\n\n  };\n\n  /**\n   * Return the image load function of the source.\n   * @return {module:ol/Image~LoadFunction} The image load function.\n   * @api\n   */\n  ImageWMS.prototype.getImageLoadFunction = function getImageLoadFunction () {\n    return this.imageLoadFunction_;\n  };\n\n  /**\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {module:ol/size~Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  ImageWMS.prototype.getRequestUrl_ = function getRequestUrl_ (extent, size, pixelRatio, projection, params) {\n\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  };\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  ImageWMS.prototype.getUrl = function getUrl () {\n    return this.url_;\n  };\n\n  /**\n   * Set the image load function of the source.\n   * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  ImageWMS.prototype.setImageLoadFunction = function setImageLoadFunction (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  ImageWMS.prototype.setUrl = function setUrl (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  ImageWMS.prototype.updateParams = function updateParams (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n\n  /**\n   * @private\n   */\n  ImageWMS.prototype.updateV13_ = function updateV13_ () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return ImageWMS;\n}(ImageSource));\n\n\nexport default ImageWMS;\n\n//# sourceMappingURL=ImageWMS.js.map"]},"metadata":{},"sourceType":"module"}
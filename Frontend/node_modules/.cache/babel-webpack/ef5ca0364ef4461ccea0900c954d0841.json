{"ast":null,"code":"/**\n * @module ol/geom/MultiPoint\n */\nimport { extend } from '../array.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { inflateCoordinates } from '../geom/flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\n\nvar MultiPoint = function (SimpleGeometry) {\n  function MultiPoint(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) MultiPoint.__proto__ = SimpleGeometry;\n  MultiPoint.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  MultiPoint.prototype.constructor = MultiPoint;\n  /**\n   * Append the passed point to this multipoint.\n   * @param {module:ol/geom/Point} point Point.\n   * @api\n   */\n\n  MultiPoint.prototype.appendPoint = function appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/MultiPoint} Clone.\n   * @override\n   * @api\n   */\n\n\n  MultiPoint.prototype.clone = function clone() {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  MultiPoint.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n\n        closestPoint.length = stride;\n      }\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  MultiPoint.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {module:ol/geom/Point} Point.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoint = function getPoint(index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n\n    if (index < 0 || n <= index) {\n      return null;\n    }\n\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n  /**\n   * Return the points of this multipoint.\n   * @return {Array.<module:ol/geom/Point>} Points.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoints = function getPoints() {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array.<module:ol/geom/Point>} */\n\n    var points = [];\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n\n    return points;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiPoint.prototype.getType = function getType() {\n    return GeometryType.MULTI_POINT;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  MultiPoint.prototype.intersectsExtent = function intersectsExtent(extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  MultiPoint.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return MultiPoint;\n}(SimpleGeometry);\n\nexport default MultiPoint; //# sourceMappingURL=MultiPoint.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/geom/MultiPoint.js"],"names":["extend","closestSquaredDistanceXY","containsXY","GeometryType","Point","SimpleGeometry","deflateCoordinates","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","coordinates","opt_layout","call","Array","isArray","setFlatCoordinates","setCoordinates","__proto__","prototype","Object","create","constructor","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","MULTI_POINT","intersectsExtent","extent","setLayout"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = (function (SimpleGeometry) {\n  function MultiPoint(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n  }\n\n  if ( SimpleGeometry ) MultiPoint.__proto__ = SimpleGeometry;\n  MultiPoint.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  MultiPoint.prototype.constructor = MultiPoint;\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {module:ol/geom/Point} point Point.\n   * @api\n   */\n  MultiPoint.prototype.appendPoint = function appendPoint (point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/MultiPoint} Clone.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.clone = function clone () {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  MultiPoint.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(\n        x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  };\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.getCoordinates = function getCoordinates () {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {module:ol/geom/Point} Point.\n   * @api\n   */\n  MultiPoint.prototype.getPoint = function getPoint (index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(this.flatCoordinates.slice(\n      index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array.<module:ol/geom/Point>} Points.\n   * @api\n   */\n  MultiPoint.prototype.getPoints = function getPoints () {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array.<module:ol/geom/Point>} */\n    var points = [];\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPoint.prototype.getType = function getType () {\n    return GeometryType.MULTI_POINT;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPoint.prototype.intersectsExtent = function intersectsExtent (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return MultiPoint;\n}(SimpleGeometry));\n\n\nexport default MultiPoint;\n\n//# sourceMappingURL=MultiPoint.js.map"]},"metadata":{},"sourceType":"module"}
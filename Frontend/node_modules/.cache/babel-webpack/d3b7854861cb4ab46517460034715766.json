{"ast":null,"code":"/**\n * @module ol/geom/LinearRing\n */\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { linearRing as linearRingArea } from '../geom/flat/area.js';\nimport { assignClosestPoint, maxSquaredDelta } from '../geom/flat/closest.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { inflateCoordinates } from '../geom/flat/inflate.js';\nimport { douglasPeucker } from '../geom/flat/simplify.js';\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\n\nvar LinearRing = function (SimpleGeometry) {\n  function LinearRing(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n  }\n\n  if (SimpleGeometry) LinearRing.__proto__ = SimpleGeometry;\n  LinearRing.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  LinearRing.prototype.constructor = LinearRing;\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/LinearRing} Clone.\n   * @override\n   * @api\n   */\n\n  LinearRing.prototype.clone = function clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinearRing.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  LinearRing.prototype.getArea = function getArea() {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  LinearRing.prototype.getCoordinates = function getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinearRing.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  LinearRing.prototype.getType = function getType() {\n    return GeometryType.LINEAR_RING;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinearRing.prototype.intersectsExtent = function intersectsExtent(extent) {};\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n\n\n  LinearRing.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LinearRing;\n}(SimpleGeometry);\n\nexport default LinearRing; //# sourceMappingURL=LinearRing.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/geom/LinearRing.js"],"names":["closestSquaredDistanceXY","GeometryLayout","GeometryType","SimpleGeometry","linearRing","linearRingArea","assignClosestPoint","maxSquaredDelta","deflateCoordinates","inflateCoordinates","douglasPeucker","LinearRing","coordinates","opt_layout","call","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","__proto__","prototype","Object","create","constructor","clone","flatCoordinates","slice","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","getArea","getCoordinates","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","LINEAR_RING","intersectsExtent","extent","setLayout","changed"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/LinearRing\n */\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport {linearRing as linearRingArea} from '../geom/flat/area.js';\nimport {assignClosestPoint, maxSquaredDelta} from '../geom/flat/closest.js';\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\nimport {douglasPeucker} from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nvar LinearRing = (function (SimpleGeometry) {\n  function LinearRing(coordinates, opt_layout) {\n\n    SimpleGeometry.call(this);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(opt_layout, coordinates);\n    } else {\n      this.setCoordinates(coordinates, opt_layout);\n    }\n\n  }\n\n  if ( SimpleGeometry ) LinearRing.__proto__ = SimpleGeometry;\n  LinearRing.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  LinearRing.prototype.constructor = LinearRing;\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/LinearRing} Clone.\n   * @override\n   * @api\n   */\n  LinearRing.prototype.clone = function clone () {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LinearRing.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(\n        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  LinearRing.prototype.getArea = function getArea () {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  LinearRing.prototype.getCoordinates = function getCoordinates () {\n    return inflateCoordinates(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LinearRing.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\n      squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  LinearRing.prototype.getType = function getType () {\n    return GeometryType.LINEAR_RING;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  LinearRing.prototype.intersectsExtent = function intersectsExtent (extent) {};\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  LinearRing.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LinearRing;\n}(SimpleGeometry));\n\n\nexport default LinearRing;\n\n//# sourceMappingURL=LinearRing.js.map"]},"metadata":{},"sourceType":"module"}
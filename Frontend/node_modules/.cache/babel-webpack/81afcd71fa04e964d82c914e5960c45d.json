{"ast":null,"code":"/**\n * @module ol/source/Source\n */\nimport { UNDEFINED } from '../functions.js';\nimport BaseObject from '../Object.js';\nimport { get as getProjection } from '../proj.js';\nimport SourceState from '../source/State.js';\n/**\n * A function that returns a string or an array of strings representing source\n * attributions.\n *\n * @typedef {function(module:ol/PluggableMap~FrameState): (string|Array.<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings (`{@link module:ol/source/Source~Attribution}`)\n *\n * @typedef {string|Array.<string>|module:ol/source/Source~Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {module:ol/source/State} [state]\n * @property {boolean} [wrapX]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @api\n */\n\nvar Source = function (BaseObject) {\n  function Source(options) {\n    BaseObject.call(this);\n    /**\n    * @private\n    * @type {module:ol/proj/Projection}\n    */\n\n    this.projection_ = getProjection(options.projection);\n    /**\n    * @private\n    * @type {?module:ol/source/Source~Attribution}\n    */\n\n    this.attributions_ = this.adaptAttributions_(options.attributions);\n    /**\n    * @private\n    * @type {module:ol/source/State}\n    */\n\n    this.state_ = options.state !== undefined ? options.state : SourceState.READY;\n    /**\n    * @private\n    * @type {boolean}\n    */\n\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n  }\n\n  if (BaseObject) Source.__proto__ = BaseObject;\n  Source.prototype = Object.create(BaseObject && BaseObject.prototype);\n  Source.prototype.constructor = Source;\n  /**\n  * Turns the attributions option into an attributions function.\n  * @param {module:ol/source/Source~AttributionLike|undefined} attributionLike The attribution option.\n  * @return {?module:ol/source/Source~Attribution} An attribution function (or null).\n  */\n\n  Source.prototype.adaptAttributions_ = function adaptAttributions_(attributionLike) {\n    if (!attributionLike) {\n      return null;\n    }\n\n    if (Array.isArray(attributionLike)) {\n      return function (frameState) {\n        return attributionLike;\n      };\n    }\n\n    if (typeof attributionLike === 'function') {\n      return attributionLike;\n    }\n\n    return function (frameState) {\n      return [attributionLike];\n    };\n  };\n  /**\n  * Get the attribution function for the source.\n  * @return {?module:ol/source/Source~Attribution} Attribution function.\n  */\n\n\n  Source.prototype.getAttributions = function getAttributions() {\n    return this.attributions_;\n  };\n  /**\n  * Get the projection of the source.\n  * @return {module:ol/proj/Projection} Projection.\n  * @api\n  */\n\n\n  Source.prototype.getProjection = function getProjection() {\n    return this.projection_;\n  };\n  /**\n  * @abstract\n  * @return {Array.<number>|undefined} Resolutions.\n  */\n\n\n  Source.prototype.getResolutions = function getResolutions() {};\n  /**\n  * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\n  * @return {module:ol/source/State} State.\n  * @api\n  */\n\n\n  Source.prototype.getState = function getState() {\n    return this.state_;\n  };\n  /**\n  * @return {boolean|undefined} Wrap X.\n  */\n\n\n  Source.prototype.getWrapX = function getWrapX() {\n    return this.wrapX_;\n  };\n  /**\n  * Refreshes the source and finally dispatches a 'change' event.\n  * @api\n  */\n\n\n  Source.prototype.refresh = function refresh() {\n    this.changed();\n  };\n  /**\n  * Set the attributions of the source.\n  * @param {module:ol/source/Source~AttributionLike|undefined} attributions Attributions.\n  *     Can be passed as `string`, `Array<string>`, `{@link module:ol/source/Source~Attribution}`,\n  *     or `undefined`.\n  * @api\n  */\n\n\n  Source.prototype.setAttributions = function setAttributions(attributions) {\n    this.attributions_ = this.adaptAttributions_(attributions);\n    this.changed();\n  };\n  /**\n  * Set the state of the source.\n  * @param {module:ol/source/State} state State.\n  * @protected\n  */\n\n\n  Source.prototype.setState = function setState(state) {\n    this.state_ = state;\n    this.changed();\n  };\n\n  return Source;\n}(BaseObject);\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} hitTolerance Hit tolerance in pixels.\n * @param {Object.<string, boolean>} skippedFeatureUids Skipped feature uids.\n * @param {function((module:ol/Feature|module:ol/render/Feature)): T} callback Feature callback.\n * @return {T|undefined} Callback result.\n * @template T\n */\n\n\nSource.prototype.forEachFeatureAtCoordinate = UNDEFINED;\nexport default Source; //# sourceMappingURL=Source.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/source/Source.js"],"names":["UNDEFINED","BaseObject","get","getProjection","SourceState","Source","options","call","projection_","projection","attributions_","adaptAttributions_","attributions","state_","state","undefined","READY","wrapX_","wrapX","__proto__","prototype","Object","create","constructor","attributionLike","Array","isArray","frameState","getAttributions","getResolutions","getState","getWrapX","refresh","changed","setAttributions","setState","forEachFeatureAtCoordinate"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Source\n */\n\nimport {UNDEFINED} from '../functions.js';\nimport BaseObject from '../Object.js';\nimport {get as getProjection} from '../proj.js';\nimport SourceState from '../source/State.js';\n\n\n/**\n * A function that returns a string or an array of strings representing source\n * attributions.\n *\n * @typedef {function(module:ol/PluggableMap~FrameState): (string|Array.<string>)} Attribution\n */\n\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings (`{@link module:ol/source/Source~Attribution}`)\n *\n * @typedef {string|Array.<string>|module:ol/source/Source~Attribution} AttributionLike\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {module:ol/source/State} [state]\n * @property {boolean} [wrapX]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @api\n */\nvar Source = (function (BaseObject) {\n  function Source(options) {\n\n    BaseObject.call(this);\n\n    /**\n    * @private\n    * @type {module:ol/proj/Projection}\n    */\n    this.projection_ = getProjection(options.projection);\n\n    /**\n    * @private\n    * @type {?module:ol/source/Source~Attribution}\n    */\n    this.attributions_ = this.adaptAttributions_(options.attributions);\n\n    /**\n    * @private\n    * @type {module:ol/source/State}\n    */\n    this.state_ = options.state !== undefined ?\n      options.state : SourceState.READY;\n\n    /**\n    * @private\n    * @type {boolean}\n    */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n  }\n\n  if ( BaseObject ) Source.__proto__ = BaseObject;\n  Source.prototype = Object.create( BaseObject && BaseObject.prototype );\n  Source.prototype.constructor = Source;\n\n  /**\n  * Turns the attributions option into an attributions function.\n  * @param {module:ol/source/Source~AttributionLike|undefined} attributionLike The attribution option.\n  * @return {?module:ol/source/Source~Attribution} An attribution function (or null).\n  */\n  Source.prototype.adaptAttributions_ = function adaptAttributions_ (attributionLike) {\n    if (!attributionLike) {\n      return null;\n    }\n    if (Array.isArray(attributionLike)) {\n      return function(frameState) {\n        return attributionLike;\n      };\n    }\n\n    if (typeof attributionLike === 'function') {\n      return attributionLike;\n    }\n\n    return function(frameState) {\n      return [attributionLike];\n    };\n  };\n\n  /**\n  * Get the attribution function for the source.\n  * @return {?module:ol/source/Source~Attribution} Attribution function.\n  */\n  Source.prototype.getAttributions = function getAttributions () {\n    return this.attributions_;\n  };\n\n  /**\n  * Get the projection of the source.\n  * @return {module:ol/proj/Projection} Projection.\n  * @api\n  */\n  Source.prototype.getProjection = function getProjection () {\n    return this.projection_;\n  };\n\n  /**\n  * @abstract\n  * @return {Array.<number>|undefined} Resolutions.\n  */\n  Source.prototype.getResolutions = function getResolutions () {};\n\n  /**\n  * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\n  * @return {module:ol/source/State} State.\n  * @api\n  */\n  Source.prototype.getState = function getState () {\n    return this.state_;\n  };\n\n  /**\n  * @return {boolean|undefined} Wrap X.\n  */\n  Source.prototype.getWrapX = function getWrapX () {\n    return this.wrapX_;\n  };\n\n  /**\n  * Refreshes the source and finally dispatches a 'change' event.\n  * @api\n  */\n  Source.prototype.refresh = function refresh () {\n    this.changed();\n  };\n\n  /**\n  * Set the attributions of the source.\n  * @param {module:ol/source/Source~AttributionLike|undefined} attributions Attributions.\n  *     Can be passed as `string`, `Array<string>`, `{@link module:ol/source/Source~Attribution}`,\n  *     or `undefined`.\n  * @api\n  */\n  Source.prototype.setAttributions = function setAttributions (attributions) {\n    this.attributions_ = this.adaptAttributions_(attributions);\n    this.changed();\n  };\n\n  /**\n  * Set the state of the source.\n  * @param {module:ol/source/State} state State.\n  * @protected\n  */\n  Source.prototype.setState = function setState (state) {\n    this.state_ = state;\n    this.changed();\n  };\n\n  return Source;\n}(BaseObject));\n\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {number} hitTolerance Hit tolerance in pixels.\n * @param {Object.<string, boolean>} skippedFeatureUids Skipped feature uids.\n * @param {function((module:ol/Feature|module:ol/render/Feature)): T} callback Feature callback.\n * @return {T|undefined} Callback result.\n * @template T\n */\nSource.prototype.forEachFeatureAtCoordinate = UNDEFINED;\n\n\nexport default Source;\n\n//# sourceMappingURL=Source.js.map"]},"metadata":{},"sourceType":"module"}
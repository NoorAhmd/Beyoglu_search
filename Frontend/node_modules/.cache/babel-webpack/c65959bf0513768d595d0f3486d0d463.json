{"ast":null,"code":"/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { listenOnce, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\n/**\n * @typedef {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord,\n * module:ol/TileState, string, ?string, module:ol/Tile~LoadFunction)} TileClass\n * @api\n */\n\nvar ImageTile = function (Tile) {\n  function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n    Tile.call(this, tileCoord, state, opt_options);\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = crossOrigin;\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n\n    this.src_ = src;\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n\n    this.image_ = new Image();\n\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {Array.<module:ol/events~EventsKey>}\n     */\n\n\n    this.imageListenerKeys_ = null;\n    /**\n     * @private\n     * @type {module:ol/Tile~LoadFunction}\n     */\n\n    this.tileLoadFunction_ = tileLoadFunction;\n  }\n\n  if (Tile) ImageTile.__proto__ = Tile;\n  ImageTile.prototype = Object.create(Tile && Tile.prototype);\n  ImageTile.prototype.constructor = ImageTile;\n  /**\n   * @inheritDoc\n   */\n\n  ImageTile.prototype.disposeInternal = function disposeInternal() {\n    if (this.state == TileState.LOADING) {\n      this.unlistenImage_();\n      this.image_ = getBlankImage();\n    }\n\n    if (this.interimTile) {\n      this.interimTile.dispose();\n    }\n\n    this.state = TileState.ABORT;\n    this.changed();\n    Tile.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n\n\n  ImageTile.prototype.getImage = function getImage() {\n    return this.image_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageTile.prototype.getKey = function getKey() {\n    return this.src_;\n  };\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n\n\n  ImageTile.prototype.handleImageError_ = function handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  };\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n\n\n  ImageTile.prototype.handleImageLoad_ = function handleImageLoad_() {\n    if (this.image_.naturalWidth && this.image_.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  ImageTile.prototype.load = function load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n      this.tileLoadFunction_(this, this.src_);\n    }\n  };\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n\n\n  ImageTile.prototype.unlistenImage_ = function unlistenImage_() {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n\n  return ImageTile;\n}(Tile);\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\n\n\nfunction getBlankImage() {\n  var ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile; //# sourceMappingURL=ImageTile.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/ImageTile.js"],"names":["Tile","TileState","createCanvasContext2D","listenOnce","unlistenByKey","EventType","ImageTile","tileCoord","state","src","crossOrigin","tileLoadFunction","opt_options","call","crossOrigin_","src_","image_","Image","imageListenerKeys_","tileLoadFunction_","__proto__","prototype","Object","create","constructor","disposeInternal","LOADING","unlistenImage_","getBlankImage","interimTile","dispose","ABORT","changed","getImage","getKey","handleImageError_","ERROR","handleImageLoad_","naturalWidth","naturalHeight","LOADED","EMPTY","load","IDLE","LOAD","forEach","ctx","fillStyle","fillRect","canvas"],"mappings":"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","sourcesContent":["/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @typedef {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord,\n * module:ol/TileState, string, ?string, module:ol/Tile~LoadFunction)} TileClass\n * @api\n */\n\nvar ImageTile = (function (Tile) {\n  function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n\n    Tile.call(this, tileCoord, state, opt_options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {Array.<module:ol/events~EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {module:ol/Tile~LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n\n  }\n\n  if ( Tile ) ImageTile.__proto__ = Tile;\n  ImageTile.prototype = Object.create( Tile && Tile.prototype );\n  ImageTile.prototype.constructor = ImageTile;\n\n  /**\n   * @inheritDoc\n   */\n  ImageTile.prototype.disposeInternal = function disposeInternal () {\n    if (this.state == TileState.LOADING) {\n      this.unlistenImage_();\n      this.image_ = getBlankImage();\n    }\n    if (this.interimTile) {\n      this.interimTile.dispose();\n    }\n    this.state = TileState.ABORT;\n    this.changed();\n    Tile.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  ImageTile.prototype.getImage = function getImage () {\n    return this.image_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ImageTile.prototype.getKey = function getKey () {\n    return this.src_;\n  };\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  ImageTile.prototype.handleImageError_ = function handleImageError_ () {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  };\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  ImageTile.prototype.handleImageLoad_ = function handleImageLoad_ () {\n    if (this.image_.naturalWidth && this.image_.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  ImageTile.prototype.load = function load () {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.imageListenerKeys_ = [\n        listenOnce(this.image_, EventType.ERROR,\n          this.handleImageError_, this),\n        listenOnce(this.image_, EventType.LOAD,\n          this.handleImageLoad_, this)\n      ];\n      this.tileLoadFunction_(this, this.src_);\n    }\n  };\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  ImageTile.prototype.unlistenImage_ = function unlistenImage_ () {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n\n  return ImageTile;\n}(Tile));\n\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  var ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;\n\n//# sourceMappingURL=ImageTile.js.map"]},"metadata":{},"sourceType":"module"}
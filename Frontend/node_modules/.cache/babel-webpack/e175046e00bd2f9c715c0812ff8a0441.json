{"ast":null,"code":"/**\n * @module ol/TileQueue\n */\nimport TileState from './TileState.js';\nimport { listen, unlisten } from './events.js';\nimport EventType from './events/EventType.js';\nimport PriorityQueue from './structs/PriorityQueue.js';\n/**\n * @typedef {function(module:ol/Tile, string, module:ol/coordinate~Coordinate, number): number} PriorityFunction\n */\n\nvar TileQueue = function (PriorityQueue) {\n  function TileQueue(tilePriorityFunction, tileChangeCallback) {\n    PriorityQueue.call(\n    /**\n     * @param {Array} element Element.\n     * @return {number} Priority.\n     */\n    this, function (element) {\n      return tilePriorityFunction.apply(null, element);\n    },\n    /**\n     * @param {Array} element Element.\n     * @return {string} Key.\n     */\n    function (element) {\n      return (\n        /** @type {module:ol/Tile} */\n        element[0].getKey()\n      );\n    });\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n\n    this.tileChangeCallback_ = tileChangeCallback;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.tilesLoading_ = 0;\n    /**\n     * @private\n     * @type {!Object.<string,boolean>}\n     */\n\n    this.tilesLoadingKeys_ = {};\n  }\n\n  if (PriorityQueue) TileQueue.__proto__ = PriorityQueue;\n  TileQueue.prototype = Object.create(PriorityQueue && PriorityQueue.prototype);\n  TileQueue.prototype.constructor = TileQueue;\n  /**\n   * @inheritDoc\n   */\n\n  TileQueue.prototype.enqueue = function enqueue(element) {\n    var added = PriorityQueue.prototype.enqueue.call(this, element);\n\n    if (added) {\n      var tile = element[0];\n      listen(tile, EventType.CHANGE, this.handleTileChange, this);\n    }\n\n    return added;\n  };\n  /**\n   * @return {number} Number of tiles loading.\n   */\n\n\n  TileQueue.prototype.getTilesLoading = function getTilesLoading() {\n    return this.tilesLoading_;\n  };\n  /**\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n\n\n  TileQueue.prototype.handleTileChange = function handleTileChange(event) {\n    var tile =\n    /** @type {module:ol/Tile} */\n    event.target;\n    var state = tile.getState();\n\n    if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY || state === TileState.ABORT) {\n      unlisten(tile, EventType.CHANGE, this.handleTileChange, this);\n      var tileKey = tile.getKey();\n\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n\n      this.tileChangeCallback_();\n    }\n  };\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n\n\n  TileQueue.prototype.loadMoreTiles = function loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    var this$1 = this;\n    var newLoads = 0;\n    var abortedTiles = false;\n    var state, tile, tileKey;\n\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0) {\n      tile =\n      /** @type {module:ol/Tile} */\n      this$1.dequeue()[0];\n      tileKey = tile.getKey();\n      state = tile.getState();\n\n      if (state === TileState.ABORT) {\n        abortedTiles = true;\n      } else if (state === TileState.IDLE && !(tileKey in this$1.tilesLoadingKeys_)) {\n        this$1.tilesLoadingKeys_[tileKey] = true;\n        ++this$1.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n\n    if (newLoads === 0 && abortedTiles) {\n      // Do not stop the render loop when all wanted tiles were aborted due to\n      // a small, saturated tile cache.\n      this.tileChangeCallback_();\n    }\n  };\n\n  return TileQueue;\n}(PriorityQueue);\n\nexport default TileQueue; //# sourceMappingURL=TileQueue.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/TileQueue.js"],"names":["TileState","listen","unlisten","EventType","PriorityQueue","TileQueue","tilePriorityFunction","tileChangeCallback","call","element","apply","getKey","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","__proto__","prototype","Object","create","constructor","enqueue","added","tile","CHANGE","handleTileChange","getTilesLoading","event","target","state","getState","LOADED","ERROR","EMPTY","ABORT","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","this$1","newLoads","abortedTiles","getCount","dequeue","IDLE","load"],"mappings":"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","sourcesContent":["/**\n * @module ol/TileQueue\n */\nimport TileState from './TileState.js';\nimport {listen, unlisten} from './events.js';\nimport EventType from './events/EventType.js';\nimport PriorityQueue from './structs/PriorityQueue.js';\n\n\n/**\n * @typedef {function(module:ol/Tile, string, module:ol/coordinate~Coordinate, number): number} PriorityFunction\n */\n\n\nvar TileQueue = (function (PriorityQueue) {\n  function TileQueue(tilePriorityFunction, tileChangeCallback) {\n\n    PriorityQueue.call(\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      this, function(element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function(element) {\n        return (/** @type {module:ol/Tile} */ (element[0]).getKey());\n      });\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object.<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n\n  }\n\n  if ( PriorityQueue ) TileQueue.__proto__ = PriorityQueue;\n  TileQueue.prototype = Object.create( PriorityQueue && PriorityQueue.prototype );\n  TileQueue.prototype.constructor = TileQueue;\n\n  /**\n   * @inheritDoc\n   */\n  TileQueue.prototype.enqueue = function enqueue (element) {\n    var added = PriorityQueue.prototype.enqueue.call(this, element);\n    if (added) {\n      var tile = element[0];\n      listen(tile, EventType.CHANGE, this.handleTileChange, this);\n    }\n    return added;\n  };\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  TileQueue.prototype.getTilesLoading = function getTilesLoading () {\n    return this.tilesLoading_;\n  };\n\n  /**\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n  TileQueue.prototype.handleTileChange = function handleTileChange (event) {\n    var tile = /** @type {module:ol/Tile} */ (event.target);\n    var state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR ||\n        state === TileState.EMPTY || state === TileState.ABORT) {\n      unlisten(tile, EventType.CHANGE, this.handleTileChange, this);\n      var tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  };\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  TileQueue.prototype.loadMoreTiles = function loadMoreTiles (maxTotalLoading, maxNewLoads) {\n    var this$1 = this;\n\n    var newLoads = 0;\n    var abortedTiles = false;\n    var state, tile, tileKey;\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&\n           this.getCount() > 0) {\n      tile = /** @type {module:ol/Tile} */ (this$1.dequeue()[0]);\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.ABORT) {\n        abortedTiles = true;\n      } else if (state === TileState.IDLE && !(tileKey in this$1.tilesLoadingKeys_)) {\n        this$1.tilesLoadingKeys_[tileKey] = true;\n        ++this$1.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n    if (newLoads === 0 && abortedTiles) {\n      // Do not stop the render loop when all wanted tiles were aborted due to\n      // a small, saturated tile cache.\n      this.tileChangeCallback_();\n    }\n  };\n\n  return TileQueue;\n}(PriorityQueue));\n\n\nexport default TileQueue;\n\n//# sourceMappingURL=TileQueue.js.map"]},"metadata":{},"sourceType":"module"}
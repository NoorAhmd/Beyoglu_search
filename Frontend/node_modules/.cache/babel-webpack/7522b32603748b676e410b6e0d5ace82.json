{"ast":null,"code":"/**\n * @module ol/obj\n */\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport var assign = typeof Object.assign === 'function' ? Object.assign : function (target, var_sources) {\n  var arguments$1 = arguments;\n\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments$1[i];\n\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return output;\n};\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\n\nexport function clear(object) {\n  for (var property in object) {\n    delete object[property];\n  }\n}\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\n\nexport function getValues(object) {\n  var values = [];\n\n  for (var property in object) {\n    values.push(object[property]);\n  }\n\n  return values;\n}\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\n\nexport function isEmpty(object) {\n  var property;\n\n  for (property in object) {\n    return false;\n  }\n\n  return !property;\n} //# sourceMappingURL=obj.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/obj.js"],"names":["assign","Object","target","var_sources","arguments$1","arguments","undefined","TypeError","output","i","ii","length","source","key","hasOwnProperty","clear","object","property","getValues","values","push","isEmpty"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,MAAM,GAAI,OAAOC,MAAM,CAACD,MAAd,KAAyB,UAA1B,GAAwCC,MAAM,CAACD,MAA/C,GAAwD,UAASE,MAAT,EAAiBC,WAAjB,EAA8B;AACxG,MAAIC,WAAW,GAAGC,SAAlB;;AAEA,MAAIH,MAAM,KAAKI,SAAX,IAAwBJ,MAAM,KAAK,IAAvC,EAA6C;AAC3C,UAAM,IAAIK,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,MAAIC,MAAM,GAAGP,MAAM,CAACC,MAAD,CAAnB;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGL,SAAS,CAACM,MAA/B,EAAuCF,CAAC,GAAGC,EAA3C,EAA+C,EAAED,CAAjD,EAAoD;AAClD,QAAIG,MAAM,GAAGR,WAAW,CAACK,CAAD,CAAxB;;AACA,QAAIG,MAAM,KAAKN,SAAX,IAAwBM,MAAM,KAAK,IAAvC,EAA6C;AAC3C,WAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,YAAIA,MAAM,CAACE,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC9BL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AACD;AACF;AACF;AACF;;AACD,SAAOL,MAAP;AACD,CAnBM;AAsBP;AACA;AACA;AACA;;AACA,OAAO,SAASO,KAAT,CAAeC,MAAf,EAAuB;AAC5B,OAAK,IAAIC,QAAT,IAAqBD,MAArB,EAA6B;AAC3B,WAAOA,MAAM,CAACC,QAAD,CAAb;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBF,MAAnB,EAA2B;AAChC,MAAIG,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIF,QAAT,IAAqBD,MAArB,EAA6B;AAC3BG,IAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACC,QAAD,CAAlB;AACD;;AACD,SAAOE,MAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBL,MAAjB,EAAyB;AAC9B,MAAIC,QAAJ;;AACA,OAAKA,QAAL,IAAiBD,MAAjB,EAAyB;AACvB,WAAO,KAAP;AACD;;AACD,SAAO,CAACC,QAAR;AACD,C,CAED","sourcesContent":["/**\n * @module ol/obj\n */\n\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport var assign = (typeof Object.assign === 'function') ? Object.assign : function(target, var_sources) {\n  var arguments$1 = arguments;\n\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  for (var i = 1, ii = arguments.length; i < ii; ++i) {\n    var source = arguments$1[i];\n    if (source !== undefined && source !== null) {\n      for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n};\n\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n  for (var property in object) {\n    delete object[property];\n  }\n}\n\n\n/**\n * Get an array of property values from an object.\n * @param {Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\nexport function getValues(object) {\n  var values = [];\n  for (var property in object) {\n    values.push(object[property]);\n  }\n  return values;\n}\n\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  var property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n\n//# sourceMappingURL=obj.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/source/Image\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport ImageState from '../ImageState.js';\nimport { linearFindNearest } from '../array.js';\nimport Event from '../events/Event.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from '../source/Source.js';\n/**\n * @enum {string}\n */\n\nvar ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event ol/source/Image~ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\n\nvar ImageSourceEvent = function (Event) {\n  function ImageSourceEvent(type, image) {\n    Event.call(this, type);\n    /**\n     * The image related to the event.\n     * @type {module:ol/Image}\n     * @api\n     */\n\n    this.image = image;\n  }\n\n  if (Event) ImageSourceEvent.__proto__ = Event;\n  ImageSourceEvent.prototype = Object.create(Event && Event.prototype);\n  ImageSourceEvent.prototype.constructor = ImageSourceEvent;\n  return ImageSourceEvent;\n}(Event);\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/extent~Extent} [extent]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {Array.<number>} [resolutions]\n * @property {module:ol/source/State} [state]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @api\n */\n\n\nvar ImageSource = function (Source) {\n  function ImageSource(options) {\n    Source.call(this, {\n      attributions: options.attributions,\n      extent: options.extent,\n      projection: options.projection,\n      state: options.state\n    });\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n\n    this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n    /**\n     * @private\n     * @type {module:ol/reproj/Image}\n     */\n\n    this.reprojectedImage_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.reprojectedRevision_ = 0;\n  }\n\n  if (Source) ImageSource.__proto__ = Source;\n  ImageSource.prototype = Object.create(Source && Source.prototype);\n  ImageSource.prototype.constructor = ImageSource;\n  /**\n   * @return {Array.<number>} Resolutions.\n   * @override\n   */\n\n  ImageSource.prototype.getResolutions = function getResolutions() {\n    return this.resolutions_;\n  };\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n\n\n  ImageSource.prototype.findNearestResolution = function findNearestResolution(resolution) {\n    if (this.resolutions_) {\n      var idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n\n    return resolution;\n  };\n  /**\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/ImageBase} Single image.\n   */\n\n\n  ImageSource.prototype.getImage = function getImage(extent, resolution, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n      }.bind(this));\n      this.reprojectedRevision_ = this.getRevision();\n      return this.reprojectedImage_;\n    }\n  };\n  /**\n   * @abstract\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/ImageBase} Single image.\n   * @protected\n   */\n\n\n  ImageSource.prototype.getImageInternal = function getImageInternal(extent, resolution, pixelRatio, projection) {};\n  /**\n   * Handle image change events.\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n\n\n  ImageSource.prototype.handleImageChange = function handleImageChange(event) {\n    var image =\n    /** @type {module:ol/Image} */\n    event.target;\n\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));\n        break;\n\n      case ImageState.LOADED:\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));\n        break;\n\n      case ImageState.ERROR:\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));\n        break;\n\n      default: // pass\n\n    }\n  };\n\n  return ImageSource;\n}(Source);\n/**\n * Default image load function for image sources that use module:ol/Image~Image image\n * instances.\n * @param {module:ol/Image} image Image.\n * @param {string} src Source.\n */\n\n\nexport function defaultImageLoadFunction(image, src) {\n  image.getImage().src = src;\n}\nexport default ImageSource; //# sourceMappingURL=Image.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/source/Image.js"],"names":["ENABLE_RASTER_REPROJECTION","ImageState","linearFindNearest","Event","equals","equivalent","ReprojImage","Source","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","type","image","call","__proto__","prototype","Object","create","constructor","ImageSource","options","attributions","extent","projection","state","resolutions_","resolutions","undefined","reprojectedImage_","reprojectedRevision_","getResolutions","findNearestResolution","resolution","idx","getImage","pixelRatio","sourceProjection","getProjection","getImageInternal","getRevision","getResolution","getExtent","dispose","bind","handleImageChange","event","target","getState","LOADING","dispatchEvent","LOADED","ERROR","defaultImageLoadFunction","src"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Image\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\n\nimport ImageState from '../ImageState.js';\nimport {linearFindNearest} from '../array.js';\nimport Event from '../events/Event.js';\nimport {equals} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from '../source/Source.js';\n\n\n/**\n * @enum {string}\n */\nvar ImageSourceEventType = {\n\n  /**\n   * Triggered when an image starts loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event ol/source/Image~ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nvar ImageSourceEvent = (function (Event) {\n  function ImageSourceEvent(type, image) {\n\n    Event.call(this, type);\n\n    /**\n     * The image related to the event.\n     * @type {module:ol/Image}\n     * @api\n     */\n    this.image = image;\n\n  }\n\n  if ( Event ) ImageSourceEvent.__proto__ = Event;\n  ImageSourceEvent.prototype = Object.create( Event && Event.prototype );\n  ImageSourceEvent.prototype.constructor = ImageSourceEvent;\n\n  return ImageSourceEvent;\n}(Event));\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {module:ol/extent~Extent} [extent]\n * @property {module:ol/proj~ProjectionLike} projection\n * @property {Array.<number>} [resolutions]\n * @property {module:ol/source/State} [state]\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @api\n */\nvar ImageSource = (function (Source) {\n  function ImageSource(options) {\n    Source.call(this, {\n      attributions: options.attributions,\n      extent: options.extent,\n      projection: options.projection,\n      state: options.state\n    });\n\n    /**\n     * @private\n     * @type {Array.<number>}\n     */\n    this.resolutions_ = options.resolutions !== undefined ?\n      options.resolutions : null;\n\n\n    /**\n     * @private\n     * @type {module:ol/reproj/Image}\n     */\n    this.reprojectedImage_ = null;\n\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n  }\n\n  if ( Source ) ImageSource.__proto__ = Source;\n  ImageSource.prototype = Object.create( Source && Source.prototype );\n  ImageSource.prototype.constructor = ImageSource;\n\n  /**\n   * @return {Array.<number>} Resolutions.\n   * @override\n   */\n  ImageSource.prototype.getResolutions = function getResolutions () {\n    return this.resolutions_;\n  };\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  ImageSource.prototype.findNearestResolution = function findNearestResolution (resolution) {\n    if (this.resolutions_) {\n      var idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n    return resolution;\n  };\n\n  /**\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/ImageBase} Single image.\n   */\n  ImageSource.prototype.getImage = function getImage (extent, resolution, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n    if (!ENABLE_RASTER_REPROJECTION ||\n        !sourceProjection ||\n        !projection ||\n        equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() &&\n            equivalent(\n              this.reprojectedImage_.getProjection(), projection) &&\n            this.reprojectedImage_.getResolution() == resolution &&\n            equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(\n        sourceProjection, projection, extent, resolution, pixelRatio,\n        function(extent, resolution, pixelRatio) {\n          return this.getImageInternal(extent, resolution,\n            pixelRatio, sourceProjection);\n        }.bind(this));\n      this.reprojectedRevision_ = this.getRevision();\n\n      return this.reprojectedImage_;\n    }\n  };\n\n  /**\n   * @abstract\n   * @param {module:ol/extent~Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @return {module:ol/ImageBase} Single image.\n   * @protected\n   */\n  ImageSource.prototype.getImageInternal = function getImageInternal (extent, resolution, pixelRatio, projection) {};\n\n  /**\n   * Handle image change events.\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n  ImageSource.prototype.handleImageChange = function handleImageChange (event) {\n    var image = /** @type {module:ol/Image} */ (event.target);\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART,\n            image));\n        break;\n      case ImageState.LOADED:\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND,\n            image));\n        break;\n      case ImageState.ERROR:\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR,\n            image));\n        break;\n      default:\n        // pass\n    }\n  };\n\n  return ImageSource;\n}(Source));\n\n\n/**\n * Default image load function for image sources that use module:ol/Image~Image image\n * instances.\n * @param {module:ol/Image} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  image.getImage().src = src;\n}\n\n\nexport default ImageSource;\n\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}
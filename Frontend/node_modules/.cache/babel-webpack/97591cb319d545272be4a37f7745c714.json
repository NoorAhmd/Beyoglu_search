{"ast":null,"code":"/**\n * @module ol/source/TileImage\n */\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { getUid } from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from '../source/UrlTile.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/source/State} [state] Source state.\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array.<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires module:ol/source/Tile~TileSourceEvent\n * @api\n */\n\nvar TileImage = function (UrlTile) {\n  function TileImage(options) {\n    UrlTile.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      extent: options.extent,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition\n    });\n    /**\n     * @protected\n     * @type {?string}\n     */\n\n    this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,\n     *        ?string, module:ol/Tile~LoadFunction, module:ol/Tile~Options=)}\n     */\n\n    this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object.<string, module:ol/TileCache>}\n     */\n\n    this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object.<string, module:ol/tilegrid/TileGrid>}\n     */\n\n    this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.renderReprojectionEdges_ = false;\n  }\n\n  if (UrlTile) TileImage.__proto__ = UrlTile;\n  TileImage.prototype = Object.create(UrlTile && UrlTile.prototype);\n  TileImage.prototype.constructor = TileImage;\n  /**\n   * @inheritDoc\n   */\n\n  TileImage.prototype.canExpireCache = function canExpireCache() {\n    var this$1 = this;\n\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.canExpireCache.call(this);\n    }\n\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this$1.tileCacheForProjection) {\n        if (this$1.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.expireCache = function expireCache(projection, usedTiles) {\n    var this$1 = this;\n\n    if (!ENABLE_RASTER_REPROJECTION) {\n      UrlTile.prototype.expireCache.call(this, projection, usedTiles);\n      return;\n    }\n\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n    for (var id in this$1.tileCacheForProjection) {\n      var tileCache = this$1.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getGutter = function getGutter(projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutterInternal();\n    }\n  };\n  /**\n   * @protected\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutterInternal = function getGutterInternal() {\n    return 0;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getOpaque = function getOpaque(projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return UrlTile.prototype.getOpaque.call(this, projection);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getTileGridForProjection = function getTileGridForProjection$1(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileGridForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection).toString();\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n\n      return (\n        /** @type {!module:ol/tilegrid/TileGrid} */\n        this.tileGridForProjection[projKey]\n      );\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getTileCacheForProjection = function getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection).toString();\n\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!module:ol/Tile} Tile.\n   * @private\n   */\n\n\n  TileImage.prototype.createTile_ = function createTile_(z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE, this.handleTileChange, this);\n    return tile;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  TileImage.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {\n    var sourceProjection =\n    /** @type {!module:ol/proj/Projection} */\n    this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile;\n      var tileCoordKey = getKey(tileCoord);\n\n      if (cache.containsKey(tileCoordKey)) {\n        tile =\n        /** @type {!module:ol/Tile} */\n        cache.get(tileCoordKey);\n      }\n\n      var key = this.getKey();\n\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutterInternal(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n\n        return newTile;\n      }\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/Tile} Tile.\n   * @protected\n   */\n\n\n  TileImage.prototype.getTileInternal = function getTileInternal(z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n\n    return tile;\n  };\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n\n\n  TileImage.prototype.setRenderReprojectionEdges = function setRenderReprojectionEdges(render) {\n    var this$1 = this;\n\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n\n    this.renderReprojectionEdges_ = render;\n\n    for (var id in this$1.tileCacheForProjection) {\n      this$1.tileCacheForProjection[id].clear();\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {module:ol/tilegrid/TileGrid} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n\n\n  TileImage.prototype.setTileGridForProjection = function setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n\n      if (proj) {\n        var projKey = getUid(proj).toString();\n\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n\n  return TileImage;\n}(UrlTile);\n/**\n * @param {module:ol/ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage; //# sourceMappingURL=TileImage.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/source/TileImage.js"],"names":["ENABLE_RASTER_REPROJECTION","getUid","ImageTile","TileCache","TileState","listen","EventType","equivalent","get","getProjection","ReprojTile","UrlTile","getKey","getKeyZXY","getForProjection","getTileGridForProjection","TileImage","options","call","attributions","cacheSize","extent","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","crossOrigin","undefined","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","__proto__","prototype","Object","create","constructor","canExpireCache","this$1","tileCache","key","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutter","getGutterInternal","getOpaque","getTileGridForProjection$1","thisProj","projKey","toString","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","CHANGE","handleTileChange","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","bind","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {getUid} from '../util.js';\nimport ImageTile from '../ImageTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport UrlTile from '../source/UrlTile.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {module:ol/proj~ProjectionLike} projection Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {module:ol/source/State} [state] Source state.\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array.<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires module:ol/source/Tile~TileSourceEvent\n * @api\n */\nvar TileImage = (function (UrlTile) {\n  function TileImage(options) {\n\n    UrlTile.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      extent: options.extent,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ?\n        options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,\n     *        ?string, module:ol/Tile~LoadFunction, module:ol/Tile~Options=)}\n     */\n    this.tileClass = options.tileClass !== undefined ?\n      options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object.<string, module:ol/TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object.<string, module:ol/tilegrid/TileGrid>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  if ( UrlTile ) TileImage.__proto__ = UrlTile;\n  TileImage.prototype = Object.create( UrlTile && UrlTile.prototype );\n  TileImage.prototype.constructor = TileImage;\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.canExpireCache = function canExpireCache () {\n    var this$1 = this;\n\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.canExpireCache.call(this);\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this$1.tileCacheForProjection) {\n        if (this$1.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.expireCache = function expireCache (projection, usedTiles) {\n    var this$1 = this;\n\n    if (!ENABLE_RASTER_REPROJECTION) {\n      UrlTile.prototype.expireCache.call(this, projection, usedTiles);\n      return;\n    }\n    var usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (var id in this$1.tileCacheForProjection) {\n      var tileCache = this$1.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getGutter = function getGutter (projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutterInternal();\n    }\n  };\n\n  /**\n   * @protected\n   * @return {number} Gutter.\n   */\n  TileImage.prototype.getGutterInternal = function getGutterInternal () {\n    return 0;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getOpaque = function getOpaque (projection) {\n    if (ENABLE_RASTER_REPROJECTION &&\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return UrlTile.prototype.getOpaque.call(this, projection);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getTileGridForProjection = function getTileGridForProjection$1 (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileGridForProjection.call(this, projection);\n    }\n    var thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection).toString();\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n      return (\n        /** @type {!module:ol/tilegrid/TileGrid} */ (this.tileGridForProjection[projKey])\n      );\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getTileCacheForProjection = function getTileCacheForProjection (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\n    }\n    var thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection).toString();\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!module:ol/Tile} Tile.\n   * @private\n   */\n  TileImage.prototype.createTile_ = function createTile_ (z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord, projection);\n    var tileUrl = urlTileCoord ?\n      this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions);\n    tile.key = key;\n    listen(tile, EventType.CHANGE,\n      this.handleTileChange, this);\n    return tile;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  TileImage.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {\n    var sourceProjection = /** @type {!module:ol/proj/Projection} */ (this.getProjection());\n    if (!ENABLE_RASTER_REPROJECTION ||\n        !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile;\n      var tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = /** @type {!module:ol/Tile} */ (cache.get(tileCoordKey));\n      }\n      var key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord =\n            this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(\n          sourceProjection, sourceTileGrid,\n          projection, targetTileGrid,\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\n          this.getGutterInternal(),\n          function(z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this), this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  };\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!module:ol/proj/Projection} projection Projection.\n   * @return {!module:ol/Tile} Tile.\n   * @protected\n   */\n  TileImage.prototype.getTileInternal = function getTileInternal (z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  };\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  TileImage.prototype.setRenderReprojectionEdges = function setRenderReprojectionEdges (render) {\n    var this$1 = this;\n\n    if (!ENABLE_RASTER_REPROJECTION ||\n        this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (var id in this$1.tileCacheForProjection) {\n      this$1.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  };\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\n   * @param {module:ol/tilegrid/TileGrid} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  TileImage.prototype.setTileGridForProjection = function setTileGridForProjection (projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n      if (proj) {\n        var projKey = getUid(proj).toString();\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n\n  return TileImage;\n}(UrlTile));\n\n\n/**\n * @param {module:ol/ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;\n\n//# sourceMappingURL=TileImage.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error))} Loader\n */\n\nvar ImageCanvas = function (ImageBase) {\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n    var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    ImageBase.call(this, extent, resolution, pixelRatio, state);\n    /**\n     * Optional canvas loader function.\n     * @type {?module:ol/ImageCanvas~Loader}\n     * @private\n     */\n\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    this.canvas_ = canvas;\n    /**\n     * @private\n     * @type {Error}\n     */\n\n    this.error_ = null;\n  }\n\n  if (ImageBase) ImageCanvas.__proto__ = ImageBase;\n  ImageCanvas.prototype = Object.create(ImageBase && ImageBase.prototype);\n  ImageCanvas.prototype.constructor = ImageCanvas;\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {Error} Any error that occurred during rendering.\n   */\n\n  ImageCanvas.prototype.getError = function getError() {\n    return this.error_;\n  };\n  /**\n   * Handle async drawing complete.\n   * @param {Error} err Any error during drawing.\n   * @private\n   */\n\n\n  ImageCanvas.prototype.handleLoad_ = function handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n\n    this.changed();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageCanvas.prototype.load = function load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n\n\n  ImageCanvas.prototype.getImage = function getImage() {\n    return this.canvas_;\n  };\n\n  return ImageCanvas;\n}(ImageBase);\n\nexport default ImageCanvas; //# sourceMappingURL=ImageCanvas.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/ImageCanvas.js"],"names":["ImageBase","ImageState","ImageCanvas","extent","resolution","pixelRatio","canvas","opt_loader","state","undefined","IDLE","LOADED","call","loader_","canvas_","error_","__proto__","prototype","Object","create","constructor","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,WAAW,GAAI,UAAUF,SAAV,EAAqB;AACtC,WAASE,WAAT,CAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,UAAzC,EAAqDC,MAArD,EAA6DC,UAA7D,EAAyE;AAEvE,QAAIC,KAAK,GAAGD,UAAU,KAAKE,SAAf,GAA2BR,UAAU,CAACS,IAAtC,GAA6CT,UAAU,CAACU,MAApE;AAEAX,IAAAA,SAAS,CAACY,IAAV,CAAe,IAAf,EAAqBT,MAArB,EAA6BC,UAA7B,EAAyCC,UAAzC,EAAqDG,KAArD;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKK,OAAL,GAAeN,UAAU,KAAKE,SAAf,GAA2BF,UAA3B,GAAwC,IAAvD;AAEA;AACJ;AACA;AACA;;AACI,SAAKO,OAAL,GAAeR,MAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKS,MAAL,GAAc,IAAd;AAED;;AAED,MAAKf,SAAL,EAAiBE,WAAW,CAACc,SAAZ,GAAwBhB,SAAxB;AACjBE,EAAAA,WAAW,CAACe,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAenB,SAAS,IAAIA,SAAS,CAACiB,SAAtC,CAAxB;AACAf,EAAAA,WAAW,CAACe,SAAZ,CAAsBG,WAAtB,GAAoClB,WAApC;AAEA;AACF;AACA;AACA;;AACEA,EAAAA,WAAW,CAACe,SAAZ,CAAsBI,QAAtB,GAAiC,SAASA,QAAT,GAAqB;AACpD,WAAO,KAAKN,MAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;;;AACEb,EAAAA,WAAW,CAACe,SAAZ,CAAsBK,WAAtB,GAAoC,SAASA,WAAT,CAAsBC,GAAtB,EAA2B;AAC7D,QAAIA,GAAJ,EAAS;AACP,WAAKR,MAAL,GAAcQ,GAAd;AACA,WAAKf,KAAL,GAAaP,UAAU,CAACuB,KAAxB;AACD,KAHD,MAGO;AACL,WAAKhB,KAAL,GAAaP,UAAU,CAACU,MAAxB;AACD;;AACD,SAAKc,OAAL;AACD,GARD;AAUA;AACF;AACA;;;AACEvB,EAAAA,WAAW,CAACe,SAAZ,CAAsBS,IAAtB,GAA6B,SAASA,IAAT,GAAiB;AAC5C,QAAI,KAAKlB,KAAL,IAAcP,UAAU,CAACS,IAA7B,EAAmC;AACjC,WAAKF,KAAL,GAAaP,UAAU,CAAC0B,OAAxB;AACA,WAAKF,OAAL;AACA,WAAKZ,OAAL,CAAa,KAAKS,WAAL,CAAiBM,IAAjB,CAAsB,IAAtB,CAAb;AACD;AACF,GAND;AAQA;AACF;AACA;;;AACE1B,EAAAA,WAAW,CAACe,SAAZ,CAAsBY,QAAtB,GAAiC,SAASA,QAAT,GAAqB;AACpD,WAAO,KAAKf,OAAZ;AACD,GAFD;;AAIA,SAAOZ,WAAP;AACD,CA1EkB,CA0EjBF,SA1EiB,CAAnB;;AA6EA,eAAeE,WAAf,C,CAEA","sourcesContent":["/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error))} Loader\n */\n\n\nvar ImageCanvas = (function (ImageBase) {\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n\n    var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    ImageBase.call(this, extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?module:ol/ImageCanvas~Loader}\n     * @private\n     */\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {Error}\n     */\n    this.error_ = null;\n\n  }\n\n  if ( ImageBase ) ImageCanvas.__proto__ = ImageBase;\n  ImageCanvas.prototype = Object.create( ImageBase && ImageBase.prototype );\n  ImageCanvas.prototype.constructor = ImageCanvas;\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {Error} Any error that occurred during rendering.\n   */\n  ImageCanvas.prototype.getError = function getError () {\n    return this.error_;\n  };\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} err Any error during drawing.\n   * @private\n   */\n  ImageCanvas.prototype.handleLoad_ = function handleLoad_ (err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  ImageCanvas.prototype.load = function load () {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  ImageCanvas.prototype.getImage = function getImage () {\n    return this.canvas_;\n  };\n\n  return ImageCanvas;\n}(ImageBase));\n\n\nexport default ImageCanvas;\n\n//# sourceMappingURL=ImageCanvas.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Used to generate unique ID for each accordion.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nvar\n/** @type {?} */\nnextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n\nvar CdkAccordion = /*#__PURE__*/function () {\n  function CdkAccordion() {\n    _classCallCheck(this, CdkAccordion);\n\n    /**\n     * Stream that emits true/false when openAll/closeAll is triggered.\n     */\n    this._openCloseAllActions = new Subject();\n    /**\n     * A readonly id value to use for unique selection coordination.\n     */\n\n    this.id = \"cdk-accordion-\".concat(nextId++);\n    this._multi = false;\n  }\n  /**\n   * Whether the accordion should allow multiple expanded accordion items simultaneously.\n   * @return {?}\n   */\n\n\n  _createClass(CdkAccordion, [{\n    key: \"multi\",\n    get: function get() {\n      return this._multi;\n    }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    ,\n    set: function set(multi) {\n      this._multi = coerceBooleanProperty(multi);\n    }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openAll\",\n    value: function openAll() {\n      this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._openCloseAll(false);\n    }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openCloseAll\",\n    value: function _openCloseAll(expanded) {\n      if (this.multi) {\n        this._openCloseAllActions.next(expanded);\n      }\n    }\n  }]);\n\n  return CdkAccordion;\n}();\n\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) {\n  return new (t || CdkAccordion)();\n};\n\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordion,\n  selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n  inputs: {\n    multi: \"multi\"\n  },\n  exportAs: [\"cdkAccordion\"]\n});\n/** @nocollapse */\n\nCdkAccordion.propDecorators = {\n  \"multi\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion, [cdkAccordion]',\n      exportAs: 'cdkAccordion'\n    }]\n  }], function () {\n    return [];\n  }, {\n    multi: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Used to generate unique ID for each accordion item.\n */\n\n\nvar\n/** @type {?} */\nnextId$1 = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n\nvar CdkAccordionItem = /*#__PURE__*/function () {\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _expansionDispatcher\n   */\n  function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n    var _this = this;\n\n    _classCallCheck(this, CdkAccordionItem);\n\n    this.accordion = accordion;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._expansionDispatcher = _expansionDispatcher;\n    /**\n     * Subscription to openAll/closeAll events.\n     */\n\n    this._openCloseAllSubscription = Subscription.EMPTY;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     */\n\n    this.opened = new EventEmitter();\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     */\n\n    this.destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     */\n\n    this.expandedChange = new EventEmitter();\n    /**\n     * The unique AccordionItem id.\n     */\n\n    this.id = \"cdk-accordion-child-\".concat(nextId$1++);\n    this._expanded = false;\n    this._disabled = false;\n    /**\n     * Unregister function for _expansionDispatcher.\n     */\n\n    this._removeUniqueSelectionListener = function () {};\n\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(function (id, accordionId) {\n      if (_this.accordion && !_this.accordion.multi && _this.accordion.id === accordionId && _this.id !== id) {\n        _this.expanded = false;\n      }\n    }); // When an accordion item is hosted in an accordion, subscribe to open/close events.\n\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n  /**\n   * Whether the AccordionItem is expanded.\n   * @return {?}\n   */\n\n\n  _createClass(CdkAccordionItem, [{\n    key: \"expanded\",\n    get: function get() {\n      return this._expanded;\n    }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    ,\n    set: function set(expanded) {\n      expanded = coerceBooleanProperty(expanded); // Only emit events and update the internal value if the value changes.\n\n      if (this._expanded !== expanded) {\n        this._expanded = expanded;\n        this.expandedChange.emit(expanded);\n\n        if (expanded) {\n          this.opened.emit();\n          /**\n           * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n           * the name value is the id of the accordion.\n           */\n\n          var\n          /** @type {?} */\n          accordionId = this.accordion ? this.accordion.id : this.id;\n\n          this._expansionDispatcher.notify(this.id, accordionId);\n        } else {\n          this.closed.emit();\n        } // Ensures that the animation will run when the value is set outside of an `@Input`.\n        // This includes cases like the open, close and toggle methods.\n\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    ,\n    set: function set(disabled) {\n      this._disabled = coerceBooleanProperty(disabled);\n    }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.opened.complete();\n      this.closed.complete();\n      this.destroyed.emit();\n      this.destroyed.complete();\n\n      this._removeUniqueSelectionListener();\n\n      this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (!this.disabled) {\n        this.expanded = !this.expanded;\n      }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.disabled) {\n        this.expanded = false;\n      }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (!this.disabled) {\n        this.expanded = true;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribeToOpenCloseAllActions\",\n    value: function _subscribeToOpenCloseAllActions() {\n      var _this2 = this;\n\n      return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n        // Only change expanded state if item is enabled\n        if (!_this2.disabled) {\n          _this2.expanded = expanded;\n        }\n      });\n    }\n  }]);\n\n  return CdkAccordionItem;\n}();\n\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) {\n  return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher));\n};\n\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordionItem,\n  selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n  inputs: {\n    expanded: \"expanded\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    closed: \"closed\",\n    opened: \"opened\",\n    destroyed: \"destroyed\",\n    expandedChange: \"expandedChange\"\n  },\n  exportAs: [\"cdkAccordionItem\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n  // to the same accordion.\n  {\n    provide: CdkAccordion,\n    useValue: ɵ0\n  }])]\n});\n/** @nocollapse */\n\nCdkAccordionItem.ctorParameters = function () {\n  return [{\n    type: CdkAccordion,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: UniqueSelectionDispatcher\n  }];\n};\n\nCdkAccordionItem.propDecorators = {\n  \"closed\": [{\n    type: Output\n  }],\n  \"opened\": [{\n    type: Output\n  }],\n  \"destroyed\": [{\n    type: Output\n  }],\n  \"expandedChange\": [{\n    type: Output\n  }],\n  \"expanded\": [{\n    type: Input\n  }],\n  \"disabled\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion-item, [cdkAccordionItem]',\n      exportAs: 'cdkAccordionItem',\n      providers: [// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n      // to the same accordion.\n      {\n        provide: CdkAccordion,\n        useValue: ɵ0\n      }]\n    }]\n  }], function () {\n    return [{\n      type: CdkAccordion,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.UniqueSelectionDispatcher\n    }];\n  }, {\n    closed: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    expandedChange: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar CdkAccordionModule = function CdkAccordionModule() {\n  _classCallCheck(this, CdkAccordionModule);\n};\n\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) {\n  return new (t || CdkAccordionModule)();\n};\n\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkAccordionModule\n});\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, {\n    declarations: [CdkAccordion, CdkAccordionItem],\n    exports: [CdkAccordion, CdkAccordionItem]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkAccordion, CdkAccordionItem],\n      declarations: [CdkAccordion, CdkAccordionItem]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule }; //# sourceMappingURL=accordion.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/accordion.js"],"names":["Directive","Input","Output","EventEmitter","Optional","ChangeDetectorRef","SkipSelf","NgModule","coerceBooleanProperty","Subject","Subscription","UniqueSelectionDispatcher","ɵngcc0","ɵngcc1","nextId","CdkAccordion","_openCloseAllActions","id","_multi","multi","_openCloseAll","expanded","next","ɵfac","CdkAccordion_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","nextId$1","ɵ0","undefined","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","complete","unsubscribe","subscribe","CdkAccordionItem_Factory","ɵɵdirectiveInject","outputs","features","ɵɵProvidersFeature","provide","useValue","ctorParameters","decorators","providers","CdkAccordionModule","CdkAccordionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet /** @type {?} */ nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /**\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\n     * @return {?}\n     */\n    get multi() { return this._multi; }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    openAll() {\n        this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    closeAll() {\n        this._openCloseAll(false);\n    }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    _openCloseAll(expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    }\n}\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"] });\n/** @nocollapse */\nCdkAccordion.propDecorators = {\n    \"multi\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID for each accordion item.\n */\nlet /** @type {?} */ nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /**\n     * @param {?} accordion\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     */\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /**\n     * Whether the AccordionItem is expanded.\n     * @return {?}\n     */\n    get expanded() { return this._expanded; }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const /** @type {?} */ accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n/** @nocollapse */\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf },] },\n    { type: ChangeDetectorRef, },\n    { type: UniqueSelectionDispatcher, },\n];\nCdkAccordionItem.propDecorators = {\n    \"closed\": [{ type: Output },],\n    \"opened\": [{ type: Output },],\n    \"destroyed\": [{ type: Output },],\n    \"expandedChange\": [{ type: Output },],\n    \"expanded\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); };\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n\n//# sourceMappingURL=accordion.js.map"]},"metadata":{},"sourceType":"module"}
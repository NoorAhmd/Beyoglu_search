{"ast":null,"code":"/**\n * @module ol/geom/Point\n */\nimport { createOrUpdateFromCoordinate, containsXY } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { deflateCoordinate } from '../geom/flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\n\nvar Point = function (SimpleGeometry) {\n  function Point(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    this.setCoordinates(coordinates, opt_layout);\n  }\n\n  if (SimpleGeometry) Point.__proto__ = SimpleGeometry;\n  Point.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  Point.prototype.constructor = Point;\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/Point} Clone.\n   * @override\n   * @api\n   */\n\n  Point.prototype.clone = function clone() {\n    var point = new Point(this.flatCoordinates.slice(), this.layout);\n    return point;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Point.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      var stride = this.stride;\n\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n  /**\n   * Return the coordinate of the point.\n   * @return {module:ol/coordinate~Coordinate} Coordinates.\n   * @override\n   * @api\n   */\n\n\n  Point.prototype.getCoordinates = function getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Point.prototype.computeExtent = function computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Point.prototype.getType = function getType() {\n    return GeometryType.POINT;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Point.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  Point.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return Point;\n}(SimpleGeometry);\n\nexport default Point; //# sourceMappingURL=Point.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/geom/Point.js"],"names":["createOrUpdateFromCoordinate","containsXY","GeometryType","SimpleGeometry","deflateCoordinate","squaredDistance","squaredDx","Point","coordinates","opt_layout","call","setCoordinates","__proto__","prototype","Object","create","constructor","clone","point","flatCoordinates","slice","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","stride","i","length","getCoordinates","computeExtent","extent","getType","POINT","intersectsExtent","setLayout","changed"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/Point\n */\nimport {createOrUpdateFromCoordinate, containsXY} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport {deflateCoordinate} from '../geom/flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nvar Point = (function (SimpleGeometry) {\n  function Point(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    this.setCoordinates(coordinates, opt_layout);\n  }\n\n  if ( SimpleGeometry ) Point.__proto__ = SimpleGeometry;\n  Point.prototype = Object.create( SimpleGeometry && SimpleGeometry.prototype );\n  Point.prototype.constructor = Point;\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!module:ol/geom/Point} Clone.\n   * @override\n   * @api\n   */\n  Point.prototype.clone = function clone () {\n    var point = new Point(this.flatCoordinates.slice(), this.layout);\n    return point;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Point.prototype.closestPointXY = function closestPointXY (x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n    if (squaredDistance < minSquaredDistance) {\n      var stride = this.stride;\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n\n  /**\n   * Return the coordinate of the point.\n   * @return {module:ol/coordinate~Coordinate} Coordinates.\n   * @override\n   * @api\n   */\n  Point.prototype.getCoordinates = function getCoordinates () {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Point.prototype.computeExtent = function computeExtent (extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.getType = function getType () {\n    return GeometryType.POINT;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.intersectsExtent = function intersectsExtent (extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return Point;\n}(SimpleGeometry));\n\n\nexport default Point;\n\n//# sourceMappingURL=Point.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/layer/Vector\n */\nimport LayerType from '../LayerType.js';\nimport Layer from '../layer/Layer.js';\nimport VectorRenderType from '../layer/VectorRenderType.js';\nimport { assign } from '../obj.js';\nimport { createDefaultStyle, toFunction as toStyleFunction } from '../style/Style.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/render~OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {module:ol/layer/VectorRenderType|string} [renderMode='vector'] Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and\n *    texts are always rotated with the view and pixels are scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during\n *    animations, but slower performance.\n * @property {module:ol/source/Vector} [source] Source.\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles, and the priority is defined by the z-index of the style. Lower z-index\n * means higher priority.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style] Layer style. See\n * {@link module:ol/style} for default style which will be used if this is not defined.\n * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`\n * is `vector`, feature batches will be recreated during animations. This means that no\n * vectors will be shown clipped, but the setting will have a performance impact for large\n * amounts of vector data. When set to `false`, batches will be recreated when no animation\n * is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`\n * is `vector`, feature batches will be recreated during interactions. See also\n * `updateWhileAnimating`.\n */\n\n/**\n * @enum {string}\n * Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but\n *    point symbols and texts are always rotated with the view and pixels are\n *    scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering\n *    even during animations, but slower performance.\n * @api\n */\n\nexport var RenderType = {\n  IMAGE: 'image',\n  VECTOR: 'vector'\n};\n/**\n * @enum {string}\n * @private\n */\n\nvar Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\n\nvar VectorLayer = function (Layer) {\n  function VectorLayer(opt_options) {\n    var options = opt_options ? opt_options :\n    /** @type {module:ol/layer/Vector~Options} */\n    {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    Layer.call(this, baseOptions);\n    /**\n    * @private\n    * @type {boolean}\n    */\n\n    this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n    /**\n    * @type {number}\n    * @private\n    */\n\n    this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n    /**\n    * User provided style.\n    * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\n    * @private\n    */\n\n    this.style_ = null;\n    /**\n    * Style function for use within the library.\n    * @type {module:ol/style/Style~StyleFunction|undefined}\n    * @private\n    */\n\n    this.styleFunction_ = undefined;\n    this.setStyle(options.style);\n    /**\n    * @type {boolean}\n    * @private\n    */\n\n    this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n    /**\n    * @type {boolean}\n    * @private\n    */\n\n    this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n    /**\n    * @private\n    * @type {module:ol/layer/VectorTileRenderType|string}\n    */\n\n    this.renderMode_ = options.renderMode || VectorRenderType.VECTOR;\n    /**\n    * The layer type.\n    * @protected\n    * @type {module:ol/LayerType}\n    */\n\n    this.type = LayerType.VECTOR;\n  }\n\n  if (Layer) VectorLayer.__proto__ = Layer;\n  VectorLayer.prototype = Object.create(Layer && Layer.prototype);\n  VectorLayer.prototype.constructor = VectorLayer;\n  /**\n  * @return {boolean} Declutter.\n  */\n\n  VectorLayer.prototype.getDeclutter = function getDeclutter() {\n    return this.declutter_;\n  };\n  /**\n  * @param {boolean} declutter Declutter.\n  */\n\n\n  VectorLayer.prototype.setDeclutter = function setDeclutter(declutter) {\n    this.declutter_ = declutter;\n  };\n  /**\n  * @return {number|undefined} Render buffer.\n  */\n\n\n  VectorLayer.prototype.getRenderBuffer = function getRenderBuffer() {\n    return this.renderBuffer_;\n  };\n  /**\n  * @return {function(module:ol/Feature, module:ol/Feature): number|null|undefined} Render\n  *     order.\n  */\n\n\n  VectorLayer.prototype.getRenderOrder = function getRenderOrder() {\n    return (\n      /** @type {module:ol/render~OrderFunction|null|undefined} */\n      this.get(Property.RENDER_ORDER)\n    );\n  };\n  /**\n  * Get the style for features.  This returns whatever was passed to the `style`\n  * option at construction or to the `setStyle` method.\n  * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\n  *     Layer style.\n  * @api\n  */\n\n\n  VectorLayer.prototype.getStyle = function getStyle() {\n    return this.style_;\n  };\n  /**\n  * Get the style function.\n  * @return {module:ol/style/Style~StyleFunction|undefined} Layer style function.\n  * @api\n  */\n\n\n  VectorLayer.prototype.getStyleFunction = function getStyleFunction() {\n    return this.styleFunction_;\n  };\n  /**\n  * @return {boolean} Whether the rendered layer should be updated while\n  *     animating.\n  */\n\n\n  VectorLayer.prototype.getUpdateWhileAnimating = function getUpdateWhileAnimating() {\n    return this.updateWhileAnimating_;\n  };\n  /**\n  * @return {boolean} Whether the rendered layer should be updated while\n  *     interacting.\n  */\n\n\n  VectorLayer.prototype.getUpdateWhileInteracting = function getUpdateWhileInteracting() {\n    return this.updateWhileInteracting_;\n  };\n  /**\n  * @param {module:ol/render~OrderFunction|null|undefined} renderOrder\n  *     Render order.\n  */\n\n\n  VectorLayer.prototype.setRenderOrder = function setRenderOrder(renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  };\n  /**\n  * Set the style for features.  This can be a single style object, an array\n  * of styles, or a function that takes a feature and resolution and returns\n  * an array of styles. If it is `undefined` the default style is used. If\n  * it is `null` the layer has no style (a `null` style), so only features\n  * that have their own styles will be rendered in the layer. See\n  * {@link module:ol/style} for information on the default style.\n  * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction|null|undefined}\n  *     style Layer style.\n  * @api\n  */\n\n\n  VectorLayer.prototype.setStyle = function setStyle(style) {\n    this.style_ = style !== undefined ? style : createDefaultStyle;\n    this.styleFunction_ = style === null ? undefined : toStyleFunction(this.style_);\n    this.changed();\n  };\n  /**\n  * @return {module:ol/layer/VectorRenderType|string} The render mode.\n  */\n\n\n  VectorLayer.prototype.getRenderMode = function getRenderMode() {\n    return this.renderMode_;\n  };\n\n  return VectorLayer;\n}(Layer);\n/**\n * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.\n * @function\n * @return {module:ol/source/Vector} Source.\n * @api\n */\n\n\nVectorLayer.prototype.getSource;\nexport default VectorLayer; //# sourceMappingURL=Vector.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/layer/Vector.js"],"names":["LayerType","Layer","VectorRenderType","assign","createDefaultStyle","toFunction","toStyleFunction","RenderType","IMAGE","VECTOR","Property","RENDER_ORDER","VectorLayer","opt_options","options","baseOptions","style","renderBuffer","updateWhileAnimating","updateWhileInteracting","call","declutter_","declutter","undefined","renderBuffer_","style_","styleFunction_","setStyle","updateWhileAnimating_","updateWhileInteracting_","renderMode_","renderMode","type","__proto__","prototype","Object","create","constructor","getDeclutter","setDeclutter","getRenderBuffer","getRenderOrder","get","getStyle","getStyleFunction","getUpdateWhileAnimating","getUpdateWhileInteracting","setRenderOrder","renderOrder","set","changed","getRenderMode","getSource"],"mappings":"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","sourcesContent":["/**\n * @module ol/layer/Vector\n */\nimport LayerType from '../LayerType.js';\nimport Layer from '../layer/Layer.js';\nimport VectorRenderType from '../layer/VectorRenderType.js';\nimport {assign} from '../obj.js';\nimport {createDefaultStyle, toFunction as toStyleFunction} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {module:ol/render~OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {module:ol/layer/VectorRenderType|string} [renderMode='vector'] Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and\n *    texts are always rotated with the view and pixels are scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during\n *    animations, but slower performance.\n * @property {module:ol/source/Vector} [source] Source.\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles, and the priority is defined by the z-index of the style. Lower z-index\n * means higher priority.\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style] Layer style. See\n * {@link module:ol/style} for default style which will be used if this is not defined.\n * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`\n * is `vector`, feature batches will be recreated during animations. This means that no\n * vectors will be shown clipped, but the setting will have a performance impact for large\n * amounts of vector data. When set to `false`, batches will be recreated when no animation\n * is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`\n * is `vector`, feature batches will be recreated during interactions. See also\n * `updateWhileAnimating`.\n */\n\n\n/**\n * @enum {string}\n * Render mode for vector layers:\n *  * `'image'`: Vector layers are rendered as images. Great performance, but\n *    point symbols and texts are always rotated with the view and pixels are\n *    scaled during zoom animations.\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering\n *    even during animations, but slower performance.\n * @api\n */\nexport var RenderType = {\n  IMAGE: 'image',\n  VECTOR: 'vector'\n};\n\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\nvar VectorLayer = (function (Layer) {\n  function VectorLayer(opt_options) {\n    var options = opt_options ?\n      opt_options : /** @type {module:ol/layer/Vector~Options} */ ({});\n\n    var baseOptions = assign({}, options);\n\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    Layer.call(this, baseOptions);\n\n    /**\n    * @private\n    * @type {boolean}\n    */\n    this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n\n    /**\n    * @type {number}\n    * @private\n    */\n    this.renderBuffer_ = options.renderBuffer !== undefined ?\n      options.renderBuffer : 100;\n\n    /**\n    * User provided style.\n    * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\n    * @private\n    */\n    this.style_ = null;\n\n    /**\n    * Style function for use within the library.\n    * @type {module:ol/style/Style~StyleFunction|undefined}\n    * @private\n    */\n    this.styleFunction_ = undefined;\n\n    this.setStyle(options.style);\n\n    /**\n    * @type {boolean}\n    * @private\n    */\n    this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?\n      options.updateWhileAnimating : false;\n\n    /**\n    * @type {boolean}\n    * @private\n    */\n    this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?\n      options.updateWhileInteracting : false;\n\n    /**\n    * @private\n    * @type {module:ol/layer/VectorTileRenderType|string}\n    */\n    this.renderMode_ = options.renderMode || VectorRenderType.VECTOR;\n\n    /**\n    * The layer type.\n    * @protected\n    * @type {module:ol/LayerType}\n    */\n    this.type = LayerType.VECTOR;\n\n  }\n\n  if ( Layer ) VectorLayer.__proto__ = Layer;\n  VectorLayer.prototype = Object.create( Layer && Layer.prototype );\n  VectorLayer.prototype.constructor = VectorLayer;\n\n  /**\n  * @return {boolean} Declutter.\n  */\n  VectorLayer.prototype.getDeclutter = function getDeclutter () {\n    return this.declutter_;\n  };\n\n  /**\n  * @param {boolean} declutter Declutter.\n  */\n  VectorLayer.prototype.setDeclutter = function setDeclutter (declutter) {\n    this.declutter_ = declutter;\n  };\n\n  /**\n  * @return {number|undefined} Render buffer.\n  */\n  VectorLayer.prototype.getRenderBuffer = function getRenderBuffer () {\n    return this.renderBuffer_;\n  };\n\n  /**\n  * @return {function(module:ol/Feature, module:ol/Feature): number|null|undefined} Render\n  *     order.\n  */\n  VectorLayer.prototype.getRenderOrder = function getRenderOrder () {\n    return (\n    /** @type {module:ol/render~OrderFunction|null|undefined} */ (this.get(Property.RENDER_ORDER))\n    );\n  };\n\n  /**\n  * Get the style for features.  This returns whatever was passed to the `style`\n  * option at construction or to the `setStyle` method.\n  * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\n  *     Layer style.\n  * @api\n  */\n  VectorLayer.prototype.getStyle = function getStyle () {\n    return this.style_;\n  };\n\n  /**\n  * Get the style function.\n  * @return {module:ol/style/Style~StyleFunction|undefined} Layer style function.\n  * @api\n  */\n  VectorLayer.prototype.getStyleFunction = function getStyleFunction () {\n    return this.styleFunction_;\n  };\n\n  /**\n  * @return {boolean} Whether the rendered layer should be updated while\n  *     animating.\n  */\n  VectorLayer.prototype.getUpdateWhileAnimating = function getUpdateWhileAnimating () {\n    return this.updateWhileAnimating_;\n  };\n\n  /**\n  * @return {boolean} Whether the rendered layer should be updated while\n  *     interacting.\n  */\n  VectorLayer.prototype.getUpdateWhileInteracting = function getUpdateWhileInteracting () {\n    return this.updateWhileInteracting_;\n  };\n\n  /**\n  * @param {module:ol/render~OrderFunction|null|undefined} renderOrder\n  *     Render order.\n  */\n  VectorLayer.prototype.setRenderOrder = function setRenderOrder (renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  };\n\n  /**\n  * Set the style for features.  This can be a single style object, an array\n  * of styles, or a function that takes a feature and resolution and returns\n  * an array of styles. If it is `undefined` the default style is used. If\n  * it is `null` the layer has no style (a `null` style), so only features\n  * that have their own styles will be rendered in the layer. See\n  * {@link module:ol/style} for information on the default style.\n  * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction|null|undefined}\n  *     style Layer style.\n  * @api\n  */\n  VectorLayer.prototype.setStyle = function setStyle (style) {\n    this.style_ = style !== undefined ? style : createDefaultStyle;\n    this.styleFunction_ = style === null ?\n      undefined : toStyleFunction(this.style_);\n    this.changed();\n  };\n\n  /**\n  * @return {module:ol/layer/VectorRenderType|string} The render mode.\n  */\n  VectorLayer.prototype.getRenderMode = function getRenderMode () {\n    return this.renderMode_;\n  };\n\n  return VectorLayer;\n}(Layer));\n\n\n/**\n * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.\n * @function\n * @return {module:ol/source/Vector} Source.\n * @api\n */\nVectorLayer.prototype.getSource;\n\n\nexport default VectorLayer;\n\n//# sourceMappingURL=Vector.js.map"]},"metadata":{},"sourceType":"module"}
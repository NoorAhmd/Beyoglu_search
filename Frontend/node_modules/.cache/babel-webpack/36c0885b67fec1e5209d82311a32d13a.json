{"ast":null,"code":"import _classCallCheck from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/ankamap/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar MutationObserverFactory = /*#__PURE__*/function () {\n  function MutationObserverFactory() {\n    _classCallCheck(this, MutationObserverFactory);\n  }\n\n  _createClass(MutationObserverFactory, [{\n    key: \"create\",\n    value:\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function create(callback) {\n      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n  }]);\n\n  return MutationObserverFactory;\n}();\n\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\n\nMutationObserverFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MutationObserverFactory,\n  factory: MutationObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMutationObserverFactory.ngInjectableDef = defineInjectable({\n  factory: function MutationObserverFactory_Factory() {\n    return new MutationObserverFactory();\n  },\n  token: MutationObserverFactory,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\n\n\nvar ContentObserver = /*#__PURE__*/function () {\n  /**\n   * @param {?} _mutationObserverFactory\n   */\n  function ContentObserver(_mutationObserverFactory) {\n    _classCallCheck(this, ContentObserver);\n\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /**\n     * Keeps track of the existing MutationObservers so they can be reused.\n     */\n\n    this._observedElements = new Map();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ContentObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this = this;\n\n      this._observedElements.forEach(function (_, element) {\n        return _this._cleanupObserver(element);\n      });\n    }\n    /**\n     * Observe content changes on an element.\n     * @param {?} element The element to observe for content changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(element) {\n      var _this2 = this;\n\n      return Observable.create(function (observer) {\n        var\n        /** @type {?} */\n        stream = _this2._observeElement(element);\n\n        var\n        /** @type {?} */\n        subscription = stream.subscribe(observer);\n        return function () {\n          subscription.unsubscribe();\n\n          _this2._unobserveElement(element);\n        };\n      });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_observeElement\",\n    value: function _observeElement(element) {\n      if (!this._observedElements.has(element)) {\n        var\n        /** @type {?} */\n        stream = new Subject();\n\n        var\n        /** @type {?} */\n        observer = this._mutationObserverFactory.create(function (mutations) {\n          return stream.next(mutations);\n        });\n\n        if (observer) {\n          observer.observe(element, {\n            characterData: true,\n            childList: true,\n            subtree: true\n          });\n        }\n\n        this._observedElements.set(element, {\n          observer: observer,\n          stream: stream,\n          count: 1\n        });\n      } else {\n        /** @type {?} */\n        this._observedElements.get(element).count++;\n      }\n\n      return (\n        /** @type {?} */\n        this._observedElements.get(element).stream\n      );\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unobserveElement\",\n    value: function _unobserveElement(element) {\n      if (this._observedElements.has(element)) {\n        /** @type {?} */\n        this._observedElements.get(element).count--;\n\n        if (!\n        /** @type {?} */\n        this._observedElements.get(element).count) {\n          this._cleanupObserver(element);\n        }\n      }\n    }\n    /**\n     * Clean up the underlying MutationObserver for the specified element.\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cleanupObserver\",\n    value: function _cleanupObserver(element) {\n      if (this._observedElements.has(element)) {\n        var _this$_observedElemen =\n        /** @type {?} */\n        this._observedElements.get(element),\n            observer = _this$_observedElemen.observer,\n            stream = _this$_observedElemen.stream;\n\n        if (observer) {\n          observer.disconnect();\n        }\n\n        stream.complete();\n\n        this._observedElements.delete(element);\n      }\n    }\n  }]);\n\n  return ContentObserver;\n}();\n\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n};\n\nContentObserver.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: ContentObserver,\n  factory: ContentObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nContentObserver.ctorParameters = function () {\n  return [{\n    type: MutationObserverFactory\n  }];\n};\n/** @nocollapse */\n\n\nContentObserver.ngInjectableDef = defineInjectable({\n  factory: function ContentObserver_Factory() {\n    return new ContentObserver(inject(MutationObserverFactory));\n  },\n  token: ContentObserver,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n\n\nvar CdkObserveContent = /*#__PURE__*/function () {\n  /**\n   * @param {?} _contentObserver\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n    _classCallCheck(this, CdkObserveContent);\n\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * Event emitted for each change in the element's content.\n     */\n\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   * @return {?}\n   */\n\n\n  _createClass(CdkObserveContent, [{\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this._disabled) {\n        this._unsubscribe();\n      } else {\n        this._subscribe();\n      }\n    }\n    /**\n     * Debounce interval for emitting the changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"debounce\",\n    get: function get() {\n      return this._debounce;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._debounce = coerceNumberProperty(value);\n\n      this._subscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe() {\n      var _this3 = this;\n\n      this._unsubscribe();\n\n      var\n      /** @type {?} */\n      stream = this._contentObserver.observe(this._elementRef.nativeElement); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n      // Consider brining it back inside the zone next time we're making breaking changes.\n      // Bringing it back inside can cause things like infinite change detection loops and changed\n      // after checked errors if people's code isn't handling it properly.\n\n\n      this._ngZone.runOutsideAngular(function () {\n        _this3._currentSubscription = (_this3.debounce ? stream.pipe(debounceTime(_this3.debounce)) : stream).subscribe(_this3.event);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      if (this._currentSubscription) {\n        this._currentSubscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkObserveContent;\n}();\n\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n  return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkObserveContent,\n  selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n  inputs: {\n    disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n    debounce: \"debounce\"\n  },\n  outputs: {\n    event: \"cdkObserveContent\"\n  },\n  exportAs: [\"cdkObserveContent\"]\n});\n/** @nocollapse */\n\nCdkObserveContent.ctorParameters = function () {\n  return [{\n    type: ContentObserver\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkObserveContent.propDecorators = {\n  \"event\": [{\n    type: Output,\n    args: ['cdkObserveContent']\n  }],\n  \"disabled\": [{\n    type: Input,\n    args: ['cdkObserveContentDisabled']\n  }],\n  \"debounce\": [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ObserversModule = function ObserversModule() {\n  _classCallCheck(this, ObserversModule);\n};\n\nObserversModule.ɵfac = function ObserversModule_Factory(t) {\n  return new (t || ObserversModule)();\n};\n\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ObserversModule\n});\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MutationObserverFactory]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule }; //# sourceMappingURL=observers.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/observers.js"],"names":["coerceBooleanProperty","coerceNumberProperty","Directive","ElementRef","EventEmitter","Injectable","Input","NgModule","NgZone","Output","defineInjectable","inject","Observable","Subject","debounceTime","ɵngcc0","MutationObserverFactory","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngInjectableDef","ngDevMode","ɵsetClassMetadata","type","args","ContentObserver","_mutationObserverFactory","_observedElements","Map","forEach","_","element","_cleanupObserver","create","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","mutations","next","observe","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","ctorParameters","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","_disabled","_currentSubscription","value","_unsubscribe","_subscribe","_debounce","disabled","nativeElement","runOutsideAngular","debounce","pipe","CdkObserveContent_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","propDecorators","selector","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MutationObserverFactory {\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n}\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\nMutationObserverFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MutationObserverFactory, factory: MutationObserverFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */ MutationObserverFactory.ngInjectableDef = defineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\nclass ContentObserver {\n    /**\n     * @param {?} _mutationObserverFactory\n     */\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /**\n         * Keeps track of the existing MutationObservers so they can be reused.\n         */\n        this._observedElements = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    /**\n     * Observe content changes on an element.\n     * @param {?} element The element to observe for content changes.\n     * @return {?}\n     */\n    observe(element) {\n        return Observable.create(observer => {\n            const /** @type {?} */ stream = this._observeElement(element);\n            const /** @type {?} */ subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     * @param {?} element\n     * @return {?}\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            const /** @type {?} */ stream = new Subject();\n            const /** @type {?} */ observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            /** @type {?} */ ((this._observedElements.get(element))).count++;\n        }\n        return /** @type {?} */ ((this._observedElements.get(element))).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     * @param {?} element\n     * @return {?}\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            /** @type {?} */ ((this._observedElements.get(element))).count--;\n            if (!/** @type {?} */ ((this._observedElements.get(element))).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /**\n     * Clean up the underlying MutationObserver for the specified element.\n     * @param {?} element\n     * @return {?}\n     */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = /** @type {?} */ ((this._observedElements.get(element)));\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n}\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\nContentObserver.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ContentObserver, factory: ContentObserver.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nContentObserver.ctorParameters = () => [\n    { type: MutationObserverFactory, },\n];\n/** @nocollapse */ ContentObserver.ngInjectableDef = defineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(inject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    /**\n     * @param {?} _contentObserver\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Event emitted for each change in the element's content.\n         */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._disabled) {\n            this._unsubscribe();\n        }\n        else {\n            this._subscribe();\n        }\n    }\n    /**\n     * Debounce interval for emitting the changes.\n     * @return {?}\n     */\n    get debounce() { return this._debounce; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    _subscribe() {\n        this._unsubscribe();\n        const /** @type {?} */ stream = this._contentObserver.observe(this._elementRef.nativeElement);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription =\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _unsubscribe() {\n        if (this._currentSubscription) {\n            this._currentSubscription.unsubscribe();\n        }\n    }\n}\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\n/** @nocollapse */\nCdkObserveContent.ctorParameters = () => [\n    { type: ContentObserver, },\n    { type: ElementRef, },\n    { type: NgZone, },\n];\nCdkObserveContent.propDecorators = {\n    \"event\": [{ type: Output, args: ['cdkObserveContent',] },],\n    \"disabled\": [{ type: Input, args: ['cdkObserveContentDisabled',] },],\n    \"debounce\": [{ type: Input },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkObserveContent]',\n                exportAs: 'cdkObserveContent'\n            }]\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\n            type: Output,\n            args: ['cdkObserveContent']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkObserveContentDisabled']\n        }], debounce: [{\n            type: Input\n        }] }); })();\nclass ObserversModule {\n}\nObserversModule.ɵfac = function ObserversModule_Factory(t) { return new (t || ObserversModule)(); };\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MutationObserverFactory] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkObserveContent],\n                declarations: [CdkObserveContent],\n                providers: [MutationObserverFactory]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule };\n\n//# sourceMappingURL=observers.js.map"]},"metadata":{},"sourceType":"module"}
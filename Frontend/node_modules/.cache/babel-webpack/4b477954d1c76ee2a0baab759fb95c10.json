{"ast":null,"code":"import _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\nvar _c0 = [\"thumbContainer\"];\nvar _c1 = [\"toggleBar\"];\nvar _c2 = [\"input\"];\n\nvar _c3 = function _c3() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c4 = [\"*\"];\nvar\n/** @type {?} */\nMAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: function factory() {\n    return {\n      disableToggleValue: false,\n      disableDragValue: false\n    };\n  }\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n\nvar\n/** @type {?} */\nnextUniqueId = 0;\nvar\n/** @type {?} */\nMAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSlideToggle;\n  }),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\n\nvar MatSlideToggleChange =\n/**\n * @param {?} source\n * @param {?} checked\n */\nfunction MatSlideToggleChange(source, checked) {\n  _classCallCheck(this, MatSlideToggleChange);\n\n  this.source = source;\n  this.checked = checked;\n};\n/**\n * \\@docs-private\n */\n\n\nvar MatSlideToggleBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatSlideToggleBase(_elementRef) {\n  _classCallCheck(this, MatSlideToggleBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar\n/** @type {?} */\n_MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\n\n\nvar MatSlideToggle = /*#__PURE__*/function (_MatSlideToggleMixinB) {\n  _inherits(MatSlideToggle, _MatSlideToggleMixinB);\n\n  var _super = _createSuper(MatSlideToggle);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _platform\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} tabIndex\n   * @param {?} _ngZone\n   * @param {?} defaults\n   * @param {?=} _animationMode\n   * @param {?=} _dir\n   */\n  function MatSlideToggle(elementRef,\n  /**\n  * @deprecated The `_platform` parameter to be removed.\n  * @breaking-change 7.0.0\n  */\n\n  /**\n   * @deprecated The `_platform` parameter to be removed.\n   * @breaking-change 7.0.0\n   */\n  _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n    var _this;\n\n    _classCallCheck(this, MatSlideToggle);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._ngZone = _ngZone;\n    _this.defaults = defaults;\n    _this._animationMode = _animationMode;\n    _this._dir = _dir;\n\n    _this.onChange = function (_) {};\n\n    _this.onTouched = function () {};\n\n    _this._uniqueId = \"mat-slide-toggle-\".concat(++nextUniqueId);\n    _this._required = false;\n    _this._checked = false;\n    /**\n     * Whether the thumb is currently being dragged.\n     */\n\n    _this._dragging = false;\n    /**\n     * Name value will be applied to the input element if present\n     */\n\n    _this.name = null;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     */\n\n    _this.id = _this._uniqueId;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n     */\n\n    _this.labelPosition = 'after';\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     */\n\n    _this.ariaLabel = null;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     */\n\n    _this.ariaLabelledby = null;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     */\n\n    _this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n     * value is changed. The event does not fire when user drag to change the slide toggle value.\n     */\n\n    _this.toggleChange = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n     * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n     * the slide toggle to change the slide toggle's value.\n     */\n\n    _this.dragChange = new EventEmitter();\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /**\n   * Whether the slide-toggle is required.\n   * @return {?}\n   */\n\n\n  _createClass(MatSlideToggle, [{\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the slide-toggle element is checked or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._checked = coerceBooleanProperty(value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._inputElement.nativeElement).subscribe(function (focusOrigin) {\n        return _this2._onInputFocusChange(focusOrigin);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onChangeEvent\",\n    value: function _onChangeEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the component's `change` output.\n      event.stopPropagation();\n\n      if (!this._dragging) {\n        this.toggleChange.emit();\n      } // Releasing the pointer over the `<label>` element while dragging triggers another\n      // click event on the `<label>` element. This means that the checked state of the underlying\n      // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n      // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n      // does not change, and the checked state of the underlying input needs to be changed back.\n\n\n      if (this._dragging || this.defaults.disableToggleValue) {\n        this._inputElement.nativeElement.checked = this.checked;\n        return;\n      } // Sync the value from the underlying input element with the component instance.\n\n\n      this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n      // there is no change event, when the checked state changes programmatically.\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `slide-toggle` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n      this.onChange(this.checked);\n    }\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputFocusChange\",\n    value: function _onInputFocusChange(focusOrigin) {\n      var _this3 = this;\n\n      // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n      if (!this._focusRipple && focusOrigin === 'keyboard') {\n        // For keyboard focus show a persistent ripple as focus indicator.\n        this._focusRipple = this._ripple.launch(0, 0, {\n          persistent: true\n        });\n      } else if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n        // the form control it has been touched until the next tick.\n        Promise.resolve().then(function () {\n          return _this3.onTouched();\n        }); // Fade out and clear the focus ripple if one is currently present.\n\n        if (this._focusRipple) {\n          this._focusRipple.fadeOut();\n\n          this._focusRipple = null;\n        }\n      }\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this.onChange(this.checked);\n      this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDragPercentage\",\n    value: function _getDragPercentage(distance) {\n      var\n      /** @type {?} */\n      percentage = distance / this._thumbBarWidth * 100; // When the toggle was initially checked, then we have to start the drag at the end.\n\n      if (this._previousChecked) {\n        percentage += 100;\n      }\n\n      return Math.max(0, Math.min(percentage, 100));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onDragStart\",\n    value: function _onDragStart() {\n      if (!this.disabled && !this._dragging) {\n        var\n        /** @type {?} */\n        thumbEl = this._thumbEl.nativeElement;\n        this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n        thumbEl.classList.add('mat-dragging');\n        this._previousChecked = this.checked;\n        this._dragging = true;\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onDrag\",\n    value: function _onDrag(event) {\n      if (this._dragging) {\n        var\n        /** @type {?} */\n        direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n        this._dragPercentage = this._getDragPercentage(event.deltaX * direction); // Calculate the moved distance based on the thumb bar width.\n\n        var\n        /** @type {?} */\n        dragX = this._dragPercentage / 100 * this._thumbBarWidth * direction;\n        this._thumbEl.nativeElement.style.transform = \"translate3d(\".concat(dragX, \"px, 0, 0)\");\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onDragEnd\",\n    value: function _onDragEnd() {\n      var _this4 = this;\n\n      if (this._dragging) {\n        var\n        /** @type {?} */\n        newCheckedValue = this._dragPercentage > 50;\n\n        if (newCheckedValue !== this.checked) {\n          this.dragChange.emit();\n\n          if (!this.defaults.disableDragValue) {\n            this.checked = newCheckedValue;\n\n            this._emitChangeEvent();\n          }\n        } // The drag should be stopped outside of the current event handler, otherwise the\n        // click event will be fired before it and will revert the drag change.\n\n\n        this._ngZone.runOutsideAngular(function () {\n          return setTimeout(function () {\n            if (_this4._dragging) {\n              _this4._dragging = false;\n\n              _this4._thumbEl.nativeElement.classList.remove('mat-dragging'); // Reset the transform because the component will take care\n              // of the thumb position after drag.\n\n\n              _this4._thumbEl.nativeElement.style.transform = '';\n            }\n          });\n        });\n      }\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // This method is getting called whenever the label of the slide-toggle changes.\n      // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n      // that has been recognized by the cdkObserveContent directive.\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatSlideToggle;\n}(_MatSlideToggleMixinBase);\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n      ɵngcc0.ɵɵviewQuery(_c1, 1);\n      ɵngcc0.ɵɵviewQuery(_c2, 1);\n      ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 9,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\",\n    dragChange: \"dragChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 13,\n  vars: 16,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() {\n        return ctx._onDragStart();\n      })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) {\n        return ctx._onDrag($event);\n      })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() {\n        return ctx._onDragEnd();\n      });\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelement(9, \"div\", 9);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(10, \"span\", 10, 11);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_10_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵprojection(12);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      var _r4 = ɵngcc0.ɵɵreference(11);\n\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 23)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(15, _c3));\n    }\n  },\n  directives: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle-ripple{position:absolute;top:calc(50% - 23px);left:calc(50% - 23px);height:46px;width:46px;z-index:1;pointer-events:none}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSlideToggle.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatSlideToggle.propDecorators = {\n  \"_thumbEl\": [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  \"_thumbBarEl\": [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  \"name\": [{\n    type: Input\n  }],\n  \"id\": [{\n    type: Input\n  }],\n  \"labelPosition\": [{\n    type: Input\n  }],\n  \"ariaLabel\": [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  \"ariaLabelledby\": [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  \"required\": [{\n    type: Input\n  }],\n  \"checked\": [{\n    type: Input\n  }],\n  \"change\": [{\n    type: Output\n  }],\n  \"toggleChange\": [{\n    type: Output\n  }],\n  \"dragChange\": [{\n    type: Output\n  }],\n  \"_inputElement\": [{\n    type: ViewChild,\n    args: ['input']\n  }],\n  \"_ripple\": [{\n    type: ViewChild,\n    args: [MatRipple]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"23\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><ng-content></ng-content></span></label>\",\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle-ripple{position:absolute;top:calc(50% - 23px);left:calc(50% - 23px);height:46px;width:46px;z-index:1;pointer-events:none}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc2.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    dragChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    _ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatSlideToggleModule = function MatSlideToggleModule() {\n  _classCallCheck(this, MatSlideToggleModule);\n};\n\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\n\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [[MatRippleModule, MatCommonModule, ObserversModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function declarations() {\n      return [MatSlideToggle];\n    },\n    imports: function imports() {\n      return [MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle],\n      providers: [{\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS }; //# sourceMappingURL=slide-toggle.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/slide-toggle.js"],"names":["InjectionToken","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ElementRef","EventEmitter","forwardRef","Input","Output","ViewChild","ViewEncapsulation","NgZone","Optional","Inject","NgModule","FocusMonitor","Directionality","coerceBooleanProperty","Platform","NG_VALUE_ACCESSOR","MatRipple","mixinColor","mixinDisabled","mixinDisableRipple","mixinTabIndex","GestureConfig","MatCommonModule","MatRippleModule","ANIMATION_MODULE_TYPE","ObserversModule","HAMMER_GESTURE_CONFIG","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_platform","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","value","markForCheck","monitor","_inputElement","nativeElement","subscribe","focusOrigin","_onInputFocusChange","stopMonitoring","event","stopPropagation","emit","_emitChangeEvent","fn","isDisabled","disabled","focusVia","_focusRipple","_ripple","launch","persistent","Promise","resolve","then","fadeOut","distance","percentage","_thumbBarWidth","_previousChecked","Math","max","min","thumbEl","_thumbEl","_thumbBarEl","clientWidth","classList","add","direction","_dragPercentage","_getDragPercentage","deltaX","dragX","style","transform","newCheckedValue","runOutsideAngular","setTimeout","remove","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵhostProperty","ɵɵclassProp","inputs","disableRipple","color","required","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatSlideToggle_Template_input_change_4_listener","$event","_onChangeEvent","MatSlideToggle_Template_input_click_4_listener","_onInputClick","ɵɵelementEnd","MatSlideToggle_Template_div_slidestart_6_listener","_onDragStart","MatSlideToggle_Template_div_slide_6_listener","_onDrag","MatSlideToggle_Template_div_slideend_6_listener","_onDragEnd","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_10_listener","_onLabelTextChange","ɵɵprojection","_r0","ɵɵreference","_r4","ɵɵadvance","textContent","trim","ɵɵproperty","inputId","ɵɵattribute","ɵɵpureFunction0","directives","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MatSlideToggleModule","MatSlideToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useClass","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst /** @type {?} */ MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false, disableDragValue: false })\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\nconst /** @type {?} */ MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst /** @type {?} */ _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, /**\n                   * @deprecated The `_platform` parameter to be removed.\n                   * @breaking-change 7.0.0\n                   */\n    /**\n     * @deprecated The `_platform` parameter to be removed.\n     * @breaking-change 7.0.0\n     */\n    _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._dir = _dir;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Whether the thumb is currently being dragged.\n         */\n        this._dragging = false;\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n         * value is changed. The event does not fire when user drag to change the slide toggle value.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n         * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n         * the slide toggle to change the slide toggle's value.\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        if (!this._dragging) {\n            this.toggleChange.emit();\n        }\n        // Releasing the pointer over the `<label>` element while dragging triggers another\n        // click event on the `<label>` element. This means that the checked state of the underlying\n        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n        // does not change, and the checked state of the underlying input needs to be changed back.\n        if (this._dragging || this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this.onChange(this.checked);\n    }\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    _onInputFocusChange(focusOrigin) {\n        // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n        if (!this._focusRipple && focusOrigin === 'keyboard') {\n            // For keyboard focus show a persistent ripple as focus indicator.\n            this._focusRipple = this._ripple.launch(0, 0, { persistent: true });\n        }\n        else if (!focusOrigin) {\n            // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n            // Angular does not expect events to be raised during change detection, so any state change\n            // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n            // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n            // the form control it has been touched until the next tick.\n            Promise.resolve().then(() => this.onTouched());\n            // Fade out and clear the focus ripple if one is currently present.\n            if (this._focusRipple) {\n                this._focusRipple.fadeOut();\n                this._focusRipple = null;\n            }\n        }\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n     * @param {?} distance\n     * @return {?}\n     */\n    _getDragPercentage(distance) {\n        let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n        // When the toggle was initially checked, then we have to start the drag at the end.\n        if (this._previousChecked) {\n            percentage += 100;\n        }\n        return Math.max(0, Math.min(percentage, 100));\n    }\n    /**\n     * @return {?}\n     */\n    _onDragStart() {\n        if (!this.disabled && !this._dragging) {\n            const /** @type {?} */ thumbEl = this._thumbEl.nativeElement;\n            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n            thumbEl.classList.add('mat-dragging');\n            this._previousChecked = this.checked;\n            this._dragging = true;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onDrag(event) {\n        if (this._dragging) {\n            const /** @type {?} */ direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n            // Calculate the moved distance based on the thumb bar width.\n            const /** @type {?} */ dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onDragEnd() {\n        if (this._dragging) {\n            const /** @type {?} */ newCheckedValue = this._dragPercentage > 50;\n            if (newCheckedValue !== this.checked) {\n                this.dragChange.emit();\n                if (!this.defaults.disableDragValue) {\n                    this.checked = newCheckedValue;\n                    this._emitChangeEvent();\n                }\n            }\n            // The drag should be stopped outside of the current event handler, otherwise the\n            // click event will be fired before it and will revert the drag change.\n            this._ngZone.runOutsideAngular(() => setTimeout(() => {\n                if (this._dragging) {\n                    this._dragging = false;\n                    this._thumbEl.nativeElement.classList.remove('mat-dragging');\n                    // Reset the transform because the component will take care\n                    // of the thumb position after drag.\n                    this._thumbEl.nativeElement.style.transform = '';\n                }\n            }));\n        }\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the slide-toggle changes.\n        // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(_c2, 1);\n        ɵngcc0.ɵɵviewQuery(MatRipple, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 9, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 13, vars: 16, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\", 3, \"slidestart\", \"slide\", \"slideend\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵlistener(\"slidestart\", function MatSlideToggle_Template_div_slidestart_6_listener() { return ctx._onDragStart(); })(\"slide\", function MatSlideToggle_Template_div_slide_6_listener($event) { return ctx._onDrag($event); })(\"slideend\", function MatSlideToggle_Template_div_slideend_6_listener() { return ctx._onDragEnd(); });\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10, 11);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_10_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(11);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 23)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(15, _c3));\n    } }, directives: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle-ripple{position:absolute;top:calc(50% - 23px);left:calc(50% - 23px);height:46px;width:46px;z-index:1;pointer-events:none}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Platform, },\n    { type: FocusMonitor, },\n    { type: ChangeDetectorRef, },\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\n    { type: NgZone, },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] },] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n    { type: Directionality, decorators: [{ type: Optional },] },\n];\nMatSlideToggle.propDecorators = {\n    \"_thumbEl\": [{ type: ViewChild, args: ['thumbContainer',] },],\n    \"_thumbBarEl\": [{ type: ViewChild, args: ['toggleBar',] },],\n    \"name\": [{ type: Input },],\n    \"id\": [{ type: Input },],\n    \"labelPosition\": [{ type: Input },],\n    \"ariaLabel\": [{ type: Input, args: ['aria-label',] },],\n    \"ariaLabelledby\": [{ type: Input, args: ['aria-labelledby',] },],\n    \"required\": [{ type: Input },],\n    \"checked\": [{ type: Input },],\n    \"change\": [{ type: Output },],\n    \"toggleChange\": [{ type: Output },],\n    \"dragChange\": [{ type: Output },],\n    \"_inputElement\": [{ type: ViewChild, args: ['input',] },],\n    \"_ripple\": [{ type: ViewChild, args: [MatRipple,] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"23\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><ng-content></ng-content></span></label>\",\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle-ripple{position:absolute;top:calc(50% - 23px);left:calc(50% - 23px);height:46px;width:46px;z-index:1;pointer-events:none}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}}@media screen and (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], _ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n    ], imports: [[MatRippleModule, MatCommonModule, ObserversModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule]; }, exports: function () { return [MatSlideToggle, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule, ObserversModule],\n                exports: [MatSlideToggle, MatCommonModule],\n                declarations: [MatSlideToggle],\n                providers: [\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS };\n\n//# sourceMappingURL=slide-toggle.js.map"]},"metadata":{},"sourceType":"module"}
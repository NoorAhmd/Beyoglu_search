{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport { getUid } from '../util.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport TileSource, { TileSourceEvent } from '../source/Tile.js';\nimport TileEventType from '../source/TileEventType.js';\nimport { getKeyZXY } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {number} [cacheSize]\n * @property {module:ol/extent~Extent} [extent]\n * @property {boolean} [opaque]\n * @property {module:ol/proj~ProjectionLike} [projection]\n * @property {module:ol/source/State} [state]\n * @property {module:ol/tilegrid/TileGrid} [tileGrid]\n * @property {module:ol/Tile~LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array.<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires module:ol/source/TileEvent\n */\n\nvar UrlTile = function (TileSource) {\n  function UrlTile(options) {\n    TileSource.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      extent: options.extent,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition\n    });\n    /**\n     * @protected\n     * @type {module:ol/Tile~LoadFunction}\n     */\n\n    this.tileLoadFunction = options.tileLoadFunction;\n    /**\n     * @protected\n     * @type {module:ol/Tile~UrlFunction}\n     */\n\n    this.tileUrlFunction = this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : nullTileUrlFunction;\n    /**\n     * @protected\n     * @type {!Array.<string>|null}\n     */\n\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction);\n    }\n    /**\n     * @private\n     * @type {!Object.<number, boolean>}\n     */\n\n\n    this.tileLoadingKeys_ = {};\n  }\n\n  if (TileSource) UrlTile.__proto__ = TileSource;\n  UrlTile.prototype = Object.create(TileSource && TileSource.prototype);\n  UrlTile.prototype.constructor = UrlTile;\n  /**\n   * Return the tile load function of the source.\n   * @return {module:ol/Tile~LoadFunction} TileLoadFunction\n   * @api\n   */\n\n  UrlTile.prototype.getTileLoadFunction = function getTileLoadFunction() {\n    return this.tileLoadFunction;\n  };\n  /**\n   * Return the tile URL function of the source.\n   * @return {module:ol/Tile~UrlFunction} TileUrlFunction\n   * @api\n   */\n\n\n  UrlTile.prototype.getTileUrlFunction = function getTileUrlFunction() {\n    return this.tileUrlFunction;\n  };\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array.<string>|null} URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.getUrls = function getUrls() {\n    return this.urls;\n  };\n  /**\n   * Handle tile change events.\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n\n\n  UrlTile.prototype.handleTileChange = function handleTileChange(event) {\n    var tile =\n    /** @type {module:ol/Tile} */\n    event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED || tileState == TileState.ABORT ? TileEventType.TILELOADEND : undefined;\n    }\n\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n  /**\n   * Set the tile load function of the source.\n   * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileLoadFunction = function setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the tile URL function of the source.\n   * @param {module:ol/Tile~UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} opt_key Optional new tile key for the source.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileUrlFunction = function setTileUrlFunction(tileUrlFunction, opt_key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n\n    if (typeof opt_key !== 'undefined') {\n      this.setKey(opt_key);\n    } else {\n      this.changed();\n    }\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrl = function setUrl(url) {\n    var urls = this.urls = expandUrl(url);\n    this.setTileUrlFunction(this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : createFromTemplates(urls, this.tileGrid), url);\n  };\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array.<string>} urls URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrls = function setUrls(urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    this.setTileUrlFunction(this.fixedTileUrlFunction ? this.fixedTileUrlFunction.bind(this) : createFromTemplates(urls, this.tileGrid), key);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  UrlTile.prototype.useTile = function useTile(z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n\n  return UrlTile;\n}(TileSource);\n/**\n * @type {module:ol/Tile~UrlFunction|undefined}\n * @protected\n */\n\n\nUrlTile.prototype.fixedTileUrlFunction;\nexport default UrlTile; //# sourceMappingURL=UrlTile.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/source/UrlTile.js"],"names":["getUid","TileState","expandUrl","createFromTemplates","nullTileUrlFunction","TileSource","TileSourceEvent","TileEventType","getKeyZXY","UrlTile","options","call","attributions","cacheSize","extent","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","tileLoadFunction","tileUrlFunction","fixedTileUrlFunction","bind","urls","setUrls","url","setUrl","setTileUrlFunction","tileLoadingKeys_","__proto__","prototype","Object","create","constructor","getTileLoadFunction","getTileUrlFunction","getUrls","handleTileChange","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","ABORT","TILELOADEND","undefined","dispatchEvent","setTileLoadFunction","tileCache","clear","changed","opt_key","pruneExceptNewestZ","setKey","key","join","useTile","z","x","y","tileCoordKey","containsKey","get"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport {getUid} from '../util.js';\nimport TileState from '../TileState.js';\nimport {expandUrl, createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport TileSource, {TileSourceEvent} from '../source/Tile.js';\nimport TileEventType from '../source/TileEventType.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/source/Source~AttributionLike} [attributions]\n * @property {number} [cacheSize]\n * @property {module:ol/extent~Extent} [extent]\n * @property {boolean} [opaque]\n * @property {module:ol/proj~ProjectionLike} [projection]\n * @property {module:ol/source/State} [state]\n * @property {module:ol/tilegrid/TileGrid} [tileGrid]\n * @property {module:ol/Tile~LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array.<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires module:ol/source/TileEvent\n */\nvar UrlTile = (function (TileSource) {\n  function UrlTile(options) {\n\n    TileSource.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      extent: options.extent,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition\n    });\n\n    /**\n     * @protected\n     * @type {module:ol/Tile~LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    /**\n     * @protected\n     * @type {module:ol/Tile~UrlFunction}\n     */\n    this.tileUrlFunction = this.fixedTileUrlFunction ?\n      this.fixedTileUrlFunction.bind(this) : nullTileUrlFunction;\n\n    /**\n     * @protected\n     * @type {!Array.<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction);\n    }\n\n    /**\n     * @private\n     * @type {!Object.<number, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n  }\n\n  if ( TileSource ) UrlTile.__proto__ = TileSource;\n  UrlTile.prototype = Object.create( TileSource && TileSource.prototype );\n  UrlTile.prototype.constructor = UrlTile;\n\n  /**\n   * Return the tile load function of the source.\n   * @return {module:ol/Tile~LoadFunction} TileLoadFunction\n   * @api\n   */\n  UrlTile.prototype.getTileLoadFunction = function getTileLoadFunction () {\n    return this.tileLoadFunction;\n  };\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {module:ol/Tile~UrlFunction} TileUrlFunction\n   * @api\n   */\n  UrlTile.prototype.getTileUrlFunction = function getTileUrlFunction () {\n    return this.tileUrlFunction;\n  };\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array.<string>|null} URLs.\n   * @api\n   */\n  UrlTile.prototype.getUrls = function getUrls () {\n    return this.urls;\n  };\n\n  /**\n   * Handle tile change events.\n   * @param {module:ol/events/Event} event Event.\n   * @protected\n   */\n  UrlTile.prototype.handleTileChange = function handleTileChange (event) {\n    var tile = /** @type {module:ol/Tile} */ (event.target);\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :\n        (tileState == TileState.LOADED || tileState == TileState.ABORT) ?\n          TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n\n  /**\n   * Set the tile load function of the source.\n   * @param {module:ol/Tile~LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  UrlTile.prototype.setTileLoadFunction = function setTileLoadFunction (tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {module:ol/Tile~UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} opt_key Optional new tile key for the source.\n   * @api\n   */\n  UrlTile.prototype.setTileUrlFunction = function setTileUrlFunction (tileUrlFunction, opt_key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof opt_key !== 'undefined') {\n      this.setKey(opt_key);\n    } else {\n      this.changed();\n    }\n  };\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  UrlTile.prototype.setUrl = function setUrl (url) {\n    var urls = this.urls = expandUrl(url);\n    this.setTileUrlFunction(this.fixedTileUrlFunction ?\n      this.fixedTileUrlFunction.bind(this) :\n      createFromTemplates(urls, this.tileGrid), url);\n  };\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array.<string>} urls URLs.\n   * @api\n   */\n  UrlTile.prototype.setUrls = function setUrls (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    this.setTileUrlFunction(this.fixedTileUrlFunction ?\n      this.fixedTileUrlFunction.bind(this) :\n      createFromTemplates(urls, this.tileGrid), key);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  UrlTile.prototype.useTile = function useTile (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n\n  return UrlTile;\n}(TileSource));\n\n\n/**\n * @type {module:ol/Tile~UrlFunction|undefined}\n * @protected\n */\nUrlTile.prototype.fixedTileUrlFunction;\n\nexport default UrlTile;\n\n//# sourceMappingURL=UrlTile.js.map"]},"metadata":{},"sourceType":"module"}
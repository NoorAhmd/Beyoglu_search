{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport { getUid } from '../../util.js';\nimport LayerType from '../../LayerType.js';\nimport TileState from '../../TileState.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { listen, unlisten } from '../../events.js';\nimport EventType from '../../events/EventType.js';\nimport rbush from 'rbush';\nimport { buffer, containsCoordinate, equals, getIntersection, getTopLeft, intersects } from '../../extent.js';\nimport VectorTileRenderType from '../../layer/VectorTileRenderType.js';\nimport { equivalent as equivalentProjection } from '../../proj.js';\nimport Units from '../../proj/Units.js';\nimport ReplayType from '../../render/ReplayType.js';\nimport { labelCache, rotateAtOffset } from '../../render/canvas.js';\nimport CanvasReplayGroup, { replayDeclutter } from '../../render/canvas/ReplayGroup.js';\nimport { ORDER } from '../../render/replay.js';\nimport CanvasTileLayerRenderer from '../canvas/TileLayer.js';\nimport { getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { create as createTransform, compose as composeTransform, reset as resetTransform, scale as scaleTransform, translate as translateTransform } from '../../transform.js';\n/**\n * @type {!Object.<string, Array.<module:ol/render/ReplayType>>}\n */\n\nvar IMAGE_REPLAYS = {\n  'image': [ReplayType.POLYGON, ReplayType.CIRCLE, ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],\n  'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING]\n};\n/**\n * @type {!Object.<string, Array.<module:ol/render/ReplayType>>}\n */\n\nvar VECTOR_REPLAYS = {\n  'image': [ReplayType.DEFAULT],\n  'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT],\n  'vector': ORDER\n};\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n */\n\nvar CanvasVectorTileLayerRenderer = function (CanvasTileLayerRenderer) {\n  function CanvasVectorTileLayerRenderer(layer) {\n    CanvasTileLayerRenderer.call(this, layer, true);\n    /**\n     * Declutter tree.\n     * @private\n     */\n\n    this.declutterTree_ = layer.getDeclutter() ? rbush(9, undefined) : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.dirty_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedLayerRevision_;\n    /**\n     * @private\n     * @type {module:ol/transform~Transform}\n     */\n\n    this.tmpTransform_ = createTransform(); // Use lower resolution for pure vector rendering. Closest resolution otherwise.\n\n    this.zDirection = layer.getRenderMode() == VectorTileRenderType.VECTOR ? 1 : 0;\n    listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n  }\n\n  if (CanvasTileLayerRenderer) CanvasVectorTileLayerRenderer.__proto__ = CanvasTileLayerRenderer;\n  CanvasVectorTileLayerRenderer.prototype = Object.create(CanvasTileLayerRenderer && CanvasTileLayerRenderer.prototype);\n  CanvasVectorTileLayerRenderer.prototype.constructor = CanvasVectorTileLayerRenderer;\n  /**\n   * @inheritDoc\n   */\n\n  CanvasVectorTileLayerRenderer.prototype.disposeInternal = function disposeInternal() {\n    unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n    CanvasTileLayerRenderer.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.getTile = function getTile(z, x, y, pixelRatio, projection) {\n    var tile = CanvasTileLayerRenderer.prototype.getTile.call(this, z, x, y, pixelRatio, projection);\n\n    if (tile.getState() === TileState.LOADED) {\n      this.createReplayGroup_(tile, pixelRatio, projection);\n\n      if (this.context) {\n        this.renderTileImage_(tile, pixelRatio, projection);\n      }\n    }\n\n    return tile;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.prepareFrame = function prepareFrame(frameState, layerState) {\n    var layer = this.getLayer();\n    var layerRevision = layer.getRevision();\n\n    if (this.renderedLayerRevision_ != layerRevision) {\n      this.renderedTiles.length = 0;\n      var renderMode = layer.getRenderMode();\n\n      if (!this.context && renderMode != VectorTileRenderType.VECTOR) {\n        this.context = createCanvasContext2D();\n      }\n\n      if (this.context && renderMode == VectorTileRenderType.VECTOR) {\n        this.context = null;\n      }\n    }\n\n    this.renderedLayerRevision_ = layerRevision;\n    return CanvasTileLayerRenderer.prototype.prepareFrame.apply(this, arguments);\n  };\n  /**\n   * @param {module:ol/VectorImageTile} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @private\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.createReplayGroup_ = function createReplayGroup_(tile, pixelRatio, projection) {\n    var this$1 = this;\n    var layer = this.getLayer();\n    var revision = layer.getRevision();\n    var renderOrder =\n    /** @type {module:ol/render~OrderFunction} */\n    layer.getRenderOrder() || null;\n    var replayState = tile.getReplayState(layer);\n\n    if (!replayState.dirty && replayState.renderedRevision == revision && replayState.renderedRenderOrder == renderOrder) {\n      return;\n    }\n\n    var source =\n    /** @type {module:ol/source/VectorTile} */\n    layer.getSource();\n    var sourceTileGrid = source.getTileGrid();\n    var tileGrid = source.getTileGridForProjection(projection);\n    var resolution = tileGrid.getResolution(tile.tileCoord[0]);\n    var tileExtent = tile.extent;\n    var zIndexKeys = {};\n\n    var loop = function loop(t, tt) {\n      var sourceTile = tile.getTile(tile.tileKeys[t]);\n\n      if (sourceTile.getState() != TileState.LOADED) {\n        return;\n      }\n\n      var sourceTileCoord = sourceTile.tileCoord;\n      var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      var sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      var bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null : buffer(sharedExtent, layer.getRenderBuffer() * resolution, this$1.tmpExtent);\n      var tileProjection = sourceTile.getProjection();\n      var reproject = false;\n\n      if (!equivalentProjection(projection, tileProjection)) {\n        reproject = true;\n        sourceTile.setProjection(projection);\n      }\n\n      replayState.dirty = false;\n      var replayGroup = new CanvasReplayGroup(0, sharedExtent, resolution, pixelRatio, source.getOverlaps(), this$1.declutterTree_, layer.getRenderBuffer());\n      var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n      /**\n       * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n       * @this {module:ol/renderer/canvas/VectorTileLayer}\n       */\n\n      var render = function render(feature) {\n        var styles;\n        var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n\n        if (styles) {\n          var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup);\n          this.dirty_ = this.dirty_ || dirty;\n          replayState.dirty = replayState.dirty || dirty;\n        }\n      };\n\n      var features = sourceTile.getFeatures();\n\n      if (renderOrder && renderOrder !== replayState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n\n      for (var i = 0, ii = features.length; i < ii; ++i) {\n        var feature = features[i];\n\n        if (reproject) {\n          if (tileProjection.getUnits() == Units.TILE_PIXELS) {\n            // projected tile extent\n            tileProjection.setWorldExtent(sourceTileExtent); // tile extent in tile pixel space\n\n            tileProjection.setExtent(sourceTile.getExtent());\n          }\n\n          feature.getGeometry().transform(tileProjection, projection);\n        }\n\n        if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n          render.call(this$1, feature);\n        }\n      }\n\n      replayGroup.finish();\n\n      for (var r in replayGroup.getReplays()) {\n        zIndexKeys[r] = true;\n      }\n\n      sourceTile.setReplayGroup(layer, tile.tileCoord.toString(), replayGroup);\n    };\n\n    for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {\n      loop(t, tt);\n    }\n\n    replayState.renderedRevision = revision;\n    replayState.renderedRenderOrder = renderOrder;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    var resolution = frameState.viewState.resolution;\n    var rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    var layer = this.getLayer();\n    /** @type {!Object.<string, boolean>} */\n\n    var features = {};\n    /** @type {Array.<module:ol/VectorImageTile>} */\n\n    var renderedTiles = this.renderedTiles;\n    var bufferedExtent, found;\n    var i, ii, replayGroup;\n\n    for (i = 0, ii = renderedTiles.length; i < ii; ++i) {\n      var tile = renderedTiles[i];\n      bufferedExtent = buffer(tile.extent, hitTolerance * resolution, bufferedExtent);\n\n      if (!containsCoordinate(bufferedExtent, coordinate)) {\n        continue;\n      }\n\n      for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {\n        var sourceTile = tile.getTile(tile.tileKeys[t]);\n\n        if (sourceTile.getState() != TileState.LOADED) {\n          continue;\n        }\n\n        replayGroup = sourceTile.getReplayGroup(layer, tile.tileCoord.toString());\n        found = found || replayGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},\n        /**\n         * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n         * @return {?} Callback result.\n         */\n        function (feature) {\n          var key = getUid(feature).toString();\n\n          if (!(key in features)) {\n            features[key] = true;\n            return callback.call(thisArg, feature, layer);\n          }\n        }, null);\n      }\n    }\n\n    return found;\n  };\n  /**\n   * @param {module:ol/VectorTile} tile Tile.\n   * @param {module:ol/PluggableMap~FrameState} frameState Frame state.\n   * @return {module:ol/transform~Transform} transform Transform.\n   * @private\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.getReplayTransform_ = function getReplayTransform_(tile, frameState) {\n    var layer = this.getLayer();\n    var source =\n    /** @type {module:ol/source/VectorTile} */\n    layer.getSource();\n    var tileGrid = source.getTileGrid();\n    var tileCoord = tile.tileCoord;\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var viewState = frameState.viewState;\n    var pixelRatio = frameState.pixelRatio;\n    var renderResolution = viewState.resolution / pixelRatio;\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n    var center = viewState.center;\n    var origin = getTopLeft(tileExtent);\n    var size = frameState.size;\n    var offsetX = Math.round(pixelRatio * size[0] / 2);\n    var offsetY = Math.round(pixelRatio * size[1] / 2);\n    return composeTransform(this.tmpTransform_, offsetX, offsetY, tileResolution / renderResolution, tileResolution / renderResolution, viewState.rotation, (origin[0] - center[0]) / tileResolution, (center[1] - origin[1]) / tileResolution);\n  };\n  /**\n   * @param {module:ol/events/Event} event Event.\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_(event) {\n    var layer = this.getLayer();\n\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {module:ol/events/Event} event Image style change event.\n   * @private\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.postCompose = function postCompose(context, frameState, layerState) {\n    var this$1 = this;\n    var layer = this.getLayer();\n    var renderMode = layer.getRenderMode();\n\n    if (renderMode != VectorTileRenderType.IMAGE) {\n      var declutterReplays = layer.getDeclutter() ? {} : null;\n      var source =\n      /** @type {module:ol/source/VectorTile} */\n      layer.getSource();\n      var replayTypes = VECTOR_REPLAYS[renderMode];\n      var pixelRatio = frameState.pixelRatio;\n      var rotation = frameState.viewState.rotation;\n      var size = frameState.size;\n      var offsetX, offsetY;\n\n      if (rotation) {\n        offsetX = Math.round(pixelRatio * size[0] / 2);\n        offsetY = Math.round(pixelRatio * size[1] / 2);\n        rotateAtOffset(context, -rotation, offsetX, offsetY);\n      }\n\n      if (declutterReplays) {\n        this.declutterTree_.clear();\n      }\n\n      var tiles = this.renderedTiles;\n      var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n      var clips = [];\n      var zs = [];\n\n      for (var i = tiles.length - 1; i >= 0; --i) {\n        var tile =\n        /** @type {module:ol/VectorImageTile} */\n        tiles[i];\n\n        if (tile.getState() == TileState.ABORT) {\n          continue;\n        }\n\n        var tileCoord = tile.tileCoord;\n        var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this$1.tmpExtent)[0] - tile.extent[0];\n        var transform = undefined;\n\n        for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {\n          var sourceTile = tile.getTile(tile.tileKeys[t]);\n\n          if (sourceTile.getState() != TileState.LOADED) {\n            continue;\n          }\n\n          var replayGroup = sourceTile.getReplayGroup(layer, tileCoord.toString());\n\n          if (!replayGroup || !replayGroup.hasReplays(replayTypes)) {\n            // sourceTile was not yet loaded when this.createReplayGroup_() was\n            // called, or it has no replays of the types we want to render\n            continue;\n          }\n\n          if (!transform) {\n            transform = this$1.getTransform(frameState, worldOffset);\n          }\n\n          var currentZ = sourceTile.tileCoord[0];\n          var currentClip = replayGroup.getClipCoords(transform);\n          context.save();\n          context.globalAlpha = layerState.opacity; // Create a clip mask for regions in this low resolution tile that are\n          // already filled by a higher resolution tile\n\n          for (var j = 0, jj = clips.length; j < jj; ++j) {\n            var clip = clips[j];\n\n            if (currentZ < zs[j]) {\n              context.beginPath(); // counter-clockwise (outer ring) for current tile\n\n              context.moveTo(currentClip[0], currentClip[1]);\n              context.lineTo(currentClip[2], currentClip[3]);\n              context.lineTo(currentClip[4], currentClip[5]);\n              context.lineTo(currentClip[6], currentClip[7]); // clockwise (inner ring) for higher resolution tile\n\n              context.moveTo(clip[6], clip[7]);\n              context.lineTo(clip[4], clip[5]);\n              context.lineTo(clip[2], clip[3]);\n              context.lineTo(clip[0], clip[1]);\n              context.clip();\n            }\n          }\n\n          replayGroup.replay(context, transform, rotation, {}, replayTypes, declutterReplays);\n          context.restore();\n          clips.push(currentClip);\n          zs.push(currentZ);\n        }\n      }\n\n      if (declutterReplays) {\n        replayDeclutter(declutterReplays, context, rotation);\n      }\n\n      if (rotation) {\n        rotateAtOffset(context, rotation,\n        /** @type {number} */\n        offsetX,\n        /** @type {number} */\n        offsetY);\n      }\n    }\n\n    CanvasTileLayerRenderer.prototype.postCompose.apply(this, arguments);\n  };\n  /**\n   * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {(module:ol/style/Style|Array.<module:ol/style/Style>)} styles The style or array of styles.\n   * @param {module:ol/render/canvas/ReplayGroup} replayGroup Replay group.\n   * @return {boolean} `true` if an image is loading.\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.renderFeature = function renderFeature$1(feature, squaredTolerance, styles, replayGroup) {\n    var this$1 = this;\n\n    if (!styles) {\n      return false;\n    }\n\n    var loading = false;\n\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(replayGroup, feature, styles[i], squaredTolerance, this$1.handleStyleImageChange_, this$1) || loading;\n      }\n    } else {\n      loading = renderFeature(replayGroup, feature, styles, squaredTolerance, this.handleStyleImageChange_, this);\n    }\n\n    return loading;\n  };\n  /**\n   * @param {module:ol/VectorImageTile} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @private\n   */\n\n\n  CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function renderTileImage_(tile, pixelRatio, projection) {\n    var this$1 = this;\n    var layer = this.getLayer();\n    var replayState = tile.getReplayState(layer);\n    var revision = layer.getRevision();\n    var replays = IMAGE_REPLAYS[layer.getRenderMode()];\n\n    if (replays && replayState.renderedTileRevision !== revision) {\n      replayState.renderedTileRevision = revision;\n      var tileCoord = tile.wrappedTileCoord;\n      var z = tileCoord[0];\n      var source =\n      /** @type {module:ol/source/VectorTile} */\n      layer.getSource();\n      var tileGrid = source.getTileGridForProjection(projection);\n      var resolution = tileGrid.getResolution(z);\n      var context = tile.getContext(layer);\n      var size = source.getTilePixelSize(z, pixelRatio, projection);\n      context.canvas.width = size[0];\n      context.canvas.height = size[1];\n      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n\n      for (var i = 0, ii = tile.tileKeys.length; i < ii; ++i) {\n        var sourceTile = tile.getTile(tile.tileKeys[i]);\n\n        if (sourceTile.getState() != TileState.LOADED) {\n          continue;\n        }\n\n        var pixelScale = pixelRatio / resolution;\n        var transform = resetTransform(this$1.tmpTransform_);\n        scaleTransform(transform, pixelScale, -pixelScale);\n        translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n        var replayGroup = sourceTile.getReplayGroup(layer, tile.tileCoord.toString());\n        replayGroup.replay(context, transform, 0, {}, replays);\n      }\n    }\n  };\n\n  return CanvasVectorTileLayerRenderer;\n}(CanvasTileLayerRenderer);\n/**\n * Determine if this renderer handles the provided layer.\n * @param {module:ol/layer/Layer} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\n\n\nCanvasVectorTileLayerRenderer['handles'] = function (layer) {\n  return layer.getType() === LayerType.VECTOR_TILE;\n};\n/**\n * Create a layer renderer.\n * @param {module:ol/renderer/Map} mapRenderer The map renderer.\n * @param {module:ol/layer/Layer} layer The layer to be rendererd.\n * @return {module:ol/renderer/canvas/VectorTileLayer} The layer renderer.\n */\n\n\nCanvasVectorTileLayerRenderer['create'] = function (mapRenderer, layer) {\n  return new CanvasVectorTileLayerRenderer(\n  /** @type {module:ol/layer/VectorTile} */\n  layer);\n};\n\nexport default CanvasVectorTileLayerRenderer; //# sourceMappingURL=VectorTileLayer.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/renderer/canvas/VectorTileLayer.js"],"names":["getUid","LayerType","TileState","createCanvasContext2D","listen","unlisten","EventType","rbush","buffer","containsCoordinate","equals","getIntersection","getTopLeft","intersects","VectorTileRenderType","equivalent","equivalentProjection","Units","ReplayType","labelCache","rotateAtOffset","CanvasReplayGroup","replayDeclutter","ORDER","CanvasTileLayerRenderer","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","create","createTransform","compose","composeTransform","reset","resetTransform","scale","scaleTransform","translate","translateTransform","IMAGE_REPLAYS","POLYGON","CIRCLE","LINE_STRING","IMAGE","TEXT","VECTOR_REPLAYS","DEFAULT","CanvasVectorTileLayerRenderer","layer","call","declutterTree_","getDeclutter","undefined","dirty_","renderedLayerRevision_","tmpTransform_","zDirection","getRenderMode","VECTOR","CLEAR","handleFontsChanged_","__proto__","prototype","Object","constructor","disposeInternal","getTile","z","x","y","pixelRatio","projection","tile","getState","LOADED","createReplayGroup_","context","renderTileImage_","prepareFrame","frameState","layerState","getLayer","layerRevision","getRevision","renderedTiles","length","renderMode","apply","arguments","this$1","revision","renderOrder","getRenderOrder","replayState","getReplayState","dirty","renderedRevision","renderedRenderOrder","source","getSource","sourceTileGrid","getTileGrid","tileGrid","getTileGridForProjection","resolution","getResolution","tileCoord","tileExtent","extent","zIndexKeys","loop","t","tt","sourceTile","tileKeys","sourceTileCoord","sourceTileExtent","getTileCoordExtent","sharedExtent","bufferedExtent","getRenderBuffer","tmpExtent","tileProjection","getProjection","reproject","setProjection","replayGroup","getOverlaps","squaredTolerance","render","feature","styles","styleFunction","getStyleFunction","features","getFeatures","sort","i","ii","getUnits","TILE_PIXELS","setWorldExtent","setExtent","getExtent","getGeometry","transform","finish","r","getReplays","setReplayGroup","toString","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","thisArg","viewState","rotation","found","getReplayGroup","key","getReplayTransform_","tileResolution","renderResolution","center","origin","size","offsetX","Math","round","offsetY","event","getVisible","changed","handleStyleImageChange_","renderIfReadyAndVisible","postCompose","declutterReplays","replayTypes","clear","tiles","clips","zs","ABORT","worldOffset","hasReplays","getTransform","currentZ","currentClip","getClipCoords","save","globalAlpha","opacity","j","jj","clip","beginPath","moveTo","lineTo","replay","restore","push","renderFeature$1","loading","Array","isArray","replays","renderedTileRevision","wrappedTileCoord","getContext","getTilePixelSize","canvas","width","height","pixelScale","getType","VECTOR_TILE","mapRenderer"],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/canvas/VectorTileLayer\n */\nimport {getUid} from '../../util.js';\nimport LayerType from '../../LayerType.js';\nimport TileState from '../../TileState.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {listen, unlisten} from '../../events.js';\nimport EventType from '../../events/EventType.js';\nimport rbush from 'rbush';\nimport {buffer, containsCoordinate, equals, getIntersection, getTopLeft, intersects} from '../../extent.js';\nimport VectorTileRenderType from '../../layer/VectorTileRenderType.js';\nimport {equivalent as equivalentProjection} from '../../proj.js';\nimport Units from '../../proj/Units.js';\nimport ReplayType from '../../render/ReplayType.js';\nimport {labelCache, rotateAtOffset} from '../../render/canvas.js';\nimport CanvasReplayGroup, {replayDeclutter} from '../../render/canvas/ReplayGroup.js';\nimport {ORDER} from '../../render/replay.js';\nimport CanvasTileLayerRenderer from '../canvas/TileLayer.js';\nimport {getSquaredTolerance as getSquaredRenderTolerance, renderFeature} from '../vector.js';\nimport {\n  create as createTransform,\n  compose as composeTransform,\n  reset as resetTransform,\n  scale as scaleTransform,\n  translate as translateTransform\n} from '../../transform.js';\n\n\n/**\n * @type {!Object.<string, Array.<module:ol/render/ReplayType>>}\n */\nvar IMAGE_REPLAYS = {\n  'image': [ReplayType.POLYGON, ReplayType.CIRCLE,\n    ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],\n  'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING]\n};\n\n\n/**\n * @type {!Object.<string, Array.<module:ol/render/ReplayType>>}\n */\nvar VECTOR_REPLAYS = {\n  'image': [ReplayType.DEFAULT],\n  'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT],\n  'vector': ORDER\n};\n\n\n/**\n * @classdesc\n * Canvas renderer for vector tile layers.\n * @api\n */\nvar CanvasVectorTileLayerRenderer = (function (CanvasTileLayerRenderer) {\n  function CanvasVectorTileLayerRenderer(layer) {\n\n    CanvasTileLayerRenderer.call(this, layer, true);\n\n    /**\n     * Declutter tree.\n     * @private\n     */\n    this.declutterTree_ = layer.getDeclutter() ? rbush(9, undefined) : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.dirty_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedLayerRevision_;\n\n    /**\n     * @private\n     * @type {module:ol/transform~Transform}\n     */\n    this.tmpTransform_ = createTransform();\n\n    // Use lower resolution for pure vector rendering. Closest resolution otherwise.\n    this.zDirection = layer.getRenderMode() == VectorTileRenderType.VECTOR ? 1 : 0;\n\n    listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n\n  }\n\n  if ( CanvasTileLayerRenderer ) CanvasVectorTileLayerRenderer.__proto__ = CanvasTileLayerRenderer;\n  CanvasVectorTileLayerRenderer.prototype = Object.create( CanvasTileLayerRenderer && CanvasTileLayerRenderer.prototype );\n  CanvasVectorTileLayerRenderer.prototype.constructor = CanvasVectorTileLayerRenderer;\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorTileLayerRenderer.prototype.disposeInternal = function disposeInternal () {\n    unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n    CanvasTileLayerRenderer.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorTileLayerRenderer.prototype.getTile = function getTile (z, x, y, pixelRatio, projection) {\n    var tile = CanvasTileLayerRenderer.prototype.getTile.call(this, z, x, y, pixelRatio, projection);\n    if (tile.getState() === TileState.LOADED) {\n      this.createReplayGroup_(tile, pixelRatio, projection);\n      if (this.context) {\n        this.renderTileImage_(tile, pixelRatio, projection);\n      }\n    }\n    return tile;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorTileLayerRenderer.prototype.prepareFrame = function prepareFrame (frameState, layerState) {\n    var layer = this.getLayer();\n    var layerRevision = layer.getRevision();\n    if (this.renderedLayerRevision_ != layerRevision) {\n      this.renderedTiles.length = 0;\n      var renderMode = layer.getRenderMode();\n      if (!this.context && renderMode != VectorTileRenderType.VECTOR) {\n        this.context = createCanvasContext2D();\n      }\n      if (this.context && renderMode == VectorTileRenderType.VECTOR) {\n        this.context = null;\n      }\n    }\n    this.renderedLayerRevision_ = layerRevision;\n    return CanvasTileLayerRenderer.prototype.prepareFrame.apply(this, arguments);\n  };\n\n  /**\n   * @param {module:ol/VectorImageTile} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @private\n   */\n  CanvasVectorTileLayerRenderer.prototype.createReplayGroup_ = function createReplayGroup_ (tile, pixelRatio, projection) {\n    var this$1 = this;\n\n    var layer = this.getLayer();\n    var revision = layer.getRevision();\n    var renderOrder = /** @type {module:ol/render~OrderFunction} */ (layer.getRenderOrder()) || null;\n\n    var replayState = tile.getReplayState(layer);\n    if (!replayState.dirty && replayState.renderedRevision == revision &&\n        replayState.renderedRenderOrder == renderOrder) {\n      return;\n    }\n\n    var source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());\n    var sourceTileGrid = source.getTileGrid();\n    var tileGrid = source.getTileGridForProjection(projection);\n    var resolution = tileGrid.getResolution(tile.tileCoord[0]);\n    var tileExtent = tile.extent;\n\n    var zIndexKeys = {};\n    var loop = function ( t, tt ) {\n      var sourceTile = tile.getTile(tile.tileKeys[t]);\n      if (sourceTile.getState() != TileState.LOADED) {\n        return;\n      }\n\n      var sourceTileCoord = sourceTile.tileCoord;\n      var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n      var sharedExtent = getIntersection(tileExtent, sourceTileExtent);\n      var bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null :\n        buffer(sharedExtent, layer.getRenderBuffer() * resolution, this$1.tmpExtent);\n      var tileProjection = sourceTile.getProjection();\n      var reproject = false;\n      if (!equivalentProjection(projection, tileProjection)) {\n        reproject = true;\n        sourceTile.setProjection(projection);\n      }\n      replayState.dirty = false;\n      var replayGroup = new CanvasReplayGroup(0, sharedExtent, resolution,\n        pixelRatio, source.getOverlaps(), this$1.declutterTree_, layer.getRenderBuffer());\n      var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n      /**\n       * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n       * @this {module:ol/renderer/canvas/VectorTileLayer}\n       */\n      var render = function(feature) {\n        var styles;\n        var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup);\n          this.dirty_ = this.dirty_ || dirty;\n          replayState.dirty = replayState.dirty || dirty;\n        }\n      };\n\n      var features = sourceTile.getFeatures();\n      if (renderOrder && renderOrder !== replayState.renderedRenderOrder) {\n        features.sort(renderOrder);\n      }\n      for (var i = 0, ii = features.length; i < ii; ++i) {\n        var feature = features[i];\n        if (reproject) {\n          if (tileProjection.getUnits() == Units.TILE_PIXELS) {\n            // projected tile extent\n            tileProjection.setWorldExtent(sourceTileExtent);\n            // tile extent in tile pixel space\n            tileProjection.setExtent(sourceTile.getExtent());\n          }\n          feature.getGeometry().transform(tileProjection, projection);\n        }\n        if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {\n          render.call(this$1, feature);\n        }\n      }\n      replayGroup.finish();\n      for (var r in replayGroup.getReplays()) {\n        zIndexKeys[r] = true;\n      }\n      sourceTile.setReplayGroup(layer, tile.tileCoord.toString(), replayGroup);\n    };\n\n    for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) loop( t, tt );\n    replayState.renderedRevision = revision;\n    replayState.renderedRenderOrder = renderOrder;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate (coordinate, frameState, hitTolerance, callback, thisArg) {\n    var resolution = frameState.viewState.resolution;\n    var rotation = frameState.viewState.rotation;\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\n    var layer = this.getLayer();\n    /** @type {!Object.<string, boolean>} */\n    var features = {};\n\n    /** @type {Array.<module:ol/VectorImageTile>} */\n    var renderedTiles = this.renderedTiles;\n\n    var bufferedExtent, found;\n    var i, ii, replayGroup;\n    for (i = 0, ii = renderedTiles.length; i < ii; ++i) {\n      var tile = renderedTiles[i];\n      bufferedExtent = buffer(tile.extent, hitTolerance * resolution, bufferedExtent);\n      if (!containsCoordinate(bufferedExtent, coordinate)) {\n        continue;\n      }\n      for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {\n        var sourceTile = tile.getTile(tile.tileKeys[t]);\n        if (sourceTile.getState() != TileState.LOADED) {\n          continue;\n        }\n        replayGroup = sourceTile.getReplayGroup(layer, tile.tileCoord.toString());\n        found = found || replayGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},\n          /**\n           * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n           * @return {?} Callback result.\n           */\n          function(feature) {\n            var key = getUid(feature).toString();\n            if (!(key in features)) {\n              features[key] = true;\n              return callback.call(thisArg, feature, layer);\n            }\n          }, null);\n      }\n    }\n    return found;\n  };\n\n  /**\n   * @param {module:ol/VectorTile} tile Tile.\n   * @param {module:ol/PluggableMap~FrameState} frameState Frame state.\n   * @return {module:ol/transform~Transform} transform Transform.\n   * @private\n   */\n  CanvasVectorTileLayerRenderer.prototype.getReplayTransform_ = function getReplayTransform_ (tile, frameState) {\n    var layer = this.getLayer();\n    var source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());\n    var tileGrid = source.getTileGrid();\n    var tileCoord = tile.tileCoord;\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var viewState = frameState.viewState;\n    var pixelRatio = frameState.pixelRatio;\n    var renderResolution = viewState.resolution / pixelRatio;\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n    var center = viewState.center;\n    var origin = getTopLeft(tileExtent);\n    var size = frameState.size;\n    var offsetX = Math.round(pixelRatio * size[0] / 2);\n    var offsetY = Math.round(pixelRatio * size[1] / 2);\n    return composeTransform(this.tmpTransform_,\n      offsetX, offsetY,\n      tileResolution / renderResolution, tileResolution / renderResolution,\n      viewState.rotation,\n      (origin[0] - center[0]) / tileResolution,\n      (center[1] - origin[1]) / tileResolution);\n  };\n\n  /**\n   * @param {module:ol/events/Event} event Event.\n   */\n  CanvasVectorTileLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_ (event) {\n    var layer = this.getLayer();\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\n      layer.changed();\n    }\n  };\n\n  /**\n   * Handle changes in image style state.\n   * @param {module:ol/events/Event} event Image style change event.\n   * @private\n   */\n  CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_ (event) {\n    this.renderIfReadyAndVisible();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorTileLayerRenderer.prototype.postCompose = function postCompose (context, frameState, layerState) {\n    var this$1 = this;\n\n    var layer = this.getLayer();\n    var renderMode = layer.getRenderMode();\n    if (renderMode != VectorTileRenderType.IMAGE) {\n      var declutterReplays = layer.getDeclutter() ? {} : null;\n      var source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());\n      var replayTypes = VECTOR_REPLAYS[renderMode];\n      var pixelRatio = frameState.pixelRatio;\n      var rotation = frameState.viewState.rotation;\n      var size = frameState.size;\n      var offsetX, offsetY;\n      if (rotation) {\n        offsetX = Math.round(pixelRatio * size[0] / 2);\n        offsetY = Math.round(pixelRatio * size[1] / 2);\n        rotateAtOffset(context, -rotation, offsetX, offsetY);\n      }\n      if (declutterReplays) {\n        this.declutterTree_.clear();\n      }\n      var tiles = this.renderedTiles;\n      var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);\n      var clips = [];\n      var zs = [];\n      for (var i = tiles.length - 1; i >= 0; --i) {\n        var tile = /** @type {module:ol/VectorImageTile} */ (tiles[i]);\n        if (tile.getState() == TileState.ABORT) {\n          continue;\n        }\n        var tileCoord = tile.tileCoord;\n        var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this$1.tmpExtent)[0] - tile.extent[0];\n        var transform = undefined;\n        for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {\n          var sourceTile = tile.getTile(tile.tileKeys[t]);\n          if (sourceTile.getState() != TileState.LOADED) {\n            continue;\n          }\n          var replayGroup = sourceTile.getReplayGroup(layer, tileCoord.toString());\n          if (!replayGroup || !replayGroup.hasReplays(replayTypes)) {\n            // sourceTile was not yet loaded when this.createReplayGroup_() was\n            // called, or it has no replays of the types we want to render\n            continue;\n          }\n          if (!transform) {\n            transform = this$1.getTransform(frameState, worldOffset);\n          }\n          var currentZ = sourceTile.tileCoord[0];\n          var currentClip = replayGroup.getClipCoords(transform);\n          context.save();\n          context.globalAlpha = layerState.opacity;\n          // Create a clip mask for regions in this low resolution tile that are\n          // already filled by a higher resolution tile\n          for (var j = 0, jj = clips.length; j < jj; ++j) {\n            var clip = clips[j];\n            if (currentZ < zs[j]) {\n              context.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              context.moveTo(currentClip[0], currentClip[1]);\n              context.lineTo(currentClip[2], currentClip[3]);\n              context.lineTo(currentClip[4], currentClip[5]);\n              context.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher resolution tile\n              context.moveTo(clip[6], clip[7]);\n              context.lineTo(clip[4], clip[5]);\n              context.lineTo(clip[2], clip[3]);\n              context.lineTo(clip[0], clip[1]);\n              context.clip();\n            }\n          }\n          replayGroup.replay(context, transform, rotation, {}, replayTypes, declutterReplays);\n          context.restore();\n          clips.push(currentClip);\n          zs.push(currentZ);\n        }\n      }\n      if (declutterReplays) {\n        replayDeclutter(declutterReplays, context, rotation);\n      }\n      if (rotation) {\n        rotateAtOffset(context, rotation,\n          /** @type {number} */ (offsetX), /** @type {number} */ (offsetY));\n      }\n    }\n    CanvasTileLayerRenderer.prototype.postCompose.apply(this, arguments);\n  };\n\n  /**\n   * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {(module:ol/style/Style|Array.<module:ol/style/Style>)} styles The style or array of styles.\n   * @param {module:ol/render/canvas/ReplayGroup} replayGroup Replay group.\n   * @return {boolean} `true` if an image is loading.\n   */\n  CanvasVectorTileLayerRenderer.prototype.renderFeature = function renderFeature$1 (feature, squaredTolerance, styles, replayGroup) {\n    var this$1 = this;\n\n    if (!styles) {\n      return false;\n    }\n    var loading = false;\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(\n          replayGroup, feature, styles[i], squaredTolerance,\n          this$1.handleStyleImageChange_, this$1) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        replayGroup, feature, styles, squaredTolerance,\n        this.handleStyleImageChange_, this);\n    }\n    return loading;\n  };\n\n  /**\n   * @param {module:ol/VectorImageTile} tile Tile.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {module:ol/proj/Projection} projection Projection.\n   * @private\n   */\n  CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function renderTileImage_ (tile, pixelRatio, projection) {\n    var this$1 = this;\n\n    var layer = this.getLayer();\n    var replayState = tile.getReplayState(layer);\n    var revision = layer.getRevision();\n    var replays = IMAGE_REPLAYS[layer.getRenderMode()];\n    if (replays && replayState.renderedTileRevision !== revision) {\n      replayState.renderedTileRevision = revision;\n      var tileCoord = tile.wrappedTileCoord;\n      var z = tileCoord[0];\n      var source = /** @type {module:ol/source/VectorTile} */ (layer.getSource());\n      var tileGrid = source.getTileGridForProjection(projection);\n      var resolution = tileGrid.getResolution(z);\n      var context = tile.getContext(layer);\n      var size = source.getTilePixelSize(z, pixelRatio, projection);\n      context.canvas.width = size[0];\n      context.canvas.height = size[1];\n      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\n      for (var i = 0, ii = tile.tileKeys.length; i < ii; ++i) {\n        var sourceTile = tile.getTile(tile.tileKeys[i]);\n        if (sourceTile.getState() != TileState.LOADED) {\n          continue;\n        }\n        var pixelScale = pixelRatio / resolution;\n        var transform = resetTransform(this$1.tmpTransform_);\n        scaleTransform(transform, pixelScale, -pixelScale);\n        translateTransform(transform, -tileExtent[0], -tileExtent[3]);\n        var replayGroup = sourceTile.getReplayGroup(layer, tile.tileCoord.toString());\n        replayGroup.replay(context, transform, 0, {}, replays);\n      }\n    }\n  };\n\n  return CanvasVectorTileLayerRenderer;\n}(CanvasTileLayerRenderer));\n\n\n/**\n * Determine if this renderer handles the provided layer.\n * @param {module:ol/layer/Layer} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\nCanvasVectorTileLayerRenderer['handles'] = function(layer) {\n  return layer.getType() === LayerType.VECTOR_TILE;\n};\n\n\n/**\n * Create a layer renderer.\n * @param {module:ol/renderer/Map} mapRenderer The map renderer.\n * @param {module:ol/layer/Layer} layer The layer to be rendererd.\n * @return {module:ol/renderer/canvas/VectorTileLayer} The layer renderer.\n */\nCanvasVectorTileLayerRenderer['create'] = function(mapRenderer, layer) {\n  return new CanvasVectorTileLayerRenderer(/** @type {module:ol/layer/VectorTile} */ (layer));\n};\n\n\nexport default CanvasVectorTileLayerRenderer;\n\n//# sourceMappingURL=VectorTileLayer.js.map"]},"metadata":{},"sourceType":"module"}
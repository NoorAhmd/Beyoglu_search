{"ast":null,"code":"import _classCallCheck from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nvar\n/** @type {?} */\nnextId = 0;\n/**\n * Directive to display a text badge.\n */\n\nvar MatBadge = /*#__PURE__*/function () {\n  /**\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _ariaDescriber\n   */\n  function MatBadge(_document, _ngZone, _elementRef, _ariaDescriber) {\n    _classCallCheck(this, MatBadge);\n\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    /**\n     * Whether the badge has any content.\n     */\n\n    this._hasContent = false;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    this.position = 'above after';\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     */\n\n    this.size = 'medium';\n    /**\n     * Unique id for the badge\n     */\n\n    this._id = nextId++;\n  }\n  /**\n   * The color of the badge. Can be `primary`, `accent`, or `warn`.\n   * @return {?}\n   */\n\n\n  _createClass(MatBadge, [{\n    key: \"color\",\n    get: function get() {\n      return this._color;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this._content;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._content = value;\n      this._hasContent = value != null && \"\".concat(value).trim().length > 0;\n\n      this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this._description;\n    }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    ,\n    set: function set(newDescription) {\n      if (newDescription !== this._description) {\n        this._updateHostAriaDescription(newDescription, this._description);\n\n        this._description = newDescription;\n      }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._hidden;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    ,\n    set: function set(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAbove\",\n    value: function isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n\n  }, {\n    key: \"isAfter\",\n    value: function isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.description && this._badgeElement) {\n        this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n      }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTextContent\",\n    value: function _updateTextContent() {\n      if (!this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      } else {\n        this._badgeElement.textContent = this.content;\n      }\n\n      return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createBadgeElement\",\n    value: function _createBadgeElement() {\n      var\n      /** @type {?} */\n      badgeElement = this._document.createElement('span');\n\n      var\n      /** @type {?} */\n      activeClass = 'mat-badge-active';\n      badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id));\n      badgeElement.classList.add('mat-badge-content');\n      badgeElement.textContent = this.content;\n\n      if (this.description) {\n        badgeElement.setAttribute('aria-label', this.description);\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateHostAriaDescription\",\n    value: function _updateHostAriaDescription(newDescription, oldDescription) {\n      // ensure content available before setting label\n      var\n      /** @type {?} */\n      content = this._updateTextContent();\n\n      if (oldDescription) {\n        this._ariaDescriber.removeDescription(content, oldDescription);\n      }\n\n      if (newDescription) {\n        this._ariaDescriber.describe(content, newDescription);\n      }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @param {?} colorPalette\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(colorPalette) {\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(\"mat-badge-\".concat(this._color));\n        }\n\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(\"mat-badge-\".concat(colorPalette));\n        }\n      }\n    }\n  }]);\n\n  return MatBadge;\n}();\n\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber));\n};\n\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 18,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent);\n    }\n  },\n  inputs: {\n    position: [\"matBadgePosition\", \"position\"],\n    size: [\"matBadgeSize\", \"size\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  }\n});\n/** @nocollapse */\n\nMatBadge.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: AriaDescriber\n  }];\n};\n\nMatBadge.propDecorators = {\n  \"color\": [{\n    type: Input,\n    args: ['matBadgeColor']\n  }],\n  \"overlap\": [{\n    type: Input,\n    args: ['matBadgeOverlap']\n  }],\n  \"position\": [{\n    type: Input,\n    args: ['matBadgePosition']\n  }],\n  \"content\": [{\n    type: Input,\n    args: ['matBadge']\n  }],\n  \"description\": [{\n    type: Input,\n    args: ['matBadgeDescription']\n  }],\n  \"size\": [{\n    type: Input,\n    args: ['matBadgeSize']\n  }],\n  \"hidden\": [{\n    type: Input,\n    args: ['matBadgeHidden']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !_hasContent'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.AriaDescriber\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar MatBadgeModule = function MatBadgeModule() {\n  _classCallCheck(this, MatBadgeModule);\n};\n\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\n\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  imports: [[A11yModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function declarations() {\n      return [MatBadge];\n    },\n    imports: function imports() {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatBadge];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { MatBadgeModule, MatBadge }; //# sourceMappingURL=badge.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/@angular/material/__ivy_ngcc__/esm2015/badge.js"],"names":["AriaDescriber","A11yModule","coerceBooleanProperty","DOCUMENT","Directive","ElementRef","Inject","Input","NgZone","Optional","NgModule","MatCommonModule","ɵngcc0","ɵngcc1","nextId","MatBadge","_document","_ngZone","_elementRef","_ariaDescriber","_hasContent","_color","_overlap","position","size","_id","value","_setColor","val","_content","trim","length","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","indexOf","description","_badgeElement","removeDescription","_createBadgeElement","textContent","content","badgeElement","createElement","activeClass","setAttribute","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","overlap","isAbove","isAfter","hidden","inputs","color","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet /** @type {?} */ nextId = 0;\n/**\n * Directive to display a text badge.\n */\nclass MatBadge {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     */\n    constructor(_document, _ngZone, _elementRef, _ariaDescriber) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n    get content() { return this._content; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set content(value) {\n        this._content = value;\n        this._hasContent = value != null && `${value}`.trim().length > 0;\n        this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.description && this._badgeElement) {\n            this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n        }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @return {?}\n     */\n    _createBadgeElement() {\n        const /** @type {?} */ badgeElement = this._document.createElement('span');\n        const /** @type {?} */ activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add('mat-badge-content');\n        badgeElement.textContent = this.content;\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const /** @type {?} */ content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 18, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent);\n    } }, inputs: { position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"] } });\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n    { type: NgZone, },\n    { type: ElementRef, },\n    { type: AriaDescriber, },\n];\nMatBadge.propDecorators = {\n    \"color\": [{ type: Input, args: ['matBadgeColor',] },],\n    \"overlap\": [{ type: Input, args: ['matBadgeOverlap',] },],\n    \"position\": [{ type: Input, args: ['matBadgePosition',] },],\n    \"content\": [{ type: Input, args: ['matBadge',] },],\n    \"description\": [{ type: Input, args: ['matBadgeDescription',] },],\n    \"size\": [{ type: Input, args: ['matBadgeSize',] },],\n    \"hidden\": [{ type: Input, args: ['matBadgeHidden',] },],\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent'\n                }\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadge };\n\n//# sourceMappingURL=badge.js.map"]},"metadata":{},"sourceType":"module"}
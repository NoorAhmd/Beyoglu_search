{"ast":null,"code":"/**\n * @module ol/extent\n */\nimport { assert } from './asserts.js';\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array.<number>} Extent\n * @api\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n * @return {module:ol/extent~Extent} Bounding extent.\n * @api\n */\n\nexport function boundingExtent(coordinates) {\n  var extent = createEmpty();\n\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Array.<number>} xs Xs.\n * @param {Array.<number>} ys Ys.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @private\n * @return {module:ol/extent~Extent} Extent.\n */\n\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n/**\n * Return extent increased by the provided value.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\n\n\nexport function buffer(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n  }\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {module:ol/extent~Extent} extent Extent to clone.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} The clone.\n */\n\nexport function clone(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n\nexport function closestSquaredDistanceXY(extent, x, y) {\n  var dx, dy;\n\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n\n  return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {module:ol/extent~Extent} extent The extent.\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\n * @return {module:ol/extent/Relationship} The relationship (bitwise compare with\n *     module:ol/extent/Relationship~Relationship).\n */\n\nexport function coordinateRelationship(extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = Relationship.UNKNOWN;\n\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n\n  return relationship;\n}\n/**\n * Create an empty extent.\n * @return {module:ol/extent~Extent} Empty extent.\n * @api\n */\n\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function createOrUpdateEmpty(opt_extent) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return createOrUpdate(x, y, x, y, opt_extent);\n}\n/**\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function createOrUpdateFromRings(rings, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n/**\n * Modify an extent to include another extent.\n * @param {module:ol/extent~Extent} extent1 The extent to be modified.\n * @param {module:ol/extent~Extent} extent2 The extent that will be included in the first.\n * @return {module:ol/extent~Extent} A reference to the first (extended) extent.\n * @api\n */\n\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n\n  return extent1;\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n */\n\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function extendCoordinates(extent, coordinates) {\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n\n  return extent;\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function extendRings(extent, rings) {\n  for (var i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(this:T, module:ol/coordinate~Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\n\nexport function forEachCorner(extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, getBottomLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback.call(opt_this, getBottomRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback.call(opt_this, getTopRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback.call(opt_this, getTopLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  return false;\n}\n/**\n * Get the size of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n\nexport function getArea(extent) {\n  var area = 0;\n\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n\n  return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Bottom left coordinate.\n * @api\n */\n\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Bottom right coordinate.\n * @api\n */\n\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Center.\n * @api\n */\n\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/extent/Corner} corner Corner.\n * @return {module:ol/coordinate~Coordinate} Corner coordinate.\n */\n\nexport function getCorner(extent, corner) {\n  var coordinate;\n\n  if (corner === Corner.BOTTOM_LEFT) {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === Corner.BOTTOM_RIGHT) {\n    coordinate = getBottomRight(extent);\n  } else if (corner === Corner.TOP_LEFT) {\n    coordinate = getTopLeft(extent);\n  } else if (corner === Corner.TOP_RIGHT) {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n\n  return (\n    /** @type {!module:ol/coordinate~Coordinate} */\n    coordinate\n  );\n}\n/**\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n\nexport function getEnlargedArea(extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {module:ol/coordinate~Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {module:ol/size~Size} size Size.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n}\n/**\n * Get the height of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n/**\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n\nexport function getIntersectionArea(extent1, extent2) {\n  var intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @param {module:ol/extent~Extent=} opt_extent Optional extent to populate with intersection.\n * @return {module:ol/extent~Extent} Intersecting extent.\n * @api\n */\n\nexport function getIntersection(extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : createEmpty();\n\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n\n  return intersection;\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Margin.\n */\n\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {module:ol/extent~Extent} extent The extent.\n * @return {module:ol/size~Size} The extent size.\n * @api\n */\n\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Top left coordinate.\n * @api\n */\n\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Top right coordinate.\n * @api\n */\n\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n/**\n * Get the width of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\n/**\n * Determine if an extent is empty.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function returnOrUpdate(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} value Value.\n */\n\nexport function scaleFromCenter(extent, value) {\n  var deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  var deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {module:ol/extent~Extent} extent The extent.\n * @param {module:ol/coordinate~Coordinate} start Segment start coordinate.\n * @param {module:ol/coordinate~Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n\nexport function intersectsSegment(extent, start, end) {\n  var intersects = false;\n  var startRel = coordinateRelationship(extent, start);\n  var endRel = coordinateRelationship(extent, end);\n\n  if (startRel === Relationship.INTERSECTING || endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & Relationship.RIGHT) && !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n\n    if (!intersects && !!(endRel & Relationship.BELOW) && !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & Relationship.LEFT) && !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n\n  return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/proj~TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\n\nexport function applyTransform(extent, transformFn, opt_extent) {\n  var coordinates = [extent[0], extent[1], extent[0], extent[3], extent[2], extent[1], extent[2], extent[3]];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _boundingExtentXYs(xs, ys, opt_extent);\n} //# sourceMappingURL=extent.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/extent.js"],"names":["assert","Corner","Relationship","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","_boundingExtentXYs","xs","ys","opt_extent","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","extend","extendXY","forEachCorner","callback","opt_this","val","call","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","x0","x1","x2","x3","y0","y1","y2","y3","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn"],"mappings":"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","sourcesContent":["/**\n * @module ol/extent\n */\nimport {assert} from './asserts.js';\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\n\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array.<number>} Extent\n * @api\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n * @return {module:ol/extent~Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  var extent = createEmpty();\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {Array.<number>} xs Xs.\n * @param {Array.<number>} ys Ys.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @private\n * @return {module:ol/extent~Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n\n\n/**\n * Return extent increased by the provided value.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [\n      extent[0] - value,\n      extent[1] - value,\n      extent[2] + value,\n      extent[3] + value\n    ];\n  }\n}\n\n\n/**\n * Creates a clone of an extent.\n *\n * @param {module:ol/extent~Extent} extent Extent to clone.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  var dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&\n      extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {module:ol/extent~Extent} extent The extent.\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\n * @return {module:ol/extent/Relationship} The relationship (bitwise compare with\n *     module:ol/extent/Relationship~Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n\n/**\n * Create an empty extent.\n * @return {module:ol/extent~Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n  return createOrUpdate(\n    Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n\n\n/**\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return createOrUpdate(x, y, x, y, opt_extent);\n}\n\n\n/**\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendCoordinates(extent, coordinates);\n}\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendRings(extent, rings);\n}\n\n\n/**\n * Determine if two extents are equivalent.\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&\n      extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n\n\n/**\n * Modify an extent to include another extent.\n * @param {module:ol/extent~Extent} extent1 The extent to be modified.\n * @param {module:ol/extent~Extent} extent2 The extent that will be included in the first.\n * @return {module:ol/extent~Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (var i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {function(this:T, module:ol/coordinate~Coordinate): S} callback Callback.\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\n * @return {S|boolean} Value.\n * @template S, T\n */\nexport function forEachCorner(extent, callback, opt_this) {\n  var val;\n  val = callback.call(opt_this, getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback.call(opt_this, getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n\n/**\n * Get the size of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  var area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n\n/**\n * Get the center coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n\n/**\n * Get a corner coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/extent/Corner} corner Corner.\n * @return {module:ol/coordinate~Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  var coordinate;\n  if (corner === Corner.BOTTOM_LEFT) {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === Corner.BOTTOM_RIGHT) {\n    coordinate = getBottomRight(extent);\n  } else if (corner === Corner.TOP_LEFT) {\n    coordinate = getTopLeft(extent);\n  } else if (corner === Corner.TOP_RIGHT) {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n  return (\n    /** @type {!module:ol/coordinate~Coordinate} */ (coordinate)\n  );\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n\n/**\n * @param {module:ol/coordinate~Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {module:ol/size~Size} size Size.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),\n    opt_extent);\n}\n\n\n/**\n * Get the height of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  var intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n\n/**\n * Get the intersection of two extents.\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent 2.\n * @param {module:ol/extent~Extent=} opt_extent Optional extent to populate with intersection.\n * @return {module:ol/extent~Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n\n/**\n * Get the size (width, height) of an extent.\n * @param {module:ol/extent~Extent} extent The extent.\n * @return {module:ol/size~Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n\n/**\n * Get the top left coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n\n/**\n * Get the top right coordinate of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {module:ol/coordinate~Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n\n/**\n * Get the width of an extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n\n/**\n * Determine if one extent intersects another.\n * @param {module:ol/extent~Extent} extent1 Extent 1.\n * @param {module:ol/extent~Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] &&\n      extent1[2] >= extent2[0] &&\n      extent1[1] <= extent2[3] &&\n      extent1[3] >= extent2[1];\n}\n\n\n/**\n * Determine if an extent is empty.\n * @param {module:ol/extent~Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/extent~Extent=} opt_extent Extent.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {module:ol/extent~Extent} extent The extent.\n * @param {module:ol/coordinate~Coordinate} start Segment start coordinate.\n * @param {module:ol/coordinate~Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  var intersects = false;\n  var startRel = coordinateRelationship(extent, start);\n  var endRel = coordinateRelationship(extent, end);\n  if (startRel === Relationship.INTERSECTING ||\n      endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x, y;\n    if (!!(endRel & Relationship.ABOVE) &&\n        !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - ((endY - maxY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.RIGHT) &&\n        !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - ((endX - maxX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n    if (!intersects && !!(endRel & Relationship.BELOW) &&\n        !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - ((endY - minY) / slope);\n      intersects = x >= minX && x <= maxX;\n    }\n    if (!intersects && !!(endRel & Relationship.LEFT) &&\n        !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - ((endX - minX) * slope);\n      intersects = y >= minY && y <= maxY;\n    }\n\n  }\n  return intersects;\n}\n\n\n/**\n * Apply a transform function to the extent.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {module:ol/proj~TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\n * @return {module:ol/extent~Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent) {\n  var coordinates = [\n    extent[0], extent[1],\n    extent[0], extent[3],\n    extent[2], extent[1],\n    extent[2], extent[3]\n  ];\n  transformFn(coordinates, coordinates, 2);\n  var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\n  var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\n  return _boundingExtentXYs(xs, ys, opt_extent);\n}\n\n//# sourceMappingURL=extent.js.map"]},"metadata":{},"sourceType":"module"}
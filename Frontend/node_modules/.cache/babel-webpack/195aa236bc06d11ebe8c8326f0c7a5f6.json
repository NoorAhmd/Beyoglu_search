{"ast":null,"code":"/**\n * @module ol/pointer/TouchSource\n */\n// Based on https://github.com/Polymer/PointerEvents\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nimport { remove } from '../array.js';\nimport EventSource from '../pointer/EventSource.js';\nimport { POINTER_ID } from '../pointer/MouseSource.js';\n/**\n * @type {number}\n */\n\nvar CLICK_COUNT_TIMEOUT = 200;\n/**\n * @type {string}\n */\n\nvar POINTER_TYPE = 'touch';\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\n\nfunction touchstart(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n}\n/**\n * Handler for `touchmove`.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\n\n\nfunction touchmove(inEvent) {\n  inEvent.preventDefault();\n  this.processTouches_(inEvent, this.moveOverOut_);\n}\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The event.\n */\n\n\nfunction touchend(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n}\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\n\n\nfunction touchcancel(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n}\n\nvar TouchSource = function (EventSource) {\n  function TouchSource(dispatcher, mouseSource) {\n    var mapping = {\n      'touchstart': touchstart,\n      'touchmove': touchmove,\n      'touchend': touchend,\n      'touchcancel': touchcancel\n    };\n    EventSource.call(this, dispatcher, mapping);\n    /**\n     * @const\n     * @type {!Object.<string, Event|Object>}\n     */\n\n    this.pointerMap = dispatcher.pointerMap;\n    /**\n     * @const\n     * @type {module:ol/pointer/MouseSource}\n     */\n\n    this.mouseSource = mouseSource;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.firstTouchId_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.clickCount_ = 0;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.resetId_ = undefined;\n    /**\n     * Mouse event timeout: This should be long enough to\n     * ignore compat mouse events made by touch.\n     * @private\n     * @type {number}\n     */\n\n    this.dedupTimeout_ = 2500;\n  }\n\n  if (EventSource) TouchSource.__proto__ = EventSource;\n  TouchSource.prototype = Object.create(EventSource && EventSource.prototype);\n  TouchSource.prototype.constructor = TouchSource;\n  /**\n   * @private\n   * @param {Touch} inTouch The in touch.\n   * @return {boolean} True, if this is the primary touch.\n   */\n\n  TouchSource.prototype.isPrimaryTouch_ = function isPrimaryTouch_(inTouch) {\n    return this.firstTouchId_ === inTouch.identifier;\n  };\n  /**\n   * Set primary touch if there are no pointers, or the only pointer is the mouse.\n   * @param {Touch} inTouch The in touch.\n   * @private\n   */\n\n\n  TouchSource.prototype.setPrimaryTouch_ = function setPrimaryTouch_(inTouch) {\n    var count = Object.keys(this.pointerMap).length;\n\n    if (count === 0 || count === 1 && POINTER_ID.toString() in this.pointerMap) {\n      this.firstTouchId_ = inTouch.identifier;\n      this.cancelResetClickCount_();\n    }\n  };\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n\n\n  TouchSource.prototype.removePrimaryPointer_ = function removePrimaryPointer_(inPointer) {\n    if (inPointer.isPrimary) {\n      this.firstTouchId_ = undefined;\n      this.resetClickCount_();\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  TouchSource.prototype.resetClickCount_ = function resetClickCount_() {\n    this.resetId_ = setTimeout(this.resetClickCountHandler_.bind(this), CLICK_COUNT_TIMEOUT);\n  };\n  /**\n   * @private\n   */\n\n\n  TouchSource.prototype.resetClickCountHandler_ = function resetClickCountHandler_() {\n    this.clickCount_ = 0;\n    this.resetId_ = undefined;\n  };\n  /**\n   * @private\n   */\n\n\n  TouchSource.prototype.cancelResetClickCount_ = function cancelResetClickCount_() {\n    if (this.resetId_ !== undefined) {\n      clearTimeout(this.resetId_);\n    }\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent Browser event\n   * @param {Touch} inTouch Touch event\n   * @return {PointerEvent} A pointer object.\n   */\n\n\n  TouchSource.prototype.touchToPointer_ = function touchToPointer_(browserEvent, inTouch) {\n    var e = this.dispatcher.cloneEvent(browserEvent, inTouch); // Spec specifies that pointerId 1 is reserved for Mouse.\n    // Touch identifiers can start at 0.\n    // Add 2 to the touch identifier for compatibility.\n\n    e.pointerId = inTouch.identifier + 2; // TODO: check if this is necessary?\n    //e.target = findTarget(e);\n\n    e.bubbles = true;\n    e.cancelable = true;\n    e.detail = this.clickCount_;\n    e.button = 0;\n    e.buttons = 1;\n    e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;\n    e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;\n    e.pressure = inTouch.webkitForce || inTouch.force || 0.5;\n    e.isPrimary = this.isPrimaryTouch_(inTouch);\n    e.pointerType = POINTER_TYPE; // make sure that the properties that are different for\n    // each `Touch` object are not copied from the BrowserEvent object\n\n    e.clientX = inTouch.clientX;\n    e.clientY = inTouch.clientY;\n    e.screenX = inTouch.screenX;\n    e.screenY = inTouch.screenY;\n    return e;\n  };\n  /**\n   * @private\n   * @param {TouchEvent} inEvent Touch event\n   * @param {function(TouchEvent, PointerEvent)} inFunction In function.\n   */\n\n\n  TouchSource.prototype.processTouches_ = function processTouches_(inEvent, inFunction) {\n    var this$1 = this;\n    var touches = Array.prototype.slice.call(inEvent.changedTouches);\n    var count = touches.length;\n\n    function preventDefault() {\n      inEvent.preventDefault();\n    }\n\n    for (var i = 0; i < count; ++i) {\n      var pointer = this$1.touchToPointer_(inEvent, touches[i]); // forward touch preventDefaults\n\n      pointer.preventDefault = preventDefault;\n      inFunction.call(this$1, inEvent, pointer);\n    }\n  };\n  /**\n   * @private\n   * @param {TouchList} touchList The touch list.\n   * @param {number} searchId Search identifier.\n   * @return {boolean} True, if the `Touch` with the given id is in the list.\n   */\n\n\n  TouchSource.prototype.findTouch_ = function findTouch_(touchList, searchId) {\n    var l = touchList.length;\n\n    for (var i = 0; i < l; i++) {\n      var touch = touchList[i];\n\n      if (touch.identifier === searchId) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * In some instances, a touchstart can happen without a touchend. This\n   * leaves the pointermap in a broken state.\n   * Therefore, on every touchstart, we remove the touches that did not fire a\n   * touchend event.\n   * To keep state globally consistent, we fire a pointercancel for\n   * this \"abandoned\" touch\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n\n\n  TouchSource.prototype.vacuumTouches_ = function vacuumTouches_(inEvent) {\n    var this$1 = this;\n    var touchList = inEvent.touches; // pointerMap.getCount() should be < touchList.length here,\n    // as the touchstart has not been processed yet.\n\n    var keys = Object.keys(this.pointerMap);\n    var count = keys.length;\n\n    if (count >= touchList.length) {\n      var d = [];\n\n      for (var i = 0; i < count; ++i) {\n        var key = keys[i];\n        var value = this$1.pointerMap[key]; // Never remove pointerId == 1, which is mouse.\n        // Touch identifiers are 2 smaller than their pointerId, which is the\n        // index in pointermap.\n\n        if (key != POINTER_ID && !this$1.findTouch_(touchList, key - 2)) {\n          d.push(value.out);\n        }\n      }\n\n      for (var i$1 = 0; i$1 < d.length; ++i$1) {\n        this$1.cancelOut_(inEvent, d[i$1]);\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n\n\n  TouchSource.prototype.overDown_ = function overDown_(browserEvent, inPointer) {\n    this.pointerMap[inPointer.pointerId] = {\n      target: inPointer.target,\n      out: inPointer,\n      outTarget: inPointer.target\n    };\n    this.dispatcher.over(inPointer, browserEvent);\n    this.dispatcher.enter(inPointer, browserEvent);\n    this.dispatcher.down(inPointer, browserEvent);\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n\n\n  TouchSource.prototype.moveOverOut_ = function moveOverOut_(browserEvent, inPointer) {\n    var event = inPointer;\n    var pointer = this.pointerMap[event.pointerId]; // a finger drifted off the screen, ignore it\n\n    if (!pointer) {\n      return;\n    }\n\n    var outEvent = pointer.out;\n    var outTarget = pointer.outTarget;\n    this.dispatcher.move(event, browserEvent);\n\n    if (outEvent && outTarget !== event.target) {\n      outEvent.relatedTarget = event.target;\n      event.relatedTarget = outTarget; // recover from retargeting by shadow\n\n      outEvent.target = outTarget;\n\n      if (event.target) {\n        this.dispatcher.leaveOut(outEvent, browserEvent);\n        this.dispatcher.enterOver(event, browserEvent);\n      } else {\n        // clean up case when finger leaves the screen\n        event.target = outTarget;\n        event.relatedTarget = null;\n        this.cancelOut_(browserEvent, event);\n      }\n    }\n\n    pointer.out = event;\n    pointer.outTarget = event.target;\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent An event.\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n\n\n  TouchSource.prototype.upOut_ = function upOut_(browserEvent, inPointer) {\n    this.dispatcher.up(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n\n\n  TouchSource.prototype.cancelOut_ = function cancelOut_(browserEvent, inPointer) {\n    this.dispatcher.cancel(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n\n\n  TouchSource.prototype.cleanUpPointer_ = function cleanUpPointer_(inPointer) {\n    delete this.pointerMap[inPointer.pointerId];\n    this.removePrimaryPointer_(inPointer);\n  };\n  /**\n   * Prevent synth mouse events from creating pointer events.\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n\n\n  TouchSource.prototype.dedupSynthMouse_ = function dedupSynthMouse_(inEvent) {\n    var lts = this.mouseSource.lastTouches;\n    var t = inEvent.changedTouches[0]; // only the primary finger will synth mouse events\n\n    if (this.isPrimaryTouch_(t)) {\n      // remember x/y of last touch\n      var lt = [t.clientX, t.clientY];\n      lts.push(lt);\n      setTimeout(function () {\n        // remove touch after timeout\n        remove(lts, lt);\n      }, this.dedupTimeout_);\n    }\n  };\n\n  return TouchSource;\n}(EventSource);\n\nexport default TouchSource; //# sourceMappingURL=TouchSource.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/pointer/TouchSource.js"],"names":["remove","EventSource","POINTER_ID","CLICK_COUNT_TIMEOUT","POINTER_TYPE","touchstart","inEvent","vacuumTouches_","setPrimaryTouch_","changedTouches","dedupSynthMouse_","clickCount_","processTouches_","overDown_","touchmove","preventDefault","moveOverOut_","touchend","upOut_","touchcancel","cancelOut_","TouchSource","dispatcher","mouseSource","mapping","call","pointerMap","firstTouchId_","undefined","resetId_","dedupTimeout_","__proto__","prototype","Object","create","constructor","isPrimaryTouch_","inTouch","identifier","count","keys","length","toString","cancelResetClickCount_","removePrimaryPointer_","inPointer","isPrimary","resetClickCount_","setTimeout","resetClickCountHandler_","bind","clearTimeout","touchToPointer_","browserEvent","e","cloneEvent","pointerId","bubbles","cancelable","detail","button","buttons","width","webkitRadiusX","radiusX","height","webkitRadiusY","radiusY","pressure","webkitForce","force","pointerType","clientX","clientY","screenX","screenY","inFunction","this$1","touches","Array","slice","i","pointer","findTouch_","touchList","searchId","l","touch","d","key","value","push","out","i$1","target","outTarget","over","enter","down","event","outEvent","move","relatedTarget","leaveOut","enterOver","up","leave","cleanUpPointer_","cancel","lts","lastTouches","t","lt"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAAQC,UAAR,QAAyB,2BAAzB;AAGA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG,GAA1B;AAEA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,OAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,OAAKC,cAAL,CAAoBD,OAApB;AACA,OAAKE,gBAAL,CAAsBF,OAAO,CAACG,cAAR,CAAuB,CAAvB,CAAtB;AACA,OAAKC,gBAAL,CAAsBJ,OAAtB;AACA,OAAKK,WAAL;AACA,OAAKC,eAAL,CAAqBN,OAArB,EAA8B,KAAKO,SAAnC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBR,OAAnB,EAA4B;AAC1BA,EAAAA,OAAO,CAACS,cAAR;AACA,OAAKH,eAAL,CAAqBN,OAArB,EAA8B,KAAKU,YAAnC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBX,OAAlB,EAA2B;AACzB,OAAKI,gBAAL,CAAsBJ,OAAtB;AACA,OAAKM,eAAL,CAAqBN,OAArB,EAA8B,KAAKY,MAAnC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBb,OAArB,EAA8B;AAC5B,OAAKM,eAAL,CAAqBN,OAArB,EAA8B,KAAKc,UAAnC;AACD;;AAGD,IAAIC,WAAW,GAAI,UAAUpB,WAAV,EAAuB;AACxC,WAASoB,WAAT,CAAqBC,UAArB,EAAiCC,WAAjC,EAA8C;AAC5C,QAAIC,OAAO,GAAG;AACZ,oBAAcnB,UADF;AAEZ,mBAAaS,SAFD;AAGZ,kBAAYG,QAHA;AAIZ,qBAAeE;AAJH,KAAd;AAMAlB,IAAAA,WAAW,CAACwB,IAAZ,CAAiB,IAAjB,EAAuBH,UAAvB,EAAmCE,OAAnC;AAEA;AACJ;AACA;AACA;;AACI,SAAKE,UAAL,GAAkBJ,UAAU,CAACI,UAA7B;AAEA;AACJ;AACA;AACA;;AACI,SAAKH,WAAL,GAAmBA,WAAnB;AAEA;AACJ;AACA;AACA;;AACI,SAAKI,aAAL,GAAqBC,SAArB;AAEA;AACJ;AACA;AACA;;AACI,SAAKjB,WAAL,GAAmB,CAAnB;AAEA;AACJ;AACA;AACA;;AACI,SAAKkB,QAAL,GAAgBD,SAAhB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKE,aAAL,GAAqB,IAArB;AACD;;AAED,MAAK7B,WAAL,EAAmBoB,WAAW,CAACU,SAAZ,GAAwB9B,WAAxB;AACnBoB,EAAAA,WAAW,CAACW,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAejC,WAAW,IAAIA,WAAW,CAAC+B,SAA1C,CAAxB;AACAX,EAAAA,WAAW,CAACW,SAAZ,CAAsBG,WAAtB,GAAoCd,WAApC;AAEA;AACF;AACA;AACA;AACA;;AACEA,EAAAA,WAAW,CAACW,SAAZ,CAAsBI,eAAtB,GAAwC,SAASA,eAAT,CAA0BC,OAA1B,EAAmC;AACzE,WAAO,KAAKV,aAAL,KAAuBU,OAAO,CAACC,UAAtC;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;;;AACEjB,EAAAA,WAAW,CAACW,SAAZ,CAAsBxB,gBAAtB,GAAyC,SAASA,gBAAT,CAA2B6B,OAA3B,EAAoC;AAC3E,QAAIE,KAAK,GAAGN,MAAM,CAACO,IAAP,CAAY,KAAKd,UAAjB,EAA6Be,MAAzC;;AACA,QAAIF,KAAK,KAAK,CAAV,IAAgBA,KAAK,KAAK,CAAV,IAAerC,UAAU,CAACwC,QAAX,MAAyB,KAAKhB,UAAjE,EAA8E;AAC5E,WAAKC,aAAL,GAAqBU,OAAO,CAACC,UAA7B;AACA,WAAKK,sBAAL;AACD;AACF,GAND;AAQA;AACF;AACA;AACA;;;AACEtB,EAAAA,WAAW,CAACW,SAAZ,CAAsBY,qBAAtB,GAA8C,SAASA,qBAAT,CAAgCC,SAAhC,EAA2C;AACvF,QAAIA,SAAS,CAACC,SAAd,EAAyB;AACvB,WAAKnB,aAAL,GAAqBC,SAArB;AACA,WAAKmB,gBAAL;AACD;AACF,GALD;AAOA;AACF;AACA;;;AACE1B,EAAAA,WAAW,CAACW,SAAZ,CAAsBe,gBAAtB,GAAyC,SAASA,gBAAT,GAA6B;AACpE,SAAKlB,QAAL,GAAgBmB,UAAU,CACxB,KAAKC,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CADwB,EAExB/C,mBAFwB,CAA1B;AAGD,GAJD;AAMA;AACF;AACA;;;AACEkB,EAAAA,WAAW,CAACW,SAAZ,CAAsBiB,uBAAtB,GAAgD,SAASA,uBAAT,GAAoC;AAClF,SAAKtC,WAAL,GAAmB,CAAnB;AACA,SAAKkB,QAAL,GAAgBD,SAAhB;AACD,GAHD;AAKA;AACF;AACA;;;AACEP,EAAAA,WAAW,CAACW,SAAZ,CAAsBW,sBAAtB,GAA+C,SAASA,sBAAT,GAAmC;AAChF,QAAI,KAAKd,QAAL,KAAkBD,SAAtB,EAAiC;AAC/BuB,MAAAA,YAAY,CAAC,KAAKtB,QAAN,CAAZ;AACD;AACF,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;;;AACER,EAAAA,WAAW,CAACW,SAAZ,CAAsBoB,eAAtB,GAAwC,SAASA,eAAT,CAA0BC,YAA1B,EAAwChB,OAAxC,EAAiD;AACvF,QAAIiB,CAAC,GAAG,KAAKhC,UAAL,CAAgBiC,UAAhB,CAA2BF,YAA3B,EAAyChB,OAAzC,CAAR,CADuF,CAEvF;AACA;AACA;;AACAiB,IAAAA,CAAC,CAACE,SAAF,GAAcnB,OAAO,CAACC,UAAR,GAAqB,CAAnC,CALuF,CAMvF;AACA;;AACAgB,IAAAA,CAAC,CAACG,OAAF,GAAY,IAAZ;AACAH,IAAAA,CAAC,CAACI,UAAF,GAAe,IAAf;AACAJ,IAAAA,CAAC,CAACK,MAAF,GAAW,KAAKhD,WAAhB;AACA2C,IAAAA,CAAC,CAACM,MAAF,GAAW,CAAX;AACAN,IAAAA,CAAC,CAACO,OAAF,GAAY,CAAZ;AACAP,IAAAA,CAAC,CAACQ,KAAF,GAAUzB,OAAO,CAAC0B,aAAR,IAAyB1B,OAAO,CAAC2B,OAAjC,IAA4C,CAAtD;AACAV,IAAAA,CAAC,CAACW,MAAF,GAAW5B,OAAO,CAAC6B,aAAR,IAAyB7B,OAAO,CAAC8B,OAAjC,IAA4C,CAAvD;AACAb,IAAAA,CAAC,CAACc,QAAF,GAAa/B,OAAO,CAACgC,WAAR,IAAuBhC,OAAO,CAACiC,KAA/B,IAAwC,GAArD;AACAhB,IAAAA,CAAC,CAACR,SAAF,GAAc,KAAKV,eAAL,CAAqBC,OAArB,CAAd;AACAiB,IAAAA,CAAC,CAACiB,WAAF,GAAgBnE,YAAhB,CAjBuF,CAmBvF;AACA;;AACAkD,IAAAA,CAAC,CAACkB,OAAF,GAAYnC,OAAO,CAACmC,OAApB;AACAlB,IAAAA,CAAC,CAACmB,OAAF,GAAYpC,OAAO,CAACoC,OAApB;AACAnB,IAAAA,CAAC,CAACoB,OAAF,GAAYrC,OAAO,CAACqC,OAApB;AACApB,IAAAA,CAAC,CAACqB,OAAF,GAAYtC,OAAO,CAACsC,OAApB;AAEA,WAAOrB,CAAP;AACD,GA3BD;AA6BA;AACF;AACA;AACA;AACA;;;AACEjC,EAAAA,WAAW,CAACW,SAAZ,CAAsBpB,eAAtB,GAAwC,SAASA,eAAT,CAA0BN,OAA1B,EAAmCsE,UAAnC,EAA+C;AACrF,QAAIC,MAAM,GAAG,IAAb;AAEA,QAAIC,OAAO,GAAGC,KAAK,CAAC/C,SAAN,CAAgBgD,KAAhB,CAAsBvD,IAAtB,CAA2BnB,OAAO,CAACG,cAAnC,CAAd;AACA,QAAI8B,KAAK,GAAGuC,OAAO,CAACrC,MAApB;;AACA,aAAS1B,cAAT,GAA0B;AACxBT,MAAAA,OAAO,CAACS,cAAR;AACD;;AACD,SAAK,IAAIkE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,KAApB,EAA2B,EAAE0C,CAA7B,EAAgC;AAC9B,UAAIC,OAAO,GAAGL,MAAM,CAACzB,eAAP,CAAuB9C,OAAvB,EAAgCwE,OAAO,CAACG,CAAD,CAAvC,CAAd,CAD8B,CAE9B;;AACAC,MAAAA,OAAO,CAACnE,cAAR,GAAyBA,cAAzB;AACA6D,MAAAA,UAAU,CAACnD,IAAX,CAAgBoD,MAAhB,EAAwBvE,OAAxB,EAAiC4E,OAAjC;AACD;AACF,GAdD;AAgBA;AACF;AACA;AACA;AACA;AACA;;;AACE7D,EAAAA,WAAW,CAACW,SAAZ,CAAsBmD,UAAtB,GAAmC,SAASA,UAAT,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0C;AAC3E,QAAIC,CAAC,GAAGF,SAAS,CAAC3C,MAAlB;;AACA,SAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,CAApB,EAAuBL,CAAC,EAAxB,EAA4B;AAC1B,UAAIM,KAAK,GAAGH,SAAS,CAACH,CAAD,CAArB;;AACA,UAAIM,KAAK,CAACjD,UAAN,KAAqB+C,QAAzB,EAAmC;AACjC,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GATD;AAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEhE,EAAAA,WAAW,CAACW,SAAZ,CAAsBzB,cAAtB,GAAuC,SAASA,cAAT,CAAyBD,OAAzB,EAAkC;AACvE,QAAIuE,MAAM,GAAG,IAAb;AAEA,QAAIO,SAAS,GAAG9E,OAAO,CAACwE,OAAxB,CAHuE,CAIvE;AACA;;AACA,QAAItC,IAAI,GAAGP,MAAM,CAACO,IAAP,CAAY,KAAKd,UAAjB,CAAX;AACA,QAAIa,KAAK,GAAGC,IAAI,CAACC,MAAjB;;AACA,QAAIF,KAAK,IAAI6C,SAAS,CAAC3C,MAAvB,EAA+B;AAC7B,UAAI+C,CAAC,GAAG,EAAR;;AACA,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,KAApB,EAA2B,EAAE0C,CAA7B,EAAgC;AAC9B,YAAIQ,GAAG,GAAGjD,IAAI,CAACyC,CAAD,CAAd;AACA,YAAIS,KAAK,GAAGb,MAAM,CAACnD,UAAP,CAAkB+D,GAAlB,CAAZ,CAF8B,CAG9B;AACA;AACA;;AACA,YAAIA,GAAG,IAAIvF,UAAP,IAAqB,CAAC2E,MAAM,CAACM,UAAP,CAAkBC,SAAlB,EAA6BK,GAAG,GAAG,CAAnC,CAA1B,EAAiE;AAC/DD,UAAAA,CAAC,CAACG,IAAF,CAAOD,KAAK,CAACE,GAAb;AACD;AACF;;AACD,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,CAAC,CAAC/C,MAA1B,EAAkC,EAAEoD,GAApC,EAAyC;AACvChB,QAAAA,MAAM,CAACzD,UAAP,CAAkBd,OAAlB,EAA2BkF,CAAC,CAACK,GAAD,CAA5B;AACD;AACF;AACF,GAxBD;AA0BA;AACF;AACA;AACA;AACA;;;AACExE,EAAAA,WAAW,CAACW,SAAZ,CAAsBnB,SAAtB,GAAkC,SAASA,SAAT,CAAoBwC,YAApB,EAAkCR,SAAlC,EAA6C;AAC7E,SAAKnB,UAAL,CAAgBmB,SAAS,CAACW,SAA1B,IAAuC;AACrCsC,MAAAA,MAAM,EAAEjD,SAAS,CAACiD,MADmB;AAErCF,MAAAA,GAAG,EAAE/C,SAFgC;AAGrCkD,MAAAA,SAAS,EAAElD,SAAS,CAACiD;AAHgB,KAAvC;AAKA,SAAKxE,UAAL,CAAgB0E,IAAhB,CAAqBnD,SAArB,EAAgCQ,YAAhC;AACA,SAAK/B,UAAL,CAAgB2E,KAAhB,CAAsBpD,SAAtB,EAAiCQ,YAAjC;AACA,SAAK/B,UAAL,CAAgB4E,IAAhB,CAAqBrD,SAArB,EAAgCQ,YAAhC;AACD,GATD;AAWA;AACF;AACA;AACA;AACA;;;AACEhC,EAAAA,WAAW,CAACW,SAAZ,CAAsBhB,YAAtB,GAAqC,SAASA,YAAT,CAAuBqC,YAAvB,EAAqCR,SAArC,EAAgD;AACnF,QAAIsD,KAAK,GAAGtD,SAAZ;AACA,QAAIqC,OAAO,GAAG,KAAKxD,UAAL,CAAgByE,KAAK,CAAC3C,SAAtB,CAAd,CAFmF,CAGnF;;AACA,QAAI,CAAC0B,OAAL,EAAc;AACZ;AACD;;AACD,QAAIkB,QAAQ,GAAGlB,OAAO,CAACU,GAAvB;AACA,QAAIG,SAAS,GAAGb,OAAO,CAACa,SAAxB;AACA,SAAKzE,UAAL,CAAgB+E,IAAhB,CAAqBF,KAArB,EAA4B9C,YAA5B;;AACA,QAAI+C,QAAQ,IAAIL,SAAS,KAAKI,KAAK,CAACL,MAApC,EAA4C;AAC1CM,MAAAA,QAAQ,CAACE,aAAT,GAAyBH,KAAK,CAACL,MAA/B;AACAK,MAAAA,KAAK,CAACG,aAAN,GAAsBP,SAAtB,CAF0C,CAG1C;;AACAK,MAAAA,QAAQ,CAACN,MAAT,GAAkBC,SAAlB;;AACA,UAAII,KAAK,CAACL,MAAV,EAAkB;AAChB,aAAKxE,UAAL,CAAgBiF,QAAhB,CAAyBH,QAAzB,EAAmC/C,YAAnC;AACA,aAAK/B,UAAL,CAAgBkF,SAAhB,CAA0BL,KAA1B,EAAiC9C,YAAjC;AACD,OAHD,MAGO;AACL;AACA8C,QAAAA,KAAK,CAACL,MAAN,GAAeC,SAAf;AACAI,QAAAA,KAAK,CAACG,aAAN,GAAsB,IAAtB;AACA,aAAKlF,UAAL,CAAgBiC,YAAhB,EAA8B8C,KAA9B;AACD;AACF;;AACDjB,IAAAA,OAAO,CAACU,GAAR,GAAcO,KAAd;AACAjB,IAAAA,OAAO,CAACa,SAAR,GAAoBI,KAAK,CAACL,MAA1B;AACD,GA3BD;AA6BA;AACF;AACA;AACA;AACA;;;AACEzE,EAAAA,WAAW,CAACW,SAAZ,CAAsBd,MAAtB,GAA+B,SAASA,MAAT,CAAiBmC,YAAjB,EAA+BR,SAA/B,EAA0C;AACvE,SAAKvB,UAAL,CAAgBmF,EAAhB,CAAmB5D,SAAnB,EAA8BQ,YAA9B;AACA,SAAK/B,UAAL,CAAgBsE,GAAhB,CAAoB/C,SAApB,EAA+BQ,YAA/B;AACA,SAAK/B,UAAL,CAAgBoF,KAAhB,CAAsB7D,SAAtB,EAAiCQ,YAAjC;AACA,SAAKsD,eAAL,CAAqB9D,SAArB;AACD,GALD;AAOA;AACF;AACA;AACA;AACA;;;AACExB,EAAAA,WAAW,CAACW,SAAZ,CAAsBZ,UAAtB,GAAmC,SAASA,UAAT,CAAqBiC,YAArB,EAAmCR,SAAnC,EAA8C;AAC/E,SAAKvB,UAAL,CAAgBsF,MAAhB,CAAuB/D,SAAvB,EAAkCQ,YAAlC;AACA,SAAK/B,UAAL,CAAgBsE,GAAhB,CAAoB/C,SAApB,EAA+BQ,YAA/B;AACA,SAAK/B,UAAL,CAAgBoF,KAAhB,CAAsB7D,SAAtB,EAAiCQ,YAAjC;AACA,SAAKsD,eAAL,CAAqB9D,SAArB;AACD,GALD;AAOA;AACF;AACA;AACA;;;AACExB,EAAAA,WAAW,CAACW,SAAZ,CAAsB2E,eAAtB,GAAwC,SAASA,eAAT,CAA0B9D,SAA1B,EAAqC;AAC3E,WAAO,KAAKnB,UAAL,CAAgBmB,SAAS,CAACW,SAA1B,CAAP;AACA,SAAKZ,qBAAL,CAA2BC,SAA3B;AACD,GAHD;AAKA;AACF;AACA;AACA;AACA;AACA;;;AACExB,EAAAA,WAAW,CAACW,SAAZ,CAAsBtB,gBAAtB,GAAyC,SAASA,gBAAT,CAA2BJ,OAA3B,EAAoC;AAC3E,QAAIuG,GAAG,GAAG,KAAKtF,WAAL,CAAiBuF,WAA3B;AACA,QAAIC,CAAC,GAAGzG,OAAO,CAACG,cAAR,CAAuB,CAAvB,CAAR,CAF2E,CAG3E;;AACA,QAAI,KAAK2B,eAAL,CAAqB2E,CAArB,CAAJ,EAA6B;AAC3B;AACA,UAAIC,EAAE,GAAG,CAACD,CAAC,CAACvC,OAAH,EAAYuC,CAAC,CAACtC,OAAd,CAAT;AACAoC,MAAAA,GAAG,CAAClB,IAAJ,CAASqB,EAAT;AAEAhE,MAAAA,UAAU,CAAC,YAAW;AACpB;AACAhD,QAAAA,MAAM,CAAC6G,GAAD,EAAMG,EAAN,CAAN;AACD,OAHS,EAGP,KAAKlF,aAHE,CAAV;AAID;AACF,GAdD;;AAgBA,SAAOT,WAAP;AACD,CAxUkB,CAwUjBpB,WAxUiB,CAAnB;;AA0UA,eAAeoB,WAAf,C,CAEA","sourcesContent":["/**\n * @module ol/pointer/TouchSource\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport {remove} from '../array.js';\nimport EventSource from '../pointer/EventSource.js';\nimport {POINTER_ID} from '../pointer/MouseSource.js';\n\n\n/**\n * @type {number}\n */\nvar CLICK_COUNT_TIMEOUT = 200;\n\n/**\n * @type {string}\n */\nvar POINTER_TYPE = 'touch';\n\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchstart(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n}\n\n/**\n * Handler for `touchmove`.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchmove(inEvent) {\n  inEvent.preventDefault();\n  this.processTouches_(inEvent, this.moveOverOut_);\n}\n\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The event.\n */\nfunction touchend(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n}\n\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {module:ol/pointer/TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchcancel(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n}\n\n\nvar TouchSource = (function (EventSource) {\n  function TouchSource(dispatcher, mouseSource) {\n    var mapping = {\n      'touchstart': touchstart,\n      'touchmove': touchmove,\n      'touchend': touchend,\n      'touchcancel': touchcancel\n    };\n    EventSource.call(this, dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object.<string, Event|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n\n    /**\n     * @const\n     * @type {module:ol/pointer/MouseSource}\n     */\n    this.mouseSource = mouseSource;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.firstTouchId_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.clickCount_ = 0;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.resetId_ = undefined;\n\n    /**\n     * Mouse event timeout: This should be long enough to\n     * ignore compat mouse events made by touch.\n     * @private\n     * @type {number}\n     */\n    this.dedupTimeout_ = 2500;\n  }\n\n  if ( EventSource ) TouchSource.__proto__ = EventSource;\n  TouchSource.prototype = Object.create( EventSource && EventSource.prototype );\n  TouchSource.prototype.constructor = TouchSource;\n\n  /**\n   * @private\n   * @param {Touch} inTouch The in touch.\n   * @return {boolean} True, if this is the primary touch.\n   */\n  TouchSource.prototype.isPrimaryTouch_ = function isPrimaryTouch_ (inTouch) {\n    return this.firstTouchId_ === inTouch.identifier;\n  };\n\n  /**\n   * Set primary touch if there are no pointers, or the only pointer is the mouse.\n   * @param {Touch} inTouch The in touch.\n   * @private\n   */\n  TouchSource.prototype.setPrimaryTouch_ = function setPrimaryTouch_ (inTouch) {\n    var count = Object.keys(this.pointerMap).length;\n    if (count === 0 || (count === 1 && POINTER_ID.toString() in this.pointerMap)) {\n      this.firstTouchId_ = inTouch.identifier;\n      this.cancelResetClickCount_();\n    }\n  };\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  TouchSource.prototype.removePrimaryPointer_ = function removePrimaryPointer_ (inPointer) {\n    if (inPointer.isPrimary) {\n      this.firstTouchId_ = undefined;\n      this.resetClickCount_();\n    }\n  };\n\n  /**\n   * @private\n   */\n  TouchSource.prototype.resetClickCount_ = function resetClickCount_ () {\n    this.resetId_ = setTimeout(\n      this.resetClickCountHandler_.bind(this),\n      CLICK_COUNT_TIMEOUT);\n  };\n\n  /**\n   * @private\n   */\n  TouchSource.prototype.resetClickCountHandler_ = function resetClickCountHandler_ () {\n    this.clickCount_ = 0;\n    this.resetId_ = undefined;\n  };\n\n  /**\n   * @private\n   */\n  TouchSource.prototype.cancelResetClickCount_ = function cancelResetClickCount_ () {\n    if (this.resetId_ !== undefined) {\n      clearTimeout(this.resetId_);\n    }\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent Browser event\n   * @param {Touch} inTouch Touch event\n   * @return {PointerEvent} A pointer object.\n   */\n  TouchSource.prototype.touchToPointer_ = function touchToPointer_ (browserEvent, inTouch) {\n    var e = this.dispatcher.cloneEvent(browserEvent, inTouch);\n    // Spec specifies that pointerId 1 is reserved for Mouse.\n    // Touch identifiers can start at 0.\n    // Add 2 to the touch identifier for compatibility.\n    e.pointerId = inTouch.identifier + 2;\n    // TODO: check if this is necessary?\n    //e.target = findTarget(e);\n    e.bubbles = true;\n    e.cancelable = true;\n    e.detail = this.clickCount_;\n    e.button = 0;\n    e.buttons = 1;\n    e.width = inTouch.webkitRadiusX || inTouch.radiusX || 0;\n    e.height = inTouch.webkitRadiusY || inTouch.radiusY || 0;\n    e.pressure = inTouch.webkitForce || inTouch.force || 0.5;\n    e.isPrimary = this.isPrimaryTouch_(inTouch);\n    e.pointerType = POINTER_TYPE;\n\n    // make sure that the properties that are different for\n    // each `Touch` object are not copied from the BrowserEvent object\n    e.clientX = inTouch.clientX;\n    e.clientY = inTouch.clientY;\n    e.screenX = inTouch.screenX;\n    e.screenY = inTouch.screenY;\n\n    return e;\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} inEvent Touch event\n   * @param {function(TouchEvent, PointerEvent)} inFunction In function.\n   */\n  TouchSource.prototype.processTouches_ = function processTouches_ (inEvent, inFunction) {\n    var this$1 = this;\n\n    var touches = Array.prototype.slice.call(inEvent.changedTouches);\n    var count = touches.length;\n    function preventDefault() {\n      inEvent.preventDefault();\n    }\n    for (var i = 0; i < count; ++i) {\n      var pointer = this$1.touchToPointer_(inEvent, touches[i]);\n      // forward touch preventDefaults\n      pointer.preventDefault = preventDefault;\n      inFunction.call(this$1, inEvent, pointer);\n    }\n  };\n\n  /**\n   * @private\n   * @param {TouchList} touchList The touch list.\n   * @param {number} searchId Search identifier.\n   * @return {boolean} True, if the `Touch` with the given id is in the list.\n   */\n  TouchSource.prototype.findTouch_ = function findTouch_ (touchList, searchId) {\n    var l = touchList.length;\n    for (var i = 0; i < l; i++) {\n      var touch = touchList[i];\n      if (touch.identifier === searchId) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * In some instances, a touchstart can happen without a touchend. This\n   * leaves the pointermap in a broken state.\n   * Therefore, on every touchstart, we remove the touches that did not fire a\n   * touchend event.\n   * To keep state globally consistent, we fire a pointercancel for\n   * this \"abandoned\" touch\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  TouchSource.prototype.vacuumTouches_ = function vacuumTouches_ (inEvent) {\n    var this$1 = this;\n\n    var touchList = inEvent.touches;\n    // pointerMap.getCount() should be < touchList.length here,\n    // as the touchstart has not been processed yet.\n    var keys = Object.keys(this.pointerMap);\n    var count = keys.length;\n    if (count >= touchList.length) {\n      var d = [];\n      for (var i = 0; i < count; ++i) {\n        var key = keys[i];\n        var value = this$1.pointerMap[key];\n        // Never remove pointerId == 1, which is mouse.\n        // Touch identifiers are 2 smaller than their pointerId, which is the\n        // index in pointermap.\n        if (key != POINTER_ID && !this$1.findTouch_(touchList, key - 2)) {\n          d.push(value.out);\n        }\n      }\n      for (var i$1 = 0; i$1 < d.length; ++i$1) {\n        this$1.cancelOut_(inEvent, d[i$1]);\n      }\n    }\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  TouchSource.prototype.overDown_ = function overDown_ (browserEvent, inPointer) {\n    this.pointerMap[inPointer.pointerId] = {\n      target: inPointer.target,\n      out: inPointer,\n      outTarget: inPointer.target\n    };\n    this.dispatcher.over(inPointer, browserEvent);\n    this.dispatcher.enter(inPointer, browserEvent);\n    this.dispatcher.down(inPointer, browserEvent);\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  TouchSource.prototype.moveOverOut_ = function moveOverOut_ (browserEvent, inPointer) {\n    var event = inPointer;\n    var pointer = this.pointerMap[event.pointerId];\n    // a finger drifted off the screen, ignore it\n    if (!pointer) {\n      return;\n    }\n    var outEvent = pointer.out;\n    var outTarget = pointer.outTarget;\n    this.dispatcher.move(event, browserEvent);\n    if (outEvent && outTarget !== event.target) {\n      outEvent.relatedTarget = event.target;\n      event.relatedTarget = outTarget;\n      // recover from retargeting by shadow\n      outEvent.target = outTarget;\n      if (event.target) {\n        this.dispatcher.leaveOut(outEvent, browserEvent);\n        this.dispatcher.enterOver(event, browserEvent);\n      } else {\n        // clean up case when finger leaves the screen\n        event.target = outTarget;\n        event.relatedTarget = null;\n        this.cancelOut_(browserEvent, event);\n      }\n    }\n    pointer.out = event;\n    pointer.outTarget = event.target;\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent An event.\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  TouchSource.prototype.upOut_ = function upOut_ (browserEvent, inPointer) {\n    this.dispatcher.up(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  TouchSource.prototype.cancelOut_ = function cancelOut_ (browserEvent, inPointer) {\n    this.dispatcher.cancel(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  TouchSource.prototype.cleanUpPointer_ = function cleanUpPointer_ (inPointer) {\n    delete this.pointerMap[inPointer.pointerId];\n    this.removePrimaryPointer_(inPointer);\n  };\n\n  /**\n   * Prevent synth mouse events from creating pointer events.\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  TouchSource.prototype.dedupSynthMouse_ = function dedupSynthMouse_ (inEvent) {\n    var lts = this.mouseSource.lastTouches;\n    var t = inEvent.changedTouches[0];\n    // only the primary finger will synth mouse events\n    if (this.isPrimaryTouch_(t)) {\n      // remember x/y of last touch\n      var lt = [t.clientX, t.clientY];\n      lts.push(lt);\n\n      setTimeout(function() {\n        // remove touch after timeout\n        remove(lts, lt);\n      }, this.dedupTimeout_);\n    }\n  };\n\n  return TouchSource;\n}(EventSource));\n\nexport default TouchSource;\n\n//# sourceMappingURL=TouchSource.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.\n * @typedef {Array.<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Tile coordinate.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\n\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {module:ol/tilecoord~TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\n\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {module:ol/tilecoord~TileCoord} The tile coord.\n */\n\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\n\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\n\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << z - 1;\n  var i, charCode;\n\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n\n  return digits.join('');\n}\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {!module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\n\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n\n  var extent = tileGrid.getExtent();\n  var tileRange;\n\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n} //# sourceMappingURL=tilecoord.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/tilecoord.js"],"names":["createOrUpdate","z","x","y","opt_tileCoord","undefined","getKeyZXY","getKey","tileCoord","fromKey","key","split","map","Number","hash","quadKey","digits","Array","mask","i","charCode","String","fromCharCode","join","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","extent","getExtent","tileRange","getFullTileRange","getTileRangeForExtentAndZ","containsXY"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,aAAjC,EAAgD;AACrD,MAAIA,aAAa,KAAKC,SAAtB,EAAiC;AAC/BD,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBH,CAAnB;AACAG,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBF,CAAnB;AACAE,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBD,CAAnB;AACA,WAAOC,aAAP;AACD,GALD,MAKO;AACL,WAAO,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,SAAT,CAAmBL,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,SAAOF,CAAC,GAAG,GAAJ,GAAUC,CAAV,GAAc,GAAd,GAAoBC,CAA3B;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBC,SAAhB,EAA2B;AAChC,SAAOF,SAAS,CAACE,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,EAA6BA,SAAS,CAAC,CAAD,CAAtC,CAAhB;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,SAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmBC,MAAnB,CAAP;AACD;AAGD;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcN,SAAd,EAAyB;AAC9B,SAAO,CAACA,SAAS,CAAC,CAAD,CAAT,IAAgBA,SAAS,CAAC,CAAD,CAA1B,IAAiCA,SAAS,CAAC,CAAD,CAAjD;AACD;AAGD;AACA;AACA;AACA;;AACA,OAAO,SAASO,OAAT,CAAiBP,SAAjB,EAA4B;AACjC,MAAIP,CAAC,GAAGO,SAAS,CAAC,CAAD,CAAjB;AACA,MAAIQ,MAAM,GAAG,IAAIC,KAAJ,CAAUhB,CAAV,CAAb;AACA,MAAIiB,IAAI,GAAG,KAAMjB,CAAC,GAAG,CAArB;AACA,MAAIkB,CAAJ,EAAOC,QAAP;;AACA,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlB,CAAhB,EAAmB,EAAEkB,CAArB,EAAwB;AACtB;AACAC,IAAAA,QAAQ,GAAG,EAAX;;AACA,QAAIZ,SAAS,CAAC,CAAD,CAAT,GAAeU,IAAnB,EAAyB;AACvBE,MAAAA,QAAQ,IAAI,CAAZ;AACD;;AACD,QAAIZ,SAAS,CAAC,CAAD,CAAT,GAAeU,IAAnB,EAAyB;AACvBE,MAAAA,QAAQ,IAAI,CAAZ;AACD;;AACDJ,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAYE,MAAM,CAACC,YAAP,CAAoBF,QAApB,CAAZ;AACAF,IAAAA,IAAI,KAAK,CAAT;AACD;;AACD,SAAOF,MAAM,CAACO,IAAP,CAAY,EAAZ,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BhB,SAA1B,EAAqCiB,QAArC,EAA+C;AACpD,MAAIxB,CAAC,GAAGO,SAAS,CAAC,CAAD,CAAjB;AACA,MAAIN,CAAC,GAAGM,SAAS,CAAC,CAAD,CAAjB;AACA,MAAIL,CAAC,GAAGK,SAAS,CAAC,CAAD,CAAjB;;AAEA,MAAIiB,QAAQ,CAACC,UAAT,KAAwBzB,CAAxB,IAA6BA,CAAC,GAAGwB,QAAQ,CAACE,UAAT,EAArC,EAA4D;AAC1D,WAAO,KAAP;AACD;;AACD,MAAIC,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAb;AACA,MAAIC,SAAJ;;AACA,MAAI,CAACF,MAAL,EAAa;AACXE,IAAAA,SAAS,GAAGL,QAAQ,CAACM,gBAAT,CAA0B9B,CAA1B,CAAZ;AACD,GAFD,MAEO;AACL6B,IAAAA,SAAS,GAAGL,QAAQ,CAACO,yBAAT,CAAmCJ,MAAnC,EAA2C3B,CAA3C,CAAZ;AACD;;AACD,MAAI,CAAC6B,SAAL,EAAgB;AACd,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,SAAS,CAACG,UAAV,CAAqB/B,CAArB,EAAwBC,CAAxB,CAAP;AACD;AACF,C,CAED","sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z`, `x`, and `y`. `z` is the zoom level.\n * @typedef {Array.<number>} TileCoord\n * @api\n */\n\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Tile coordinate.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n\n/**\n * Get the key for a tile coord.\n * @param {module:ol/tilecoord~TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {module:ol/tilecoord~TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << (z - 1);\n  var i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n\n/**\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {!module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  var extent = tileGrid.getExtent();\n  var tileRange;\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}\n\n//# sourceMappingURL=tilecoord.js.map"]},"metadata":{},"sourceType":"module"}
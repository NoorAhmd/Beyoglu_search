{"ast":null,"code":"/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport { assert } from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from '../style/Circle.js';\nimport Fill from '../style/Fill.js';\nimport Stroke from '../style/Stroke.js';\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function((module:ol/Feature|module:ol/render/Feature), number):\n *     (module:ol/style/Style|Array.<module:ol/style/Style>)} StyleFunction\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function((module:ol/Feature|module:ol/render/Feature)):\n *     (module:ol/geom/Geometry|module:ol/render/Feature|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((module:ol/coordinate~Coordinate|Array<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>),module:ol/render~State)}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {module:ol/style/Fill} [fill] Fill style.\n * @property {module:ol/style/Image} [image] Image style.\n * @property {module:ol/style/Style~RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {module:ol/style/Text} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\n\nvar Style = function Style(opt_options) {\n  var options = opt_options || {};\n  /**\n   * @private\n   * @type {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction}\n   */\n\n  this.geometry_ = null;\n  /**\n   * @private\n   * @type {!module:ol/style/Style~GeometryFunction}\n   */\n\n  this.geometryFunction_ = defaultGeometryFunction;\n\n  if (options.geometry !== undefined) {\n    this.setGeometry(options.geometry);\n  }\n  /**\n   * @private\n   * @type {module:ol/style/Fill}\n   */\n\n\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n  /**\n     * @private\n     * @type {module:ol/style/Image}\n     */\n\n  this.image_ = options.image !== undefined ? options.image : null;\n  /**\n   * @private\n   * @type {module:ol/style/Style~RenderFunction|null}\n   */\n\n  this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n  /**\n   * @private\n   * @type {module:ol/style/Stroke}\n   */\n\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n  /**\n   * @private\n   * @type {module:ol/style/Text}\n   */\n\n  this.text_ = options.text !== undefined ? options.text : null;\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n\n  this.zIndex_ = options.zIndex;\n};\n/**\n * Clones the style.\n * @return {module:ol/style/Style} The cloned style.\n * @api\n */\n\n\nStyle.prototype.clone = function clone() {\n  var geometry = this.getGeometry();\n\n  if (geometry && geometry.clone) {\n    geometry = geometry.clone();\n  }\n\n  return new Style({\n    geometry: geometry,\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    image: this.getImage() ? this.getImage().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    text: this.getText() ? this.getText().clone() : undefined,\n    zIndex: this.getZIndex()\n  });\n};\n/**\n * Get the custom renderer function that was configured with\n * {@link #setRenderer} or the `renderer` constructor option.\n * @return {module:ol/style/Style~RenderFunction|null} Custom renderer function.\n * @api\n */\n\n\nStyle.prototype.getRenderer = function getRenderer() {\n  return this.renderer_;\n};\n/**\n * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n * and `image` options of the style will be ignored.\n * @param {module:ol/style/Style~RenderFunction|null} renderer Custom renderer function.\n * @api\n */\n\n\nStyle.prototype.setRenderer = function setRenderer(renderer) {\n  this.renderer_ = renderer;\n};\n/**\n * Get the geometry to be rendered.\n * @return {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction}\n * Feature property or geometry or function that returns the geometry that will\n * be rendered with this style.\n * @api\n */\n\n\nStyle.prototype.getGeometry = function getGeometry() {\n  return this.geometry_;\n};\n/**\n * Get the function used to generate a geometry for rendering.\n * @return {!module:ol/style/Style~GeometryFunction} Function that is called with a feature\n * and returns the geometry to render instead of the feature's geometry.\n * @api\n */\n\n\nStyle.prototype.getGeometryFunction = function getGeometryFunction() {\n  return this.geometryFunction_;\n};\n/**\n * Get the fill style.\n * @return {module:ol/style/Fill} Fill style.\n * @api\n */\n\n\nStyle.prototype.getFill = function getFill() {\n  return this.fill_;\n};\n/**\n * Set the fill style.\n * @param {module:ol/style/Fill} fill Fill style.\n * @api\n */\n\n\nStyle.prototype.setFill = function setFill(fill) {\n  this.fill_ = fill;\n};\n/**\n * Get the image style.\n * @return {module:ol/style/Image} Image style.\n * @api\n */\n\n\nStyle.prototype.getImage = function getImage() {\n  return this.image_;\n};\n/**\n * Set the image style.\n * @param {module:ol/style/Image} image Image style.\n * @api\n */\n\n\nStyle.prototype.setImage = function setImage(image) {\n  this.image_ = image;\n};\n/**\n * Get the stroke style.\n * @return {module:ol/style/Stroke} Stroke style.\n * @api\n */\n\n\nStyle.prototype.getStroke = function getStroke() {\n  return this.stroke_;\n};\n/**\n * Set the stroke style.\n * @param {module:ol/style/Stroke} stroke Stroke style.\n * @api\n */\n\n\nStyle.prototype.setStroke = function setStroke(stroke) {\n  this.stroke_ = stroke;\n};\n/**\n * Get the text style.\n * @return {module:ol/style/Text} Text style.\n * @api\n */\n\n\nStyle.prototype.getText = function getText() {\n  return this.text_;\n};\n/**\n * Set the text style.\n * @param {module:ol/style/Text} text Text style.\n * @api\n */\n\n\nStyle.prototype.setText = function setText(text) {\n  this.text_ = text;\n};\n/**\n * Get the z-index for the style.\n * @return {number|undefined} ZIndex.\n * @api\n */\n\n\nStyle.prototype.getZIndex = function getZIndex() {\n  return this.zIndex_;\n};\n/**\n * Set a geometry that is rendered instead of the feature's geometry.\n *\n * @param {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction} geometry\n *   Feature property or geometry or function returning a geometry to render\n *   for this style.\n * @api\n */\n\n\nStyle.prototype.setGeometry = function setGeometry(geometry) {\n  if (typeof geometry === 'function') {\n    this.geometryFunction_ = geometry;\n  } else if (typeof geometry === 'string') {\n    this.geometryFunction_ = function (feature) {\n      return (\n        /** @type {module:ol/geom/Geometry} */\n        feature.get(geometry)\n      );\n    };\n  } else if (!geometry) {\n    this.geometryFunction_ = defaultGeometryFunction;\n  } else if (geometry !== undefined) {\n    this.geometryFunction_ = function () {\n      return (\n        /** @type {module:ol/geom/Geometry} */\n        geometry\n      );\n    };\n  }\n\n  this.geometry_ = geometry;\n};\n/**\n * Set the z-index.\n *\n * @param {number|undefined} zIndex ZIndex.\n * @api\n */\n\n\nStyle.prototype.setZIndex = function setZIndex(zIndex) {\n  this.zIndex_ = zIndex;\n};\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of module:ol/style/Style or single style objects wrapped in a\n * new style function.\n * @param {module:ol/style/Style~StyleFunction|Array.<module:ol/style/Style>|module:ol/style/Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {module:ol/style/Style~StyleFunction} A style function.\n */\n\n\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array.<module:ol/style/Style>}\n     */\n    var styles;\n\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(obj instanceof Style, 41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`\n\n      styles = [obj];\n    }\n\n    styleFunction = function styleFunction() {\n      return styles;\n    };\n  }\n\n  return styleFunction;\n}\n/**\n * @type {Array.<module:ol/style/Style>}\n */\n\nvar defaultStyles = null;\n/**\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array.<module:ol/style/Style>} Style.\n */\n\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (module:ol/style/Circle~CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n\n  return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object.<module:ol/geom/GeometryType, Array.<module:ol/style/Style>>} Styles\n */\n\nexport function createEditingStyle() {\n  /** @type {Object.<module:ol/geom/GeometryType, Array.<module:ol/style/Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n  styles[GeometryType.LINE_STRING] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n  styles[GeometryType.POINT] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n  return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature to get the geometry for.\n * @return {module:ol/geom/Geometry|module:ol/render/Feature|undefined} Geometry to render.\n */\n\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style; //# sourceMappingURL=Style.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/style/Style.js"],"names":["assert","GeometryType","CircleStyle","Fill","Stroke","Style","opt_options","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","stroke_","stroke","text_","text","zIndex_","zIndex","prototype","clone","getGeometry","getFill","getImage","getStroke","getText","getZIndex","getRenderer","setRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles","Array","isArray","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","white","blue","POLYGON","MULTI_POLYGON","LINE_STRING","MULTI_LINE_STRING","CIRCLE","concat","POINT","Infinity","MULTI_POINT","GEOMETRY_COLLECTION"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,QAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,WAAf,EAA4B;AAEtC,MAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;AAEA;AACF;AACA;AACA;;AACE,OAAKE,SAAL,GAAiB,IAAjB;AAEA;AACF;AACA;AACA;;AACE,OAAKC,iBAAL,GAAyBC,uBAAzB;;AAEA,MAAIH,OAAO,CAACI,QAAR,KAAqBC,SAAzB,EAAoC;AAClC,SAAKC,WAAL,CAAiBN,OAAO,CAACI,QAAzB;AACD;AAED;AACF;AACA;AACA;;;AACE,OAAKG,KAAL,GAAaP,OAAO,CAACQ,IAAR,KAAiBH,SAAjB,GAA6BL,OAAO,CAACQ,IAArC,GAA4C,IAAzD;AAEA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","sourcesContent":["/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport {assert} from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from '../style/Circle.js';\nimport Fill from '../style/Fill.js';\nimport Stroke from '../style/Stroke.js';\n\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function((module:ol/Feature|module:ol/render/Feature), number):\n *     (module:ol/style/Style|Array.<module:ol/style/Style>)} StyleFunction\n */\n\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function((module:ol/Feature|module:ol/render/Feature)):\n *     (module:ol/geom/Geometry|module:ol/render/Feature|undefined)} GeometryFunction\n */\n\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((module:ol/coordinate~Coordinate|Array<module:ol/coordinate~Coordinate>|Array.<Array.<module:ol/coordinate~Coordinate>>),module:ol/render~State)}\n * RenderFunction\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {module:ol/style/Fill} [fill] Fill style.\n * @property {module:ol/style/Image} [image] Image style.\n * @property {module:ol/style/Style~RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {module:ol/style/Text} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\nvar Style = function Style(opt_options) {\n\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction}\n   */\n  this.geometry_ = null;\n\n  /**\n   * @private\n   * @type {!module:ol/style/Style~GeometryFunction}\n   */\n  this.geometryFunction_ = defaultGeometryFunction;\n\n  if (options.geometry !== undefined) {\n    this.setGeometry(options.geometry);\n  }\n\n  /**\n   * @private\n   * @type {module:ol/style/Fill}\n   */\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n\n  /**\n     * @private\n     * @type {module:ol/style/Image}\n     */\n  this.image_ = options.image !== undefined ? options.image : null;\n\n  /**\n   * @private\n   * @type {module:ol/style/Style~RenderFunction|null}\n   */\n  this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n  /**\n   * @private\n   * @type {module:ol/style/Stroke}\n   */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n   * @private\n   * @type {module:ol/style/Text}\n   */\n  this.text_ = options.text !== undefined ? options.text : null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.zIndex_ = options.zIndex;\n\n};\n\n/**\n * Clones the style.\n * @return {module:ol/style/Style} The cloned style.\n * @api\n */\nStyle.prototype.clone = function clone () {\n  var geometry = this.getGeometry();\n  if (geometry && geometry.clone) {\n    geometry = geometry.clone();\n  }\n  return new Style({\n    geometry: geometry,\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    image: this.getImage() ? this.getImage().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    text: this.getText() ? this.getText().clone() : undefined,\n    zIndex: this.getZIndex()\n  });\n};\n\n/**\n * Get the custom renderer function that was configured with\n * {@link #setRenderer} or the `renderer` constructor option.\n * @return {module:ol/style/Style~RenderFunction|null} Custom renderer function.\n * @api\n */\nStyle.prototype.getRenderer = function getRenderer () {\n  return this.renderer_;\n};\n\n/**\n * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n * and `image` options of the style will be ignored.\n * @param {module:ol/style/Style~RenderFunction|null} renderer Custom renderer function.\n * @api\n */\nStyle.prototype.setRenderer = function setRenderer (renderer) {\n  this.renderer_ = renderer;\n};\n\n/**\n * Get the geometry to be rendered.\n * @return {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction}\n * Feature property or geometry or function that returns the geometry that will\n * be rendered with this style.\n * @api\n */\nStyle.prototype.getGeometry = function getGeometry () {\n  return this.geometry_;\n};\n\n/**\n * Get the function used to generate a geometry for rendering.\n * @return {!module:ol/style/Style~GeometryFunction} Function that is called with a feature\n * and returns the geometry to render instead of the feature's geometry.\n * @api\n */\nStyle.prototype.getGeometryFunction = function getGeometryFunction () {\n  return this.geometryFunction_;\n};\n\n/**\n * Get the fill style.\n * @return {module:ol/style/Fill} Fill style.\n * @api\n */\nStyle.prototype.getFill = function getFill () {\n  return this.fill_;\n};\n\n/**\n * Set the fill style.\n * @param {module:ol/style/Fill} fill Fill style.\n * @api\n */\nStyle.prototype.setFill = function setFill (fill) {\n  this.fill_ = fill;\n};\n\n/**\n * Get the image style.\n * @return {module:ol/style/Image} Image style.\n * @api\n */\nStyle.prototype.getImage = function getImage () {\n  return this.image_;\n};\n\n/**\n * Set the image style.\n * @param {module:ol/style/Image} image Image style.\n * @api\n */\nStyle.prototype.setImage = function setImage (image) {\n  this.image_ = image;\n};\n\n/**\n * Get the stroke style.\n * @return {module:ol/style/Stroke} Stroke style.\n * @api\n */\nStyle.prototype.getStroke = function getStroke () {\n  return this.stroke_;\n};\n\n/**\n * Set the stroke style.\n * @param {module:ol/style/Stroke} stroke Stroke style.\n * @api\n */\nStyle.prototype.setStroke = function setStroke (stroke) {\n  this.stroke_ = stroke;\n};\n\n/**\n * Get the text style.\n * @return {module:ol/style/Text} Text style.\n * @api\n */\nStyle.prototype.getText = function getText () {\n  return this.text_;\n};\n\n/**\n * Set the text style.\n * @param {module:ol/style/Text} text Text style.\n * @api\n */\nStyle.prototype.setText = function setText (text) {\n  this.text_ = text;\n};\n\n/**\n * Get the z-index for the style.\n * @return {number|undefined} ZIndex.\n * @api\n */\nStyle.prototype.getZIndex = function getZIndex () {\n  return this.zIndex_;\n};\n\n/**\n * Set a geometry that is rendered instead of the feature's geometry.\n *\n * @param {string|module:ol/geom/Geometry|module:ol/style/Style~GeometryFunction} geometry\n *   Feature property or geometry or function returning a geometry to render\n *   for this style.\n * @api\n */\nStyle.prototype.setGeometry = function setGeometry (geometry) {\n  if (typeof geometry === 'function') {\n    this.geometryFunction_ = geometry;\n  } else if (typeof geometry === 'string') {\n    this.geometryFunction_ = function(feature) {\n      return (\n        /** @type {module:ol/geom/Geometry} */ (feature.get(geometry))\n      );\n    };\n  } else if (!geometry) {\n    this.geometryFunction_ = defaultGeometryFunction;\n  } else if (geometry !== undefined) {\n    this.geometryFunction_ = function() {\n      return (\n        /** @type {module:ol/geom/Geometry} */ (geometry)\n      );\n    };\n  }\n  this.geometry_ = geometry;\n};\n\n/**\n * Set the z-index.\n *\n * @param {number|undefined} zIndex ZIndex.\n * @api\n */\nStyle.prototype.setZIndex = function setZIndex (zIndex) {\n  this.zIndex_ = zIndex;\n};\n\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of module:ol/style/Style or single style objects wrapped in a\n * new style function.\n * @param {module:ol/style/Style~StyleFunction|Array.<module:ol/style/Style>|module:ol/style/Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {module:ol/style/Style~StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array.<module:ol/style/Style>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(obj instanceof Style,\n        41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`\n      styles = [obj];\n    }\n    styleFunction = function() {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n\n/**\n * @type {Array.<module:ol/style/Style>}\n */\nvar defaultStyles = null;\n\n\n/**\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array.<module:ol/style/Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (module:ol/style/Circle~CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5\n        }),\n        fill: fill,\n        stroke: stroke\n      })\n    ];\n  }\n  return defaultStyles;\n}\n\n\n/**\n * Default styles for editing features.\n * @return {Object.<module:ol/geom/GeometryType, Array.<module:ol/style/Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object.<module:ol/geom/GeometryType, Array.<module:ol/style/Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5]\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_POLYGON] =\n      styles[GeometryType.POLYGON];\n\n  styles[GeometryType.LINE_STRING] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2\n      })\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_LINE_STRING] =\n      styles[GeometryType.LINE_STRING];\n\n  styles[GeometryType.CIRCLE] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING]\n      );\n\n\n  styles[GeometryType.POINT] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2\n        })\n      }),\n      zIndex: Infinity\n    })\n  ];\n  styles[GeometryType.MULTI_POINT] =\n      styles[GeometryType.POINT];\n\n  styles[GeometryType.GEOMETRY_COLLECTION] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING],\n        styles[GeometryType.POINT]\n      );\n\n  return styles;\n}\n\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {module:ol/Feature|module:ol/render/Feature} feature Feature to get the geometry for.\n * @return {module:ol/geom/Geometry|module:ol/render/Feature|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n\n//# sourceMappingURL=Style.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/proj/epsg3857\n */\nimport { cosh } from '../math.js';\nimport Projection from '../proj/Projection.js';\nimport Units from '../proj/Units.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\n\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {module:ol/extent~Extent}\n */\n\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {module:ol/extent~Extent}\n */\n\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\n\nvar EPSG3857Projection = function (Projection) {\n  function EPSG3857Projection(code) {\n    Projection.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function getPointResolution(resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n  }\n\n  if (Projection) EPSG3857Projection.__proto__ = Projection;\n  EPSG3857Projection.prototype = Object.create(Projection && Projection.prototype);\n  EPSG3857Projection.prototype.constructor = EPSG3857Projection;\n  return EPSG3857Projection;\n}(Projection);\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array.<module:ol/proj/Projection>}\n */\n\n\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'), new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  var halfSize = HALF_SIZE;\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n\n    output[i + 1] = y;\n  }\n\n  return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\n\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n\n  return output;\n} //# sourceMappingURL=epsg3857.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/proj/epsg3857.js"],"names":["cosh","Projection","Units","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","EPSG3857Projection","code","call","units","METERS","extent","global","worldExtent","getPointResolution","resolution","point","__proto__","prototype","Object","create","constructor","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","Array","halfSize","i","y","log","tan","toEPSG4326","atan","exp"],"mappings":"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","sourcesContent":["/**\n * @module ol/proj/epsg3857\n */\nimport {cosh} from '../math.js';\nimport Projection from '../proj/Projection.js';\nimport Units from '../proj/Units.js';\n\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n\n\n/**\n * @const\n * @type {module:ol/extent~Extent}\n */\nexport var EXTENT = [\n  -HALF_SIZE, -HALF_SIZE,\n  HALF_SIZE, HALF_SIZE\n];\n\n\n/**\n * @const\n * @type {module:ol/extent~Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = (function (Projection) {\n  function EPSG3857Projection(code) {\n    Projection.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function(resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n\n  }\n\n  if ( Projection ) EPSG3857Projection.__proto__ = Projection;\n  EPSG3857Projection.prototype = Object.create( Projection && Projection.prototype );\n  EPSG3857Projection.prototype.constructor = EPSG3857Projection;\n\n  return EPSG3857Projection;\n}(Projection));\n\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array.<module:ol/proj/Projection>}\n */\nexport var PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = RADIUS *\n        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array.<number>} input Input array of coordinate values.\n * @param {Array.<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array.<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(\n      Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}\n\n//# sourceMappingURL=epsg3857.js.map"]},"metadata":{},"sourceType":"module"}
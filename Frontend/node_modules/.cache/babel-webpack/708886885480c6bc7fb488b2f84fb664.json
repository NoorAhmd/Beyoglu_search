{"ast":null,"code":"/**\n * @module ol/Image\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { listenOnce, unlistenByKey } from './events.js';\nimport EventType from './events/EventType.js';\nimport { getHeight } from './extent.js';\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(module:ol/Image, string)} LoadFunction\n * @api\n */\n\nvar ImageWrapper = function (ImageBase) {\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    ImageBase.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.src_ = src;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n\n    this.image_ = new Image();\n\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {Array.<module:ol/events~EventsKey>}\n     */\n\n\n    this.imageListenerKeys_ = null;\n    /**\n     * @protected\n     * @type {module:ol/ImageState}\n     */\n\n    this.state = ImageState.IDLE;\n    /**\n     * @private\n     * @type {module:ol/Image~LoadFunction}\n     */\n\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  if (ImageBase) ImageWrapper.__proto__ = ImageBase;\n  ImageWrapper.prototype = Object.create(ImageBase && ImageBase.prototype);\n  ImageWrapper.prototype.constructor = ImageWrapper;\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n  ImageWrapper.prototype.getImage = function getImage() {\n    return this.image_;\n  };\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n\n\n  ImageWrapper.prototype.handleImageError_ = function handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n\n\n  ImageWrapper.prototype.handleImageLoad_ = function handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @override\n   * @api\n   */\n\n\n  ImageWrapper.prototype.load = function load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageListenerKeys_ = [listenOnce(this.image_, EventType.ERROR, this.handleImageError_, this), listenOnce(this.image_, EventType.LOAD, this.handleImageLoad_, this)];\n      this.imageLoadFunction_(this, this.src_);\n    }\n  };\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n\n\n  ImageWrapper.prototype.setImage = function setImage(image) {\n    this.image_ = image;\n  };\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n\n\n  ImageWrapper.prototype.unlistenImage_ = function unlistenImage_() {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n\n  return ImageWrapper;\n}(ImageBase);\n\nexport default ImageWrapper; //# sourceMappingURL=Image.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/Image.js"],"names":["ImageBase","ImageState","listenOnce","unlistenByKey","EventType","getHeight","ImageWrapper","extent","resolution","pixelRatio","src","crossOrigin","imageLoadFunction","call","IDLE","src_","image_","Image","imageListenerKeys_","state","imageLoadFunction_","__proto__","prototype","Object","create","constructor","getImage","handleImageError_","ERROR","unlistenImage_","changed","handleImageLoad_","undefined","height","LOADED","load","LOADING","LOAD","setImage","image","forEach"],"mappings":"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","sourcesContent":["/**\n * @module ol/Image\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\nimport {getHeight} from './extent.js';\n\n\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(module:ol/Image, string)} LoadFunction\n * @api\n */\n\n\nvar ImageWrapper = (function (ImageBase) {\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n\n    ImageBase.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {Array.<module:ol/events~EventsKey>}\n     */\n    this.imageListenerKeys_ = null;\n\n    /**\n     * @protected\n     * @type {module:ol/ImageState}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {module:ol/Image~LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n\n  }\n\n  if ( ImageBase ) ImageWrapper.__proto__ = ImageBase;\n  ImageWrapper.prototype = Object.create( ImageBase && ImageBase.prototype );\n  ImageWrapper.prototype.constructor = ImageWrapper;\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  ImageWrapper.prototype.getImage = function getImage () {\n    return this.image_;\n  };\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.handleImageError_ = function handleImageError_ () {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  };\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.handleImageLoad_ = function handleImageLoad_ () {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  };\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @override\n   * @api\n   */\n  ImageWrapper.prototype.load = function load () {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageListenerKeys_ = [\n        listenOnce(this.image_, EventType.ERROR,\n          this.handleImageError_, this),\n        listenOnce(this.image_, EventType.LOAD,\n          this.handleImageLoad_, this)\n      ];\n      this.imageLoadFunction_(this, this.src_);\n    }\n  };\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  ImageWrapper.prototype.setImage = function setImage (image) {\n    this.image_ = image;\n  };\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.unlistenImage_ = function unlistenImage_ () {\n    this.imageListenerKeys_.forEach(unlistenByKey);\n    this.imageListenerKeys_ = null;\n  };\n\n  return ImageWrapper;\n}(ImageBase));\n\n\nexport default ImageWrapper;\n\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}
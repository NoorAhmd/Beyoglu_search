{"ast":null,"code":"/**\n * @module ol/resolutionconstraint\n */\nimport { linearFindNearest } from './array.js';\nimport { clamp } from './math.js';\n/**\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\n */\n\n/**\n * @param {Array.<number>} resolutions Resolutions.\n * @return {module:ol/resolutionconstraint~Type} Zoom function.\n */\n\nexport function createSnapToResolutions(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var z = linearFindNearest(resolutions, resolution, direction);\n        z = clamp(z + delta, 0, resolutions.length - 1);\n        var index = Math.floor(z);\n\n        if (z != index && index < resolutions.length - 1) {\n          var power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {module:ol/resolutionconstraint~Type} Zoom function.\n */\n\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var offset = -direction / 2 + 0.5;\n        var oldLevel = Math.floor(Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        var newLevel = Math.max(oldLevel + delta, 0);\n\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    }\n  );\n} //# sourceMappingURL=resolutionconstraint.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/resolutionconstraint.js"],"names":["linearFindNearest","clamp","createSnapToResolutions","resolutions","resolution","delta","direction","undefined","z","length","index","Math","floor","power","pow","createSnapToPower","maxResolution","opt_maxLevel","offset","oldLevel","log","newLevel","max","min"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,iBAAR,QAAgC,YAAhC;AACA,SAAQC,KAAR,QAAoB,WAApB;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,WAAjC,EAA8C;AACnD;AACE;AACJ;AACA;AACA;AACA;AACA;AACI,cAASC,UAAT,EAAqBC,KAArB,EAA4BC,SAA5B,EAAuC;AACrC,UAAIF,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,YAAIC,CAAC,GAAGR,iBAAiB,CAACG,WAAD,EAAcC,UAAd,EAA0BE,SAA1B,CAAzB;AACAE,QAAAA,CAAC,GAAGP,KAAK,CAACO,CAAC,GAAGH,KAAL,EAAY,CAAZ,EAAeF,WAAW,CAACM,MAAZ,GAAqB,CAApC,CAAT;AACA,YAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAX,CAAZ;;AACA,YAAIA,CAAC,IAAIE,KAAL,IAAcA,KAAK,GAAGP,WAAW,CAACM,MAAZ,GAAqB,CAA/C,EAAkD;AAChD,cAAII,KAAK,GAAGV,WAAW,CAACO,KAAD,CAAX,GAAqBP,WAAW,CAACO,KAAK,GAAG,CAAT,CAA5C;AACA,iBAAOP,WAAW,CAACO,KAAD,CAAX,GAAqBC,IAAI,CAACG,GAAL,CAASD,KAAT,EAAgBL,CAAC,GAAGE,KAApB,CAA5B;AACD,SAHD,MAGO;AACL,iBAAOP,WAAW,CAACO,KAAD,CAAlB;AACD;AACF,OAVD,MAUO;AACL,eAAOH,SAAP;AACD;AACF;AArBH;AAuBD;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,iBAAT,CAA2BF,KAA3B,EAAkCG,aAAlC,EAAiDC,YAAjD,EAA+D;AACpE;AACE;AACJ;AACA;AACA;AACA;AACA;AACI,cAASb,UAAT,EAAqBC,KAArB,EAA4BC,SAA5B,EAAuC;AACrC,UAAIF,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,YAAIW,MAAM,GAAG,CAACZ,SAAD,GAAa,CAAb,GAAiB,GAA9B;AACA,YAAIa,QAAQ,GAAGR,IAAI,CAACC,KAAL,CACbD,IAAI,CAACS,GAAL,CAASJ,aAAa,GAAGZ,UAAzB,IAAuCO,IAAI,CAACS,GAAL,CAASP,KAAT,CAAvC,GAAyDK,MAD5C,CAAf;AAEA,YAAIG,QAAQ,GAAGV,IAAI,CAACW,GAAL,CAASH,QAAQ,GAAGd,KAApB,EAA2B,CAA3B,CAAf;;AACA,YAAIY,YAAY,KAAKV,SAArB,EAAgC;AAC9Bc,UAAAA,QAAQ,GAAGV,IAAI,CAACY,GAAL,CAASF,QAAT,EAAmBJ,YAAnB,CAAX;AACD;;AACD,eAAOD,aAAa,GAAGL,IAAI,CAACG,GAAL,CAASD,KAAT,EAAgBQ,QAAhB,CAAvB;AACD,OATD,MASO;AACL,eAAOd,SAAP;AACD;AACF;AApBH;AAqBD,C,CAED","sourcesContent":["/**\n * @module ol/resolutionconstraint\n */\nimport {linearFindNearest} from './array.js';\nimport {clamp} from './math.js';\n\n\n/**\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\n */\n\n\n/**\n * @param {Array.<number>} resolutions Resolutions.\n * @return {module:ol/resolutionconstraint~Type} Zoom function.\n */\nexport function createSnapToResolutions(resolutions) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var z = linearFindNearest(resolutions, resolution, direction);\n        z = clamp(z + delta, 0, resolutions.length - 1);\n        var index = Math.floor(z);\n        if (z != index && index < resolutions.length - 1) {\n          var power = resolutions[index] / resolutions[index + 1];\n          return resolutions[index] / Math.pow(power, z - index);\n        } else {\n          return resolutions[index];\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number=} opt_maxLevel Maximum level.\n * @return {module:ol/resolutionconstraint~Type} Zoom function.\n */\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} delta Delta.\n     * @param {number} direction Direction.\n     * @return {number|undefined} Resolution.\n     */\n    function(resolution, delta, direction) {\n      if (resolution !== undefined) {\n        var offset = -direction / 2 + 0.5;\n        var oldLevel = Math.floor(\n          Math.log(maxResolution / resolution) / Math.log(power) + offset);\n        var newLevel = Math.max(oldLevel + delta, 0);\n        if (opt_maxLevel !== undefined) {\n          newLevel = Math.min(newLevel, opt_maxLevel);\n        }\n        return maxResolution / Math.pow(power, newLevel);\n      } else {\n        return undefined;\n      }\n    });\n}\n\n//# sourceMappingURL=resolutionconstraint.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/geom/SimpleGeometry\n */\nimport { FALSE } from '../functions.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport { rotate, scale, translate, transform2D } from '../geom/flat/transform.js';\nimport { clear } from '../obj.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\n\nvar SimpleGeometry = function (Geometry) {\n  function SimpleGeometry() {\n    Geometry.call(this);\n    /**\n     * @protected\n     * @type {module:ol/geom/GeometryLayout}\n     */\n\n    this.layout = GeometryLayout.XY;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.stride = 2;\n    /**\n     * @protected\n     * @type {Array.<number>}\n     */\n\n    this.flatCoordinates = null;\n  }\n\n  if (Geometry) SimpleGeometry.__proto__ = Geometry;\n  SimpleGeometry.prototype = Object.create(Geometry && Geometry.prototype);\n  SimpleGeometry.prototype.constructor = SimpleGeometry;\n  /**\n   * @inheritDoc\n   */\n\n  SimpleGeometry.prototype.computeExtent = function computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * @abstract\n   * @return {Array} Coordinates.\n   */\n\n\n  SimpleGeometry.prototype.getCoordinates = function getCoordinates() {};\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {module:ol/coordinate~Coordinate} First coordinate.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.getFirstCoordinate = function getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @return {Array.<number>} Flat coordinates.\n   */\n\n\n  SimpleGeometry.prototype.getFlatCoordinates = function getFlatCoordinates() {\n    return this.flatCoordinates;\n  };\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {module:ol/coordinate~Coordinate} Last point.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.getLastCoordinate = function getLastCoordinate() {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  };\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout~GeometryLayout layout} of the geometry.\n   * @return {module:ol/geom/GeometryLayout} Layout.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.getLayout = function getLayout() {\n    return this.layout;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  SimpleGeometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    } // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    var key = squaredTolerance.toString();\n\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n      var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n\n      if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n        this.simplifiedGeometryCache[key] = simplifiedGeometry;\n        return simplifiedGeometry;\n      } else {\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {module:ol/geom/SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n\n\n  SimpleGeometry.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  };\n  /**\n   * @return {number} Stride.\n   */\n\n\n  SimpleGeometry.prototype.getStride = function getStride() {\n    return this.stride;\n  };\n  /**\n   * @param {module:ol/geom/GeometryLayout} layout Layout.\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n    */\n\n\n  SimpleGeometry.prototype.setFlatCoordinates = function setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  };\n  /**\n   * @abstract\n   * @param {!Array} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   */\n\n\n  SimpleGeometry.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {};\n  /**\n   * @param {module:ol/geom/GeometryLayout|undefined} layout Layout.\n   * @param {Array} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n\n\n  SimpleGeometry.prototype.setLayout = function setLayout(layout, coordinates, nesting) {\n    var this$1 = this;\n    /** @type {number} */\n\n    var stride;\n\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (var i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this$1.layout = GeometryLayout.XY;\n          this$1.stride = 2;\n          return;\n        } else {\n          coordinates =\n          /** @type {Array} */\n          coordinates[0];\n        }\n      }\n\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n\n    this.layout = layout;\n    this.stride = stride;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.applyTransform = function applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.rotate = function rotate$1(angle, anchor) {\n    var flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.scale = function scale$1(sx, opt_sy, opt_anchor) {\n    var sy = opt_sy;\n\n    if (sy === undefined) {\n      sy = sx;\n    }\n\n    var anchor = opt_anchor;\n\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    var flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.translate = function translate$1(deltaX, deltaY) {\n    var flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  return SimpleGeometry;\n}(Geometry);\n/**\n * @param {number} stride Stride.\n * @return {module:ol/geom/GeometryLayout} layout Layout.\n */\n\n\nfunction getLayoutForStride(stride) {\n  var layout;\n\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n\n  return (\n    /** @type {module:ol/geom/GeometryLayout} */\n    layout\n  );\n}\n/**\n * @param {module:ol/geom/GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\n\n\nexport function getStrideForLayout(layout) {\n  var stride;\n\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n\n  return (\n    /** @type {number} */\n    stride\n  );\n}\n/**\n * @inheritDoc\n */\n\nSimpleGeometry.prototype.containsXY = FALSE;\n/**\n * @param {module:ol/geom/SimpleGeometry} simpleGeometry Simple geometry.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed flat coordinates.\n */\n\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  var flatCoordinates = simpleGeometry.getFlatCoordinates();\n\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    var stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n  }\n}\nexport default SimpleGeometry; //# sourceMappingURL=SimpleGeometry.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/geom/SimpleGeometry.js"],"names":["FALSE","createOrUpdateFromFlatCoordinates","getCenter","Geometry","GeometryLayout","rotate","scale","translate","transform2D","clear","SimpleGeometry","call","layout","XY","stride","flatCoordinates","__proto__","prototype","Object","create","constructor","computeExtent","extent","length","getCoordinates","getFirstCoordinate","slice","getFlatCoordinates","getLastCoordinate","getLayout","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryCache","simplifiedGeometryMaxMinSquaredTolerance","key","toString","hasOwnProperty","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","getStrideForLayout","setCoordinates","coordinates","opt_layout","setLayout","nesting","this$1","i","getLayoutForStride","applyTransform","transformFn","changed","rotate$1","angle","anchor","scale$1","sx","opt_sy","opt_anchor","sy","undefined","getExtent","translate$1","deltaX","deltaY","XYZ","XYZM","XYM","containsXY","transformGeom2D","simpleGeometry","transform","opt_dest"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/SimpleGeometry\n */\nimport {FALSE} from '../functions.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport {rotate, scale, translate, transform2D} from '../geom/flat/transform.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = (function (Geometry) {\n  function SimpleGeometry() {\n\n    Geometry.call(this);\n\n    /**\n     * @protected\n     * @type {module:ol/geom/GeometryLayout}\n     */\n    this.layout = GeometryLayout.XY;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array.<number>}\n     */\n    this.flatCoordinates = null;\n\n  }\n\n  if ( Geometry ) SimpleGeometry.__proto__ = Geometry;\n  SimpleGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n  SimpleGeometry.prototype.constructor = SimpleGeometry;\n\n  /**\n   * @inheritDoc\n   */\n  SimpleGeometry.prototype.computeExtent = function computeExtent (extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates,\n      0, this.flatCoordinates.length, this.stride, extent);\n  };\n\n  /**\n   * @abstract\n   * @return {Array} Coordinates.\n   */\n  SimpleGeometry.prototype.getCoordinates = function getCoordinates () {};\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {module:ol/coordinate~Coordinate} First coordinate.\n   * @api\n   */\n  SimpleGeometry.prototype.getFirstCoordinate = function getFirstCoordinate () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n\n  /**\n   * @return {Array.<number>} Flat coordinates.\n   */\n  SimpleGeometry.prototype.getFlatCoordinates = function getFlatCoordinates () {\n    return this.flatCoordinates;\n  };\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {module:ol/coordinate~Coordinate} Last point.\n   * @api\n   */\n  SimpleGeometry.prototype.getLastCoordinate = function getLastCoordinate () {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  };\n\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout~GeometryLayout layout} of the geometry.\n   * @return {module:ol/geom/GeometryLayout} Layout.\n   * @api\n   */\n  SimpleGeometry.prototype.getLayout = function getLayout () {\n    return this.layout;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometry = function getSimplifiedGeometry (squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (squaredTolerance < 0 ||\n        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n         squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {\n      return this;\n    }\n    var key = squaredTolerance.toString();\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      var simplifiedGeometry =\n          this.getSimplifiedGeometryInternal(squaredTolerance);\n      var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n      if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n        this.simplifiedGeometryCache[key] = simplifiedGeometry;\n        return simplifiedGeometry;\n      } else {\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  };\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {module:ol/geom/SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometryInternal = function getSimplifiedGeometryInternal (squaredTolerance) {\n    return this;\n  };\n\n  /**\n   * @return {number} Stride.\n   */\n  SimpleGeometry.prototype.getStride = function getStride () {\n    return this.stride;\n  };\n\n  /**\n   * @param {module:ol/geom/GeometryLayout} layout Layout.\n   * @param {Array.<number>} flatCoordinates Flat coordinates.\n    */\n  SimpleGeometry.prototype.setFlatCoordinates = function setFlatCoordinates (layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  };\n\n  /**\n   * @abstract\n   * @param {!Array} coordinates Coordinates.\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\n   */\n  SimpleGeometry.prototype.setCoordinates = function setCoordinates (coordinates, opt_layout) {};\n\n  /**\n   * @param {module:ol/geom/GeometryLayout|undefined} layout Layout.\n   * @param {Array} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  SimpleGeometry.prototype.setLayout = function setLayout (layout, coordinates, nesting) {\n    var this$1 = this;\n\n    /** @type {number} */\n    var stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (var i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this$1.layout = GeometryLayout.XY;\n          this$1.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */ (coordinates[0]);\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.applyTransform = function applyTransform (transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.rotate = function rotate$1 (angle, anchor) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      rotate(\n        flatCoordinates, 0, flatCoordinates.length,\n        stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.scale = function scale$1 (sx, opt_sy, opt_anchor) {\n    var sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    var anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      scale(\n        flatCoordinates, 0, flatCoordinates.length,\n        stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  SimpleGeometry.prototype.translate = function translate$1 (deltaX, deltaY) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      translate(\n        flatCoordinates, 0, flatCoordinates.length, stride,\n        deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  return SimpleGeometry;\n}(Geometry));\n\n\n/**\n * @param {number} stride Stride.\n * @return {module:ol/geom/GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  var layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return (\n    /** @type {module:ol/geom/GeometryLayout} */ (layout)\n  );\n}\n\n\n/**\n * @param {module:ol/geom/GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  var stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n\n/**\n * @inheritDoc\n */\nSimpleGeometry.prototype.containsXY = FALSE;\n\n\n/**\n * @param {module:ol/geom/SimpleGeometry} simpleGeometry Simple geometry.\n * @param {module:ol/transform~Transform} transform Transform.\n * @param {Array.<number>=} opt_dest Destination.\n * @return {Array.<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  var flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    var stride = simpleGeometry.getStride();\n    return transform2D(\n      flatCoordinates, 0, flatCoordinates.length, stride,\n      transform, opt_dest);\n  }\n}\n\nexport default SimpleGeometry;\n\n//# sourceMappingURL=SimpleGeometry.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module ol/math\n */\nimport { assert } from './asserts.js';\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\n\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\n\nexport var cosh = function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function cosh(x) {\n      var y = Math.exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n\n  return cosh;\n}();\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\n\nexport function roundUpToPowerOfTwo(x) {\n  assert(0 < x, 29); // `x` must be greater than `0`\n\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n}\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n\nexport function squaredDistance(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array.<Array.<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array.<number>} The resulting vector.\n */\n\nexport function solveLinearSystem(mat) {\n  var n = mat.length;\n\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    } // Swap max row with i-th (current) row\n\n\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp; // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  } // Solve Ax=b for upper triangular matrix A (mat)\n\n\n  var x = new Array(n);\n\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n\n  return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\n\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\n\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\n\nexport function modulo(a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\n\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n} //# sourceMappingURL=math.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/Beyoglu_search/Frontend/node_modules/ol/math.js"],"names":["assert","clamp","value","min","max","Math","cosh","x","y","exp","roundUpToPowerOfTwo","pow","ceil","log","LN2","squaredSegmentDistance","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","length","i","maxRow","maxEl","abs","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","PI","toRadians","angleInDegrees","modulo","a","b","lerp"],"mappings":"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","sourcesContent":["/**\n * @module ol/math\n */\nimport {assert} from './asserts.js';\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport var cosh = (function() {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function(x) {\n      var y = Math.exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n  return cosh;\n}());\n\n\n/**\n * @param {number} x X.\n * @return {number} The smallest power of two greater than or equal to x.\n */\nexport function roundUpToPowerOfTwo(x) {\n  assert(0 < x, 29); // `x` must be greater than `0`\n  return Math.pow(2, Math.ceil(Math.log(x) / Math.LN2));\n}\n\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array.<Array.<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array.<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  var n = mat.length;\n\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  var x = new Array(n);\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n//# sourceMappingURL=math.js.map"]},"metadata":{},"sourceType":"module"}
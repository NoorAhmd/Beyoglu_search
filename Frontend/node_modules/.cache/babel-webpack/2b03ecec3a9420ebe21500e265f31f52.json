{"ast":null,"code":"/**\n * @module ol/style/Circle\n */\nimport RegularShape from '../style/RegularShape.js';\n/**\n * @typedef {Object} Options\n * @property {module:ol/style/Fill} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate\n * when drawing the circle in the output canvas. If `false` fractional numbers may be used. Using `true` allows for\n * \"sharp\" rendering (no blur), while using `false` allows for \"accurate\" rendering. Note that accuracy is important if\n * the circle's position is animated. Without it, the circle may jitter noticeably.\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this circle.\n * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,\n * the circle is added to an atlas. By default no atlas manager is used.\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\n\nvar CircleStyle = function (RegularShape) {\n  function CircleStyle(opt_options) {\n    var options = opt_options || {};\n    RegularShape.call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      snapToPixel: options.snapToPixel,\n      stroke: options.stroke,\n      atlasManager: options.atlasManager\n    });\n  }\n\n  if (RegularShape) CircleStyle.__proto__ = RegularShape;\n  CircleStyle.prototype = Object.create(RegularShape && RegularShape.prototype);\n  CircleStyle.prototype.constructor = CircleStyle;\n  /**\n  * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n  * @return {module:ol/style/Circle} The cloned style.\n  * @override\n  * @api\n  */\n\n  CircleStyle.prototype.clone = function clone() {\n    var style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      snapToPixel: this.getSnapToPixel(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n  /**\n  * Set the circle radius.\n  *\n  * @param {number} radius Circle radius.\n  * @api\n  */\n\n\n  CircleStyle.prototype.setRadius = function setRadius(radius) {\n    this.radius_ = radius;\n    this.render_(this.atlasManager_);\n  };\n\n  return CircleStyle;\n}(RegularShape);\n\nexport default CircleStyle; //# sourceMappingURL=Circle.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/style/Circle.js"],"names":["RegularShape","CircleStyle","opt_options","options","call","points","Infinity","fill","radius","snapToPixel","stroke","atlasManager","__proto__","prototype","Object","create","constructor","clone","style","getFill","undefined","getStroke","getRadius","getSnapToPixel","atlasManager_","setOpacity","getOpacity","setScale","getScale","setRadius","radius_","render_"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,YAAP,MAAyB,0BAAzB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAI,UAAUD,YAAV,EAAwB;AACzC,WAASC,WAAT,CAAqBC,WAArB,EAAkC;AAEhC,QAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;AAEAF,IAAAA,YAAY,CAACI,IAAb,CAAkB,IAAlB,EAAwB;AACtBC,MAAAA,MAAM,EAAEC,QADc;AAEtBC,MAAAA,IAAI,EAAEJ,OAAO,CAACI,IAFQ;AAGtBC,MAAAA,MAAM,EAAEL,OAAO,CAACK,MAHM;AAItBC,MAAAA,WAAW,EAAEN,OAAO,CAACM,WAJC;AAKtBC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MALM;AAMtBC,MAAAA,YAAY,EAAER,OAAO,CAACQ;AANA,KAAxB;AASD;;AAED,MAAKX,YAAL,EAAoBC,WAAW,CAACW,SAAZ,GAAwBZ,YAAxB;AACpBC,EAAAA,WAAW,CAACY,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAef,YAAY,IAAIA,YAAY,CAACa,SAA5C,CAAxB;AACAZ,EAAAA,WAAW,CAACY,SAAZ,CAAsBG,WAAtB,GAAoCf,WAApC;AAEA;AACF;AACA;AACA;AACA;AACA;;AACEA,EAAAA,WAAW,CAACY,SAAZ,CAAsBI,KAAtB,GAA8B,SAASA,KAAT,GAAkB;AAC9C,QAAIC,KAAK,GAAG,IAAIjB,WAAJ,CAAgB;AAC1BM,MAAAA,IAAI,EAAE,KAAKY,OAAL,KAAiB,KAAKA,OAAL,GAAeF,KAAf,EAAjB,GAA0CG,SADtB;AAE1BV,MAAAA,MAAM,EAAE,KAAKW,SAAL,KAAmB,KAAKA,SAAL,GAAiBJ,KAAjB,EAAnB,GAA8CG,SAF5B;AAG1BZ,MAAAA,MAAM,EAAE,KAAKc,SAAL,EAHkB;AAI1Bb,MAAAA,WAAW,EAAE,KAAKc,cAAL,EAJa;AAK1BZ,MAAAA,YAAY,EAAE,KAAKa;AALO,KAAhB,CAAZ;AAOAN,IAAAA,KAAK,CAACO,UAAN,CAAiB,KAAKC,UAAL,EAAjB;AACAR,IAAAA,KAAK,CAACS,QAAN,CAAe,KAAKC,QAAL,EAAf;AACA,WAAOV,KAAP;AACD,GAXD;AAaA;AACF;AACA;AACA;AACA;AACA;;;AACEjB,EAAAA,WAAW,CAACY,SAAZ,CAAsBgB,SAAtB,GAAkC,SAASA,SAAT,CAAoBrB,MAApB,EAA4B;AAC5D,SAAKsB,OAAL,GAAetB,MAAf;AACA,SAAKuB,OAAL,CAAa,KAAKP,aAAlB;AACD,GAHD;;AAKA,SAAOvB,WAAP;AACD,CAnDkB,CAmDjBD,YAnDiB,CAAnB;;AAsDA,eAAeC,WAAf,C,CAEA","sourcesContent":["/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from '../style/RegularShape.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/style/Fill} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate\n * when drawing the circle in the output canvas. If `false` fractional numbers may be used. Using `true` allows for\n * \"sharp\" rendering (no blur), while using `false` allows for \"accurate\" rendering. Note that accuracy is important if\n * the circle's position is animated. Without it, the circle may jitter noticeably.\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\n * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this circle.\n * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,\n * the circle is added to an atlas. By default no atlas manager is used.\n */\n\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nvar CircleStyle = (function (RegularShape) {\n  function CircleStyle(opt_options) {\n\n    var options = opt_options || {};\n\n    RegularShape.call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      snapToPixel: options.snapToPixel,\n      stroke: options.stroke,\n      atlasManager: options.atlasManager\n    });\n\n  }\n\n  if ( RegularShape ) CircleStyle.__proto__ = RegularShape;\n  CircleStyle.prototype = Object.create( RegularShape && RegularShape.prototype );\n  CircleStyle.prototype.constructor = CircleStyle;\n\n  /**\n  * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.\n  * @return {module:ol/style/Circle} The cloned style.\n  * @override\n  * @api\n  */\n  CircleStyle.prototype.clone = function clone () {\n    var style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      snapToPixel: this.getSnapToPixel(),\n      atlasManager: this.atlasManager_\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n\n  /**\n  * Set the circle radius.\n  *\n  * @param {number} radius Circle radius.\n  * @api\n  */\n  CircleStyle.prototype.setRadius = function setRadius (radius) {\n    this.radius_ = radius;\n    this.render_(this.atlasManager_);\n  };\n\n  return CircleStyle;\n}(RegularShape));\n\n\nexport default CircleStyle;\n\n//# sourceMappingURL=Circle.js.map"]},"metadata":{},"sourceType":"module"}
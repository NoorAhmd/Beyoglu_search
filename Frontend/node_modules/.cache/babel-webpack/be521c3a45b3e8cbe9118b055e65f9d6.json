{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { toSize } from './size.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport Corner from './extent/Corner.js';\nimport { assign } from './obj.js';\nimport { get as getProjection, METERS_PER_UNIT } from './proj.js';\nimport Units from './proj/Units.js';\nimport TileGrid from './tilegrid/TileGrid.js';\n/**\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {!module:ol/tilegrid/TileGrid} Default tile grid for the\n * passed projection.\n */\n\nexport function getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n}\n/**\n * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n */\n\nexport function wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n\n  if (!containsCoordinate(projectionExtent, center)) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.\n */\n\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the\n * provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|module:ol/size~Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {module:ol/tilegrid~XYZOptions=} opt_options Tile grid options.\n * @return {!module:ol/tilegrid/TileGrid} Tile grid instance.\n * @api\n */\n\nexport function createXYZ(opt_options) {\n  var options =\n  /** @type {module:ol/tilegrid/TileGrid~Options} */\n  {};\n  assign(options, opt_options !== undefined ? opt_options :\n  /** @type {module:ol/tilegrid~XYZOptions} */\n  {});\n\n  if (options.extent === undefined) {\n    options.extent = getProjection('EPSG:3857').getExtent();\n  }\n\n  options.resolutions = resolutionsFromExtent(options.extent, options.maxZoom, options.tileSize);\n  delete options.maxZoom;\n  return new TileGrid(options);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @return {!Array.<number>} Resolutions array.\n */\n\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n  var height = getHeight(extent);\n  var width = getWidth(extent);\n  var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n  var maxResolution = Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n}\n/**\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.\n */\n\n\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @return {module:ol/extent~Extent} Extent.\n */\n\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  var extent = projection.getExtent();\n\n  if (!extent) {\n    var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n\n  return extent;\n} //# sourceMappingURL=tilegrid.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/tilegrid.js"],"names":["DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","toSize","containsCoordinate","createOrUpdate","getCorner","getHeight","getWidth","Corner","assign","get","getProjection","METERS_PER_UNIT","Units","TileGrid","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","opt_maxZoom","opt_tileSize","opt_corner","corner","undefined","TOP_LEFT","resolutions","resolutionsFromExtent","origin","tileSize","createXYZ","opt_options","options","getExtent","maxZoom","height","width","maxResolution","max","length","Array","pow","half","DEGREES","getMetersPerUnit"],"mappings":"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","sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {toSize} from './size.js';\nimport {containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth} from './extent.js';\nimport Corner from './extent/Corner.js';\nimport {assign} from './obj.js';\nimport {get as getProjection, METERS_PER_UNIT} from './proj.js';\nimport Units from './proj/Units.js';\nimport TileGrid from './tilegrid/TileGrid.js';\n\n\n/**\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {!module:ol/tilegrid/TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n\n/**\n * @param {module:ol/tilegrid/TileGrid} tileGrid Tile grid.\n * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\n * @param {module:ol/proj/Projection} projection Projection.\n * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n\n\n/**\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n\n\n/**\n * @typedef {Object} XYZOptions\n * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the\n * provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|module:ol/size~Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {module:ol/tilegrid~XYZOptions=} opt_options Tile grid options.\n * @return {!module:ol/tilegrid/TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n  var options = /** @type {module:ol/tilegrid/TileGrid~Options} */ ({});\n  assign(options, opt_options !== undefined ?\n    opt_options : /** @type {module:ol/tilegrid~XYZOptions} */ ({}));\n  if (options.extent === undefined) {\n    options.extent = getProjection('EPSG:3857').getExtent();\n  }\n  options.resolutions = resolutionsFromExtent(\n    options.extent, options.maxZoom, options.tileSize);\n  delete options.maxZoom;\n\n  return new TileGrid(options);\n}\n\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {module:ol/extent~Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @return {!Array.<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {\n  var maxZoom = opt_maxZoom !== undefined ?\n    opt_maxZoom : DEFAULT_MAX_ZOOM;\n\n  var height = getHeight(extent);\n  var width = getWidth(extent);\n\n  var tileSize = toSize(opt_tileSize !== undefined ?\n    opt_tileSize : DEFAULT_TILE_SIZE);\n  var maxResolution = Math.max(\n    width / tileSize[0], height / tileSize[1]);\n\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n\n/**\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|module:ol/size~Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {module:ol/extent/Corner=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!module:ol/tilegrid/TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {module:ol/proj~ProjectionLike} projection Projection.\n * @return {module:ol/extent~Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  var extent = projection.getExtent();\n  if (!extent) {\n    var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n\n//# sourceMappingURL=tilegrid.js.map"]},"metadata":{},"sourceType":"module"}
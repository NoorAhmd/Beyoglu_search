{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\nimport EventTarget from '../events/EventTarget.js';\nimport EventType from '../events/EventType.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires module:ol/events/Event~Event\n * @template T\n */\n\nvar LRUCache = function (EventTarget) {\n  function LRUCache(opt_highWaterMark) {\n    EventTarget.call(this);\n    /**\n     * @type {number}\n     */\n\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object.<string, module:ol/structs/LRUCache~Entry>}\n     */\n\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?module:ol/structs/LRUCache~Entry}\n     */\n\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?module:ol/structs/LRUCache~Entry}\n     */\n\n    this.newest_ = null;\n  }\n\n  if (EventTarget) LRUCache.__proto__ = EventTarget;\n  LRUCache.prototype = Object.create(EventTarget && EventTarget.prototype);\n  LRUCache.prototype.constructor = LRUCache;\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n  LRUCache.prototype.canExpireCache = function canExpireCache() {\n    return this.getCount() > this.highWaterMark;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  LRUCache.prototype.clear = function clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n\n\n  LRUCache.prototype.containsKey = function containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(this: S, T, string, module:ol/structs/LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n\n\n  LRUCache.prototype.forEach = function forEach(f, opt_this) {\n    var this$1 = this;\n    var entry = this.oldest_;\n\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this$1);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n\n\n  LRUCache.prototype.get = function get(key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {module:ol/structs/LRUCache~Entry} */\n      this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n\n\n  LRUCache.prototype.remove = function remove(key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      this.newest_ =\n      /** @type {module:ol/structs/LRUCache~Entry} */\n      entry.older;\n\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {module:ol/structs/LRUCache~Entry} */\n      entry.newer;\n\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n\n\n  LRUCache.prototype.getCount = function getCount() {\n    return this.count_;\n  };\n  /**\n   * @return {Array.<string>} Keys.\n   */\n\n\n  LRUCache.prototype.getKeys = function getKeys() {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n\n    return keys;\n  };\n  /**\n   * @return {Array.<T>} Values.\n   */\n\n\n  LRUCache.prototype.getValues = function getValues() {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n\n\n  LRUCache.prototype.peekLast = function peekLast() {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n\n\n  LRUCache.prototype.peekLastKey = function peekLastKey() {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n\n\n  LRUCache.prototype.peekFirstKey = function peekFirstKey() {\n    return this.newest_.key_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n\n\n  LRUCache.prototype.pop = function pop() {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n\n    this.oldest_ =\n    /** @type {module:ol/structs/LRUCache~Entry} */\n    entry.newer;\n\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.replace = function replace(key, value) {\n    this.get(key); // update `newest_`\n\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.set = function set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n\n    var entry =\n    /** @type {module:ol/structs/LRUCache~Entry} */\n    {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n\n\n  LRUCache.prototype.setSize = function setSize(size) {\n    this.highWaterMark = size;\n  };\n  /**\n   * Prune the cache.\n   */\n\n\n  LRUCache.prototype.prune = function prune() {\n    var this$1 = this;\n\n    while (this.canExpireCache()) {\n      this$1.pop();\n    }\n  };\n\n  return LRUCache;\n}(EventTarget);\n\nexport default LRUCache; //# sourceMappingURL=LRUCache.js.map","map":{"version":3,"sources":["/Users/n.ah/Projects/ankamap/node_modules/ol/structs/LRUCache.js"],"names":["assert","EventTarget","EventType","LRUCache","opt_highWaterMark","call","highWaterMark","undefined","count_","entries_","oldest_","newest_","__proto__","prototype","Object","create","constructor","canExpireCache","getCount","clear","dispatchEvent","CLEAR","containsKey","key","hasOwnProperty","forEach","f","opt_this","this$1","entry","value_","key_","newer","get","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","pop","replace","value","set","setSize","size","prune"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\nimport EventTarget from '../events/EventTarget.js';\nimport EventType from '../events/EventType.js';\n\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires module:ol/events/Event~Event\n * @template T\n */\nvar LRUCache = (function (EventTarget) {\n  function LRUCache(opt_highWaterMark) {\n\n    EventTarget.call(this);\n\n    /**\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object.<string, module:ol/structs/LRUCache~Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?module:ol/structs/LRUCache~Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?module:ol/structs/LRUCache~Entry}\n     */\n    this.newest_ = null;\n\n  }\n\n  if ( EventTarget ) LRUCache.__proto__ = EventTarget;\n  LRUCache.prototype = Object.create( EventTarget && EventTarget.prototype );\n  LRUCache.prototype.constructor = LRUCache;\n\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  LRUCache.prototype.canExpireCache = function canExpireCache () {\n    return this.getCount() > this.highWaterMark;\n  };\n\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  LRUCache.prototype.clear = function clear () {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  };\n\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  LRUCache.prototype.containsKey = function containsKey (key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n\n\n  /**\n   * @param {function(this: S, T, string, module:ol/structs/LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n  LRUCache.prototype.forEach = function forEach (f, opt_this) {\n    var this$1 = this;\n\n    var entry = this.oldest_;\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this$1);\n      entry = entry.newer;\n    }\n  };\n\n\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  LRUCache.prototype.get = function get (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined,\n      15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  LRUCache.prototype.remove = function remove (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n\n\n  /**\n   * @return {number} Count.\n   */\n  LRUCache.prototype.getCount = function getCount () {\n    return this.count_;\n  };\n\n\n  /**\n   * @return {Array.<string>} Keys.\n   */\n  LRUCache.prototype.getKeys = function getKeys () {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  };\n\n\n  /**\n   * @return {Array.<T>} Values.\n   */\n  LRUCache.prototype.getValues = function getValues () {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  };\n\n\n  /**\n   * @return {T} Last value.\n   */\n  LRUCache.prototype.peekLast = function peekLast () {\n    return this.oldest_.value_;\n  };\n\n\n  /**\n   * @return {string} Last key.\n   */\n  LRUCache.prototype.peekLastKey = function peekLastKey () {\n    return this.oldest_.key_;\n  };\n\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  LRUCache.prototype.peekFirstKey = function peekFirstKey () {\n    return this.newest_.key_;\n  };\n\n\n  /**\n   * @return {T} value Value.\n   */\n  LRUCache.prototype.pop = function pop () {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {module:ol/structs/LRUCache~Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  };\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.replace = function replace (key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  };\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.set = function set (key, value) {\n    assert(!(key in this.entries_),\n      16); // Tried to set a value for a key that is used already\n    var entry = /** @type {module:ol/structs/LRUCache~Entry} */ ({\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    });\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  LRUCache.prototype.setSize = function setSize (size) {\n    this.highWaterMark = size;\n  };\n\n\n  /**\n   * Prune the cache.\n   */\n  LRUCache.prototype.prune = function prune () {\n    var this$1 = this;\n\n    while (this.canExpireCache()) {\n      this$1.pop();\n    }\n  };\n\n  return LRUCache;\n}(EventTarget));\n\nexport default LRUCache;\n\n//# sourceMappingURL=LRUCache.js.map"]},"metadata":{},"sourceType":"module"}